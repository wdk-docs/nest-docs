{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\/\\s\\-\\.]+"},"docs":[{"location":"application-context/","text":"\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f \u00b6 \u6302\u8f7d Nest \u5e94\u7528\u7a0b\u5e8f\u6709\u51e0\u79cd\u65b9\u6cd5\u3002 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a web \u5e94\u7528\uff0c\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a\u88f8\u7684 Nest \u72ec\u7acb\u5e94\u7528(\u6ca1\u6709\u4efb\u4f55\u7f51\u7edc\u76d1\u542c\u5668)\u3002 \u72ec\u7acb\u7684 Nest \u5e94\u7528\u7a0b\u5e8f\u662f Nest IoC \u5bb9\u5668 \u7684\u5305\u88c5\u5668\uff0c\u8be5\u5bb9\u5668\u5305\u542b\u6240\u6709\u5b9e\u4f8b\u5316\u7684\u7c7b\u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u4ece\u4efb\u4f55\u5bfc\u5165\u7684\u6a21\u5757\u4e2d\u83b7\u53d6\u5bf9\u4efb\u4f55\u73b0\u6709\u5b9e\u4f8b\u7684\u5f15\u7528\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u5229\u7528 Nest \u6846\u67b6\uff0c\u4f8b\u5982\uff0c\u5305\u62ec\u811a\u672c\u5316\u7684 CRON \u4f5c\u4e1a\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u5728\u4e0a\u9762\u6784\u5efa\u4e00\u4e2a CLI \u3002 \u5f00\u59cb \u00b6 \u8981\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684 Nest \u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020: @ @filename () async function bootstrap () { const app = await NestFactory . createApplicationContext ( AppModule ); // application logic... } bootstrap (); \u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u5141\u8bb8\u60a8\u83b7\u53d6\u5bf9 Nest \u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ce8\u518c\u7684\u4efb\u4f55\u5b9e\u4f8b\u7684\u5f15\u7528\u3002 \u5047\u8bbe\u6211\u4eec\u5728 TasksModule \u4e2d\u6709\u4e00\u4e2a TasksService\u3002 \u8fd9\u4e2a\u7c7b\u63d0\u4f9b\u4e86\u4e00\u7ec4\u6211\u4eec\u5e0c\u671b\u4ece CRON \u4f5c\u4e1a\u4e2d\u8c03\u7528\u7684\u65b9\u6cd5\u3002 @ @filename () const app = await NestFactory . createApplicationContext ( AppModule ); const tasksService = app . get ( TasksService ); \u8981\u8bbf\u95ee TasksService \u5b9e\u4f8b\uff0c\u6211\u4eec\u4f7f\u7528 get() \u65b9\u6cd5\u3002 get() \u65b9\u6cd5\u7684\u4f5c\u7528\u7c7b\u4f3c\u4e8e\u4e00\u4e2a \u67e5\u8be2 \uff0c\u5728\u6bcf\u4e2a\u6ce8\u518c\u7684\u6a21\u5757\u4e2d\u641c\u7d22\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u6216\u8005\uff0c\u5bf9\u4e8e\u4e25\u683c\u7684\u4e0a\u4e0b\u6587\u68c0\u67e5\uff0c\u4f20\u9012\u4e00\u4e2a\u5e26\u6709 strict: true \u5c5e\u6027\u7684\u9009\u9879\u5bf9\u8c61\u3002 \u5b9e\u9645\u4e0a\uff0c\u4f7f\u7528\u8fd9\u4e2a\u9009\u9879\uff0c\u60a8\u5fc5\u987b\u901a\u8fc7\u7279\u5b9a\u7684\u6a21\u5757\u6765\u4ece\u9009\u5b9a\u7684\u4e0a\u4e0b\u6587\u83b7\u53d6\u7279\u5b9a\u7684\u5b9e\u4f8b\u3002 @ @filename () const app = await NestFactory . createApplicationContext ( AppModule ); const tasksService = app . select ( TasksModule ). get ( TasksService , { strict : true }); \u4ee5\u4e0b\u662f\u53ef\u7528\u4e8e\u4ece\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u68c0\u7d22\u5b9e\u4f8b\u5f15\u7528\u7684\u65b9\u6cd5\u7684\u6458\u8981\u3002 get() \u68c0\u7d22\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u53ef\u7528\u7684\u63a7\u5236\u5668\u6216\u63d0\u4f9b\u5668\u7684\u5b9e\u4f8b(\u5305\u62ec\u5b88\u536b\u3001\u8fc7\u6ee4\u5668\u7b49)\u3002 select() \u5728\u6a21\u5757\u56fe\u4e2d\u5bfc\u822a\uff0c\u4ece\u6240\u9009\u6a21\u5757\u4e2d\u53d6\u51fa\u7279\u5b9a\u5b9e\u4f8b(\u4e0e\u4e0a\u9762\u63cf\u8ff0\u7684`strict`\u6a21\u5f0f\u4e00\u8d77\u4f7f\u7528)\u3002 info Hint \u5728\u975e\u4e25\u683c\u6a21\u5f0f\u4e0b\uff0c\u9ed8\u8ba4\u9009\u62e9\u6839\u6a21\u5757\u3002\u8981\u9009\u62e9\u4efb\u4f55\u5176\u4ed6\u6a21\u5757\uff0c\u60a8\u9700\u8981\u4e00\u6b65\u4e00\u6b65\u5730\u624b\u52a8\u5bfc\u822a\u6a21\u5757\u56fe\u3002 \u5982\u679c\u4f60\u60f3\u8ba9 node \u5e94\u7528\u7a0b\u5e8f\u5728\u811a\u672c\u5b8c\u6210\u540e\u5173\u95ed(\u4f8b\u5982\uff0c\u4e00\u4e2a\u8fd0\u884c CRON \u4f5c\u4e1a\u7684\u811a\u672c)\uff0c\u6dfb\u52a0 await app.close() \u5230\u4f60\u7684 bootstrap \u51fd\u6570\u7684\u672b\u5c3e: @ @filename () async function bootstrap () { const app = await NestFactory . createApplicationContext ( AppModule ); // application logic... await app . close (); } bootstrap (); \u4f8b\u5b50 \u00b6 \u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f"},{"location":"application-context/#_1","text":"\u6302\u8f7d Nest \u5e94\u7528\u7a0b\u5e8f\u6709\u51e0\u79cd\u65b9\u6cd5\u3002 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a web \u5e94\u7528\uff0c\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u6216\u8005\u53ea\u662f\u4e00\u4e2a\u88f8\u7684 Nest \u72ec\u7acb\u5e94\u7528(\u6ca1\u6709\u4efb\u4f55\u7f51\u7edc\u76d1\u542c\u5668)\u3002 \u72ec\u7acb\u7684 Nest \u5e94\u7528\u7a0b\u5e8f\u662f Nest IoC \u5bb9\u5668 \u7684\u5305\u88c5\u5668\uff0c\u8be5\u5bb9\u5668\u5305\u542b\u6240\u6709\u5b9e\u4f8b\u5316\u7684\u7c7b\u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u4ece\u4efb\u4f55\u5bfc\u5165\u7684\u6a21\u5757\u4e2d\u83b7\u53d6\u5bf9\u4efb\u4f55\u73b0\u6709\u5b9e\u4f8b\u7684\u5f15\u7528\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u5229\u7528 Nest \u6846\u67b6\uff0c\u4f8b\u5982\uff0c\u5305\u62ec\u811a\u672c\u5316\u7684 CRON \u4f5c\u4e1a\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u5728\u4e0a\u9762\u6784\u5efa\u4e00\u4e2a CLI \u3002","title":"\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f"},{"location":"application-context/#_2","text":"\u8981\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684 Nest \u5e94\u7528\u7a0b\u5e8f\uff0c\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020: @ @filename () async function bootstrap () { const app = await NestFactory . createApplicationContext ( AppModule ); // application logic... } bootstrap (); \u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u5141\u8bb8\u60a8\u83b7\u53d6\u5bf9 Nest \u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ce8\u518c\u7684\u4efb\u4f55\u5b9e\u4f8b\u7684\u5f15\u7528\u3002 \u5047\u8bbe\u6211\u4eec\u5728 TasksModule \u4e2d\u6709\u4e00\u4e2a TasksService\u3002 \u8fd9\u4e2a\u7c7b\u63d0\u4f9b\u4e86\u4e00\u7ec4\u6211\u4eec\u5e0c\u671b\u4ece CRON \u4f5c\u4e1a\u4e2d\u8c03\u7528\u7684\u65b9\u6cd5\u3002 @ @filename () const app = await NestFactory . createApplicationContext ( AppModule ); const tasksService = app . get ( TasksService ); \u8981\u8bbf\u95ee TasksService \u5b9e\u4f8b\uff0c\u6211\u4eec\u4f7f\u7528 get() \u65b9\u6cd5\u3002 get() \u65b9\u6cd5\u7684\u4f5c\u7528\u7c7b\u4f3c\u4e8e\u4e00\u4e2a \u67e5\u8be2 \uff0c\u5728\u6bcf\u4e2a\u6ce8\u518c\u7684\u6a21\u5757\u4e2d\u641c\u7d22\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u6216\u8005\uff0c\u5bf9\u4e8e\u4e25\u683c\u7684\u4e0a\u4e0b\u6587\u68c0\u67e5\uff0c\u4f20\u9012\u4e00\u4e2a\u5e26\u6709 strict: true \u5c5e\u6027\u7684\u9009\u9879\u5bf9\u8c61\u3002 \u5b9e\u9645\u4e0a\uff0c\u4f7f\u7528\u8fd9\u4e2a\u9009\u9879\uff0c\u60a8\u5fc5\u987b\u901a\u8fc7\u7279\u5b9a\u7684\u6a21\u5757\u6765\u4ece\u9009\u5b9a\u7684\u4e0a\u4e0b\u6587\u83b7\u53d6\u7279\u5b9a\u7684\u5b9e\u4f8b\u3002 @ @filename () const app = await NestFactory . createApplicationContext ( AppModule ); const tasksService = app . select ( TasksModule ). get ( TasksService , { strict : true }); \u4ee5\u4e0b\u662f\u53ef\u7528\u4e8e\u4ece\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u68c0\u7d22\u5b9e\u4f8b\u5f15\u7528\u7684\u65b9\u6cd5\u7684\u6458\u8981\u3002 get() \u68c0\u7d22\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u53ef\u7528\u7684\u63a7\u5236\u5668\u6216\u63d0\u4f9b\u5668\u7684\u5b9e\u4f8b(\u5305\u62ec\u5b88\u536b\u3001\u8fc7\u6ee4\u5668\u7b49)\u3002 select() \u5728\u6a21\u5757\u56fe\u4e2d\u5bfc\u822a\uff0c\u4ece\u6240\u9009\u6a21\u5757\u4e2d\u53d6\u51fa\u7279\u5b9a\u5b9e\u4f8b(\u4e0e\u4e0a\u9762\u63cf\u8ff0\u7684`strict`\u6a21\u5f0f\u4e00\u8d77\u4f7f\u7528)\u3002 info Hint \u5728\u975e\u4e25\u683c\u6a21\u5f0f\u4e0b\uff0c\u9ed8\u8ba4\u9009\u62e9\u6839\u6a21\u5757\u3002\u8981\u9009\u62e9\u4efb\u4f55\u5176\u4ed6\u6a21\u5757\uff0c\u60a8\u9700\u8981\u4e00\u6b65\u4e00\u6b65\u5730\u624b\u52a8\u5bfc\u822a\u6a21\u5757\u56fe\u3002 \u5982\u679c\u4f60\u60f3\u8ba9 node \u5e94\u7528\u7a0b\u5e8f\u5728\u811a\u672c\u5b8c\u6210\u540e\u5173\u95ed(\u4f8b\u5982\uff0c\u4e00\u4e2a\u8fd0\u884c CRON \u4f5c\u4e1a\u7684\u811a\u672c)\uff0c\u6dfb\u52a0 await app.close() \u5230\u4f60\u7684 bootstrap \u51fd\u6570\u7684\u672b\u5c3e: @ @filename () async function bootstrap () { const app = await NestFactory . createApplicationContext ( AppModule ); // application logic... await app . close (); } bootstrap ();","title":"\u5f00\u59cb"},{"location":"application-context/#_3","text":"\u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u4f8b\u5b50"},{"location":"components/","text":"\u63d0\u4f9b\u5668 \u00b6 \u63d0\u4f9b\u5668\u662f Nest \u7684\u4e00\u4e2a\u57fa\u672c\u6982\u5ff5\u3002 \u8bb8\u591a\u57fa\u672c\u7684 Nest \u7c7b\u90fd\u53ef\u4ee5\u88ab\u89c6\u4e3a\u63d0\u4f9b\u5668\u2014\u670d\u52a1\u3001\u5b58\u50a8\u5e93\u3001\u5de5\u5382\u3001\u52a9\u624b\u7b49\u7b49\u3002 \u63d0\u4f9b\u5668\u7684\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4f9d\u8d56 \u6ce8\u5165 ; \u8fd9\u610f\u5473\u7740\u5bf9\u8c61\u4e4b\u95f4\u53ef\u4ee5\u521b\u5efa\u5404\u79cd\u5173\u7cfb\uff0c \u8fde\u63a5 \u5bf9\u8c61\u5b9e\u4f8b\u7684\u529f\u80fd\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u59d4\u6258\u7ed9 Nest \u8fd0\u884c\u65f6\u7cfb\u7edf\u3002 \u5728\u524d\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 CatsController \u3002 \u63a7\u5236\u5668\u5e94\u8be5\u5904\u7406 HTTP \u8bf7\u6c42\uff0c\u5e76\u5c06\u66f4\u590d\u6742\u7684\u4efb\u52a1\u59d4\u6258\u7ed9 \u63d0\u4f9b\u5668 \u3002 \u63d0\u4f9b\u5668\u662f\u5728 module \u4e2d\u58f0\u660e\u4e3a Providers \u7684\u666e\u901a JavaScript \u7c7b\u3002 info Hint \u7531\u4e8e Nest \u80fd\u591f\u4ee5\u66f4\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u8bbe\u8ba1\u548c\u7ec4\u7ec7\u4f9d\u8d56\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u9075\u5faa SOLID \u539f\u5219\u3002 \u670d\u52a1 \u00b6 \u8ba9\u6211\u4eec\u4ece\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 CatsService \u5f00\u59cb\u3002 \u8be5\u670d\u52a1\u5c06\u8d1f\u8d23\u6570\u636e\u5b58\u50a8\u548c\u68c0\u7d22\uff0c\u5e76\u88ab\u8bbe\u8ba1\u4e3a\u7531 CatsController \u4f7f\u7528\uff0c\u56e0\u6b64\u5c06\u5176\u5b9a\u4e49\u4e3a\u63d0\u4f9b\u5668\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5019\u9009\u5bf9\u8c61\u3002 @ @filename ( cats . service ) import { Injectable } from '@nestjs/common' ; import { Cat } from './interfaces/cat.interface' ; @Injectable () export class CatsService { private readonly cats : Cat [] = []; create ( cat : Cat ) { this . cats . push ( cat ); } findAll () : Cat [] { return this . cats ; } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class CatsService { constructor () { this . cats = []; } create ( cat ) { this . cats . push ( cat ); } findAll () { return this . cats ; } } info Hint \u8981\u4f7f\u7528 CLI \u521b\u5efa\u670d\u52a1\uff0c\u53ea\u9700\u6267\u884c $ nest g service cats \u547d\u4ee4\u3002 \u6211\u4eec\u7684 CatsService \u662f\u4e00\u4e2a\u6709\u4e00\u4e2a\u5c5e\u6027\u548c\u4e24\u4e2a\u65b9\u6cd5\u7684\u57fa\u672c\u7c7b\u3002 \u552f\u4e00\u7684\u65b0\u7279\u6027\u662f\u5b83\u4f7f\u7528\u4e86@Injectable()\u88c5\u9970\u5668\u3002 @Injectable() \u88c5\u9970\u5668\u9644\u52a0\u5143\u6570\u636e\uff0c\u5b83\u58f0\u660e CatsService \u662f\u4e00\u4e2a\u53ef\u4ee5\u7531 Nest IoC \u5bb9\u5668\u7ba1\u7406\u7684\u7c7b\u3002 \u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u4f7f\u7528\u4e86 Cat \u63a5\u53e3\uff0c\u5927\u6982\u662f\u8fd9\u6837\u7684: @ @filename ( interfaces / cat . interface ) export interface Cat { name : string ; age : number ; breed : string ; } \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u670d\u52a1\u7c7b\u6765\u68c0\u7d22 cats\uff0c\u8ba9\u6211\u4eec\u5728 CatsController \u4e2d\u4f7f\u7528\u5b83: @ @filename ( cats . controller ) import { Controller , Get , Post , Body } from '@nestjs/common' ; import { CreateCatDto } from './dto/create-cat.dto' ; import { CatsService } from './cats.service' ; import { Cat } from './interfaces/cat.interface' ; @Controller ( 'cats' ) export class CatsController { constructor ( private catsService : CatsService ) {} @Post () async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @Get () async findAll () : Promise < Cat [] > { return this . catsService . findAll (); } } @ @switch import { Controller , Get , Post , Body , Bind , Dependencies } from '@nestjs/common' ; import { CatsService } from './cats.service' ; @Controller ( 'cats' ) @Dependencies ( CatsService ) export class CatsController { constructor ( catsService ) { this . catsService = catsService ; } @Post () @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } @Get () async findAll () { return this . catsService . findAll (); } } CatsService \u662f\u901a\u8fc7\u7c7b\u6784\u9020\u51fd\u6570 \u6ce8\u5165 \u7684\u3002 \u6ce8\u610f private \u8bed\u6cd5\u7684\u4f7f\u7528\u3002 \u8fd9\u79cd\u7b80\u5199\u65b9\u5f0f\u5141\u8bb8\u6211\u4eec\u7acb\u5373\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u58f0\u660e\u548c\u521d\u59cb\u5316 catsService \u6210\u5458\u3002 \u4f9d\u8d56\u6ce8\u5165 \u00b6 Nest \u662f\u56f4\u7ed5\u901a\u5e38\u88ab\u79f0\u4e3a \u4f9d\u8d56\u6ce8\u5165 \u7684\u5f3a\u8bbe\u8ba1\u6a21\u5f0f\u6784\u5efa\u7684\u3002 \u6211\u4eec\u5efa\u8bae\u5728\u5b98\u65b9 Angular \u6587\u6863\u4e2d\u9605\u8bfb\u4e00\u7bc7\u5173\u4e8e\u8fd9\u4e2a\u6982\u5ff5\u7684\u4f18\u79c0\u6587\u7ae0\u3002 \u5728 Nest \u4e2d\uff0c\u7531\u4e8e TypeScript \u7684\u529f\u80fd\uff0c\u7ba1\u7406\u4f9d\u8d56\u9879\u975e\u5e38\u5bb9\u6613\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u6839\u636e\u7c7b\u578b\u89e3\u6790\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cNest \u5c06\u901a\u8fc7\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a catsService \u7684\u5b9e\u4f8b\u6765\u89e3\u6790 catsService (\u6216\u8005\uff0c\u5728\u5355\u4f8b\u7684\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5b83\u5df2\u7ecf\u5728\u5176\u4ed6\u5730\u65b9\u88ab\u8bf7\u6c42\uff0c\u5219\u8fd4\u56de\u73b0\u6709\u7684\u5b9e\u4f8b)\u3002 \u8fd9\u4e2a\u4f9d\u8d56\u88ab\u89e3\u6790\u5e76\u4f20\u9012\u7ed9\u4f60\u7684\u63a7\u5236\u5668\u7684\u6784\u9020\u51fd\u6570(\u6216\u8005\u8d4b\u503c\u7ed9\u6307\u5b9a\u7684\u5c5e\u6027): constructor ( private catsService : CatsService ) {} \u4f5c\u7528\u57df \u00b6 \u63d0\u4f9b\u5668\u7684\u751f\u547d\u5468\u671f( \u4f5c\u7528\u57df )\u901a\u5e38\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u540c\u6b65\u3002 \u5f53\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u5fc5\u987b\u89e3\u6790\u6bcf\u4e2a\u4f9d\u8d56\u9879\uff0c\u56e0\u6b64\u5fc5\u987b\u5b9e\u4f8b\u5316\u6bcf\u4e2a\u63d0\u4f9b\u5668\u3002 \u7c7b\u4f3c\u5730\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\uff0c\u6bcf\u4e2a\u63d0\u4f9b\u5668\u90fd\u5c06\u88ab\u9500\u6bc1\u3002 \u7136\u800c\uff0c\u4e5f\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u4f60\u7684\u63d0\u4f9b\u5668\u7684\u751f\u547d\u5468\u671f \u4ee5\u8bf7\u6c42\u4e3a\u8303\u56f4 \u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8fd9\u4e9b\u6280\u672f\u7684\u4fe1\u606f\u3002 \u5b9a\u5236\u7684\u63d0\u4f9b\u5668 \u00b6 Nest \u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u63a7\u5236\u53cd\u8f6c( IoC )\u5bb9\u5668\uff0c\u7528\u6765\u89e3\u51b3\u63d0\u4f9b\u5668\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u8fd9\u4e2a\u7279\u6027\u662f\u4e0a\u9762\u63cf\u8ff0\u7684\u4f9d\u8d56\u6ce8\u5165\u7279\u6027\u7684\u57fa\u7840\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u6bd4\u6211\u4eec\u76ee\u524d\u6240\u63cf\u8ff0\u7684\u8981\u5f3a\u5927\u5f97\u591a\u3002 \u5b9a\u4e49\u63d0\u4f9b\u5668\u6709\u51e0\u79cd\u65b9\u6cd5:\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u503c\u3001\u7c7b\u4ee5\u53ca\u5f02\u6b65\u6216\u540c\u6b65\u5de5\u5382\u3002 \u8fd9\u91cc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f8b\u5b50\u3002 \u53ef\u9009\u7684\u63d0\u4f9b\u5668 \u00b6 \u6709\u65f6\u5019\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e9b\u4e0d\u9700\u8981\u89e3\u6790\u7684\u4f9d\u8d56\u9879\u3002 \u4f8b\u5982\uff0c\u4f60\u7684\u7c7b\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4e00\u4e2a \u914d\u7f6e\u5bf9\u8c61 \uff0c\u4f46\u5982\u679c\u6ca1\u6709\u4f20\u9012\uff0c\u5219\u5e94\u8be5\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f9d\u8d56\u9879\u53d8\u6210\u53ef\u9009\u7684\uff0c\u56e0\u4e3a\u7f3a\u5c11\u914d\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\u4e0d\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002 \u8981\u6307\u51fa\u63d0\u4f9b\u5668\u662f\u53ef\u9009\u7684\uff0c\u5728\u6784\u9020\u51fd\u6570\u7684\u7b7e\u540d\u4e2d\u4f7f\u7528 @Optional() \u88c5\u9970\u5668\u3002 import { Injectable , Optional , Inject } from '@nestjs/common' ; @Injectable () export class HttpService < T > { constructor ( @Optional () @Inject ( 'HTTP_OPTIONS' ) private httpClient : T ) {} } \u8bf7\u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5305\u542b\u4e86 HTTP_OPTIONS \u81ea\u5b9a\u4e49 \u4ee4\u724c \u3002 \u524d\u9762\u7684\u4f8b\u5b50\u663e\u793a\u4e86\u57fa\u4e8e\u6784\u9020\u51fd\u6570\u7684\u6ce8\u5165\uff0c\u901a\u8fc7\u6784\u9020\u51fd\u6570\u4e2d\u7684\u7c7b\u6307\u793a\u4f9d\u8d56\u5173\u7cfb\u3002 \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b9a\u5236\u63d0\u4f9b\u5668\u53ca\u5176\u76f8\u5173\u4ee4\u724c\u7684\u4fe1\u606f \u6b64\u5904 \u3002 \u57fa\u4e8e\u5c5e\u6027\u7684\u6ce8\u5165 \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u6280\u672f\u79f0\u4e3a\u57fa\u4e8e\u6784\u9020\u51fd\u6570\u7684\u6ce8\u5165\uff0c\u56e0\u4e3a\u63d0\u4f9b\u7a0b\u5e8f\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u65b9\u6cd5\u6ce8\u5165\u7684\u3002 \u5728\u4e00\u4e9b\u975e\u5e38\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u5c5e\u6027\u7684\u6ce8\u5165\u53ef\u80fd\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u9876\u7ea7\u7c7b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u63d0\u4f9b\u5668\uff0c\u90a3\u4e48\u901a\u8fc7\u8c03\u7528\u6784\u9020\u51fd\u6570\u4e2d\u7684\u5b50\u7c7b\u4e2d\u7684 super() \u6765\u4f20\u9012\u5b83\u4eec\u4f1a\u975e\u5e38\u7e41\u7410\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u53ef\u4ee5\u5728\u5c5e\u6027\u7ea7\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u3002 import { Injectable , Inject } from '@nestjs/common' ; @Injectable () export class HttpService < T > { @Inject ( 'HTTP_OPTIONS' ) private readonly httpClient : T ; } warning Warning \u5982\u679c\u4f60\u7684\u7c7b\u6ca1\u6709\u6269\u5c55\u5176\u4ed6\u63d0\u4f9b\u5668\uff0c\u4f60\u5e94\u8be5\u603b\u662f\u503e\u5411\u4e8e\u4f7f\u7528\u57fa\u4e8e\u6784\u9020\u51fd\u6570\u7684**\u6ce8\u5165\u3002 \u63d0\u4f9b\u5668\u767b\u8bb0 \u00b6 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86\u63d0\u4f9b\u5668( CatsService )\uff0c\u5e76\u4e14\u6709\u4e86\u8be5\u670d\u52a1\u7684\u6d88\u8d39\u8005( CatsController )\uff0c\u6211\u4eec\u9700\u8981\u5411 Nest \u6ce8\u518c\u8be5\u670d\u52a1\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u6267\u884c\u6ce8\u5165\u3002 \u6211\u4eec\u901a\u8fc7\u7f16\u8f91\u6a21\u5757\u6587\u4ef6( app.module.ts )\uff0c\u5e76\u5c06\u8be5\u670d\u52a1\u6dfb\u52a0\u5230 @Module() \u88c5\u9970\u5668\u7684 providers \u6570\u7ec4\u4e2d\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats/cats.controller' ; import { CatsService } from './cats/cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) export class AppModule {} Nest \u73b0\u5728\u5c06\u80fd\u591f\u89e3\u6790 CatsController \u7c7b\u7684\u4f9d\u8d56\u9879\u3002 \u4e0b\u9762\u662f\u6211\u4eec\u73b0\u5728\u7684\u76ee\u5f55\u7ed3\u6784: src cats dto create-cat.dto.ts interfaces cat.interface.ts cats.controller.ts cats.service.ts app.module.ts main.ts \u624b\u52a8\u5b9e\u4f8b\u5316 \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86 Nest \u5982\u4f55\u81ea\u52a8\u5904\u7406\u89e3\u6790\u4f9d\u8d56\u5173\u7cfb\u7684\u5927\u90e8\u5206\u7ec6\u8282\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u8df3\u51fa\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\uff0c\u624b\u52a8\u68c0\u7d22\u6216\u5b9e\u4f8b\u5316\u63d0\u4f9b\u5668\u3002 \u4e0b\u9762\u6211\u4eec\u7b80\u8981\u8ba8\u8bba\u4e24\u4e2a\u8fd9\u6837\u7684\u4e3b\u9898\u3002 \u8981\u83b7\u53d6\u73b0\u6709\u7684\u5b9e\u4f8b\uff0c\u6216\u8005\u52a8\u6001\u5b9e\u4f8b\u5316\u63d0\u4f9b\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 \u6a21\u5757\u5f15\u7528 \u3002 \u8981\u5728 bootstrap() \u51fd\u6570\u4e2d\u83b7\u53d6\u63d0\u4f9b\u5668(\u4f8b\u5982\uff0c\u5bf9\u4e8e\u6ca1\u6709\u63a7\u5236\u5668\u7684\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u6216\u8005\u5728\u5f15\u5bfc\u8fc7\u7a0b\u4e2d\u5229\u7528\u914d\u7f6e\u670d\u52a1)\uff0c\u8bf7\u53c2\u9605 \u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f \u3002","title":"\u63d0\u4f9b\u5668"},{"location":"components/#_1","text":"\u63d0\u4f9b\u5668\u662f Nest \u7684\u4e00\u4e2a\u57fa\u672c\u6982\u5ff5\u3002 \u8bb8\u591a\u57fa\u672c\u7684 Nest \u7c7b\u90fd\u53ef\u4ee5\u88ab\u89c6\u4e3a\u63d0\u4f9b\u5668\u2014\u670d\u52a1\u3001\u5b58\u50a8\u5e93\u3001\u5de5\u5382\u3001\u52a9\u624b\u7b49\u7b49\u3002 \u63d0\u4f9b\u5668\u7684\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u4f9d\u8d56 \u6ce8\u5165 ; \u8fd9\u610f\u5473\u7740\u5bf9\u8c61\u4e4b\u95f4\u53ef\u4ee5\u521b\u5efa\u5404\u79cd\u5173\u7cfb\uff0c \u8fde\u63a5 \u5bf9\u8c61\u5b9e\u4f8b\u7684\u529f\u80fd\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u59d4\u6258\u7ed9 Nest \u8fd0\u884c\u65f6\u7cfb\u7edf\u3002 \u5728\u524d\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 CatsController \u3002 \u63a7\u5236\u5668\u5e94\u8be5\u5904\u7406 HTTP \u8bf7\u6c42\uff0c\u5e76\u5c06\u66f4\u590d\u6742\u7684\u4efb\u52a1\u59d4\u6258\u7ed9 \u63d0\u4f9b\u5668 \u3002 \u63d0\u4f9b\u5668\u662f\u5728 module \u4e2d\u58f0\u660e\u4e3a Providers \u7684\u666e\u901a JavaScript \u7c7b\u3002 info Hint \u7531\u4e8e Nest \u80fd\u591f\u4ee5\u66f4\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u8bbe\u8ba1\u548c\u7ec4\u7ec7\u4f9d\u8d56\uff0c\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u9075\u5faa SOLID \u539f\u5219\u3002","title":"\u63d0\u4f9b\u5668"},{"location":"components/#_2","text":"\u8ba9\u6211\u4eec\u4ece\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 CatsService \u5f00\u59cb\u3002 \u8be5\u670d\u52a1\u5c06\u8d1f\u8d23\u6570\u636e\u5b58\u50a8\u548c\u68c0\u7d22\uff0c\u5e76\u88ab\u8bbe\u8ba1\u4e3a\u7531 CatsController \u4f7f\u7528\uff0c\u56e0\u6b64\u5c06\u5176\u5b9a\u4e49\u4e3a\u63d0\u4f9b\u5668\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5019\u9009\u5bf9\u8c61\u3002 @ @filename ( cats . service ) import { Injectable } from '@nestjs/common' ; import { Cat } from './interfaces/cat.interface' ; @Injectable () export class CatsService { private readonly cats : Cat [] = []; create ( cat : Cat ) { this . cats . push ( cat ); } findAll () : Cat [] { return this . cats ; } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class CatsService { constructor () { this . cats = []; } create ( cat ) { this . cats . push ( cat ); } findAll () { return this . cats ; } } info Hint \u8981\u4f7f\u7528 CLI \u521b\u5efa\u670d\u52a1\uff0c\u53ea\u9700\u6267\u884c $ nest g service cats \u547d\u4ee4\u3002 \u6211\u4eec\u7684 CatsService \u662f\u4e00\u4e2a\u6709\u4e00\u4e2a\u5c5e\u6027\u548c\u4e24\u4e2a\u65b9\u6cd5\u7684\u57fa\u672c\u7c7b\u3002 \u552f\u4e00\u7684\u65b0\u7279\u6027\u662f\u5b83\u4f7f\u7528\u4e86@Injectable()\u88c5\u9970\u5668\u3002 @Injectable() \u88c5\u9970\u5668\u9644\u52a0\u5143\u6570\u636e\uff0c\u5b83\u58f0\u660e CatsService \u662f\u4e00\u4e2a\u53ef\u4ee5\u7531 Nest IoC \u5bb9\u5668\u7ba1\u7406\u7684\u7c7b\u3002 \u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u4f7f\u7528\u4e86 Cat \u63a5\u53e3\uff0c\u5927\u6982\u662f\u8fd9\u6837\u7684: @ @filename ( interfaces / cat . interface ) export interface Cat { name : string ; age : number ; breed : string ; } \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u670d\u52a1\u7c7b\u6765\u68c0\u7d22 cats\uff0c\u8ba9\u6211\u4eec\u5728 CatsController \u4e2d\u4f7f\u7528\u5b83: @ @filename ( cats . controller ) import { Controller , Get , Post , Body } from '@nestjs/common' ; import { CreateCatDto } from './dto/create-cat.dto' ; import { CatsService } from './cats.service' ; import { Cat } from './interfaces/cat.interface' ; @Controller ( 'cats' ) export class CatsController { constructor ( private catsService : CatsService ) {} @Post () async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @Get () async findAll () : Promise < Cat [] > { return this . catsService . findAll (); } } @ @switch import { Controller , Get , Post , Body , Bind , Dependencies } from '@nestjs/common' ; import { CatsService } from './cats.service' ; @Controller ( 'cats' ) @Dependencies ( CatsService ) export class CatsController { constructor ( catsService ) { this . catsService = catsService ; } @Post () @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } @Get () async findAll () { return this . catsService . findAll (); } } CatsService \u662f\u901a\u8fc7\u7c7b\u6784\u9020\u51fd\u6570 \u6ce8\u5165 \u7684\u3002 \u6ce8\u610f private \u8bed\u6cd5\u7684\u4f7f\u7528\u3002 \u8fd9\u79cd\u7b80\u5199\u65b9\u5f0f\u5141\u8bb8\u6211\u4eec\u7acb\u5373\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u58f0\u660e\u548c\u521d\u59cb\u5316 catsService \u6210\u5458\u3002","title":"\u670d\u52a1"},{"location":"components/#_3","text":"Nest \u662f\u56f4\u7ed5\u901a\u5e38\u88ab\u79f0\u4e3a \u4f9d\u8d56\u6ce8\u5165 \u7684\u5f3a\u8bbe\u8ba1\u6a21\u5f0f\u6784\u5efa\u7684\u3002 \u6211\u4eec\u5efa\u8bae\u5728\u5b98\u65b9 Angular \u6587\u6863\u4e2d\u9605\u8bfb\u4e00\u7bc7\u5173\u4e8e\u8fd9\u4e2a\u6982\u5ff5\u7684\u4f18\u79c0\u6587\u7ae0\u3002 \u5728 Nest \u4e2d\uff0c\u7531\u4e8e TypeScript \u7684\u529f\u80fd\uff0c\u7ba1\u7406\u4f9d\u8d56\u9879\u975e\u5e38\u5bb9\u6613\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u6839\u636e\u7c7b\u578b\u89e3\u6790\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cNest \u5c06\u901a\u8fc7\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a catsService \u7684\u5b9e\u4f8b\u6765\u89e3\u6790 catsService (\u6216\u8005\uff0c\u5728\u5355\u4f8b\u7684\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5b83\u5df2\u7ecf\u5728\u5176\u4ed6\u5730\u65b9\u88ab\u8bf7\u6c42\uff0c\u5219\u8fd4\u56de\u73b0\u6709\u7684\u5b9e\u4f8b)\u3002 \u8fd9\u4e2a\u4f9d\u8d56\u88ab\u89e3\u6790\u5e76\u4f20\u9012\u7ed9\u4f60\u7684\u63a7\u5236\u5668\u7684\u6784\u9020\u51fd\u6570(\u6216\u8005\u8d4b\u503c\u7ed9\u6307\u5b9a\u7684\u5c5e\u6027): constructor ( private catsService : CatsService ) {}","title":"\u4f9d\u8d56\u6ce8\u5165"},{"location":"components/#_4","text":"\u63d0\u4f9b\u5668\u7684\u751f\u547d\u5468\u671f( \u4f5c\u7528\u57df )\u901a\u5e38\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u540c\u6b65\u3002 \u5f53\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u5fc5\u987b\u89e3\u6790\u6bcf\u4e2a\u4f9d\u8d56\u9879\uff0c\u56e0\u6b64\u5fc5\u987b\u5b9e\u4f8b\u5316\u6bcf\u4e2a\u63d0\u4f9b\u5668\u3002 \u7c7b\u4f3c\u5730\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\uff0c\u6bcf\u4e2a\u63d0\u4f9b\u5668\u90fd\u5c06\u88ab\u9500\u6bc1\u3002 \u7136\u800c\uff0c\u4e5f\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u4f60\u7684\u63d0\u4f9b\u5668\u7684\u751f\u547d\u5468\u671f \u4ee5\u8bf7\u6c42\u4e3a\u8303\u56f4 \u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8fd9\u4e9b\u6280\u672f\u7684\u4fe1\u606f\u3002","title":"\u4f5c\u7528\u57df"},{"location":"components/#_5","text":"Nest \u6709\u4e00\u4e2a\u5185\u7f6e\u7684\u63a7\u5236\u53cd\u8f6c( IoC )\u5bb9\u5668\uff0c\u7528\u6765\u89e3\u51b3\u63d0\u4f9b\u5668\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u8fd9\u4e2a\u7279\u6027\u662f\u4e0a\u9762\u63cf\u8ff0\u7684\u4f9d\u8d56\u6ce8\u5165\u7279\u6027\u7684\u57fa\u7840\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u6bd4\u6211\u4eec\u76ee\u524d\u6240\u63cf\u8ff0\u7684\u8981\u5f3a\u5927\u5f97\u591a\u3002 \u5b9a\u4e49\u63d0\u4f9b\u5668\u6709\u51e0\u79cd\u65b9\u6cd5:\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u503c\u3001\u7c7b\u4ee5\u53ca\u5f02\u6b65\u6216\u540c\u6b65\u5de5\u5382\u3002 \u8fd9\u91cc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f8b\u5b50\u3002","title":"\u5b9a\u5236\u7684\u63d0\u4f9b\u5668"},{"location":"components/#_6","text":"\u6709\u65f6\u5019\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e9b\u4e0d\u9700\u8981\u89e3\u6790\u7684\u4f9d\u8d56\u9879\u3002 \u4f8b\u5982\uff0c\u4f60\u7684\u7c7b\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4e00\u4e2a \u914d\u7f6e\u5bf9\u8c61 \uff0c\u4f46\u5982\u679c\u6ca1\u6709\u4f20\u9012\uff0c\u5219\u5e94\u8be5\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f9d\u8d56\u9879\u53d8\u6210\u53ef\u9009\u7684\uff0c\u56e0\u4e3a\u7f3a\u5c11\u914d\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\u4e0d\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002 \u8981\u6307\u51fa\u63d0\u4f9b\u5668\u662f\u53ef\u9009\u7684\uff0c\u5728\u6784\u9020\u51fd\u6570\u7684\u7b7e\u540d\u4e2d\u4f7f\u7528 @Optional() \u88c5\u9970\u5668\u3002 import { Injectable , Optional , Inject } from '@nestjs/common' ; @Injectable () export class HttpService < T > { constructor ( @Optional () @Inject ( 'HTTP_OPTIONS' ) private httpClient : T ) {} } \u8bf7\u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5305\u542b\u4e86 HTTP_OPTIONS \u81ea\u5b9a\u4e49 \u4ee4\u724c \u3002 \u524d\u9762\u7684\u4f8b\u5b50\u663e\u793a\u4e86\u57fa\u4e8e\u6784\u9020\u51fd\u6570\u7684\u6ce8\u5165\uff0c\u901a\u8fc7\u6784\u9020\u51fd\u6570\u4e2d\u7684\u7c7b\u6307\u793a\u4f9d\u8d56\u5173\u7cfb\u3002 \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b9a\u5236\u63d0\u4f9b\u5668\u53ca\u5176\u76f8\u5173\u4ee4\u724c\u7684\u4fe1\u606f \u6b64\u5904 \u3002","title":"\u53ef\u9009\u7684\u63d0\u4f9b\u5668"},{"location":"components/#_7","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u6280\u672f\u79f0\u4e3a\u57fa\u4e8e\u6784\u9020\u51fd\u6570\u7684\u6ce8\u5165\uff0c\u56e0\u4e3a\u63d0\u4f9b\u7a0b\u5e8f\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u65b9\u6cd5\u6ce8\u5165\u7684\u3002 \u5728\u4e00\u4e9b\u975e\u5e38\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u5c5e\u6027\u7684\u6ce8\u5165\u53ef\u80fd\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u9876\u7ea7\u7c7b\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u63d0\u4f9b\u5668\uff0c\u90a3\u4e48\u901a\u8fc7\u8c03\u7528\u6784\u9020\u51fd\u6570\u4e2d\u7684\u5b50\u7c7b\u4e2d\u7684 super() \u6765\u4f20\u9012\u5b83\u4eec\u4f1a\u975e\u5e38\u7e41\u7410\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f60\u53ef\u4ee5\u5728\u5c5e\u6027\u7ea7\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u3002 import { Injectable , Inject } from '@nestjs/common' ; @Injectable () export class HttpService < T > { @Inject ( 'HTTP_OPTIONS' ) private readonly httpClient : T ; } warning Warning \u5982\u679c\u4f60\u7684\u7c7b\u6ca1\u6709\u6269\u5c55\u5176\u4ed6\u63d0\u4f9b\u5668\uff0c\u4f60\u5e94\u8be5\u603b\u662f\u503e\u5411\u4e8e\u4f7f\u7528\u57fa\u4e8e\u6784\u9020\u51fd\u6570\u7684**\u6ce8\u5165\u3002","title":"\u57fa\u4e8e\u5c5e\u6027\u7684\u6ce8\u5165"},{"location":"components/#_8","text":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86\u63d0\u4f9b\u5668( CatsService )\uff0c\u5e76\u4e14\u6709\u4e86\u8be5\u670d\u52a1\u7684\u6d88\u8d39\u8005( CatsController )\uff0c\u6211\u4eec\u9700\u8981\u5411 Nest \u6ce8\u518c\u8be5\u670d\u52a1\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u6267\u884c\u6ce8\u5165\u3002 \u6211\u4eec\u901a\u8fc7\u7f16\u8f91\u6a21\u5757\u6587\u4ef6( app.module.ts )\uff0c\u5e76\u5c06\u8be5\u670d\u52a1\u6dfb\u52a0\u5230 @Module() \u88c5\u9970\u5668\u7684 providers \u6570\u7ec4\u4e2d\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats/cats.controller' ; import { CatsService } from './cats/cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) export class AppModule {} Nest \u73b0\u5728\u5c06\u80fd\u591f\u89e3\u6790 CatsController \u7c7b\u7684\u4f9d\u8d56\u9879\u3002 \u4e0b\u9762\u662f\u6211\u4eec\u73b0\u5728\u7684\u76ee\u5f55\u7ed3\u6784: src cats dto create-cat.dto.ts interfaces cat.interface.ts cats.controller.ts cats.service.ts app.module.ts main.ts","title":"\u63d0\u4f9b\u5668\u767b\u8bb0"},{"location":"components/#_9","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86 Nest \u5982\u4f55\u81ea\u52a8\u5904\u7406\u89e3\u6790\u4f9d\u8d56\u5173\u7cfb\u7684\u5927\u90e8\u5206\u7ec6\u8282\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u8df3\u51fa\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\uff0c\u624b\u52a8\u68c0\u7d22\u6216\u5b9e\u4f8b\u5316\u63d0\u4f9b\u5668\u3002 \u4e0b\u9762\u6211\u4eec\u7b80\u8981\u8ba8\u8bba\u4e24\u4e2a\u8fd9\u6837\u7684\u4e3b\u9898\u3002 \u8981\u83b7\u53d6\u73b0\u6709\u7684\u5b9e\u4f8b\uff0c\u6216\u8005\u52a8\u6001\u5b9e\u4f8b\u5316\u63d0\u4f9b\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 \u6a21\u5757\u5f15\u7528 \u3002 \u8981\u5728 bootstrap() \u51fd\u6570\u4e2d\u83b7\u53d6\u63d0\u4f9b\u5668(\u4f8b\u5982\uff0c\u5bf9\u4e8e\u6ca1\u6709\u63a7\u5236\u5668\u7684\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\uff0c\u6216\u8005\u5728\u5f15\u5bfc\u8fc7\u7a0b\u4e2d\u5229\u7528\u914d\u7f6e\u670d\u52a1)\uff0c\u8bf7\u53c2\u9605 \u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f \u3002","title":"\u624b\u52a8\u5b9e\u4f8b\u5316"},{"location":"controllers/","text":"\u63a7\u5236\u5668 \u00b6 \u63a7\u5236\u5668\u8d1f\u8d23\u5904\u7406\u4f20\u5165\u7684 \u8bf7\u6c42 \u5e76\u8fd4\u56de \u54cd\u5e94 \u7ed9\u5ba2\u6237\u7aef\u3002 \u63a7\u5236\u5668\u7684\u4f5c\u7528\u662f\u63a5\u6536\u5e94\u7528\u7a0b\u5e8f\u7684\u7279\u5b9a\u8bf7\u6c42\u3002 \u8def\u7531 \u673a\u5236\u63a7\u5236\u54ea\u4e2a\u63a7\u5236\u5668\u63a5\u6536\u54ea\u4e2a\u8bf7\u6c42\u3002 \u901a\u5e38\uff0c\u6bcf\u4e2a\u63a7\u5236\u5668\u6709\u591a\u4e2a\u8def\u7531\uff0c\u4e0d\u540c\u7684\u8def\u7531\u53ef\u4ee5\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002 \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u63a7\u5236\u5668\uff0c\u6211\u4eec\u4f7f\u7528\u7c7b\u548c \u88c5\u9970\u5668 \u3002 \u88c5\u9970\u5668\u5c06\u7c7b\u4e0e\u6240\u9700\u7684\u5143\u6570\u636e\u5173\u8054\u8d77\u6765\uff0c\u5e76\u4f7f Nest \u80fd\u591f\u521b\u5efa\u8def\u7531\u6620\u5c04(\u5c06\u8bf7\u6c42\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684\u63a7\u5236\u5668)\u3002 info Hint \u4e3a\u4e86\u4f7f\u7528\u5185\u7f6e\u7684 \u9a8c\u8bc1 \u5feb\u901f\u521b\u5efa CRUD \u63a7\u5236\u5668\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 CLI \u7684 CRUD \u751f\u6210\u5668 : nest g resource [name] . \u8def\u7531 \u00b6 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 @Controller() \u88c5\u9970\u5668\uff0c\u5b83\u662f\u5b9a\u4e49\u4e00\u4e2a\u57fa\u672c\u63a7\u5236\u5668\u6240\u5fc5\u9700\u7684\u3002 \u6211\u4eec\u5c06\u6307\u5b9a\u4e00\u4e2a\u53ef\u9009\u7684\u8def\u7531\u8def\u5f84\u524d\u7f00 cats \u3002 \u5728 @Controller() \u88c5\u9970\u5668\u4e2d\u4f7f\u7528\u8def\u5f84\u524d\u7f00\u53ef\u4ee5\u8ba9\u6211\u4eec\u8f7b\u677e\u5730\u5bf9\u4e00\u7ec4\u76f8\u5173\u7684\u8def\u7531\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u6700\u5c0f\u5316\u91cd\u590d\u4ee3\u7801\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u4e00\u7ec4\u7ba1\u7406\u4e0e\u5ba2\u6237\u5b9e\u4f53\u4ea4\u4e92\u7684\u8def\u7531\u5206\u7ec4\u5728\u8def\u7531 /customers \u4e0b\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 @Controller() \u88c5\u9970\u5668\u4e2d\u6307\u5b9a\u8def\u5f84\u524d\u7f00 customers \uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u5fc5\u4e3a\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u8def\u7531\u91cd\u590d\u8fd9\u90e8\u5206\u8def\u5f84\u3002 @ @filename ( cats . controller ) import { Controller , Get } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Get () findAll () : string { return 'This action returns all cats' ; } } @ @switch import { Controller , Get } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Get () findAll () { return 'This action returns all cats' ; } } info Hint \u8981\u4f7f\u7528 CLI \u521b\u5efa\u63a7\u5236\u5668\uff0c\u53ea\u9700\u6267\u884c $ nest g controller cats \u547d\u4ee4\u3002 \u5728 findAll() \u65b9\u6cd5\u4e4b\u524d\u7684 @Get() HTTP \u8bf7\u6c42\u65b9\u6cd5\u88c5\u9970\u5668\u544a\u8bc9 Nest \u4e3a HTTP \u8bf7\u6c42\u7684\u7279\u5b9a\u7aef\u70b9\u521b\u5efa\u5904\u7406\u7a0b\u5e8f\u3002 \u7aef\u70b9\u5bf9\u5e94\u4e8e HTTP \u8bf7\u6c42\u65b9\u6cd5(\u5728\u672c\u4f8b\u4e2d\u4e3a GET)\u548c\u8def\u7531\u8def\u5f84\u3002 \u4ec0\u4e48\u662f\u8def\u7531\u8def\u5f84? \u5904\u7406\u7a0b\u5e8f\u7684\u8def\u7531\u8def\u5f84\u662f\u901a\u8fc7\u8fde\u63a5\u4e3a\u63a7\u5236\u5668\u58f0\u660e\u7684(\u53ef\u9009\u7684)\u524d\u7f00\u548c\u65b9\u6cd5\u88c5\u9970\u5668\u4e2d\u6307\u5b9a\u7684\u4efb\u4f55\u8def\u5f84\u6765\u786e\u5b9a\u7684\u3002 \u56e0\u4e3a\u6211\u4eec\u4e3a\u6bcf\u4e2a\u8def\u7531\u58f0\u660e\u4e86\u524d\u7f00( cats )\uff0c\u5e76\u4e14\u6ca1\u6709\u5728\u88c5\u9970\u5668\u4e2d\u6dfb\u52a0\u4efb\u4f55\u8def\u5f84\u4fe1\u606f\uff0c\u6240\u4ee5 Nest \u5c06\u628a GET /cats \u8bf7\u6c42\u6620\u5c04\u5230\u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u3002 \u5982\u524d\u6240\u8ff0\uff0c\u8def\u5f84\u65e2\u5305\u62ec\u53ef\u9009\u7684\u63a7\u5236\u5668\u8def\u5f84\u524d\u7f00\uff0c \u4e5f \u5305\u62ec\u8bf7\u6c42\u65b9\u6cd5\u88c5\u9970\u5668\u4e2d\u58f0\u660e\u7684\u4efb\u4f55\u8def\u5f84\u5b57\u7b26\u4e32\u3002 \u4f8b\u5982\uff0c\u8def\u5f84\u524d\u7f00 customers \u7ed3\u5408\u88c5\u9970\u5668 @Get('profile') \u5c06\u4e3a GET /customers/profile \u7b49\u8bf7\u6c42\u751f\u6210\u8def\u7531\u6620\u5c04\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5f53\u5411\u8be5\u7aef\u70b9\u53d1\u51fa GET \u8bf7\u6c42\u65f6\uff0cNest \u5c06\u8be5\u8bf7\u6c42\u8def\u7531\u5230\u7528\u6237\u5b9a\u4e49\u7684 findAll() \u65b9\u6cd5\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u9009\u62e9\u7684\u65b9\u6cd5\u540d\u5b8c\u5168\u662f\u4efb\u610f\u7684\u3002 \u663e\u7136\uff0c\u6211\u4eec\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a\u65b9\u6cd5\u6765\u7ed1\u5b9a\u8def\u7531\uff0c\u4f46\u662f Nest \u4e0d\u4f1a\u7ed9\u9009\u62e9\u7684\u65b9\u6cd5\u540d\u8d4b\u4e88\u4efb\u4f55\u610f\u4e49\u3002 \u8be5\u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a 200 \u72b6\u6001\u7801\u548c\u76f8\u5173\u7684\u54cd\u5e94\uff0c\u5728\u672c\u4f8b\u4e2d\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837? \u4e3a\u4e86\u89e3\u91ca\uff0c\u6211\u4eec\u9996\u5148\u4ecb\u7ecd Nest \u4f7f\u7528\u4e24\u79cd \u4e0d\u540c\u7684 \u9009\u9879\u6765\u64cd\u7eb5\u54cd\u5e94\u7684\u6982\u5ff5: \u6807\u51c6 (\u63a8\u8350) \u4f7f\u7528\u8fd9\u4e2a\u5185\u7f6e\u65b9\u6cd5\uff0c\u5f53\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u4e00\u4e2aJavaScript\u5bf9\u8c61\u6216\u6570\u7ec4\u65f6\uff0c\u5b83\u5c06 \u81ea\u52a8 \u88ab\u5e8f\u5217\u5316\u4e3aJSON\u3002 \u5f53\u5b83\u8fd4\u56de\u4e00\u4e2aJavaScript\u539f\u59cb\u7c7b\u578b(\u4f8b\u5982\uff0c string \uff0c number \uff0c boolean )\uff0c\u7136\u800c\uff0cNest\u5c06\u53ea\u53d1\u9001\u503c\uff0c\u800c\u4e0d\u8bd5\u56fe\u5e8f\u5217\u5316\u5b83\u3002 \u8fd9\u4f7f\u5f97\u54cd\u5e94\u5904\u7406\u53d8\u5f97\u7b80\u5355:\u53ea\u8fd4\u56de\u503c\uff0c\u5176\u4f59\u7684\u7531Nest\u8d1f\u8d23\u3002 \u6b64\u5916\uff0c\u54cd\u5e94\u7684 \u72b6\u6001\u7801 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u603b\u662f200\uff0c\u4f7f\u7528201\u7684POST\u8bf7\u6c42\u9664\u5916\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5904\u7406\u7a0b\u5e8f\u7ea7\u6dfb\u52a0 @HttpCode(\u2026) \u88c5\u9970\u5668\u6765\u8f7b\u677e\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a(\u53c2\u89c1 \u72b6\u6001\u7801 )\u3002 \u5e93\u6307\u5b9a \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e93\u7684(\u4f8b\u5982\uff0cExpress) \u54cd\u5e94\u5bf9\u8c61 \uff0c\u53ef\u4ee5\u5728\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u7b7e\u540d\u4e2d\u4f7f\u7528 @Res() \u88c5\u9970\u5668\u6ce8\u5165(\u4f8b\u5982\uff0c findAll(@Res() response) )\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8be5\u5bf9\u8c61\u516c\u5f00\u7684\u672c\u673a\u54cd\u5e94\u5904\u7406\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528Express\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u6784\u9020\u54cd\u5e94: response.status(200).send() \u3002 warning Warning Nest \u68c0\u6d4b\u5904\u7406\u7a0b\u5e8f\u4f55\u65f6\u4f7f\u7528 @Res() \u6216 @Next() \uff0c\u8868\u660e\u60a8\u9009\u62e9\u4e86\u7279\u5b9a\u4e8e\u5e93\u7684\u9009\u9879\u3002 \u5982\u679c\u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5\uff0c\u6807\u51c6\u65b9\u6cd5\u5c06\u81ea\u52a8\u5bf9\u8fd9\u4e2a\u5355\u4e00\u8def\u7531\u7981\u7528\uff0c\u5e76\u4e14\u4e0d\u518d\u6309\u9884\u671f\u5de5\u4f5c\u3002 \u8981\u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5(\u4f8b\u5982\uff0c\u901a\u8fc7\u6ce8\u5165\u54cd\u5e94\u5bf9\u8c61\u6765\u53ea\u8bbe\u7f6e cookie/header\uff0c\u4f46\u4ecd\u7136\u5c06\u5176\u4f59\u7684\u7559\u7ed9\u6846\u67b6)\uff0c\u4f60\u5fc5\u987b\u5728 @Res({{'{'}}} passthrough: true{{'}'}) \u88c5\u9970\u5668\u4e2d\u5c06 passthrough \u9009\u9879\u8bbe\u7f6e\u4e3a true \u3002 \u8bf7\u6c42\u5bf9\u8c61 \u00b6 \u5904\u7406\u7a0b\u5e8f\u901a\u5e38\u9700\u8981\u8bbf\u95ee\u5ba2\u6237\u7aef \u8bf7\u6c42 \u7ec6\u8282\u3002 Nest \u63d0\u4f9b\u4e86\u5bf9\u5e95\u5c42\u5e73\u53f0(\u9ed8\u8ba4\u4e3a Express)\u7684 \u8bf7\u6c42\u5bf9\u8c61 \u7684\u8bbf\u95ee\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5904\u7406\u7a0b\u5e8f\u7684\u7b7e\u540d\u4e2d\u6dfb\u52a0 @Req() \u88c5\u9970\u5668\u6765\u6307\u793a Nest \u6ce8\u5165\u8bf7\u6c42\u5bf9\u8c61\u6765\u8bbf\u95ee\u8bf7\u6c42\u5bf9\u8c61\u3002 @ @filename ( cats . controller ) import { Controller , Get , Req } from '@nestjs/common' ; import { Request } from 'express' ; @Controller ( 'cats' ) export class CatsController { @Get () findAll ( @Req () request : Request ) : string { return 'This action returns all cats' ; } } @ @switch import { Controller , Bind , Get , Req } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Get () @Bind ( Req ()) findAll ( request ) { return 'This action returns all cats' ; } } info Hint \u4e3a\u4e86\u5229\u7528 express \u7c7b\u578b(\u5982\u4e0a\u9762\u7684 request: request \u53c2\u6570\u793a\u4f8b)\uff0c\u5b89\u88c5 @types/express \u5305\u3002 \u8bf7\u6c42\u5bf9\u8c61\u8868\u793a HTTP \u8bf7\u6c42\uff0c\u5e76\u5177\u6709\u8bf7\u6c42\u67e5\u8be2\u5b57\u7b26\u4e32\u3001\u53c2\u6570\u3001HTTP \u5934\u548c\u6b63\u6587\u7684\u5c5e\u6027(\u66f4\u591a\u4fe1\u606f\u8bf7\u8bbf\u95eehttps://expressjs.com/en/api.html#req)\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u5fc5\u8981\u624b\u52a8\u83b7\u53d6\u8fd9\u4e9b\u5c5e\u6027\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e13\u95e8\u7684\u88c5\u9970\u5668\uff0c\u4f8b\u5982 @Body() \u6216 @Query() \uff0c\u5b83\u4eec\u90fd\u662f\u5f00\u7bb1\u5373\u7528\u7684\u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u63d0\u4f9b\u7684\u88c5\u9970\u5668\u4ee5\u53ca\u5b83\u4eec\u6240\u8868\u793a\u7684\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u5bf9\u8c61\u3002 @Request(), @Req() req @Response(), @Res() * res @Next() next @Session() req.session @Param(key?: string) req.params / req.params[key] @Body(key?: string) req.body / req.body[key] @Query(key?: string) req.query / req.query[key] @Headers(name?: string) req.headers / req.headers[name] @Ip() req.ip @HostParam() req.hosts * \u4e3a\u4e86\u517c\u5bb9\u8de8\u5e95\u5c42 HTTP \u5e73\u53f0(\u4f8b\u5982\uff0cExpress \u548c Fastify)\u7684\u7c7b\u578b\uff0cNest \u63d0\u4f9b\u4e86 @Res() \u548c @Response() \u88c5\u9970\u5668\u3002 @Res() \u53ea\u662f @Response() \u7684\u522b\u540d\u3002 \u4e24\u8005\u90fd\u76f4\u63a5\u66b4\u9732\u4e86\u5e95\u5c42\u7684\u672c\u673a\u5e73\u53f0 \u54cd\u5e94 \u5bf9\u8c61\u63a5\u53e3\u3002 \u5728\u4f7f\u7528\u5b83\u4eec\u65f6\uff0c\u60a8\u8fd8\u5e94\u8be5\u5bfc\u5165\u5e95\u5c42\u5e93\u7684\u7c7b\u578b(\u4f8b\u5982\uff0c @types/express )\u4ee5\u5145\u5206\u5229\u7528\u5b83\u4eec\u3002 \u8bf7\u6ce8\u610f\uff0c\u5f53\u4f60\u5728\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u4e2d\u6ce8\u5165 @Res() \u6216 @Response() \u65f6\uff0c\u4f60\u5c06 Nest \u7f6e\u4e8e\u8be5\u5904\u7406\u7a0b\u5e8f\u7684\u7279\u5b9a\u4e8e \u5e93 \u7684\u6a21\u5f0f\u4e2d\uff0c\u4f60\u5c06\u8d1f\u8d23\u7ba1\u7406\u54cd\u5e94\u3002 \u5f53\u8fd9\u6837\u505a\u65f6\uff0c\u4f60\u5fc5\u987b\u901a\u8fc7\u8c03\u7528 response \u5bf9\u8c61(\u4f8b\u5982 res.json(\u2026)'\u6216 res.send(\u2026)')\u6765\u53d1\u51fa\u67d0\u79cd\u54cd\u5e94\uff0c\u5426\u5219 HTTP \u670d\u52a1\u5668\u5c06\u6302\u8d77\u3002 info Hint \u8981\u5b66\u4e60\u5982\u4f55\u521b\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u8bf7\u8bbf\u95ee this \u7ae0\u8282\u3002 \u8d44\u6e90 \u00b6 \u524d\u9762\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7aef\u70b9\u6765\u83b7\u53d6 cats \u8d44\u6e90( GET \u8def\u7531)\u3002 \u6211\u4eec\u901a\u5e38\u8fd8\u5e0c\u671b\u63d0\u4f9b\u4e00\u4e2a\u521b\u5efa\u65b0\u8bb0\u5f55\u7684\u7aef\u70b9\u3002 \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a POST \u5904\u7406\u5668: @ @filename ( cats . controller ) import { Controller , Get , Post } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Post () create () : string { return 'This action adds a new cat' ; } @Get () findAll () : string { return 'This action returns all cats' ; } } @ @switch import { Controller , Get , Post } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Post () create () { return 'This action adds a new cat' ; } @Get () findAll () { return 'This action returns all cats' ; } } \u5c31\u662f\u8fd9\u4e48\u7b80\u5355\u3002 Nest \u4e3a\u6240\u6709\u6807\u51c6 HTTP \u65b9\u6cd5\u63d0\u4f9b\u4e86\u88c5\u9970\u5668: @Get() \uff0c @Post() \uff0c @Put() \uff0c @Delete() \uff0c @Patch() \uff0c @Options() \u548c @Head() \u3002 \u6b64\u5916\uff0c @All() \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7aef\u70b9\u6765\u5904\u7406\u6240\u6709\u5b83\u4eec\u3002 \u6cdb\u8def\u7531 \u00b6 \u4e5f\u652f\u6301\u57fa\u4e8e\u6a21\u5f0f\u7684\u8def\u7531\u3002 \u4f8b\u5982\uff0c\u661f\u53f7\u7528\u4f5c\u901a\u914d\u7b26\uff0c\u5c06\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u7ec4\u5408\u3002 @Get ( 'ab*cd' ) findAll () { return 'This route uses a wildcard' ; } ab*cd \u8def\u7531\u8def\u5f84\u5c06\u5339\u914d abcd \uff0c ab_cd \uff0c abecd \uff0c\u7b49\u7b49\u3002 \u4eba\u7269\u7684?'\uff0c + \uff0c * \u548c () \u53ef\u4ee5\u5728\u8def\u7531\u8def\u5f84\u4e2d\u4f7f\u7528\uff0c\u5b83\u4eec\u662f\u5b83\u4eec\u5bf9\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5b50\u96c6\u3002 \u8fde\u5b57\u7b26( - )\u548c\u70b9( . )\u6309\u5b57\u9762\u610f\u601d\u89e3\u91ca\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u8def\u5f84\u3002 \u72b6\u6001\u7801 \u00b6 \u5982\u524d\u6240\u8ff0\uff0c\u54cd\u5e94\u72b6\u6001\u7801\u9ed8\u8ba4\u603b\u662f 200 \uff0c\u9664\u4e86 POST \u8bf7\u6c42\u662f 201 \u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5904\u7406\u7a0b\u5e8f\u7ea7\u522b\u6dfb\u52a0 @HttpCode(\u2026) \u88c5\u9970\u5668\u6765\u8f7b\u677e\u5730\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a\u3002 @Post () @HttpCode ( 204 ) create () { return 'This action adds a new cat' ; } info Hint \u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165 HttpCode \u3002 \u901a\u5e38\uff0c\u60a8\u7684\u72b6\u6001\u4ee3\u7801\u4e0d\u662f\u9759\u6001\u7684\uff0c\u800c\u662f\u53d6\u51b3\u4e8e\u5404\u79cd\u56e0\u7d20\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e93\u7684 response (\u4f7f\u7528 @Res() \u6ce8\u5165)\u5bf9\u8c61(\u6216\u8005\uff0c\u5728\u51fa\u73b0\u9519\u8bef\u65f6\uff0c\u629b\u51fa\u5f02\u5e38)\u3002 \u5934\u90e8 \u00b6 \u8981\u6307\u5b9a\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 @Header() \u88c5\u9970\u5668\u6216\u7279\u5b9a\u4e8e\u5e93\u7684\u54cd\u5e94\u5bf9\u8c61(\u5e76\u76f4\u63a5\u8c03\u7528 res.header() )\u3002 @Post () @Header ( 'Cache-Control' , 'none' ) create () { return 'This action adds a new cat' ; } info Hint \u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165 Header \u3002 \u91cd\u5b9a\u5411 \u00b6 \u8981\u5c06\u54cd\u5e94\u91cd\u5b9a\u5411\u5230\u7279\u5b9a\u7684 URL\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 @Redirect() \u88c5\u9970\u5668\u6216\u5e93\u7279\u5b9a\u7684\u54cd\u5e94\u5bf9\u8c61(\u5e76\u76f4\u63a5\u8c03\u7528 res.redirect() )\u3002 @Redirect() \u6709\u4e24\u4e2a\u53c2\u6570\uff0c url \u548c statusCode \uff0c\u90fd\u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u7701\u7565\uff0c statusCode \u7684\u9ed8\u8ba4\u503c\u662f 302 ( Found )\u3002 @Get () @Redirect ( 'https://nestjs.com' , 301 ) \u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u52a8\u6001\u5730\u786e\u5b9a HTTP \u72b6\u6001\u4ee3\u7801\u6216\u91cd\u5b9a\u5411 URL\u3002 \u901a\u8fc7\u4ece\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u5f62\u72b6\u7684\u5bf9\u8c61\u6765\u5b9e\u73b0: { \"url\" : s tr i n g , \"statusCode\" : nu mber } \u8fd4\u56de\u503c\u5c06\u8986\u76d6\u4f20\u9012\u7ed9 @Redirect() \u88c5\u9970\u5668\u7684\u4efb\u4f55\u53c2\u6570\u3002 \u4f8b\u5982: @Get ( 'docs' ) @Redirect ( 'https://docs.nestjs.com' , 302 ) getDocs ( @Query ( 'version' ) version ) { if ( version && version === '5' ) { return { url : 'https://docs.nestjs.com/v5/' }; } } \u8def\u7531\u53c2\u6570 \u00b6 \u5f53\u4f60\u9700\u8981\u63a5\u53d7\u52a8\u6001\u6570\u636e\u4f5c\u4e3a\u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u65f6(\u4f8b\u5982\uff0c GET /cats/1 \u6765\u83b7\u53d6 id \u4e3a 1 \u7684\u732b)\uff0c\u9759\u6001\u8def\u5f84\u7684\u8def\u7531\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002 \u4e3a\u4e86\u5b9a\u4e49\u5e26\u6709\u53c2\u6570\u7684\u8def\u7531\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8def\u7531\u8def\u5f84\u4e2d\u6dfb\u52a0\u8def\u7531\u53c2\u6570\u4ee4\u724c\uff0c\u4ee5\u6355\u83b7\u8bf7\u6c42 URL \u4e2d\u90a3\u4e2a\u4f4d\u7f6e\u7684\u52a8\u6001\u503c\u3002 \u4e0b\u9762\u7684 @Get() \u88c5\u9970\u5668\u793a\u4f8b\u4e2d\u7684\u8def\u7531\u53c2\u6570\u4ee4\u724c\u6f14\u793a\u4e86\u8fd9\u79cd\u7528\u6cd5\u3002 \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u8def\u7531\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528 @Param() \u88c5\u9970\u5668\u6765\u8bbf\u95ee\uff0c\u5b83\u5e94\u8be5\u88ab\u6dfb\u52a0\u5230\u65b9\u6cd5\u7b7e\u540d\u4e2d\u3002 @ @filename () @Get ( ':id' ) findOne ( @Param () params ) : string { console . log ( params . id ); return `This action returns a # ${ params . id } cat` ; } @ @switch @Get ( ':id' ) @Bind ( Param ()) findOne ( params ) { console . log ( params . id ); return `This action returns a # ${ params . id } cat` ; } @Param() \u88ab\u7528\u6765\u4fee\u9970\u4e00\u4e2a\u65b9\u6cd5\u53c2\u6570(\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f params )\uff0c\u5e76\u4f7f route \u53c2\u6570\u4f5c\u4e3a\u4fee\u9970\u540e\u7684\u65b9\u6cd5\u53c2\u6570\u7684\u5c5e\u6027\u5728\u65b9\u6cd5\u4f53\u4e2d\u53ef\u7528\u3002 \u6b63\u5982\u4e0a\u9762\u7684\u4ee3\u7801\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528 params.id \u6765\u8bbf\u95ee id \u53c2\u6570\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7279\u5b9a\u7684\u53c2\u6570\u6807\u8bb0\u4f20\u9012\u7ed9\u88c5\u9970\u5668\uff0c\u7136\u540e\u5728\u65b9\u6cd5\u4f53\u4e2d\u76f4\u63a5\u901a\u8fc7\u540d\u79f0\u5f15\u7528\u8def\u7531\u53c2\u6570\u3002 info Hint \u4ece @nestjs/common \u5305\u5bfc\u5165 Param \u3002 @ @filename () @Get ( ':id' ) findOne ( @Param ( 'id' ) id : string ) : string { return `This action returns a # ${ id } cat` ; } @ @switch @Get ( ':id' ) @Bind ( Param ( 'id' )) findOne ( id ) { return `This action returns a # ${ id } cat` ; } \u5b50\u57df\u8def\u7531 \u00b6 @Controller \u88c5\u9970\u5668\u53ef\u4ee5\u63a5\u53d7 host \u9009\u9879\uff0c\u8981\u6c42\u4f20\u5165\u8bf7\u6c42\u7684 HTTP \u4e3b\u673a\u5339\u914d\u7279\u5b9a\u7684\u503c\u3002 @Controller ({ host : 'admin.example.com' }) export class AdminController { @Get () index () : string { return 'Admin page' ; } } Warning \u7531\u4e8e fasttify \u7f3a\u4e4f\u5bf9\u5d4c\u5957\u8def\u7531\u5668\u7684\u652f\u6301\uff0c\u6240\u4ee5\u5728\u4f7f\u7528\u5b50\u57df\u8def\u7531\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528(\u9ed8\u8ba4\u7684)Express \u9002\u914d\u5668\u3002 \u4e0e\u8def\u7531 path \u7c7b\u4f3c\uff0c hosts \u9009\u9879\u53ef\u4ee5\u4f7f\u7528\u4ee4\u724c\u6765\u6355\u83b7\u4e3b\u673a\u540d\u4e2d\u8be5\u4f4d\u7f6e\u7684\u52a8\u6001\u503c\u3002 \u4e0b\u9762\u7684 @Controller() \u88c5\u9970\u5668\u793a\u4f8b\u4e2d\u7684\u4e3b\u673a\u53c2\u6570\u4ee4\u724c\u6f14\u793a\u4e86\u8fd9\u79cd\u7528\u6cd5\u3002 \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u4e3b\u673a\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528 @HostParam() \u88c5\u9970\u5668\u8bbf\u95ee\uff0c\u8be5\u88c5\u9970\u5668\u5e94\u8be5\u6dfb\u52a0\u5230\u65b9\u6cd5\u7b7e\u540d\u4e2d\u3002 @Controller ({ host : ':account.example.com' }) export class AccountController { @Get () getInfo ( @HostParam ( 'account' ) account : string ) { return account ; } } \u8303\u56f4 \u00b6 \u5bf9\u4e8e\u5177\u6709\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u53d1\u73b0\uff0c\u5728 Nest \u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u662f\u5171\u4eab\u7684\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u5230\u6570\u636e\u5e93\u7684\u8fde\u63a5\u6c60\uff0c\u6709\u5168\u5c40\u72b6\u6001\u7684\u5355\u4f8b\u670d\u52a1\uff0c\u7b49\u7b49\u3002 \u8bb0\u4f4f Node.js \u5e76\u4e0d\u9075\u5faa\u8bf7\u6c42/\u54cd\u5e94\u591a\u7ebf\u7a0b\u65e0\u72b6\u6001\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u7531\u5355\u72ec\u7684\u7ebf\u7a0b\u5904\u7406\u3002 \u56e0\u6b64\uff0c\u4f7f\u7528\u5355\u4f8b\u5b9e\u4f8b\u5bf9\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5b8c\u5168\u5b89\u5168\u7684\u3002 \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u8fb9\u7f18\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u8bf7\u6c42\u7684\u63a7\u5236\u5668\u751f\u547d\u5468\u671f\u53ef\u80fd\u662f\u7406\u60f3\u7684\u884c\u4e3a\uff0c\u4f8b\u5982 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7f13\u5b58\u3001\u8bf7\u6c42\u8ddf\u8e2a\u6216\u591a\u79df\u6237\u3002 \u5b66\u4e60\u5982\u4f55\u63a7\u5236\u4f5c\u7528\u57df \u5728\u8fd9\u91cc \u3002 \u5f02\u6b65\u6027 \u00b6 \u6211\u4eec\u559c\u6b22\u73b0\u4ee3 JavaScript\uff0c\u6211\u4eec\u77e5\u9053\u6570\u636e\u63d0\u53d6\u5927\u90e8\u5206\u662f\u5f02\u6b65\u7684\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 Nest \u652f\u6301 \u5f02\u6b65 \u51fd\u6570\u5e76\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002 info Hint \u4e86\u89e3\u6709\u5173 async/await \u7279\u6027\u7684\u66f4\u591a\u4fe1\u606f \u5728\u8fd9\u91cc \u6bcf\u4e2a\u5f02\u6b65\u51fd\u6570\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a Promise \u3002 \u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u9012\u5ef6\u503c\uff0c\u800c Nest \u5c06\u80fd\u591f\u81ea\u884c\u89e3\u6790\u8be5\u503c\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50: @ @filename ( cats . controller ) @Get () async findAll () : Promise < any [] > { return []; } @ @switch @Get () async findAll () { return []; } \u4ee5\u4e0a\u4ee3\u7801\u662f\u5b8c\u5168\u6709\u6548\u7684\u3002 \u6b64\u5916\uff0cNest \u7684\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u66f4\u5f3a\u5927\uff0c\u56e0\u4e3a\u5b83\u80fd\u591f\u8fd4\u56de RxJS \u53ef\u89c2\u5bdf\u6d41 \u3002 Nest \u5c06\u81ea\u52a8\u8ba2\u9605\u4e0b\u9762\u7684\u6e90\u5e76\u83b7\u53d6\u6700\u540e\u53d1\u51fa\u7684\u503c(\u4e00\u65e6\u6d41\u5b8c\u6210)\u3002 @ @filename ( cats . controller ) @Get () findAll () : Observable < any [] > { return of ([]); } @ @switch @Get () findAll () { return of ([]); } \u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5de5\u4f5c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u9002\u5408\u60a8\u9700\u6c42\u7684\u65b9\u6cd5\u3002 \u8bf7\u6c42\u7684\u6709\u6548\u8f7d\u8377 \u00b6 \u6211\u4eec\u524d\u9762\u7684 POST \u8def\u7531\u5904\u7406\u7a0b\u5e8f\u793a\u4f8b\u4e0d\u63a5\u53d7\u4efb\u4f55\u5ba2\u6237\u7aef\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u5728\u8fd9\u91cc\u6dfb\u52a0 @Body() \u88c5\u9970\u5668\u6765\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f46\u9996\u5148(\u5982\u679c\u4f60\u4f7f\u7528 TypeScript)\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a DTO (\u6570\u636e\u4f20\u8f93\u5bf9\u8c61)\u6a21\u5f0f\u3002 DTO \u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5b9a\u4e49\u5982\u4f55\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 TypeScript \u63a5\u53e3\u6216\u7b80\u5355\u7684\u7c7b\u6765\u786e\u5b9a DTO \u6a21\u5f0f\u3002 \u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u8fd9\u91cc\u4f7f\u7528 \u7c7b \u3002 \u4e3a\u4ec0\u4e48?\u7c7b\u662f JavaScript ES6 \u6807\u51c6\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u5728\u7f16\u8bd1\u540e\u7684 JavaScript \u4e2d\u88ab\u4fdd\u7559\u4e3a\u771f\u5b9e\u7684\u5b9e\u4f53\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u7531\u4e8e TypeScript \u63a5\u53e3\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u88ab\u79fb\u9664\uff0c\u6240\u4ee5 Nest \u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u5f15\u7528\u5b83\u4eec\u3002 \u8fd9\u662f\u5f88\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u50cf Pipes \u8fd9\u6837\u7684\u529f\u80fd\u5728\u8fd0\u884c\u65f6\u8bbf\u95ee\u53d8\u91cf\u7684\u5143\u7c7b\u578b\u65f6\uff0c\u53ef\u4ee5\u63d0\u4f9b\u989d\u5916\u7684\u53ef\u80fd\u6027\u3002 \u8ba9\u6211\u4eec\u521b\u5efa CreateCatDto \u7c7b: @ @filename ( create - cat . dto ) export class CreateCatDto { name : string ; age : number ; breed : string ; } \u5b83\u53ea\u6709\u4e09\u79cd\u57fa\u672c\u6027\u8d28\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 CatsController \u4e2d\u4f7f\u7528\u65b0\u521b\u5efa\u7684 DTO: @ @filename ( cats . controller ) @Post () async create ( @Body () createCatDto : CreateCatDto ) { return 'This action adds a new cat' ; } @ @switch @Post () @Bind ( Body ()) async create ( createCatDto ) { return 'This action adds a new cat' ; } info Hint \u6211\u4eec\u7684 ValidationPipe \u53ef\u4ee5\u8fc7\u6ee4\u6389\u4e0d\u5e94\u8be5\u88ab\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u63a5\u6536\u7684\u5c5e\u6027\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u53ef\u63a5\u53d7\u7684\u5c5e\u6027\u5217\u5165\u767d\u540d\u5355\uff0c\u4efb\u4f55\u4e0d\u5305\u62ec\u5728\u767d\u540d\u5355\u4e2d\u7684\u5c5e\u6027\u5c06\u81ea\u52a8\u4ece\u7ed3\u679c\u5bf9\u8c61\u4e2d\u5220\u9664\u3002 \u5728 CreateCatDto \u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u767d\u540d\u5355\u662f name \u3001 age \u548c breed \u5c5e\u6027\u3002 \u4e86\u89e3\u66f4\u591a \u8fd9\u91cc \u3002 \u5904\u7406\u9519\u8bef \u00b6 \u6709\u4e00\u4e2a\u5355\u72ec\u7684\u7ae0\u8282\u662f\u5173\u4e8e\u5904\u7406\u9519\u8bef(\u4f8b\u5982\uff0c\u5904\u7406\u5f02\u5e38)\u7684 \u8fd9\u91cc \u3002 \u5b8c\u6574\u7684\u8d44\u6e90\u793a\u4f8b \u00b6 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u51e0\u79cd\u53ef\u7528\u88c5\u9970\u5668\u521b\u5efa\u57fa\u672c\u63a7\u5236\u5668\u7684\u793a\u4f8b\u3002 \u8fd9\u4e2a\u63a7\u5236\u5668\u516c\u5f00\u4e86\u4e24\u4e2a\u65b9\u6cd5\u6765\u8bbf\u95ee\u548c\u64cd\u4f5c\u5185\u90e8\u6570\u636e\u3002 @ @filename ( cats . controller ) import { Controller , Get , Query , Post , Body , Put , Param , Delete } from '@nestjs/common' ; import { CreateCatDto , UpdateCatDto , ListAllEntities } from './dto' ; @Controller ( 'cats' ) export class CatsController { @Post () create ( @Body () createCatDto : CreateCatDto ) { return 'This action adds a new cat' ; } @Get () findAll ( @Query () query : ListAllEntities ) { return `This action returns all cats (limit: ${ query . limit } items)` ; } @Get ( ':id' ) findOne ( @Param ( 'id' ) id : string ) { return `This action returns a # ${ id } cat` ; } @Put ( ':id' ) update ( @Param ( 'id' ) id : string , @Body () updateCatDto : UpdateCatDto ) { return `This action updates a # ${ id } cat` ; } @Delete ( ':id' ) remove ( @Param ( 'id' ) id : string ) { return `This action removes a # ${ id } cat` ; } } @ @switch import { Controller , Get , Query , Post , Body , Put , Param , Delete , Bind } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Post () @Bind ( Body ()) create ( createCatDto ) { return 'This action adds a new cat' ; } @Get () @Bind ( Query ()) findAll ( query ) { console . log ( query ); return `This action returns all cats (limit: ${ query . limit } items)` ; } @Get ( ':id' ) @Bind ( Param ( 'id' )) findOne ( id ) { return `This action returns a # ${ id } cat` ; } @Put ( ':id' ) @Bind ( Param ( 'id' ), Body ()) update ( id , updateCatDto ) { return `This action updates a # ${ id } cat` ; } @Delete ( ':id' ) @Bind ( Param ( 'id' )) remove ( id ) { return `This action removes a # ${ id } cat` ; } } info Hint Nest CLI \u63d0\u4f9b\u4e86\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u6240\u6709\u6837\u677f\u4ee3\u7801\u7684\u751f\u6210\u5668(\u539f\u7406\u56fe)\uff0c\u4ee5\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u505a\u6240\u6709\u8fd9\u4e9b\uff0c\u5e76\u4f7f\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u66f4\u7b80\u5355\u3002 \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u7279\u6027 \u8fd9\u91cc \u3002 \u542f\u52a8\u548c\u8fd0\u884c \u00b6 \u4e0a\u9762\u7684\u63a7\u5236\u5668\u5b8c\u5168\u5b9a\u4e49\u540e\uff0cNest \u4ecd\u7136\u4e0d\u77e5\u9053 CatsController \u5b58\u5728\uff0c\u56e0\u6b64\u4e0d\u4f1a\u521b\u5efa\u8be5\u7c7b\u7684\u5b9e\u4f8b\u3002 \u63a7\u5236\u5668\u603b\u662f\u5c5e\u4e8e\u4e00\u4e2a\u6a21\u5757\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728 @Module() \u88c5\u9970\u5668\u4e2d\u5305\u542b Controllers \u6570\u7ec4\u3002 \u56e0\u4e3a\u9664\u4e86\u6839\u6a21\u5757 AppModule\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u5176\u4ed6\u6a21\u5757\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u5f15\u5165 CatsController : @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats/cats.controller' ; @Module ({ controllers : [ CatsController ], }) export class AppModule {} \u6211\u4eec\u4f7f\u7528 @Module() \u88c5\u9970\u5668\u5c06\u5143\u6570\u636e\u9644\u52a0\u5230\u6a21\u5757\u7c7b\u4e2d\uff0c\u73b0\u5728 Nest \u53ef\u4ee5\u8f7b\u677e\u5730\u53cd\u6620\u5fc5\u987b\u5b89\u88c5\u54ea\u4e9b\u63a7\u5236\u5668\u3002 \u7279\u6709\u7684\u65b9\u6cd5 \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u64cd\u7eb5\u54cd\u5e94\u7684 Nest \u6807\u51c6\u65b9\u6cd5\u3002 \u64cd\u7eb5\u54cd\u5e94\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e93\u7684 response object \u3002 \u4e3a\u4e86\u6ce8\u5165\u4e00\u4e2a\u7279\u5b9a\u7684\u54cd\u5e94\u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 @Res() \u88c5\u9970\u5668\u3002 \u4e3a\u4e86\u663e\u793a\u5dee\u5f02\uff0c\u8ba9\u6211\u4eec\u91cd\u5199 CatsController \u5982\u4e0b: @ @filename () import { Controller , Get , Post , Res , HttpStatus } from '@nestjs/common' ; import { Response } from 'express' ; @Controller ( 'cats' ) export class CatsController { @Post () create ( @Res () res : Response ) { res . status ( HttpStatus . CREATED ). send (); } @Get () findAll ( @Res () res : Response ) { res . status ( HttpStatus . OK ). json ([]); } } @ @switch import { Controller , Get , Post , Bind , Res , Body , HttpStatus } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Post () @Bind ( Res (), Body ()) create ( res , createCatDto ) { res . status ( HttpStatus . CREATED ). send (); } @Get () @Bind ( Res ()) findAll ( res ) { res . status ( HttpStatus . OK ). json ([]); } } \u867d\u7136\u8fd9\u79cd\u65b9\u6cd5\u662f\u53ef\u884c\u7684\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u901a\u8fc7\u63d0\u4f9b\u5bf9\u54cd\u5e94\u5bf9\u8c61\u7684\u5b8c\u5168\u63a7\u5236(\u5934\u4fe1\u606f\u5904\u7406\u3001\u7279\u5b9a\u4e8e\u5e93\u7684\u7279\u6027\u7b49)\u5728\u67d0\u4e9b\u65b9\u9762\u5141\u8bb8\u4e86\u66f4\u5927\u7684\u7075\u6d3b\u6027\uff0c\u4f46\u5e94\u8be5\u8c28\u614e\u4f7f\u7528\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u592a\u6e05\u6670\uff0c\u786e\u5b9e\u6709\u4e00\u4e9b\u7f3a\u70b9\u3002 \u4e3b\u8981\u7f3a\u70b9\u662f\u60a8\u7684\u4ee3\u7801\u53d8\u5f97\u4f9d\u8d56\u4e8e\u5e73\u53f0(\u56e0\u4e3a\u5e95\u5c42\u5e93\u5728\u54cd\u5e94\u5bf9\u8c61\u4e0a\u53ef\u80fd\u6709\u4e0d\u540c\u7684 api)\uff0c\u5e76\u4e14\u66f4\u96be\u6d4b\u8bd5(\u60a8\u5c06\u4e0d\u5f97\u4e0d\u6a21\u62df\u54cd\u5e94\u5bf9\u8c61\uff0c\u7b49\u7b49)\u3002 \u6b64\u5916\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4f60\u5931\u53bb\u4e86\u4e0e\u4f9d\u8d56\u4e8e Nest \u6807\u51c6\u54cd\u5e94\u5904\u7406\u7684 Nest \u7279\u6027\u7684\u517c\u5bb9\u6027\uff0c\u4f8b\u5982\u62e6\u622a\u5668\u548c @HttpCode() / @Header() \u88c5\u9970\u5668\u3002 \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5c06 passthrough \u9009\u9879\u8bbe\u7f6e\u4e3a true \uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @Get () findAll ( @Res ({ passthrough : true }) res : Response ) { res . status ( HttpStatus . OK ); return []; } @ @switch @Get () @Bind ( Res ({ passthrough : true })) findAll ( res ) { res . status ( HttpStatus . OK ); return []; } \u73b0\u5728\u60a8\u53ef\u4ee5\u4e0e\u672c\u673a\u54cd\u5e94\u5bf9\u8c61\u4ea4\u4e92(\u4f8b\u5982\uff0c\u6839\u636e\u7279\u5b9a\u6761\u4ef6\u8bbe\u7f6e cookie \u6216 header)\uff0c\u4f46\u5c06\u5176\u4f59\u5de5\u4f5c\u7559\u7ed9\u6846\u67b6\u3002","title":"\u63a7\u5236\u5668"},{"location":"controllers/#_1","text":"\u63a7\u5236\u5668\u8d1f\u8d23\u5904\u7406\u4f20\u5165\u7684 \u8bf7\u6c42 \u5e76\u8fd4\u56de \u54cd\u5e94 \u7ed9\u5ba2\u6237\u7aef\u3002 \u63a7\u5236\u5668\u7684\u4f5c\u7528\u662f\u63a5\u6536\u5e94\u7528\u7a0b\u5e8f\u7684\u7279\u5b9a\u8bf7\u6c42\u3002 \u8def\u7531 \u673a\u5236\u63a7\u5236\u54ea\u4e2a\u63a7\u5236\u5668\u63a5\u6536\u54ea\u4e2a\u8bf7\u6c42\u3002 \u901a\u5e38\uff0c\u6bcf\u4e2a\u63a7\u5236\u5668\u6709\u591a\u4e2a\u8def\u7531\uff0c\u4e0d\u540c\u7684\u8def\u7531\u53ef\u4ee5\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002 \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u63a7\u5236\u5668\uff0c\u6211\u4eec\u4f7f\u7528\u7c7b\u548c \u88c5\u9970\u5668 \u3002 \u88c5\u9970\u5668\u5c06\u7c7b\u4e0e\u6240\u9700\u7684\u5143\u6570\u636e\u5173\u8054\u8d77\u6765\uff0c\u5e76\u4f7f Nest \u80fd\u591f\u521b\u5efa\u8def\u7531\u6620\u5c04(\u5c06\u8bf7\u6c42\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684\u63a7\u5236\u5668)\u3002 info Hint \u4e3a\u4e86\u4f7f\u7528\u5185\u7f6e\u7684 \u9a8c\u8bc1 \u5feb\u901f\u521b\u5efa CRUD \u63a7\u5236\u5668\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 CLI \u7684 CRUD \u751f\u6210\u5668 : nest g resource [name] .","title":"\u63a7\u5236\u5668"},{"location":"controllers/#_2","text":"\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 @Controller() \u88c5\u9970\u5668\uff0c\u5b83\u662f\u5b9a\u4e49\u4e00\u4e2a\u57fa\u672c\u63a7\u5236\u5668\u6240\u5fc5\u9700\u7684\u3002 \u6211\u4eec\u5c06\u6307\u5b9a\u4e00\u4e2a\u53ef\u9009\u7684\u8def\u7531\u8def\u5f84\u524d\u7f00 cats \u3002 \u5728 @Controller() \u88c5\u9970\u5668\u4e2d\u4f7f\u7528\u8def\u5f84\u524d\u7f00\u53ef\u4ee5\u8ba9\u6211\u4eec\u8f7b\u677e\u5730\u5bf9\u4e00\u7ec4\u76f8\u5173\u7684\u8def\u7531\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u6700\u5c0f\u5316\u91cd\u590d\u4ee3\u7801\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u4e00\u7ec4\u7ba1\u7406\u4e0e\u5ba2\u6237\u5b9e\u4f53\u4ea4\u4e92\u7684\u8def\u7531\u5206\u7ec4\u5728\u8def\u7531 /customers \u4e0b\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 @Controller() \u88c5\u9970\u5668\u4e2d\u6307\u5b9a\u8def\u5f84\u524d\u7f00 customers \uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u5fc5\u4e3a\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u8def\u7531\u91cd\u590d\u8fd9\u90e8\u5206\u8def\u5f84\u3002 @ @filename ( cats . controller ) import { Controller , Get } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Get () findAll () : string { return 'This action returns all cats' ; } } @ @switch import { Controller , Get } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Get () findAll () { return 'This action returns all cats' ; } } info Hint \u8981\u4f7f\u7528 CLI \u521b\u5efa\u63a7\u5236\u5668\uff0c\u53ea\u9700\u6267\u884c $ nest g controller cats \u547d\u4ee4\u3002 \u5728 findAll() \u65b9\u6cd5\u4e4b\u524d\u7684 @Get() HTTP \u8bf7\u6c42\u65b9\u6cd5\u88c5\u9970\u5668\u544a\u8bc9 Nest \u4e3a HTTP \u8bf7\u6c42\u7684\u7279\u5b9a\u7aef\u70b9\u521b\u5efa\u5904\u7406\u7a0b\u5e8f\u3002 \u7aef\u70b9\u5bf9\u5e94\u4e8e HTTP \u8bf7\u6c42\u65b9\u6cd5(\u5728\u672c\u4f8b\u4e2d\u4e3a GET)\u548c\u8def\u7531\u8def\u5f84\u3002 \u4ec0\u4e48\u662f\u8def\u7531\u8def\u5f84? \u5904\u7406\u7a0b\u5e8f\u7684\u8def\u7531\u8def\u5f84\u662f\u901a\u8fc7\u8fde\u63a5\u4e3a\u63a7\u5236\u5668\u58f0\u660e\u7684(\u53ef\u9009\u7684)\u524d\u7f00\u548c\u65b9\u6cd5\u88c5\u9970\u5668\u4e2d\u6307\u5b9a\u7684\u4efb\u4f55\u8def\u5f84\u6765\u786e\u5b9a\u7684\u3002 \u56e0\u4e3a\u6211\u4eec\u4e3a\u6bcf\u4e2a\u8def\u7531\u58f0\u660e\u4e86\u524d\u7f00( cats )\uff0c\u5e76\u4e14\u6ca1\u6709\u5728\u88c5\u9970\u5668\u4e2d\u6dfb\u52a0\u4efb\u4f55\u8def\u5f84\u4fe1\u606f\uff0c\u6240\u4ee5 Nest \u5c06\u628a GET /cats \u8bf7\u6c42\u6620\u5c04\u5230\u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u3002 \u5982\u524d\u6240\u8ff0\uff0c\u8def\u5f84\u65e2\u5305\u62ec\u53ef\u9009\u7684\u63a7\u5236\u5668\u8def\u5f84\u524d\u7f00\uff0c \u4e5f \u5305\u62ec\u8bf7\u6c42\u65b9\u6cd5\u88c5\u9970\u5668\u4e2d\u58f0\u660e\u7684\u4efb\u4f55\u8def\u5f84\u5b57\u7b26\u4e32\u3002 \u4f8b\u5982\uff0c\u8def\u5f84\u524d\u7f00 customers \u7ed3\u5408\u88c5\u9970\u5668 @Get('profile') \u5c06\u4e3a GET /customers/profile \u7b49\u8bf7\u6c42\u751f\u6210\u8def\u7531\u6620\u5c04\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5f53\u5411\u8be5\u7aef\u70b9\u53d1\u51fa GET \u8bf7\u6c42\u65f6\uff0cNest \u5c06\u8be5\u8bf7\u6c42\u8def\u7531\u5230\u7528\u6237\u5b9a\u4e49\u7684 findAll() \u65b9\u6cd5\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u9009\u62e9\u7684\u65b9\u6cd5\u540d\u5b8c\u5168\u662f\u4efb\u610f\u7684\u3002 \u663e\u7136\uff0c\u6211\u4eec\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a\u65b9\u6cd5\u6765\u7ed1\u5b9a\u8def\u7531\uff0c\u4f46\u662f Nest \u4e0d\u4f1a\u7ed9\u9009\u62e9\u7684\u65b9\u6cd5\u540d\u8d4b\u4e88\u4efb\u4f55\u610f\u4e49\u3002 \u8be5\u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a 200 \u72b6\u6001\u7801\u548c\u76f8\u5173\u7684\u54cd\u5e94\uff0c\u5728\u672c\u4f8b\u4e2d\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837? \u4e3a\u4e86\u89e3\u91ca\uff0c\u6211\u4eec\u9996\u5148\u4ecb\u7ecd Nest \u4f7f\u7528\u4e24\u79cd \u4e0d\u540c\u7684 \u9009\u9879\u6765\u64cd\u7eb5\u54cd\u5e94\u7684\u6982\u5ff5: \u6807\u51c6 (\u63a8\u8350) \u4f7f\u7528\u8fd9\u4e2a\u5185\u7f6e\u65b9\u6cd5\uff0c\u5f53\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u4e00\u4e2aJavaScript\u5bf9\u8c61\u6216\u6570\u7ec4\u65f6\uff0c\u5b83\u5c06 \u81ea\u52a8 \u88ab\u5e8f\u5217\u5316\u4e3aJSON\u3002 \u5f53\u5b83\u8fd4\u56de\u4e00\u4e2aJavaScript\u539f\u59cb\u7c7b\u578b(\u4f8b\u5982\uff0c string \uff0c number \uff0c boolean )\uff0c\u7136\u800c\uff0cNest\u5c06\u53ea\u53d1\u9001\u503c\uff0c\u800c\u4e0d\u8bd5\u56fe\u5e8f\u5217\u5316\u5b83\u3002 \u8fd9\u4f7f\u5f97\u54cd\u5e94\u5904\u7406\u53d8\u5f97\u7b80\u5355:\u53ea\u8fd4\u56de\u503c\uff0c\u5176\u4f59\u7684\u7531Nest\u8d1f\u8d23\u3002 \u6b64\u5916\uff0c\u54cd\u5e94\u7684 \u72b6\u6001\u7801 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u603b\u662f200\uff0c\u4f7f\u7528201\u7684POST\u8bf7\u6c42\u9664\u5916\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5904\u7406\u7a0b\u5e8f\u7ea7\u6dfb\u52a0 @HttpCode(\u2026) \u88c5\u9970\u5668\u6765\u8f7b\u677e\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a(\u53c2\u89c1 \u72b6\u6001\u7801 )\u3002 \u5e93\u6307\u5b9a \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e93\u7684(\u4f8b\u5982\uff0cExpress) \u54cd\u5e94\u5bf9\u8c61 \uff0c\u53ef\u4ee5\u5728\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u7b7e\u540d\u4e2d\u4f7f\u7528 @Res() \u88c5\u9970\u5668\u6ce8\u5165(\u4f8b\u5982\uff0c findAll(@Res() response) )\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8be5\u5bf9\u8c61\u516c\u5f00\u7684\u672c\u673a\u54cd\u5e94\u5904\u7406\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528Express\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u6784\u9020\u54cd\u5e94: response.status(200).send() \u3002 warning Warning Nest \u68c0\u6d4b\u5904\u7406\u7a0b\u5e8f\u4f55\u65f6\u4f7f\u7528 @Res() \u6216 @Next() \uff0c\u8868\u660e\u60a8\u9009\u62e9\u4e86\u7279\u5b9a\u4e8e\u5e93\u7684\u9009\u9879\u3002 \u5982\u679c\u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5\uff0c\u6807\u51c6\u65b9\u6cd5\u5c06\u81ea\u52a8\u5bf9\u8fd9\u4e2a\u5355\u4e00\u8def\u7531\u7981\u7528\uff0c\u5e76\u4e14\u4e0d\u518d\u6309\u9884\u671f\u5de5\u4f5c\u3002 \u8981\u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5(\u4f8b\u5982\uff0c\u901a\u8fc7\u6ce8\u5165\u54cd\u5e94\u5bf9\u8c61\u6765\u53ea\u8bbe\u7f6e cookie/header\uff0c\u4f46\u4ecd\u7136\u5c06\u5176\u4f59\u7684\u7559\u7ed9\u6846\u67b6)\uff0c\u4f60\u5fc5\u987b\u5728 @Res({{'{'}}} passthrough: true{{'}'}) \u88c5\u9970\u5668\u4e2d\u5c06 passthrough \u9009\u9879\u8bbe\u7f6e\u4e3a true \u3002","title":"\u8def\u7531"},{"location":"controllers/#_3","text":"\u5904\u7406\u7a0b\u5e8f\u901a\u5e38\u9700\u8981\u8bbf\u95ee\u5ba2\u6237\u7aef \u8bf7\u6c42 \u7ec6\u8282\u3002 Nest \u63d0\u4f9b\u4e86\u5bf9\u5e95\u5c42\u5e73\u53f0(\u9ed8\u8ba4\u4e3a Express)\u7684 \u8bf7\u6c42\u5bf9\u8c61 \u7684\u8bbf\u95ee\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5904\u7406\u7a0b\u5e8f\u7684\u7b7e\u540d\u4e2d\u6dfb\u52a0 @Req() \u88c5\u9970\u5668\u6765\u6307\u793a Nest \u6ce8\u5165\u8bf7\u6c42\u5bf9\u8c61\u6765\u8bbf\u95ee\u8bf7\u6c42\u5bf9\u8c61\u3002 @ @filename ( cats . controller ) import { Controller , Get , Req } from '@nestjs/common' ; import { Request } from 'express' ; @Controller ( 'cats' ) export class CatsController { @Get () findAll ( @Req () request : Request ) : string { return 'This action returns all cats' ; } } @ @switch import { Controller , Bind , Get , Req } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Get () @Bind ( Req ()) findAll ( request ) { return 'This action returns all cats' ; } } info Hint \u4e3a\u4e86\u5229\u7528 express \u7c7b\u578b(\u5982\u4e0a\u9762\u7684 request: request \u53c2\u6570\u793a\u4f8b)\uff0c\u5b89\u88c5 @types/express \u5305\u3002 \u8bf7\u6c42\u5bf9\u8c61\u8868\u793a HTTP \u8bf7\u6c42\uff0c\u5e76\u5177\u6709\u8bf7\u6c42\u67e5\u8be2\u5b57\u7b26\u4e32\u3001\u53c2\u6570\u3001HTTP \u5934\u548c\u6b63\u6587\u7684\u5c5e\u6027(\u66f4\u591a\u4fe1\u606f\u8bf7\u8bbf\u95eehttps://expressjs.com/en/api.html#req)\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u5fc5\u8981\u624b\u52a8\u83b7\u53d6\u8fd9\u4e9b\u5c5e\u6027\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e13\u95e8\u7684\u88c5\u9970\u5668\uff0c\u4f8b\u5982 @Body() \u6216 @Query() \uff0c\u5b83\u4eec\u90fd\u662f\u5f00\u7bb1\u5373\u7528\u7684\u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u63d0\u4f9b\u7684\u88c5\u9970\u5668\u4ee5\u53ca\u5b83\u4eec\u6240\u8868\u793a\u7684\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u5bf9\u8c61\u3002 @Request(), @Req() req @Response(), @Res() * res @Next() next @Session() req.session @Param(key?: string) req.params / req.params[key] @Body(key?: string) req.body / req.body[key] @Query(key?: string) req.query / req.query[key] @Headers(name?: string) req.headers / req.headers[name] @Ip() req.ip @HostParam() req.hosts * \u4e3a\u4e86\u517c\u5bb9\u8de8\u5e95\u5c42 HTTP \u5e73\u53f0(\u4f8b\u5982\uff0cExpress \u548c Fastify)\u7684\u7c7b\u578b\uff0cNest \u63d0\u4f9b\u4e86 @Res() \u548c @Response() \u88c5\u9970\u5668\u3002 @Res() \u53ea\u662f @Response() \u7684\u522b\u540d\u3002 \u4e24\u8005\u90fd\u76f4\u63a5\u66b4\u9732\u4e86\u5e95\u5c42\u7684\u672c\u673a\u5e73\u53f0 \u54cd\u5e94 \u5bf9\u8c61\u63a5\u53e3\u3002 \u5728\u4f7f\u7528\u5b83\u4eec\u65f6\uff0c\u60a8\u8fd8\u5e94\u8be5\u5bfc\u5165\u5e95\u5c42\u5e93\u7684\u7c7b\u578b(\u4f8b\u5982\uff0c @types/express )\u4ee5\u5145\u5206\u5229\u7528\u5b83\u4eec\u3002 \u8bf7\u6ce8\u610f\uff0c\u5f53\u4f60\u5728\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u4e2d\u6ce8\u5165 @Res() \u6216 @Response() \u65f6\uff0c\u4f60\u5c06 Nest \u7f6e\u4e8e\u8be5\u5904\u7406\u7a0b\u5e8f\u7684\u7279\u5b9a\u4e8e \u5e93 \u7684\u6a21\u5f0f\u4e2d\uff0c\u4f60\u5c06\u8d1f\u8d23\u7ba1\u7406\u54cd\u5e94\u3002 \u5f53\u8fd9\u6837\u505a\u65f6\uff0c\u4f60\u5fc5\u987b\u901a\u8fc7\u8c03\u7528 response \u5bf9\u8c61(\u4f8b\u5982 res.json(\u2026)'\u6216 res.send(\u2026)')\u6765\u53d1\u51fa\u67d0\u79cd\u54cd\u5e94\uff0c\u5426\u5219 HTTP \u670d\u52a1\u5668\u5c06\u6302\u8d77\u3002 info Hint \u8981\u5b66\u4e60\u5982\u4f55\u521b\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u8bf7\u8bbf\u95ee this \u7ae0\u8282\u3002","title":"\u8bf7\u6c42\u5bf9\u8c61"},{"location":"controllers/#_4","text":"\u524d\u9762\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7aef\u70b9\u6765\u83b7\u53d6 cats \u8d44\u6e90( GET \u8def\u7531)\u3002 \u6211\u4eec\u901a\u5e38\u8fd8\u5e0c\u671b\u63d0\u4f9b\u4e00\u4e2a\u521b\u5efa\u65b0\u8bb0\u5f55\u7684\u7aef\u70b9\u3002 \u4e3a\u6b64\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a POST \u5904\u7406\u5668: @ @filename ( cats . controller ) import { Controller , Get , Post } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Post () create () : string { return 'This action adds a new cat' ; } @Get () findAll () : string { return 'This action returns all cats' ; } } @ @switch import { Controller , Get , Post } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Post () create () { return 'This action adds a new cat' ; } @Get () findAll () { return 'This action returns all cats' ; } } \u5c31\u662f\u8fd9\u4e48\u7b80\u5355\u3002 Nest \u4e3a\u6240\u6709\u6807\u51c6 HTTP \u65b9\u6cd5\u63d0\u4f9b\u4e86\u88c5\u9970\u5668: @Get() \uff0c @Post() \uff0c @Put() \uff0c @Delete() \uff0c @Patch() \uff0c @Options() \u548c @Head() \u3002 \u6b64\u5916\uff0c @All() \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7aef\u70b9\u6765\u5904\u7406\u6240\u6709\u5b83\u4eec\u3002","title":"\u8d44\u6e90"},{"location":"controllers/#_5","text":"\u4e5f\u652f\u6301\u57fa\u4e8e\u6a21\u5f0f\u7684\u8def\u7531\u3002 \u4f8b\u5982\uff0c\u661f\u53f7\u7528\u4f5c\u901a\u914d\u7b26\uff0c\u5c06\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u7ec4\u5408\u3002 @Get ( 'ab*cd' ) findAll () { return 'This route uses a wildcard' ; } ab*cd \u8def\u7531\u8def\u5f84\u5c06\u5339\u914d abcd \uff0c ab_cd \uff0c abecd \uff0c\u7b49\u7b49\u3002 \u4eba\u7269\u7684?'\uff0c + \uff0c * \u548c () \u53ef\u4ee5\u5728\u8def\u7531\u8def\u5f84\u4e2d\u4f7f\u7528\uff0c\u5b83\u4eec\u662f\u5b83\u4eec\u5bf9\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5b50\u96c6\u3002 \u8fde\u5b57\u7b26( - )\u548c\u70b9( . )\u6309\u5b57\u9762\u610f\u601d\u89e3\u91ca\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u8def\u5f84\u3002","title":"\u6cdb\u8def\u7531"},{"location":"controllers/#_6","text":"\u5982\u524d\u6240\u8ff0\uff0c\u54cd\u5e94\u72b6\u6001\u7801\u9ed8\u8ba4\u603b\u662f 200 \uff0c\u9664\u4e86 POST \u8bf7\u6c42\u662f 201 \u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u5904\u7406\u7a0b\u5e8f\u7ea7\u522b\u6dfb\u52a0 @HttpCode(\u2026) \u88c5\u9970\u5668\u6765\u8f7b\u677e\u5730\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a\u3002 @Post () @HttpCode ( 204 ) create () { return 'This action adds a new cat' ; } info Hint \u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165 HttpCode \u3002 \u901a\u5e38\uff0c\u60a8\u7684\u72b6\u6001\u4ee3\u7801\u4e0d\u662f\u9759\u6001\u7684\uff0c\u800c\u662f\u53d6\u51b3\u4e8e\u5404\u79cd\u56e0\u7d20\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e93\u7684 response (\u4f7f\u7528 @Res() \u6ce8\u5165)\u5bf9\u8c61(\u6216\u8005\uff0c\u5728\u51fa\u73b0\u9519\u8bef\u65f6\uff0c\u629b\u51fa\u5f02\u5e38)\u3002","title":"\u72b6\u6001\u7801"},{"location":"controllers/#_7","text":"\u8981\u6307\u5b9a\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 @Header() \u88c5\u9970\u5668\u6216\u7279\u5b9a\u4e8e\u5e93\u7684\u54cd\u5e94\u5bf9\u8c61(\u5e76\u76f4\u63a5\u8c03\u7528 res.header() )\u3002 @Post () @Header ( 'Cache-Control' , 'none' ) create () { return 'This action adds a new cat' ; } info Hint \u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165 Header \u3002","title":"\u5934\u90e8"},{"location":"controllers/#_8","text":"\u8981\u5c06\u54cd\u5e94\u91cd\u5b9a\u5411\u5230\u7279\u5b9a\u7684 URL\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 @Redirect() \u88c5\u9970\u5668\u6216\u5e93\u7279\u5b9a\u7684\u54cd\u5e94\u5bf9\u8c61(\u5e76\u76f4\u63a5\u8c03\u7528 res.redirect() )\u3002 @Redirect() \u6709\u4e24\u4e2a\u53c2\u6570\uff0c url \u548c statusCode \uff0c\u90fd\u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u7701\u7565\uff0c statusCode \u7684\u9ed8\u8ba4\u503c\u662f 302 ( Found )\u3002 @Get () @Redirect ( 'https://nestjs.com' , 301 ) \u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u52a8\u6001\u5730\u786e\u5b9a HTTP \u72b6\u6001\u4ee3\u7801\u6216\u91cd\u5b9a\u5411 URL\u3002 \u901a\u8fc7\u4ece\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u5f62\u72b6\u7684\u5bf9\u8c61\u6765\u5b9e\u73b0: { \"url\" : s tr i n g , \"statusCode\" : nu mber } \u8fd4\u56de\u503c\u5c06\u8986\u76d6\u4f20\u9012\u7ed9 @Redirect() \u88c5\u9970\u5668\u7684\u4efb\u4f55\u53c2\u6570\u3002 \u4f8b\u5982: @Get ( 'docs' ) @Redirect ( 'https://docs.nestjs.com' , 302 ) getDocs ( @Query ( 'version' ) version ) { if ( version && version === '5' ) { return { url : 'https://docs.nestjs.com/v5/' }; } }","title":"\u91cd\u5b9a\u5411"},{"location":"controllers/#_9","text":"\u5f53\u4f60\u9700\u8981\u63a5\u53d7\u52a8\u6001\u6570\u636e\u4f5c\u4e3a\u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u65f6(\u4f8b\u5982\uff0c GET /cats/1 \u6765\u83b7\u53d6 id \u4e3a 1 \u7684\u732b)\uff0c\u9759\u6001\u8def\u5f84\u7684\u8def\u7531\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002 \u4e3a\u4e86\u5b9a\u4e49\u5e26\u6709\u53c2\u6570\u7684\u8def\u7531\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8def\u7531\u8def\u5f84\u4e2d\u6dfb\u52a0\u8def\u7531\u53c2\u6570\u4ee4\u724c\uff0c\u4ee5\u6355\u83b7\u8bf7\u6c42 URL \u4e2d\u90a3\u4e2a\u4f4d\u7f6e\u7684\u52a8\u6001\u503c\u3002 \u4e0b\u9762\u7684 @Get() \u88c5\u9970\u5668\u793a\u4f8b\u4e2d\u7684\u8def\u7531\u53c2\u6570\u4ee4\u724c\u6f14\u793a\u4e86\u8fd9\u79cd\u7528\u6cd5\u3002 \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u8def\u7531\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528 @Param() \u88c5\u9970\u5668\u6765\u8bbf\u95ee\uff0c\u5b83\u5e94\u8be5\u88ab\u6dfb\u52a0\u5230\u65b9\u6cd5\u7b7e\u540d\u4e2d\u3002 @ @filename () @Get ( ':id' ) findOne ( @Param () params ) : string { console . log ( params . id ); return `This action returns a # ${ params . id } cat` ; } @ @switch @Get ( ':id' ) @Bind ( Param ()) findOne ( params ) { console . log ( params . id ); return `This action returns a # ${ params . id } cat` ; } @Param() \u88ab\u7528\u6765\u4fee\u9970\u4e00\u4e2a\u65b9\u6cd5\u53c2\u6570(\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f params )\uff0c\u5e76\u4f7f route \u53c2\u6570\u4f5c\u4e3a\u4fee\u9970\u540e\u7684\u65b9\u6cd5\u53c2\u6570\u7684\u5c5e\u6027\u5728\u65b9\u6cd5\u4f53\u4e2d\u53ef\u7528\u3002 \u6b63\u5982\u4e0a\u9762\u7684\u4ee3\u7801\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528 params.id \u6765\u8bbf\u95ee id \u53c2\u6570\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7279\u5b9a\u7684\u53c2\u6570\u6807\u8bb0\u4f20\u9012\u7ed9\u88c5\u9970\u5668\uff0c\u7136\u540e\u5728\u65b9\u6cd5\u4f53\u4e2d\u76f4\u63a5\u901a\u8fc7\u540d\u79f0\u5f15\u7528\u8def\u7531\u53c2\u6570\u3002 info Hint \u4ece @nestjs/common \u5305\u5bfc\u5165 Param \u3002 @ @filename () @Get ( ':id' ) findOne ( @Param ( 'id' ) id : string ) : string { return `This action returns a # ${ id } cat` ; } @ @switch @Get ( ':id' ) @Bind ( Param ( 'id' )) findOne ( id ) { return `This action returns a # ${ id } cat` ; }","title":"\u8def\u7531\u53c2\u6570"},{"location":"controllers/#_10","text":"@Controller \u88c5\u9970\u5668\u53ef\u4ee5\u63a5\u53d7 host \u9009\u9879\uff0c\u8981\u6c42\u4f20\u5165\u8bf7\u6c42\u7684 HTTP \u4e3b\u673a\u5339\u914d\u7279\u5b9a\u7684\u503c\u3002 @Controller ({ host : 'admin.example.com' }) export class AdminController { @Get () index () : string { return 'Admin page' ; } } Warning \u7531\u4e8e fasttify \u7f3a\u4e4f\u5bf9\u5d4c\u5957\u8def\u7531\u5668\u7684\u652f\u6301\uff0c\u6240\u4ee5\u5728\u4f7f\u7528\u5b50\u57df\u8def\u7531\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528(\u9ed8\u8ba4\u7684)Express \u9002\u914d\u5668\u3002 \u4e0e\u8def\u7531 path \u7c7b\u4f3c\uff0c hosts \u9009\u9879\u53ef\u4ee5\u4f7f\u7528\u4ee4\u724c\u6765\u6355\u83b7\u4e3b\u673a\u540d\u4e2d\u8be5\u4f4d\u7f6e\u7684\u52a8\u6001\u503c\u3002 \u4e0b\u9762\u7684 @Controller() \u88c5\u9970\u5668\u793a\u4f8b\u4e2d\u7684\u4e3b\u673a\u53c2\u6570\u4ee4\u724c\u6f14\u793a\u4e86\u8fd9\u79cd\u7528\u6cd5\u3002 \u4ee5\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u4e3b\u673a\u53c2\u6570\u53ef\u4ee5\u4f7f\u7528 @HostParam() \u88c5\u9970\u5668\u8bbf\u95ee\uff0c\u8be5\u88c5\u9970\u5668\u5e94\u8be5\u6dfb\u52a0\u5230\u65b9\u6cd5\u7b7e\u540d\u4e2d\u3002 @Controller ({ host : ':account.example.com' }) export class AccountController { @Get () getInfo ( @HostParam ( 'account' ) account : string ) { return account ; } }","title":"\u5b50\u57df\u8def\u7531"},{"location":"controllers/#_11","text":"\u5bf9\u4e8e\u5177\u6709\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u53d1\u73b0\uff0c\u5728 Nest \u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u662f\u5171\u4eab\u7684\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u5230\u6570\u636e\u5e93\u7684\u8fde\u63a5\u6c60\uff0c\u6709\u5168\u5c40\u72b6\u6001\u7684\u5355\u4f8b\u670d\u52a1\uff0c\u7b49\u7b49\u3002 \u8bb0\u4f4f Node.js \u5e76\u4e0d\u9075\u5faa\u8bf7\u6c42/\u54cd\u5e94\u591a\u7ebf\u7a0b\u65e0\u72b6\u6001\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u7531\u5355\u72ec\u7684\u7ebf\u7a0b\u5904\u7406\u3002 \u56e0\u6b64\uff0c\u4f7f\u7528\u5355\u4f8b\u5b9e\u4f8b\u5bf9\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5b8c\u5168\u5b89\u5168\u7684\u3002 \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u8fb9\u7f18\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u8bf7\u6c42\u7684\u63a7\u5236\u5668\u751f\u547d\u5468\u671f\u53ef\u80fd\u662f\u7406\u60f3\u7684\u884c\u4e3a\uff0c\u4f8b\u5982 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7f13\u5b58\u3001\u8bf7\u6c42\u8ddf\u8e2a\u6216\u591a\u79df\u6237\u3002 \u5b66\u4e60\u5982\u4f55\u63a7\u5236\u4f5c\u7528\u57df \u5728\u8fd9\u91cc \u3002","title":"\u8303\u56f4"},{"location":"controllers/#_12","text":"\u6211\u4eec\u559c\u6b22\u73b0\u4ee3 JavaScript\uff0c\u6211\u4eec\u77e5\u9053\u6570\u636e\u63d0\u53d6\u5927\u90e8\u5206\u662f\u5f02\u6b65\u7684\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 Nest \u652f\u6301 \u5f02\u6b65 \u51fd\u6570\u5e76\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002 info Hint \u4e86\u89e3\u6709\u5173 async/await \u7279\u6027\u7684\u66f4\u591a\u4fe1\u606f \u5728\u8fd9\u91cc \u6bcf\u4e2a\u5f02\u6b65\u51fd\u6570\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a Promise \u3002 \u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u9012\u5ef6\u503c\uff0c\u800c Nest \u5c06\u80fd\u591f\u81ea\u884c\u89e3\u6790\u8be5\u503c\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50: @ @filename ( cats . controller ) @Get () async findAll () : Promise < any [] > { return []; } @ @switch @Get () async findAll () { return []; } \u4ee5\u4e0a\u4ee3\u7801\u662f\u5b8c\u5168\u6709\u6548\u7684\u3002 \u6b64\u5916\uff0cNest \u7684\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u66f4\u5f3a\u5927\uff0c\u56e0\u4e3a\u5b83\u80fd\u591f\u8fd4\u56de RxJS \u53ef\u89c2\u5bdf\u6d41 \u3002 Nest \u5c06\u81ea\u52a8\u8ba2\u9605\u4e0b\u9762\u7684\u6e90\u5e76\u83b7\u53d6\u6700\u540e\u53d1\u51fa\u7684\u503c(\u4e00\u65e6\u6d41\u5b8c\u6210)\u3002 @ @filename ( cats . controller ) @Get () findAll () : Observable < any [] > { return of ([]); } @ @switch @Get () findAll () { return of ([]); } \u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5de5\u4f5c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u9002\u5408\u60a8\u9700\u6c42\u7684\u65b9\u6cd5\u3002","title":"\u5f02\u6b65\u6027"},{"location":"controllers/#_13","text":"\u6211\u4eec\u524d\u9762\u7684 POST \u8def\u7531\u5904\u7406\u7a0b\u5e8f\u793a\u4f8b\u4e0d\u63a5\u53d7\u4efb\u4f55\u5ba2\u6237\u7aef\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u5728\u8fd9\u91cc\u6dfb\u52a0 @Body() \u88c5\u9970\u5668\u6765\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f46\u9996\u5148(\u5982\u679c\u4f60\u4f7f\u7528 TypeScript)\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a DTO (\u6570\u636e\u4f20\u8f93\u5bf9\u8c61)\u6a21\u5f0f\u3002 DTO \u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5b9a\u4e49\u5982\u4f55\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 TypeScript \u63a5\u53e3\u6216\u7b80\u5355\u7684\u7c7b\u6765\u786e\u5b9a DTO \u6a21\u5f0f\u3002 \u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u8fd9\u91cc\u4f7f\u7528 \u7c7b \u3002 \u4e3a\u4ec0\u4e48?\u7c7b\u662f JavaScript ES6 \u6807\u51c6\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u5728\u7f16\u8bd1\u540e\u7684 JavaScript \u4e2d\u88ab\u4fdd\u7559\u4e3a\u771f\u5b9e\u7684\u5b9e\u4f53\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u7531\u4e8e TypeScript \u63a5\u53e3\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u88ab\u79fb\u9664\uff0c\u6240\u4ee5 Nest \u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u5f15\u7528\u5b83\u4eec\u3002 \u8fd9\u662f\u5f88\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u50cf Pipes \u8fd9\u6837\u7684\u529f\u80fd\u5728\u8fd0\u884c\u65f6\u8bbf\u95ee\u53d8\u91cf\u7684\u5143\u7c7b\u578b\u65f6\uff0c\u53ef\u4ee5\u63d0\u4f9b\u989d\u5916\u7684\u53ef\u80fd\u6027\u3002 \u8ba9\u6211\u4eec\u521b\u5efa CreateCatDto \u7c7b: @ @filename ( create - cat . dto ) export class CreateCatDto { name : string ; age : number ; breed : string ; } \u5b83\u53ea\u6709\u4e09\u79cd\u57fa\u672c\u6027\u8d28\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 CatsController \u4e2d\u4f7f\u7528\u65b0\u521b\u5efa\u7684 DTO: @ @filename ( cats . controller ) @Post () async create ( @Body () createCatDto : CreateCatDto ) { return 'This action adds a new cat' ; } @ @switch @Post () @Bind ( Body ()) async create ( createCatDto ) { return 'This action adds a new cat' ; } info Hint \u6211\u4eec\u7684 ValidationPipe \u53ef\u4ee5\u8fc7\u6ee4\u6389\u4e0d\u5e94\u8be5\u88ab\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u63a5\u6536\u7684\u5c5e\u6027\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u53ef\u63a5\u53d7\u7684\u5c5e\u6027\u5217\u5165\u767d\u540d\u5355\uff0c\u4efb\u4f55\u4e0d\u5305\u62ec\u5728\u767d\u540d\u5355\u4e2d\u7684\u5c5e\u6027\u5c06\u81ea\u52a8\u4ece\u7ed3\u679c\u5bf9\u8c61\u4e2d\u5220\u9664\u3002 \u5728 CreateCatDto \u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u767d\u540d\u5355\u662f name \u3001 age \u548c breed \u5c5e\u6027\u3002 \u4e86\u89e3\u66f4\u591a \u8fd9\u91cc \u3002","title":"\u8bf7\u6c42\u7684\u6709\u6548\u8f7d\u8377"},{"location":"controllers/#_14","text":"\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u7ae0\u8282\u662f\u5173\u4e8e\u5904\u7406\u9519\u8bef(\u4f8b\u5982\uff0c\u5904\u7406\u5f02\u5e38)\u7684 \u8fd9\u91cc \u3002","title":"\u5904\u7406\u9519\u8bef"},{"location":"controllers/#_15","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u51e0\u79cd\u53ef\u7528\u88c5\u9970\u5668\u521b\u5efa\u57fa\u672c\u63a7\u5236\u5668\u7684\u793a\u4f8b\u3002 \u8fd9\u4e2a\u63a7\u5236\u5668\u516c\u5f00\u4e86\u4e24\u4e2a\u65b9\u6cd5\u6765\u8bbf\u95ee\u548c\u64cd\u4f5c\u5185\u90e8\u6570\u636e\u3002 @ @filename ( cats . controller ) import { Controller , Get , Query , Post , Body , Put , Param , Delete } from '@nestjs/common' ; import { CreateCatDto , UpdateCatDto , ListAllEntities } from './dto' ; @Controller ( 'cats' ) export class CatsController { @Post () create ( @Body () createCatDto : CreateCatDto ) { return 'This action adds a new cat' ; } @Get () findAll ( @Query () query : ListAllEntities ) { return `This action returns all cats (limit: ${ query . limit } items)` ; } @Get ( ':id' ) findOne ( @Param ( 'id' ) id : string ) { return `This action returns a # ${ id } cat` ; } @Put ( ':id' ) update ( @Param ( 'id' ) id : string , @Body () updateCatDto : UpdateCatDto ) { return `This action updates a # ${ id } cat` ; } @Delete ( ':id' ) remove ( @Param ( 'id' ) id : string ) { return `This action removes a # ${ id } cat` ; } } @ @switch import { Controller , Get , Query , Post , Body , Put , Param , Delete , Bind } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Post () @Bind ( Body ()) create ( createCatDto ) { return 'This action adds a new cat' ; } @Get () @Bind ( Query ()) findAll ( query ) { console . log ( query ); return `This action returns all cats (limit: ${ query . limit } items)` ; } @Get ( ':id' ) @Bind ( Param ( 'id' )) findOne ( id ) { return `This action returns a # ${ id } cat` ; } @Put ( ':id' ) @Bind ( Param ( 'id' ), Body ()) update ( id , updateCatDto ) { return `This action updates a # ${ id } cat` ; } @Delete ( ':id' ) @Bind ( Param ( 'id' )) remove ( id ) { return `This action removes a # ${ id } cat` ; } } info Hint Nest CLI \u63d0\u4f9b\u4e86\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u6240\u6709\u6837\u677f\u4ee3\u7801\u7684\u751f\u6210\u5668(\u539f\u7406\u56fe)\uff0c\u4ee5\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u505a\u6240\u6709\u8fd9\u4e9b\uff0c\u5e76\u4f7f\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u66f4\u7b80\u5355\u3002 \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u7279\u6027 \u8fd9\u91cc \u3002","title":"\u5b8c\u6574\u7684\u8d44\u6e90\u793a\u4f8b"},{"location":"controllers/#_16","text":"\u4e0a\u9762\u7684\u63a7\u5236\u5668\u5b8c\u5168\u5b9a\u4e49\u540e\uff0cNest \u4ecd\u7136\u4e0d\u77e5\u9053 CatsController \u5b58\u5728\uff0c\u56e0\u6b64\u4e0d\u4f1a\u521b\u5efa\u8be5\u7c7b\u7684\u5b9e\u4f8b\u3002 \u63a7\u5236\u5668\u603b\u662f\u5c5e\u4e8e\u4e00\u4e2a\u6a21\u5757\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728 @Module() \u88c5\u9970\u5668\u4e2d\u5305\u542b Controllers \u6570\u7ec4\u3002 \u56e0\u4e3a\u9664\u4e86\u6839\u6a21\u5757 AppModule\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u5176\u4ed6\u6a21\u5757\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u6765\u5f15\u5165 CatsController : @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats/cats.controller' ; @Module ({ controllers : [ CatsController ], }) export class AppModule {} \u6211\u4eec\u4f7f\u7528 @Module() \u88c5\u9970\u5668\u5c06\u5143\u6570\u636e\u9644\u52a0\u5230\u6a21\u5757\u7c7b\u4e2d\uff0c\u73b0\u5728 Nest \u53ef\u4ee5\u8f7b\u677e\u5730\u53cd\u6620\u5fc5\u987b\u5b89\u88c5\u54ea\u4e9b\u63a7\u5236\u5668\u3002","title":"\u542f\u52a8\u548c\u8fd0\u884c"},{"location":"controllers/#_17","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u64cd\u7eb5\u54cd\u5e94\u7684 Nest \u6807\u51c6\u65b9\u6cd5\u3002 \u64cd\u7eb5\u54cd\u5e94\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e93\u7684 response object \u3002 \u4e3a\u4e86\u6ce8\u5165\u4e00\u4e2a\u7279\u5b9a\u7684\u54cd\u5e94\u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 @Res() \u88c5\u9970\u5668\u3002 \u4e3a\u4e86\u663e\u793a\u5dee\u5f02\uff0c\u8ba9\u6211\u4eec\u91cd\u5199 CatsController \u5982\u4e0b: @ @filename () import { Controller , Get , Post , Res , HttpStatus } from '@nestjs/common' ; import { Response } from 'express' ; @Controller ( 'cats' ) export class CatsController { @Post () create ( @Res () res : Response ) { res . status ( HttpStatus . CREATED ). send (); } @Get () findAll ( @Res () res : Response ) { res . status ( HttpStatus . OK ). json ([]); } } @ @switch import { Controller , Get , Post , Bind , Res , Body , HttpStatus } from '@nestjs/common' ; @Controller ( 'cats' ) export class CatsController { @Post () @Bind ( Res (), Body ()) create ( res , createCatDto ) { res . status ( HttpStatus . CREATED ). send (); } @Get () @Bind ( Res ()) findAll ( res ) { res . status ( HttpStatus . OK ). json ([]); } } \u867d\u7136\u8fd9\u79cd\u65b9\u6cd5\u662f\u53ef\u884c\u7684\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u901a\u8fc7\u63d0\u4f9b\u5bf9\u54cd\u5e94\u5bf9\u8c61\u7684\u5b8c\u5168\u63a7\u5236(\u5934\u4fe1\u606f\u5904\u7406\u3001\u7279\u5b9a\u4e8e\u5e93\u7684\u7279\u6027\u7b49)\u5728\u67d0\u4e9b\u65b9\u9762\u5141\u8bb8\u4e86\u66f4\u5927\u7684\u7075\u6d3b\u6027\uff0c\u4f46\u5e94\u8be5\u8c28\u614e\u4f7f\u7528\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u592a\u6e05\u6670\uff0c\u786e\u5b9e\u6709\u4e00\u4e9b\u7f3a\u70b9\u3002 \u4e3b\u8981\u7f3a\u70b9\u662f\u60a8\u7684\u4ee3\u7801\u53d8\u5f97\u4f9d\u8d56\u4e8e\u5e73\u53f0(\u56e0\u4e3a\u5e95\u5c42\u5e93\u5728\u54cd\u5e94\u5bf9\u8c61\u4e0a\u53ef\u80fd\u6709\u4e0d\u540c\u7684 api)\uff0c\u5e76\u4e14\u66f4\u96be\u6d4b\u8bd5(\u60a8\u5c06\u4e0d\u5f97\u4e0d\u6a21\u62df\u54cd\u5e94\u5bf9\u8c61\uff0c\u7b49\u7b49)\u3002 \u6b64\u5916\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4f60\u5931\u53bb\u4e86\u4e0e\u4f9d\u8d56\u4e8e Nest \u6807\u51c6\u54cd\u5e94\u5904\u7406\u7684 Nest \u7279\u6027\u7684\u517c\u5bb9\u6027\uff0c\u4f8b\u5982\u62e6\u622a\u5668\u548c @HttpCode() / @Header() \u88c5\u9970\u5668\u3002 \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5c06 passthrough \u9009\u9879\u8bbe\u7f6e\u4e3a true \uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @Get () findAll ( @Res ({ passthrough : true }) res : Response ) { res . status ( HttpStatus . OK ); return []; } @ @switch @Get () @Bind ( Res ({ passthrough : true })) findAll ( res ) { res . status ( HttpStatus . OK ); return []; } \u73b0\u5728\u60a8\u53ef\u4ee5\u4e0e\u672c\u673a\u54cd\u5e94\u5bf9\u8c61\u4ea4\u4e92(\u4f8b\u5982\uff0c\u6839\u636e\u7279\u5b9a\u6761\u4ef6\u8bbe\u7f6e cookie \u6216 header)\uff0c\u4f46\u5c06\u5176\u4f59\u5de5\u4f5c\u7559\u7ed9\u6846\u67b6\u3002","title":"\u7279\u6709\u7684\u65b9\u6cd5"},{"location":"custom-decorators/","text":"\u81ea\u5b9a\u4e49\u8def\u7531\u4fee\u9970\u7b26 \u00b6 Nest is built around a language feature called decorators . Decorators are a well-known concept in a lot of commonly used programming languages, but in the JavaScript world, they're still relatively new. In order to better understand how decorators work, we recommend reading this article . Here's a simple definition: An ES2016 decorator is an expression which returns a function and can take a target, name and property descriptor as arguments. You apply it by prefixing the decorator with an @ character and placing this at the very top of what you are trying to decorate. Decorators can be defined for either a class, a method or a property. Param \u4fee\u9970\u7b26 \u00b6 Nest provides a set of useful param decorators that you can use together with the HTTP route handlers. Below is a list of the provided decorators and the plain Express (or Fastify) objects they represent @Request(), @Req() req @Response(), @Res() res @Next() next @Session() req.session @Param(param?: string) req.params / req.params[param] @Body(param?: string) req.body / req.body[param] @Query(param?: string) req.query / req.query[param] @Headers(param?: string) req.headers / req.headers[param] @Ip() req.ip @HostParam() req.hosts Additionally, you can create your own custom decorators . Why is this useful? In the node.js world, it's common practice to attach properties to the request object. Then you manually extract them in each route handler, using code like the following: const user = req . user ; In order to make your code more readable and transparent, you can create a @User() decorator and reuse it across all of your controllers. @ @filename ( user . decorator ) import { createParamDecorator , ExecutionContext } from '@nestjs/common' ; export const User = createParamDecorator ( ( data : unknown , ctx : ExecutionContext ) => { const request = ctx . switchToHttp (). getRequest (); return request . user ; }, ); Then, you can simply use it wherever it fits your requirements. @ @filename () @Get () async findOne ( @User () user : UserEntity ) { console . log ( user ); } @ @switch @Get () @Bind ( User ()) async findOne ( user ) { console . log ( user ); } \u4f20\u9012\u6570\u636e \u00b6 When the behavior of your decorator depends on some conditions, you can use the data parameter to pass an argument to the decorator's factory function. One use case for this is a custom decorator that extracts properties from the request object by key. Let's assume, for example, that our authentication layer validates requests and attaches a user entity to the request object. The user entity for an authenticated request might look like: { \"id\" : 101 , \"firstName\" : \"Alan\" , \"lastName\" : \"Turing\" , \"email\" : \"alan@email.com\" , \"roles\" : [ \"admin\" ] } Let's define a decorator that takes a property name as key, and returns the associated value if it exists (or undefined if it doesn't exist, or if the user object has not been created). @ @filename ( user . decorator ) import { createParamDecorator , ExecutionContext } from '@nestjs/common' ; export const User = createParamDecorator ( ( data : string , ctx : ExecutionContext ) => { const request = ctx . switchToHttp (). getRequest (); const user = request . user ; return data ? user ? .[ data ] : user ; }, ); @ @switch import { createParamDecorator } from '@nestjs/common' ; export const User = createParamDecorator (( data , ctx ) => { const request = ctx . switchToHttp (). getRequest (); const user = request . user ; return data ? user && user [ data ] : user ; }); Here's how you could then access a particular property via the @User() decorator in the controller: @ @filename () @Get () async findOne ( @User ( 'firstName' ) firstName : string ) { console . log ( `Hello ${ firstName } ` ); } @ @switch @Get () @Bind ( User ( 'firstName' )) async findOne ( firstName ) { console . log ( `Hello ${ firstName } ` ); } You can use this same decorator with different keys to access different properties. If the user object is deep or complex, this can make for easier and more readable request handler implementations. info Hint For TypeScript users, note that createParamDecorator<T>() is a generic. This means you can explicitly enforce type safety, for example createParamDecorator<string>((data, ctx) => ...) . Alternatively, specify a parameter type in the factory function, for example createParamDecorator((data: string, ctx) => ...) . If you omit both, the type for data will be any . \u4f7f\u7528\u7ba1\u9053 \u00b6 Nest treats custom param decorators in the same fashion as the built-in ones ( @Body() , @Param() and @Query() ). This means that pipes are executed for the custom annotated parameters as well (in our examples, the user argument). Moreover, you can apply the pipe directly to the custom decorator: @ @filename () @Get () async findOne ( @User ( new ValidationPipe ({ validateCustomDecorators : true })) user : UserEntity , ) { console . log ( user ); } @ @switch @Get () @Bind ( User ( new ValidationPipe ({ validateCustomDecorators : true }))) async findOne ( user ) { console . log ( user ); } info Hint Note that validateCustomDecorators option must be set to true. ValidationPipe does not validate arguments annotated with the custom decorators by default. \u4fee\u9970\u7b26\u7ec4\u6210 \u00b6 Nest provides a helper method to compose multiple decorators. For example, suppose you want to combine all decorators related to authentication into a single decorator. This could be done with the following construction: @ @filename ( auth . decorator ) import { applyDecorators } from '@nestjs/common' ; export function Auth ( ...roles : Role []) { return applyDecorators ( SetMetadata ( 'roles' , roles ), UseGuards ( AuthGuard , RolesGuard ), ApiBearerAuth (), ApiUnauthorizedResponse ({ description : 'Unauthorized' }), ); } @ @switch import { applyDecorators } from '@nestjs/common' ; export function Auth (... roles ) { return applyDecorators ( SetMetadata ( 'roles' , roles ), UseGuards ( AuthGuard , RolesGuard ), ApiBearerAuth (), ApiUnauthorizedResponse ({ description : 'Unauthorized' }), ); } You can then use this custom @Auth() decorator as follows: @Get ( 'users' ) @Auth ( 'admin' ) findAllUsers () {} This has the effect of applying all four decorators with a single declaration. warning Warning The @ApiHideProperty() decorator from the @nestjs/swagger package is not composable and won't work properly with the applyDecorators function.","title":"\u81ea\u5b9a\u4e49\u4fee\u9970\u7b26"},{"location":"custom-decorators/#_1","text":"Nest is built around a language feature called decorators . Decorators are a well-known concept in a lot of commonly used programming languages, but in the JavaScript world, they're still relatively new. In order to better understand how decorators work, we recommend reading this article . Here's a simple definition: An ES2016 decorator is an expression which returns a function and can take a target, name and property descriptor as arguments. You apply it by prefixing the decorator with an @ character and placing this at the very top of what you are trying to decorate. Decorators can be defined for either a class, a method or a property.","title":"\u81ea\u5b9a\u4e49\u8def\u7531\u4fee\u9970\u7b26"},{"location":"custom-decorators/#param","text":"Nest provides a set of useful param decorators that you can use together with the HTTP route handlers. Below is a list of the provided decorators and the plain Express (or Fastify) objects they represent @Request(), @Req() req @Response(), @Res() res @Next() next @Session() req.session @Param(param?: string) req.params / req.params[param] @Body(param?: string) req.body / req.body[param] @Query(param?: string) req.query / req.query[param] @Headers(param?: string) req.headers / req.headers[param] @Ip() req.ip @HostParam() req.hosts Additionally, you can create your own custom decorators . Why is this useful? In the node.js world, it's common practice to attach properties to the request object. Then you manually extract them in each route handler, using code like the following: const user = req . user ; In order to make your code more readable and transparent, you can create a @User() decorator and reuse it across all of your controllers. @ @filename ( user . decorator ) import { createParamDecorator , ExecutionContext } from '@nestjs/common' ; export const User = createParamDecorator ( ( data : unknown , ctx : ExecutionContext ) => { const request = ctx . switchToHttp (). getRequest (); return request . user ; }, ); Then, you can simply use it wherever it fits your requirements. @ @filename () @Get () async findOne ( @User () user : UserEntity ) { console . log ( user ); } @ @switch @Get () @Bind ( User ()) async findOne ( user ) { console . log ( user ); }","title":"Param \u4fee\u9970\u7b26"},{"location":"custom-decorators/#_2","text":"When the behavior of your decorator depends on some conditions, you can use the data parameter to pass an argument to the decorator's factory function. One use case for this is a custom decorator that extracts properties from the request object by key. Let's assume, for example, that our authentication layer validates requests and attaches a user entity to the request object. The user entity for an authenticated request might look like: { \"id\" : 101 , \"firstName\" : \"Alan\" , \"lastName\" : \"Turing\" , \"email\" : \"alan@email.com\" , \"roles\" : [ \"admin\" ] } Let's define a decorator that takes a property name as key, and returns the associated value if it exists (or undefined if it doesn't exist, or if the user object has not been created). @ @filename ( user . decorator ) import { createParamDecorator , ExecutionContext } from '@nestjs/common' ; export const User = createParamDecorator ( ( data : string , ctx : ExecutionContext ) => { const request = ctx . switchToHttp (). getRequest (); const user = request . user ; return data ? user ? .[ data ] : user ; }, ); @ @switch import { createParamDecorator } from '@nestjs/common' ; export const User = createParamDecorator (( data , ctx ) => { const request = ctx . switchToHttp (). getRequest (); const user = request . user ; return data ? user && user [ data ] : user ; }); Here's how you could then access a particular property via the @User() decorator in the controller: @ @filename () @Get () async findOne ( @User ( 'firstName' ) firstName : string ) { console . log ( `Hello ${ firstName } ` ); } @ @switch @Get () @Bind ( User ( 'firstName' )) async findOne ( firstName ) { console . log ( `Hello ${ firstName } ` ); } You can use this same decorator with different keys to access different properties. If the user object is deep or complex, this can make for easier and more readable request handler implementations. info Hint For TypeScript users, note that createParamDecorator<T>() is a generic. This means you can explicitly enforce type safety, for example createParamDecorator<string>((data, ctx) => ...) . Alternatively, specify a parameter type in the factory function, for example createParamDecorator((data: string, ctx) => ...) . If you omit both, the type for data will be any .","title":"\u4f20\u9012\u6570\u636e"},{"location":"custom-decorators/#_3","text":"Nest treats custom param decorators in the same fashion as the built-in ones ( @Body() , @Param() and @Query() ). This means that pipes are executed for the custom annotated parameters as well (in our examples, the user argument). Moreover, you can apply the pipe directly to the custom decorator: @ @filename () @Get () async findOne ( @User ( new ValidationPipe ({ validateCustomDecorators : true })) user : UserEntity , ) { console . log ( user ); } @ @switch @Get () @Bind ( User ( new ValidationPipe ({ validateCustomDecorators : true }))) async findOne ( user ) { console . log ( user ); } info Hint Note that validateCustomDecorators option must be set to true. ValidationPipe does not validate arguments annotated with the custom decorators by default.","title":"\u4f7f\u7528\u7ba1\u9053"},{"location":"custom-decorators/#_4","text":"Nest provides a helper method to compose multiple decorators. For example, suppose you want to combine all decorators related to authentication into a single decorator. This could be done with the following construction: @ @filename ( auth . decorator ) import { applyDecorators } from '@nestjs/common' ; export function Auth ( ...roles : Role []) { return applyDecorators ( SetMetadata ( 'roles' , roles ), UseGuards ( AuthGuard , RolesGuard ), ApiBearerAuth (), ApiUnauthorizedResponse ({ description : 'Unauthorized' }), ); } @ @switch import { applyDecorators } from '@nestjs/common' ; export function Auth (... roles ) { return applyDecorators ( SetMetadata ( 'roles' , roles ), UseGuards ( AuthGuard , RolesGuard ), ApiBearerAuth (), ApiUnauthorizedResponse ({ description : 'Unauthorized' }), ); } You can then use this custom @Auth() decorator as follows: @Get ( 'users' ) @Auth ( 'admin' ) findAllUsers () {} This has the effect of applying all four decorators with a single declaration. warning Warning The @ApiHideProperty() decorator from the @nestjs/swagger package is not composable and won't work properly with the applyDecorators function.","title":"\u4fee\u9970\u7b26\u7ec4\u6210"},{"location":"enterprise/","text":"Official NestJS Consulting \u00b6 Our goal is to ensure that your developers are successful and productive with NestJS as well as other modern technologies in today's ever-changing tech world. Official Support \u00b6 With official support, get expert help directly from the NestJS core team. We tackle your toughest challenges, and collaborate with your team on many levels such as: Providing technical guidance & architectural reviews Mentoring team members Advising best practices Solving design decisions Addressing security & performance concerns Performing in-depth code reviews Team Augmentation & Development With team augmentation, NestJS core team members can work directly with your team on a daily basis to help take your project to the next-level. Consider us \u201cpart of your team\u201d, tackling the most ambitious projects - right by your side. NestJS Best Practices Frequent code reviews can eliminate potentially hazardous bugs & issues at an early stage and help enforce best practices. Let us perform PR reviews & audits to ensure your code quality, performance, and security. First-hand access \u00b6 Direct communication channel will boost team velocity, giving a quick access to discuss and solve problems. NestJS Workshops and Trainings \u00b6 We provide solid kick-off training as well as more advanced ones that give teams an in-depth understanding of NestJS. We offer on-site workshops and remote intensive sessions which help get you up and running quickly within the NestJS ecosystem. Contact us! Let's talk how we can help you become successful with NestJS. CONTACT US Reach out to us at support@nestjs.com , and let\u2019s talk about your project & teams needs!","title":"\u4f01\u4e1a\u652f\u6301"},{"location":"enterprise/#official-nestjs-consulting","text":"Our goal is to ensure that your developers are successful and productive with NestJS as well as other modern technologies in today's ever-changing tech world.","title":"Official NestJS Consulting"},{"location":"enterprise/#official-support","text":"With official support, get expert help directly from the NestJS core team. We tackle your toughest challenges, and collaborate with your team on many levels such as: Providing technical guidance & architectural reviews Mentoring team members Advising best practices Solving design decisions Addressing security & performance concerns Performing in-depth code reviews","title":"Official Support"},{"location":"enterprise/#first-hand-access","text":"Direct communication channel will boost team velocity, giving a quick access to discuss and solve problems.","title":"First-hand access"},{"location":"enterprise/#nestjs-workshops-and-trainings","text":"We provide solid kick-off training as well as more advanced ones that give teams an in-depth understanding of NestJS. We offer on-site workshops and remote intensive sessions which help get you up and running quickly within the NestJS ecosystem.","title":"NestJS Workshops and Trainings"},{"location":"exception-filters/","text":"\u5f02\u5e38\u8fc7\u6ee4\u5668 \u00b6 Nest \u81ea\u5e26\u4e00\u4e2a\u5185\u7f6e\u7684 \u5f02\u5e38\u5c42 \uff0c\u8d1f\u8d23\u5904\u7406\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6240\u6709\u672a\u5904\u7406\u7684\u5f02\u5e38\u3002 \u5f53\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u6ca1\u6709\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u8be5\u5c42\u4f1a\u6355\u83b7\u5f02\u5e38\uff0c\u7136\u540e\u81ea\u52a8\u53d1\u9001\u9002\u5f53\u7684\u7528\u6237\u53cb\u597d\u54cd\u5e94\u3002 \u5f00\u7bb1\u5373\u7528\uff0c\u8fd9\u4e2a\u52a8\u4f5c\u662f\u7531\u5185\u7f6e\u7684 \u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668 \u6267\u884c\u7684\uff0c\u5b83\u5904\u7406\u7c7b\u578b\u4e3a HttpException \u7684\u5f02\u5e38(\u53ca\u5176\u5b50\u7c7b)\u3002 \u5f53\u4e00\u4e2a\u5f02\u5e38\u662f \u4e0d\u53ef\u8bc6\u522b\u7684 (\u65e2\u4e0d\u662f HttpException \uff0c\u4e5f\u4e0d\u662f\u7ee7\u627f\u81ea HttpException \u7684\u7c7b)\uff0c\u5185\u7f6e\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u751f\u6210\u4ee5\u4e0b\u9ed8\u8ba4 JSON \u54cd\u5e94: { \"statusCode\" : 500 , \"message\" : \"Internal server error\" } info Hint \u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668\u90e8\u5206\u652f\u6301 http-errors \u5e93\u3002 \u57fa\u672c\u4e0a\uff0c\u4efb\u4f55\u629b\u51fa\u7684\u5f02\u5e38\u5305\u542b statusCode \u548c message \u5c5e\u6027\u5c06\u88ab\u6b63\u786e\u586b\u5145\u5e76\u4f5c\u4e3a\u54cd\u5e94\u53d1\u9001\u56de(\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684 InternalServerErrorException \u5bf9\u4e8e\u672a\u8bc6\u522b\u7684\u5f02\u5e38)\u3002 \u629b\u51fa\u6807\u51c6\u5f02\u5e38 \u00b6 Nest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684 HttpException \u7c7b\uff0c\u4ece @nestjs/common \u5305\u4e2d\u516c\u5f00\u3002 \u5bf9\u4e8e\u5178\u578b\u7684\u57fa\u4e8e HTTP REST/GraphQL API \u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6700\u4f73\u5b9e\u8df5\u662f\u5728\u51fa\u73b0\u67d0\u4e9b\u9519\u8bef\u6761\u4ef6\u65f6\u53d1\u9001\u6807\u51c6 HTTP \u54cd\u5e94\u5bf9\u8c61\u3002 \u4f8b\u5982\uff0c\u5728 CatsController \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a findAll() \u65b9\u6cd5(\u4e00\u4e2a GET \u8def\u7531\u5904\u7406\u5668)\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u8fd9\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u629b\u51fa\u4e86\u4e00\u4e2a\u5f02\u5e38\u3002 \u4e3a\u4e86\u6f14\u793a\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u5176\u786c\u7f16\u7801\u5982\u4e0b: @ @filename ( cats . controller ) @Get () async findAll () { throw new HttpException ( 'Forbidden' , HttpStatus . FORBIDDEN ); } info Hint \u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528\u4e86 HttpStatus \u3002 \u8fd9\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684 helper enum \u3002 \u5f53\u5ba2\u6237\u7aef\u8c03\u7528\u8fd9\u4e2a\u7aef\u70b9\u65f6\uff0c\u54cd\u5e94\u770b\u8d77\u6765\u50cf\u8fd9\u6837: { \"statusCode\" : 403 , \"message\" : \"Forbidden\" } HttpException \u6784\u9020\u51fd\u6570\u6709\u4e24\u4e2a\u5fc5\u9700\u7684\u53c2\u6570\u6765\u51b3\u5b9a\u54cd\u5e94: \u53c2\u6570 response \u5b9a\u4e49\u4e86 JSON \u54cd\u5e94\u4f53\u3002\u5b83\u53ef\u4ee5\u662f \u5b57\u7b26\u4e32 \u6216 \u5bf9\u8c61 \uff0c\u5982\u4e0b\u6240\u8ff0\u3002 status \u53c2\u6570\u5b9a\u4e49\u4e86 HTTP \u72b6\u6001\u7801 . \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cJSON \u54cd\u5e94\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027: statusCode : \u9ed8\u8ba4\u4e3a status \u53c2\u6570\u4e2d\u63d0\u4f9b\u7684 HTTP \u72b6\u6001\u7801 message : \u57fa\u4e8e status \u7684 HTTP \u9519\u8bef\u7684\u7b80\u77ed\u63cf\u8ff0 \u8981\u8986\u76d6 JSON \u54cd\u5e94\u4f53\u7684\u6d88\u606f\u90e8\u5206\uff0c\u8bf7\u5728 response \u53c2\u6570\u4e2d\u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u8981\u8986\u76d6\u6574\u4e2a JSON \u54cd\u5e94\u4f53\uff0c\u5728 response \u53c2\u6570\u4e2d\u4f20\u9012\u4e00\u4e2a\u5bf9\u8c61\u3002 Nest \u5c06\u5e8f\u5217\u5316\u8be5\u5bf9\u8c61\u5e76\u5c06\u5176\u4f5c\u4e3a JSON \u54cd\u5e94\u4f53\u8fd4\u56de\u3002 \u7b2c\u4e8c\u4e2a\u6784\u9020\u51fd\u6570\u53c2\u6570 - status - \u5e94\u8be5\u662f\u4e00\u4e2a\u6709\u6548\u7684 HTTP \u72b6\u6001\u7801\u3002 \u6700\u4f73\u5b9e\u8df5\u662f\u4f7f\u7528\u4ece @nestjs/common \u4e2d\u5bfc\u5165\u7684 HttpStatus \u679a\u4e3e\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8986\u76d6\u6574\u4e2a\u54cd\u5e94\u4f53\u7684\u4f8b\u5b50: @ @filename ( cats . controller ) @Get () async findAll () { throw new HttpException ({ status : HttpStatus.FORBIDDEN , error : 'This is a custom message' , }, HttpStatus . FORBIDDEN ); } \u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u4e0b\u9762\u662f\u54cd\u5e94\u7684\u6837\u5b50: { \"status\" : 403 , \"error\" : \"This is a custom message\" } \u81ea\u5b9a\u4e49\u5f02\u5e38 \u00b6 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u9700\u8981\u7f16\u5199\u81ea\u5b9a\u4e49\u5f02\u5e38\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7684 Nest HTTP \u5f02\u5e38\uff0c\u5982\u4e0b\u4e00\u8282\u6240\u8ff0\u3002 \u5982\u679c\u4f60\u786e\u5b9e\u9700\u8981\u521b\u5efa\u81ea\u5b9a\u4e49\u5f02\u5e38\uff0c\u6700\u597d\u521b\u5efa\u4f60\u81ea\u5df1\u7684 \u5f02\u5e38\u5c42\u6b21 \u7ed3\u6784\uff0c\u5176\u4e2d\u4f60\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u7ee7\u627f\u81ea\u57fa\u7c7b HttpException \u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0cNest \u5c06\u8bc6\u522b\u51fa\u4f60\u7684\u5f02\u5e38\uff0c\u5e76\u81ea\u52a8\u5904\u7406\u9519\u8bef\u54cd\u5e94\u3002 \u8ba9\u6211\u4eec\u5b9e\u73b0\u8fd9\u6837\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5f02\u5e38: @ @filename ( forbidden . exception ) export class ForbiddenException extends HttpException { constructor () { super ( 'Forbidden' , HttpStatus . FORBIDDEN ); } } \u7531\u4e8e ForbiddenException \u6269\u5c55\u4e86\u57fa\u7840\u7684 HttpException \uff0c\u5b83\u5c06\u4e0e\u5185\u7f6e\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u65e0\u7f1d\u5730\u5de5\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728 findAll() \u65b9\u6cd5\u4e2d\u4f7f\u7528\u5b83\u3002 @ @filename ( cats . controller ) @Get () async findAll () { throw new ForbiddenException (); } \u5185\u7f6e\u7684 HTTP \u5f02\u5e38 \u00b6 Nest \u63d0\u4f9b\u4e86\u4e00\u7ec4\u4ece\u57fa\u672c\u7684 HttpException \u7ee7\u627f\u7684\u6807\u51c6\u5f02\u5e38\u3002 \u8fd9\u4e9b\u662f\u4ece @nestjs/common \u5305\u4e2d\u516c\u5f00\u7684\uff0c\u4ee3\u8868\u4e86\u8bb8\u591a\u6700\u5e38\u89c1\u7684 HTTP \u5f02\u5e38: BadRequestException UnauthorizedException NotFoundException ForbiddenException NotAcceptableException RequestTimeoutException ConflictException GoneException HttpVersionNotSupportedException PayloadTooLargeException UnsupportedMediaTypeException UnprocessableEntityException InternalServerErrorException NotImplementedException ImATeapotException MethodNotAllowedException BadGatewayException ServiceUnavailableException GatewayTimeoutException PreconditionFailedException \u5f02\u5e38\u8fc7\u6ee4\u5668 \u00b6 \u867d\u7136\u57fa\u672c\u7684(\u5185\u7f6e\u7684)\u5f02\u5e38\u8fc7\u6ee4\u5668\u53ef\u4ee5\u81ea\u52a8\u4e3a\u4f60\u5904\u7406\u8bb8\u591a\u60c5\u51b5\uff0c\u4f46\u4f60\u53ef\u80fd\u60f3\u8981\u5bf9\u5f02\u5e38\u5c42\u8fdb\u884c\u5b8c\u5168\u63a7\u5236\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u4e00\u4e9b\u52a8\u6001\u56e0\u7d20\u6dfb\u52a0\u65e5\u5fd7\u8bb0\u5f55\u6216\u4f7f\u7528\u4e0d\u540c\u7684 JSON \u6a21\u5f0f\u3002 \u5f02\u5e38\u8fc7\u6ee4\u5668 \u6b63\u662f\u4e3a\u6b64\u76ee\u7684\u800c\u8bbe\u8ba1\u7684\u3002 \u5b83\u4eec\u5141\u8bb8\u60a8\u63a7\u5236\u786e\u5207\u7684\u63a7\u5236\u6d41\u548c\u53d1\u9001\u56de\u5ba2\u6237\u673a\u7684\u54cd\u5e94\u7684\u5185\u5bb9\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u5b83\u8d1f\u8d23\u6355\u6349\u5f02\u5e38\uff0c\u8fd9\u4e9b\u5f02\u5e38\u662f HttpException \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u4e3a\u5b83\u4eec\u5b9e\u73b0\u5b9a\u5236\u7684\u54cd\u5e94\u903b\u8f91\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8bbf\u95ee\u5e95\u5c42\u5e73\u53f0\u7684 Request \u548c Response \u5bf9\u8c61\u3002 \u6211\u4eec\u5c06\u8bbf\u95ee Request \u5bf9\u8c61\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53d6\u51fa\u539f\u59cb\u7684 url \uff0c\u5e76\u5c06\u5176\u5305\u542b\u5728\u65e5\u5fd7\u4fe1\u606f\u4e2d\u3002 \u6211\u4eec\u5c06\u4f7f\u7528 Response \u5bf9\u8c61\u6765\u76f4\u63a5\u63a7\u5236\u53d1\u9001\u7684\u54cd\u5e94\uff0c\u4f7f\u7528 response.json() \u65b9\u6cd5\u3002 @ @filename ( http - exception . filter ) import { ExceptionFilter , Catch , ArgumentsHost , HttpException } from '@nestjs/common' ; import { Request , Response } from 'express' ; @Catch ( HttpException ) export class HttpExceptionFilter implements ExceptionFilter { catch ( exception : HttpException , host : ArgumentsHost ) { const ctx = host . switchToHttp (); const response = ctx . getResponse < Response > (); const request = ctx . getRequest < Request > (); const status = exception . getStatus (); response . status ( status ) . json ({ statusCode : status , timestamp : new Date (). toISOString (), path : request.url , }); } } @ @switch import { Catch , HttpException } from '@nestjs/common' ; @Catch ( HttpException ) export class HttpExceptionFilter { catch ( exception , host ) { const ctx = host . switchToHttp (); const response = ctx . getResponse (); const request = ctx . getRequest (); const status = exception . getStatus (); response . status ( status ) . json ({ statusCode : status , timestamp : new Date (). toISOString (), path : request.url , }); } } info Hint \u6240\u6709\u5f02\u5e38\u8fc7\u6ee4\u5668\u90fd\u5e94\u8be5\u5b9e\u73b0\u901a\u7528\u7684 ExceptionFilter<T> \u63a5\u53e3\u3002 \u8fd9\u9700\u8981\u4f60\u63d0\u4f9b\u5e26\u6709\u6307\u5b9a\u7b7e\u540d\u7684 catch(exception: T, host: ArgumentsHost) \u65b9\u6cd5\u3002 T \u8868\u793a\u5f02\u5e38\u7684\u7c7b\u578b\u3002 @Catch(HttpException) \u88c5\u9970\u5668\u5c06\u6240\u9700\u7684\u5143\u6570\u636e\u7ed1\u5b9a\u5230\u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u544a\u8bc9 Nest \u8fd9\u4e2a\u7279\u5b9a\u7684\u8fc7\u6ee4\u5668\u6b63\u5728\u5bfb\u627e HttpException \u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u7c7b\u578b\u7684\u5f02\u5e38\u3002 @Catch() \u88c5\u9970\u5668\u53ef\u4ee5\u63a5\u53d7\u5355\u4e2a\u53c2\u6570\uff0c\u6216\u8005\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\u3002 \u8fd9\u5141\u8bb8\u60a8\u4e00\u6b21\u4e3a\u51e0\u79cd\u7c7b\u578b\u7684\u5f02\u5e38\u8bbe\u7f6e\u8fc7\u6ee4\u5668\u3002 \u53c2\u6570\u4e3b\u673a \u00b6 \u8ba9\u6211\u4eec\u770b\u770b catch() \u65b9\u6cd5\u7684\u53c2\u6570\u3002 exception \u53c2\u6570\u662f\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u5f02\u5e38\u5bf9\u8c61\u3002 host \u53c2\u6570\u662f\u4e00\u4e2a ArgumentsHost \u5bf9\u8c61\u3002 ArgumentsHost \u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u5b9e\u7528\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u6211\u4eec\u5c06\u5728 \u6267\u884c\u4e0a\u4e0b\u6587\u7ae0\u8282 \u4e2d\u8fdb\u4e00\u6b65\u7814\u7a76\u5b83\u3002 \u5728\u8fd9\u4e2a\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b83\u6765\u83b7\u53d6\u5bf9\u4f20\u9012\u7ed9\u539f\u59cb\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u7684 Request \u548c Response \u5bf9\u8c61\u7684\u5f15\u7528(\u5728\u4ea7\u751f\u5f02\u5e38\u7684\u63a7\u5236\u5668\u4e2d)\u3002 \u5728\u8fd9\u4e2a\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 ArgumentsHost \u4e0a\u4f7f\u7528\u4e86\u4e00\u4e9b helper \u65b9\u6cd5\u6765\u83b7\u5f97\u6240\u9700\u7684 Request \u548c Response \u5bf9\u8c61\u3002 \u4e86\u89e3\u66f4\u591a\u5173\u4e8e ArgumentsHost \u7684\u4fe1\u606f \u5728\u8fd9\u91cc \u3002 \u8fd9\u4e2a\u62bd\u8c61\u7ea7\u522b\u7684\u539f\u56e0\u662f ArgumentsHost \u5728\u6240\u6709\u4e0a\u4e0b\u6587\u4e2d\u90fd\u6709\u4f5c\u7528(\u4f8b\u5982\uff0c\u6211\u4eec\u73b0\u5728\u5904\u7406\u7684 HTTP \u670d\u52a1\u5668\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd8\u6709\u5fae\u670d\u52a1\u548c WebSockets)\u3002 \u5728\u6267\u884c\u4e0a\u4e0b\u6587\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528 ArgumentsHost \u53ca\u5176\u8f85\u52a9\u51fd\u6570\u7684\u529f\u80fd\u8bbf\u95ee \u4efb\u610f \u6267\u884c\u4e0a\u4e0b\u6587\u7684\u76f8\u5e94\u7684 \u5e95\u5c42\u53c2\u6570 \u3002 \u8fd9\u5c06\u5141\u8bb8\u6211\u4eec\u7f16\u5199\u8de8\u6240\u6709\u4e0a\u4e0b\u6587\u64cd\u4f5c\u7684\u901a\u7528\u5f02\u5e38\u8fc7\u6ee4\u5668\u3002 \u7ed1\u5b9a\u7684\u8fc7\u6ee4\u5668 \u00b6 \u8ba9\u6211\u4eec\u628a\u65b0\u7684 HttpExceptionFilter \u7ed1\u5b9a\u5230 CatsController \u7684 create() \u65b9\u6cd5\u3002 @ @filename ( cats . controller ) @Post () @UseFilters ( new HttpExceptionFilter ()) async create ( @Body () createCatDto : CreateCatDto ) { throw new ForbiddenException (); } @ @switch @Post () @UseFilters ( new HttpExceptionFilter ()) @Bind ( Body ()) async create ( createCatDto ) { throw new ForbiddenException (); } info Hint @UseFilters() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 @UseFilters() \u88c5\u9970\u5668\u3002 \u7c7b\u4f3c\u4e8e @Catch() \u88c5\u9970\u5668\uff0c\u5b83\u53ef\u4ee5\u63a5\u53d7\u5355\u4e2a\u8fc7\u6ee4\u5668\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u63a5\u53d7\u9017\u53f7\u5206\u9694\u7684\u8fc7\u6ee4\u5668\u5b9e\u4f8b\u5217\u8868\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u5728\u9002\u5f53\u7684\u5730\u65b9\u521b\u5efa\u4e86 HttpExceptionFilter \u7684\u5b9e\u4f8b\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u7c7b(\u800c\u4e0d\u662f\u5b9e\u4f8b)\uff0c\u5c06\u5b9e\u4f8b\u5316\u7684\u8d23\u4efb\u7559\u7ed9\u6846\u67b6\uff0c\u5e76\u542f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 @ @filename ( cats . controller ) @Post () @UseFilters ( HttpExceptionFilter ) async create ( @Body () createCatDto : CreateCatDto ) { throw new ForbiddenException (); } @ @switch @Post () @UseFilters ( HttpExceptionFilter ) @Bind ( Body ()) async create ( createCatDto ) { throw new ForbiddenException (); } info Hint \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u6700\u597d\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u5b9e\u4f8b\u6765\u5e94\u7528\u8fc7\u6ee4\u5668\u3002 \u5b83\u51cf\u5c11\u4e86\u5185\u5b58\u7684\u4f7f\u7528\uff0c\u56e0\u4e3a Nest \u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u6574\u4e2a\u6a21\u5757\u4e2d\u91cd\u7528\u540c\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c HttpExceptionFilter \u53ea\u5e94\u7528\u4e8e\u5355\u4e00\u7684 create() \u8def\u7531\u5904\u7406\u7a0b\u5e8f\uff0c\u4f7f\u5176\u9650\u4e8e\u65b9\u6cd5\u8303\u56f4\u3002 \u5f02\u5e38\u7b5b\u9009\u5668\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e0d\u540c\u7684\u7ea7\u522b:\u65b9\u6cd5\u8303\u56f4\u7684\u3001\u63a7\u5236\u5668\u8303\u56f4\u7684\u6216\u5168\u5c40\u8303\u56f4\u7684\u3002 \u4f8b\u5982\uff0c\u8981\u5c06\u8fc7\u6ee4\u5668\u8bbe\u7f6e\u4e3a\u63a7\u5236\u5668\u4f5c\u7528\u57df\uff0c\u4f60\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c: @ @filename ( cats . controller ) @UseFilters ( new HttpExceptionFilter ()) export class CatsController {} \u8fd9\u4e2a\u6784\u9020\u4e3a CatsController \u4e2d\u5b9a\u4e49\u7684\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u8bbe\u7f6e\u4e86 HttpExceptionFilter \u3002 \u8981\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u4f5c\u7528\u57df\u7684\u8fc7\u6ee4\u5668\uff0c\u4f60\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c: @ @filename ( main ) async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . useGlobalFilters ( new HttpExceptionFilter ()); await app . listen ( 3000 ); } bootstrap (); warning Warning useGlobalFilters() \u65b9\u6cd5\u4e0d\u4e3a\u7f51\u5173\u6216\u6df7\u5408\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u8fc7\u6ee4\u5668\u3002 \u5168\u5c40\u8303\u56f4\u7684\u8fc7\u6ee4\u5668\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u7528\u4e8e\u6bcf\u4e2a\u63a7\u5236\u5668\u548c\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u5728\u4f9d\u8d56\u6ce8\u5165\u65b9\u9762\uff0c\u4ece\u4efb\u4f55\u6a21\u5757\u5916\u90e8\u6ce8\u518c\u7684\u5168\u5c40\u8fc7\u6ee4\u5668(\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u7684 useGlobalFilters() )\u4e0d\u80fd\u6ce8\u5165\u4f9d\u8d56\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u4efb\u4f55\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u5b8c\u6210\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece\u4efb\u4f55\u6a21\u5757 \u6ce8\u518c\u4e00\u4e2a\u5168\u5c40\u4f5c\u7528\u57df\u7684\u8fc7\u6ee4\u5668 \uff0c\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { APP_FILTER } from '@nestjs/core' ; @Module ({ providers : [ { provide : APP_FILTER , useClass : HttpExceptionFilter , }, ], }) export class AppModule {} info Hint \u5f53\u4f7f\u7528\u6b64\u65b9\u6cd5\u4e3a\u8fc7\u6ee4\u5668\u6267\u884c\u4f9d\u8d56\u6ce8\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u5728\u54ea\u4e2a\u6a21\u5757\u4e2d\u4f7f\u7528\u6b64\u6784\u9020\uff0c\u8fc7\u6ee4\u5668\u5b9e\u9645\u4e0a\u90fd\u662f\u5168\u5c40\u7684\u3002 \u8fd9\u5e94\u8be5\u5728\u54ea\u91cc\u505a?\u9009\u62e9\u5b9a\u4e49\u8fc7\u6ee4\u5668(\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u4e3a HttpExceptionFilter )\u7684\u6a21\u5757\u3002 \u6b64\u5916\uff0c useClass \u5e76\u4e0d\u662f\u5904\u7406\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5546\u6ce8\u518c\u7684\u552f\u4e00\u65b9\u6cd5\u3002 \u4e86\u89e3\u66f4\u591a \u8fd9 \u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u6dfb\u52a0\u5c3d\u53ef\u80fd\u591a\u7684\u8fc7\u6ee4\u5668;\u53ea\u9700\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u63d0\u4f9b\u8005\u6570\u7ec4\u4e2d\u3002 \u6293\u4f4f\u4e00\u5207 \u00b6 \u4e3a\u4e86\u6355\u83b7 \u6bcf\u4e2a \u672a\u5904\u7406\u7684\u5f02\u5e38(\u4e0d\u7ba1\u5f02\u5e38\u7c7b\u578b\u662f\u4ec0\u4e48)\uff0c\u8ba9 @Catch() \u88c5\u9970\u5668\u7684\u5f62\u53c2\u5217\u8868\u4e3a\u7a7a\uff0c\u4f8b\u5982 @Catch() \u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e0e\u5e73\u53f0\u65e0\u5173\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528 HTTP \u9002\u914d\u5668 \u6765\u4f20\u9012\u54cd\u5e94\uff0c\u800c\u4e0d\u76f4\u63a5\u4f7f\u7528\u4efb\u4f55\u5e73\u53f0\u7279\u5b9a\u7684\u5bf9\u8c61( Request \u548c Response ): import { ExceptionFilter , Catch , ArgumentsHost , HttpException , HttpStatus , } from '@nestjs/common' ; import { HttpAdapterHost } from '@nestjs/core' ; @Catch () export class AllExceptionsFilter implements ExceptionFilter { constructor ( private readonly httpAdapterHost : HttpAdapterHost ) {} catch ( exception : unknown , host : ArgumentsHost ) : void { // In certain situations `httpAdapter` might not be available in the // constructor method, thus we should resolve it here. const { httpAdapter } = this . httpAdapterHost ; const ctx = host . switchToHttp (); const httpStatus = exception instanceof HttpException ? exception . getStatus () : HttpStatus . INTERNAL_SERVER_ERROR ; const responseBody = { statusCode : httpStatus , timestamp : new Date (). toISOString (), path : httpAdapter.getRequestUrl ( ctx . getRequest ()), }; httpAdapter . reply ( ctx . getResponse (), responseBody , httpStatus ); } } \u7ee7\u627f \u00b6 \u901a\u5e38\uff0c\u60a8\u5c06\u521b\u5efa\u5b8c\u5168\u5b9a\u5236\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u4ee5\u6ee1\u8db3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u60f3\u7b80\u5355\u5730\u6269\u5c55\u5185\u7f6e\u7684\u9ed8\u8ba4 \u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668 \uff0c\u5e76\u57fa\u4e8e\u67d0\u4e9b\u56e0\u7d20\u8986\u76d6\u884c\u4e3a\u3002 \u4e3a\u4e86\u5c06\u5f02\u5e38\u5904\u7406\u59d4\u6258\u7ed9\u57fa\u8fc7\u6ee4\u5668\uff0c\u60a8\u9700\u8981\u6269\u5c55 BaseExceptionFilter \u5e76\u8c03\u7528\u7ee7\u627f\u7684 catch() \u65b9\u6cd5\u3002 @ @filename ( all - exceptions . filter ) import { Catch , ArgumentsHost } from '@nestjs/common' ; import { BaseExceptionFilter } from '@nestjs/core' ; @Catch () export class AllExceptionsFilter extends BaseExceptionFilter { catch ( exception : unknown , host : ArgumentsHost ) { super . catch ( exception , host ); } } @ @switch import { Catch } from '@nestjs/common' ; import { BaseExceptionFilter } from '@nestjs/core' ; @Catch () export class AllExceptionsFilter extends BaseExceptionFilter { catch ( exception , host ) { super . catch ( exception , host ); } } warning Warning \u6269\u5c55\u4e86 BaseExceptionFilter \u7684\u65b9\u6cd5\u8303\u56f4\u548c\u63a7\u5236\u5668\u8303\u56f4\u7684\u8fc7\u6ee4\u5668\u4e0d\u5e94\u8be5\u7528 new \u5b9e\u4f8b\u5316\u3002 \u76f8\u53cd\uff0c\u8ba9\u6846\u67b6\u81ea\u52a8\u5b9e\u4f8b\u5316\u5b83\u4eec\u3002 \u4e0a\u9762\u7684\u5b9e\u73b0\u53ea\u662f\u4e00\u4e2a\u6f14\u793a\u8be5\u65b9\u6cd5\u7684 shell\u3002 \u60a8\u7684\u6269\u5c55\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u5b9e\u73b0\u5c06\u5305\u62ec\u60a8\u5b9a\u5236\u7684 \u4e1a\u52a1 \u903b\u8f91(\u4f8b\u5982\uff0c\u5904\u7406\u5404\u79cd\u6761\u4ef6)\u3002 \u5168\u5c40\u8fc7\u6ee4\u5668 \u53ef\u4ee5 \u6269\u5c55\u57fa\u8fc7\u6ee4\u5668\u3002 \u8fd9\u6709\u4e24\u79cd\u65b9\u6cd5\u3002 \u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662f\u5728\u5b9e\u4f8b\u5316\u81ea\u5b9a\u4e49\u5168\u5c40\u8fc7\u6ee4\u5668\u65f6\u6ce8\u5165 HttpServer \u5f15\u7528: async function bootstrap () { const app = await NestFactory . create ( AppModule ); const { httpAdapter } = app . get ( HttpAdapterHost ); app . useGlobalFilters ( new AllExceptionsFilter ( httpAdapter )); await app . listen ( 3000 ); } bootstrap (); \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 APP_FILTER \u4ee4\u724c \u5982\u4e0b\u6240\u793a \u3002","title":"\u5f02\u5e38\u8fc7\u6ee4"},{"location":"exception-filters/#_1","text":"Nest \u81ea\u5e26\u4e00\u4e2a\u5185\u7f6e\u7684 \u5f02\u5e38\u5c42 \uff0c\u8d1f\u8d23\u5904\u7406\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6240\u6709\u672a\u5904\u7406\u7684\u5f02\u5e38\u3002 \u5f53\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u6ca1\u6709\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u8be5\u5c42\u4f1a\u6355\u83b7\u5f02\u5e38\uff0c\u7136\u540e\u81ea\u52a8\u53d1\u9001\u9002\u5f53\u7684\u7528\u6237\u53cb\u597d\u54cd\u5e94\u3002 \u5f00\u7bb1\u5373\u7528\uff0c\u8fd9\u4e2a\u52a8\u4f5c\u662f\u7531\u5185\u7f6e\u7684 \u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668 \u6267\u884c\u7684\uff0c\u5b83\u5904\u7406\u7c7b\u578b\u4e3a HttpException \u7684\u5f02\u5e38(\u53ca\u5176\u5b50\u7c7b)\u3002 \u5f53\u4e00\u4e2a\u5f02\u5e38\u662f \u4e0d\u53ef\u8bc6\u522b\u7684 (\u65e2\u4e0d\u662f HttpException \uff0c\u4e5f\u4e0d\u662f\u7ee7\u627f\u81ea HttpException \u7684\u7c7b)\uff0c\u5185\u7f6e\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u751f\u6210\u4ee5\u4e0b\u9ed8\u8ba4 JSON \u54cd\u5e94: { \"statusCode\" : 500 , \"message\" : \"Internal server error\" } info Hint \u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668\u90e8\u5206\u652f\u6301 http-errors \u5e93\u3002 \u57fa\u672c\u4e0a\uff0c\u4efb\u4f55\u629b\u51fa\u7684\u5f02\u5e38\u5305\u542b statusCode \u548c message \u5c5e\u6027\u5c06\u88ab\u6b63\u786e\u586b\u5145\u5e76\u4f5c\u4e3a\u54cd\u5e94\u53d1\u9001\u56de(\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684 InternalServerErrorException \u5bf9\u4e8e\u672a\u8bc6\u522b\u7684\u5f02\u5e38)\u3002","title":"\u5f02\u5e38\u8fc7\u6ee4\u5668"},{"location":"exception-filters/#_2","text":"Nest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684 HttpException \u7c7b\uff0c\u4ece @nestjs/common \u5305\u4e2d\u516c\u5f00\u3002 \u5bf9\u4e8e\u5178\u578b\u7684\u57fa\u4e8e HTTP REST/GraphQL API \u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6700\u4f73\u5b9e\u8df5\u662f\u5728\u51fa\u73b0\u67d0\u4e9b\u9519\u8bef\u6761\u4ef6\u65f6\u53d1\u9001\u6807\u51c6 HTTP \u54cd\u5e94\u5bf9\u8c61\u3002 \u4f8b\u5982\uff0c\u5728 CatsController \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a findAll() \u65b9\u6cd5(\u4e00\u4e2a GET \u8def\u7531\u5904\u7406\u5668)\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u8fd9\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u629b\u51fa\u4e86\u4e00\u4e2a\u5f02\u5e38\u3002 \u4e3a\u4e86\u6f14\u793a\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u5176\u786c\u7f16\u7801\u5982\u4e0b: @ @filename ( cats . controller ) @Get () async findAll () { throw new HttpException ( 'Forbidden' , HttpStatus . FORBIDDEN ); } info Hint \u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528\u4e86 HttpStatus \u3002 \u8fd9\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684 helper enum \u3002 \u5f53\u5ba2\u6237\u7aef\u8c03\u7528\u8fd9\u4e2a\u7aef\u70b9\u65f6\uff0c\u54cd\u5e94\u770b\u8d77\u6765\u50cf\u8fd9\u6837: { \"statusCode\" : 403 , \"message\" : \"Forbidden\" } HttpException \u6784\u9020\u51fd\u6570\u6709\u4e24\u4e2a\u5fc5\u9700\u7684\u53c2\u6570\u6765\u51b3\u5b9a\u54cd\u5e94: \u53c2\u6570 response \u5b9a\u4e49\u4e86 JSON \u54cd\u5e94\u4f53\u3002\u5b83\u53ef\u4ee5\u662f \u5b57\u7b26\u4e32 \u6216 \u5bf9\u8c61 \uff0c\u5982\u4e0b\u6240\u8ff0\u3002 status \u53c2\u6570\u5b9a\u4e49\u4e86 HTTP \u72b6\u6001\u7801 . \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cJSON \u54cd\u5e94\u4f53\u5305\u542b\u4e24\u4e2a\u5c5e\u6027: statusCode : \u9ed8\u8ba4\u4e3a status \u53c2\u6570\u4e2d\u63d0\u4f9b\u7684 HTTP \u72b6\u6001\u7801 message : \u57fa\u4e8e status \u7684 HTTP \u9519\u8bef\u7684\u7b80\u77ed\u63cf\u8ff0 \u8981\u8986\u76d6 JSON \u54cd\u5e94\u4f53\u7684\u6d88\u606f\u90e8\u5206\uff0c\u8bf7\u5728 response \u53c2\u6570\u4e2d\u63d0\u4f9b\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u8981\u8986\u76d6\u6574\u4e2a JSON \u54cd\u5e94\u4f53\uff0c\u5728 response \u53c2\u6570\u4e2d\u4f20\u9012\u4e00\u4e2a\u5bf9\u8c61\u3002 Nest \u5c06\u5e8f\u5217\u5316\u8be5\u5bf9\u8c61\u5e76\u5c06\u5176\u4f5c\u4e3a JSON \u54cd\u5e94\u4f53\u8fd4\u56de\u3002 \u7b2c\u4e8c\u4e2a\u6784\u9020\u51fd\u6570\u53c2\u6570 - status - \u5e94\u8be5\u662f\u4e00\u4e2a\u6709\u6548\u7684 HTTP \u72b6\u6001\u7801\u3002 \u6700\u4f73\u5b9e\u8df5\u662f\u4f7f\u7528\u4ece @nestjs/common \u4e2d\u5bfc\u5165\u7684 HttpStatus \u679a\u4e3e\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8986\u76d6\u6574\u4e2a\u54cd\u5e94\u4f53\u7684\u4f8b\u5b50: @ @filename ( cats . controller ) @Get () async findAll () { throw new HttpException ({ status : HttpStatus.FORBIDDEN , error : 'This is a custom message' , }, HttpStatus . FORBIDDEN ); } \u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u4e0b\u9762\u662f\u54cd\u5e94\u7684\u6837\u5b50: { \"status\" : 403 , \"error\" : \"This is a custom message\" }","title":"\u629b\u51fa\u6807\u51c6\u5f02\u5e38"},{"location":"exception-filters/#_3","text":"\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u9700\u8981\u7f16\u5199\u81ea\u5b9a\u4e49\u5f02\u5e38\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7684 Nest HTTP \u5f02\u5e38\uff0c\u5982\u4e0b\u4e00\u8282\u6240\u8ff0\u3002 \u5982\u679c\u4f60\u786e\u5b9e\u9700\u8981\u521b\u5efa\u81ea\u5b9a\u4e49\u5f02\u5e38\uff0c\u6700\u597d\u521b\u5efa\u4f60\u81ea\u5df1\u7684 \u5f02\u5e38\u5c42\u6b21 \u7ed3\u6784\uff0c\u5176\u4e2d\u4f60\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u7ee7\u627f\u81ea\u57fa\u7c7b HttpException \u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0cNest \u5c06\u8bc6\u522b\u51fa\u4f60\u7684\u5f02\u5e38\uff0c\u5e76\u81ea\u52a8\u5904\u7406\u9519\u8bef\u54cd\u5e94\u3002 \u8ba9\u6211\u4eec\u5b9e\u73b0\u8fd9\u6837\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5f02\u5e38: @ @filename ( forbidden . exception ) export class ForbiddenException extends HttpException { constructor () { super ( 'Forbidden' , HttpStatus . FORBIDDEN ); } } \u7531\u4e8e ForbiddenException \u6269\u5c55\u4e86\u57fa\u7840\u7684 HttpException \uff0c\u5b83\u5c06\u4e0e\u5185\u7f6e\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u65e0\u7f1d\u5730\u5de5\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728 findAll() \u65b9\u6cd5\u4e2d\u4f7f\u7528\u5b83\u3002 @ @filename ( cats . controller ) @Get () async findAll () { throw new ForbiddenException (); }","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38"},{"location":"exception-filters/#http","text":"Nest \u63d0\u4f9b\u4e86\u4e00\u7ec4\u4ece\u57fa\u672c\u7684 HttpException \u7ee7\u627f\u7684\u6807\u51c6\u5f02\u5e38\u3002 \u8fd9\u4e9b\u662f\u4ece @nestjs/common \u5305\u4e2d\u516c\u5f00\u7684\uff0c\u4ee3\u8868\u4e86\u8bb8\u591a\u6700\u5e38\u89c1\u7684 HTTP \u5f02\u5e38: BadRequestException UnauthorizedException NotFoundException ForbiddenException NotAcceptableException RequestTimeoutException ConflictException GoneException HttpVersionNotSupportedException PayloadTooLargeException UnsupportedMediaTypeException UnprocessableEntityException InternalServerErrorException NotImplementedException ImATeapotException MethodNotAllowedException BadGatewayException ServiceUnavailableException GatewayTimeoutException PreconditionFailedException","title":"\u5185\u7f6e\u7684 HTTP \u5f02\u5e38"},{"location":"exception-filters/#_4","text":"\u867d\u7136\u57fa\u672c\u7684(\u5185\u7f6e\u7684)\u5f02\u5e38\u8fc7\u6ee4\u5668\u53ef\u4ee5\u81ea\u52a8\u4e3a\u4f60\u5904\u7406\u8bb8\u591a\u60c5\u51b5\uff0c\u4f46\u4f60\u53ef\u80fd\u60f3\u8981\u5bf9\u5f02\u5e38\u5c42\u8fdb\u884c\u5b8c\u5168\u63a7\u5236\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u6839\u636e\u4e00\u4e9b\u52a8\u6001\u56e0\u7d20\u6dfb\u52a0\u65e5\u5fd7\u8bb0\u5f55\u6216\u4f7f\u7528\u4e0d\u540c\u7684 JSON \u6a21\u5f0f\u3002 \u5f02\u5e38\u8fc7\u6ee4\u5668 \u6b63\u662f\u4e3a\u6b64\u76ee\u7684\u800c\u8bbe\u8ba1\u7684\u3002 \u5b83\u4eec\u5141\u8bb8\u60a8\u63a7\u5236\u786e\u5207\u7684\u63a7\u5236\u6d41\u548c\u53d1\u9001\u56de\u5ba2\u6237\u673a\u7684\u54cd\u5e94\u7684\u5185\u5bb9\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u5b83\u8d1f\u8d23\u6355\u6349\u5f02\u5e38\uff0c\u8fd9\u4e9b\u5f02\u5e38\u662f HttpException \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u4e3a\u5b83\u4eec\u5b9e\u73b0\u5b9a\u5236\u7684\u54cd\u5e94\u903b\u8f91\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8bbf\u95ee\u5e95\u5c42\u5e73\u53f0\u7684 Request \u548c Response \u5bf9\u8c61\u3002 \u6211\u4eec\u5c06\u8bbf\u95ee Request \u5bf9\u8c61\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53d6\u51fa\u539f\u59cb\u7684 url \uff0c\u5e76\u5c06\u5176\u5305\u542b\u5728\u65e5\u5fd7\u4fe1\u606f\u4e2d\u3002 \u6211\u4eec\u5c06\u4f7f\u7528 Response \u5bf9\u8c61\u6765\u76f4\u63a5\u63a7\u5236\u53d1\u9001\u7684\u54cd\u5e94\uff0c\u4f7f\u7528 response.json() \u65b9\u6cd5\u3002 @ @filename ( http - exception . filter ) import { ExceptionFilter , Catch , ArgumentsHost , HttpException } from '@nestjs/common' ; import { Request , Response } from 'express' ; @Catch ( HttpException ) export class HttpExceptionFilter implements ExceptionFilter { catch ( exception : HttpException , host : ArgumentsHost ) { const ctx = host . switchToHttp (); const response = ctx . getResponse < Response > (); const request = ctx . getRequest < Request > (); const status = exception . getStatus (); response . status ( status ) . json ({ statusCode : status , timestamp : new Date (). toISOString (), path : request.url , }); } } @ @switch import { Catch , HttpException } from '@nestjs/common' ; @Catch ( HttpException ) export class HttpExceptionFilter { catch ( exception , host ) { const ctx = host . switchToHttp (); const response = ctx . getResponse (); const request = ctx . getRequest (); const status = exception . getStatus (); response . status ( status ) . json ({ statusCode : status , timestamp : new Date (). toISOString (), path : request.url , }); } } info Hint \u6240\u6709\u5f02\u5e38\u8fc7\u6ee4\u5668\u90fd\u5e94\u8be5\u5b9e\u73b0\u901a\u7528\u7684 ExceptionFilter<T> \u63a5\u53e3\u3002 \u8fd9\u9700\u8981\u4f60\u63d0\u4f9b\u5e26\u6709\u6307\u5b9a\u7b7e\u540d\u7684 catch(exception: T, host: ArgumentsHost) \u65b9\u6cd5\u3002 T \u8868\u793a\u5f02\u5e38\u7684\u7c7b\u578b\u3002 @Catch(HttpException) \u88c5\u9970\u5668\u5c06\u6240\u9700\u7684\u5143\u6570\u636e\u7ed1\u5b9a\u5230\u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u544a\u8bc9 Nest \u8fd9\u4e2a\u7279\u5b9a\u7684\u8fc7\u6ee4\u5668\u6b63\u5728\u5bfb\u627e HttpException \u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u7c7b\u578b\u7684\u5f02\u5e38\u3002 @Catch() \u88c5\u9970\u5668\u53ef\u4ee5\u63a5\u53d7\u5355\u4e2a\u53c2\u6570\uff0c\u6216\u8005\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\u3002 \u8fd9\u5141\u8bb8\u60a8\u4e00\u6b21\u4e3a\u51e0\u79cd\u7c7b\u578b\u7684\u5f02\u5e38\u8bbe\u7f6e\u8fc7\u6ee4\u5668\u3002","title":"\u5f02\u5e38\u8fc7\u6ee4\u5668"},{"location":"exception-filters/#_5","text":"\u8ba9\u6211\u4eec\u770b\u770b catch() \u65b9\u6cd5\u7684\u53c2\u6570\u3002 exception \u53c2\u6570\u662f\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u5f02\u5e38\u5bf9\u8c61\u3002 host \u53c2\u6570\u662f\u4e00\u4e2a ArgumentsHost \u5bf9\u8c61\u3002 ArgumentsHost \u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u5b9e\u7528\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u6211\u4eec\u5c06\u5728 \u6267\u884c\u4e0a\u4e0b\u6587\u7ae0\u8282 \u4e2d\u8fdb\u4e00\u6b65\u7814\u7a76\u5b83\u3002 \u5728\u8fd9\u4e2a\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b83\u6765\u83b7\u53d6\u5bf9\u4f20\u9012\u7ed9\u539f\u59cb\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u7684 Request \u548c Response \u5bf9\u8c61\u7684\u5f15\u7528(\u5728\u4ea7\u751f\u5f02\u5e38\u7684\u63a7\u5236\u5668\u4e2d)\u3002 \u5728\u8fd9\u4e2a\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 ArgumentsHost \u4e0a\u4f7f\u7528\u4e86\u4e00\u4e9b helper \u65b9\u6cd5\u6765\u83b7\u5f97\u6240\u9700\u7684 Request \u548c Response \u5bf9\u8c61\u3002 \u4e86\u89e3\u66f4\u591a\u5173\u4e8e ArgumentsHost \u7684\u4fe1\u606f \u5728\u8fd9\u91cc \u3002 \u8fd9\u4e2a\u62bd\u8c61\u7ea7\u522b\u7684\u539f\u56e0\u662f ArgumentsHost \u5728\u6240\u6709\u4e0a\u4e0b\u6587\u4e2d\u90fd\u6709\u4f5c\u7528(\u4f8b\u5982\uff0c\u6211\u4eec\u73b0\u5728\u5904\u7406\u7684 HTTP \u670d\u52a1\u5668\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd8\u6709\u5fae\u670d\u52a1\u548c WebSockets)\u3002 \u5728\u6267\u884c\u4e0a\u4e0b\u6587\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528 ArgumentsHost \u53ca\u5176\u8f85\u52a9\u51fd\u6570\u7684\u529f\u80fd\u8bbf\u95ee \u4efb\u610f \u6267\u884c\u4e0a\u4e0b\u6587\u7684\u76f8\u5e94\u7684 \u5e95\u5c42\u53c2\u6570 \u3002 \u8fd9\u5c06\u5141\u8bb8\u6211\u4eec\u7f16\u5199\u8de8\u6240\u6709\u4e0a\u4e0b\u6587\u64cd\u4f5c\u7684\u901a\u7528\u5f02\u5e38\u8fc7\u6ee4\u5668\u3002","title":"\u53c2\u6570\u4e3b\u673a"},{"location":"exception-filters/#_6","text":"\u8ba9\u6211\u4eec\u628a\u65b0\u7684 HttpExceptionFilter \u7ed1\u5b9a\u5230 CatsController \u7684 create() \u65b9\u6cd5\u3002 @ @filename ( cats . controller ) @Post () @UseFilters ( new HttpExceptionFilter ()) async create ( @Body () createCatDto : CreateCatDto ) { throw new ForbiddenException (); } @ @switch @Post () @UseFilters ( new HttpExceptionFilter ()) @Bind ( Body ()) async create ( createCatDto ) { throw new ForbiddenException (); } info Hint @UseFilters() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 @UseFilters() \u88c5\u9970\u5668\u3002 \u7c7b\u4f3c\u4e8e @Catch() \u88c5\u9970\u5668\uff0c\u5b83\u53ef\u4ee5\u63a5\u53d7\u5355\u4e2a\u8fc7\u6ee4\u5668\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u63a5\u53d7\u9017\u53f7\u5206\u9694\u7684\u8fc7\u6ee4\u5668\u5b9e\u4f8b\u5217\u8868\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u5728\u9002\u5f53\u7684\u5730\u65b9\u521b\u5efa\u4e86 HttpExceptionFilter \u7684\u5b9e\u4f8b\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u7c7b(\u800c\u4e0d\u662f\u5b9e\u4f8b)\uff0c\u5c06\u5b9e\u4f8b\u5316\u7684\u8d23\u4efb\u7559\u7ed9\u6846\u67b6\uff0c\u5e76\u542f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 @ @filename ( cats . controller ) @Post () @UseFilters ( HttpExceptionFilter ) async create ( @Body () createCatDto : CreateCatDto ) { throw new ForbiddenException (); } @ @switch @Post () @UseFilters ( HttpExceptionFilter ) @Bind ( Body ()) async create ( createCatDto ) { throw new ForbiddenException (); } info Hint \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u6700\u597d\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u5b9e\u4f8b\u6765\u5e94\u7528\u8fc7\u6ee4\u5668\u3002 \u5b83\u51cf\u5c11\u4e86\u5185\u5b58\u7684\u4f7f\u7528\uff0c\u56e0\u4e3a Nest \u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u6574\u4e2a\u6a21\u5757\u4e2d\u91cd\u7528\u540c\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c HttpExceptionFilter \u53ea\u5e94\u7528\u4e8e\u5355\u4e00\u7684 create() \u8def\u7531\u5904\u7406\u7a0b\u5e8f\uff0c\u4f7f\u5176\u9650\u4e8e\u65b9\u6cd5\u8303\u56f4\u3002 \u5f02\u5e38\u7b5b\u9009\u5668\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e0d\u540c\u7684\u7ea7\u522b:\u65b9\u6cd5\u8303\u56f4\u7684\u3001\u63a7\u5236\u5668\u8303\u56f4\u7684\u6216\u5168\u5c40\u8303\u56f4\u7684\u3002 \u4f8b\u5982\uff0c\u8981\u5c06\u8fc7\u6ee4\u5668\u8bbe\u7f6e\u4e3a\u63a7\u5236\u5668\u4f5c\u7528\u57df\uff0c\u4f60\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c: @ @filename ( cats . controller ) @UseFilters ( new HttpExceptionFilter ()) export class CatsController {} \u8fd9\u4e2a\u6784\u9020\u4e3a CatsController \u4e2d\u5b9a\u4e49\u7684\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u8bbe\u7f6e\u4e86 HttpExceptionFilter \u3002 \u8981\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u4f5c\u7528\u57df\u7684\u8fc7\u6ee4\u5668\uff0c\u4f60\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c: @ @filename ( main ) async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . useGlobalFilters ( new HttpExceptionFilter ()); await app . listen ( 3000 ); } bootstrap (); warning Warning useGlobalFilters() \u65b9\u6cd5\u4e0d\u4e3a\u7f51\u5173\u6216\u6df7\u5408\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u8fc7\u6ee4\u5668\u3002 \u5168\u5c40\u8303\u56f4\u7684\u8fc7\u6ee4\u5668\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u7528\u4e8e\u6bcf\u4e2a\u63a7\u5236\u5668\u548c\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u5728\u4f9d\u8d56\u6ce8\u5165\u65b9\u9762\uff0c\u4ece\u4efb\u4f55\u6a21\u5757\u5916\u90e8\u6ce8\u518c\u7684\u5168\u5c40\u8fc7\u6ee4\u5668(\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u7684 useGlobalFilters() )\u4e0d\u80fd\u6ce8\u5165\u4f9d\u8d56\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u4efb\u4f55\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u5b8c\u6210\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece\u4efb\u4f55\u6a21\u5757 \u6ce8\u518c\u4e00\u4e2a\u5168\u5c40\u4f5c\u7528\u57df\u7684\u8fc7\u6ee4\u5668 \uff0c\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { APP_FILTER } from '@nestjs/core' ; @Module ({ providers : [ { provide : APP_FILTER , useClass : HttpExceptionFilter , }, ], }) export class AppModule {} info Hint \u5f53\u4f7f\u7528\u6b64\u65b9\u6cd5\u4e3a\u8fc7\u6ee4\u5668\u6267\u884c\u4f9d\u8d56\u6ce8\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u5728\u54ea\u4e2a\u6a21\u5757\u4e2d\u4f7f\u7528\u6b64\u6784\u9020\uff0c\u8fc7\u6ee4\u5668\u5b9e\u9645\u4e0a\u90fd\u662f\u5168\u5c40\u7684\u3002 \u8fd9\u5e94\u8be5\u5728\u54ea\u91cc\u505a?\u9009\u62e9\u5b9a\u4e49\u8fc7\u6ee4\u5668(\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u4e3a HttpExceptionFilter )\u7684\u6a21\u5757\u3002 \u6b64\u5916\uff0c useClass \u5e76\u4e0d\u662f\u5904\u7406\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5546\u6ce8\u518c\u7684\u552f\u4e00\u65b9\u6cd5\u3002 \u4e86\u89e3\u66f4\u591a \u8fd9 \u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u6dfb\u52a0\u5c3d\u53ef\u80fd\u591a\u7684\u8fc7\u6ee4\u5668;\u53ea\u9700\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u63d0\u4f9b\u8005\u6570\u7ec4\u4e2d\u3002","title":"\u7ed1\u5b9a\u7684\u8fc7\u6ee4\u5668"},{"location":"exception-filters/#_7","text":"\u4e3a\u4e86\u6355\u83b7 \u6bcf\u4e2a \u672a\u5904\u7406\u7684\u5f02\u5e38(\u4e0d\u7ba1\u5f02\u5e38\u7c7b\u578b\u662f\u4ec0\u4e48)\uff0c\u8ba9 @Catch() \u88c5\u9970\u5668\u7684\u5f62\u53c2\u5217\u8868\u4e3a\u7a7a\uff0c\u4f8b\u5982 @Catch() \u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e0e\u5e73\u53f0\u65e0\u5173\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528 HTTP \u9002\u914d\u5668 \u6765\u4f20\u9012\u54cd\u5e94\uff0c\u800c\u4e0d\u76f4\u63a5\u4f7f\u7528\u4efb\u4f55\u5e73\u53f0\u7279\u5b9a\u7684\u5bf9\u8c61( Request \u548c Response ): import { ExceptionFilter , Catch , ArgumentsHost , HttpException , HttpStatus , } from '@nestjs/common' ; import { HttpAdapterHost } from '@nestjs/core' ; @Catch () export class AllExceptionsFilter implements ExceptionFilter { constructor ( private readonly httpAdapterHost : HttpAdapterHost ) {} catch ( exception : unknown , host : ArgumentsHost ) : void { // In certain situations `httpAdapter` might not be available in the // constructor method, thus we should resolve it here. const { httpAdapter } = this . httpAdapterHost ; const ctx = host . switchToHttp (); const httpStatus = exception instanceof HttpException ? exception . getStatus () : HttpStatus . INTERNAL_SERVER_ERROR ; const responseBody = { statusCode : httpStatus , timestamp : new Date (). toISOString (), path : httpAdapter.getRequestUrl ( ctx . getRequest ()), }; httpAdapter . reply ( ctx . getResponse (), responseBody , httpStatus ); } }","title":"\u6293\u4f4f\u4e00\u5207"},{"location":"exception-filters/#_8","text":"\u901a\u5e38\uff0c\u60a8\u5c06\u521b\u5efa\u5b8c\u5168\u5b9a\u5236\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u4ee5\u6ee1\u8db3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u60f3\u7b80\u5355\u5730\u6269\u5c55\u5185\u7f6e\u7684\u9ed8\u8ba4 \u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668 \uff0c\u5e76\u57fa\u4e8e\u67d0\u4e9b\u56e0\u7d20\u8986\u76d6\u884c\u4e3a\u3002 \u4e3a\u4e86\u5c06\u5f02\u5e38\u5904\u7406\u59d4\u6258\u7ed9\u57fa\u8fc7\u6ee4\u5668\uff0c\u60a8\u9700\u8981\u6269\u5c55 BaseExceptionFilter \u5e76\u8c03\u7528\u7ee7\u627f\u7684 catch() \u65b9\u6cd5\u3002 @ @filename ( all - exceptions . filter ) import { Catch , ArgumentsHost } from '@nestjs/common' ; import { BaseExceptionFilter } from '@nestjs/core' ; @Catch () export class AllExceptionsFilter extends BaseExceptionFilter { catch ( exception : unknown , host : ArgumentsHost ) { super . catch ( exception , host ); } } @ @switch import { Catch } from '@nestjs/common' ; import { BaseExceptionFilter } from '@nestjs/core' ; @Catch () export class AllExceptionsFilter extends BaseExceptionFilter { catch ( exception , host ) { super . catch ( exception , host ); } } warning Warning \u6269\u5c55\u4e86 BaseExceptionFilter \u7684\u65b9\u6cd5\u8303\u56f4\u548c\u63a7\u5236\u5668\u8303\u56f4\u7684\u8fc7\u6ee4\u5668\u4e0d\u5e94\u8be5\u7528 new \u5b9e\u4f8b\u5316\u3002 \u76f8\u53cd\uff0c\u8ba9\u6846\u67b6\u81ea\u52a8\u5b9e\u4f8b\u5316\u5b83\u4eec\u3002 \u4e0a\u9762\u7684\u5b9e\u73b0\u53ea\u662f\u4e00\u4e2a\u6f14\u793a\u8be5\u65b9\u6cd5\u7684 shell\u3002 \u60a8\u7684\u6269\u5c55\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u5b9e\u73b0\u5c06\u5305\u62ec\u60a8\u5b9a\u5236\u7684 \u4e1a\u52a1 \u903b\u8f91(\u4f8b\u5982\uff0c\u5904\u7406\u5404\u79cd\u6761\u4ef6)\u3002 \u5168\u5c40\u8fc7\u6ee4\u5668 \u53ef\u4ee5 \u6269\u5c55\u57fa\u8fc7\u6ee4\u5668\u3002 \u8fd9\u6709\u4e24\u79cd\u65b9\u6cd5\u3002 \u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662f\u5728\u5b9e\u4f8b\u5316\u81ea\u5b9a\u4e49\u5168\u5c40\u8fc7\u6ee4\u5668\u65f6\u6ce8\u5165 HttpServer \u5f15\u7528: async function bootstrap () { const app = await NestFactory . create ( AppModule ); const { httpAdapter } = app . get ( HttpAdapterHost ); app . useGlobalFilters ( new AllExceptionsFilter ( httpAdapter )); await app . listen ( 3000 ); } bootstrap (); \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 APP_FILTER \u4ee4\u724c \u5982\u4e0b\u6240\u793a \u3002","title":"\u7ee7\u627f"},{"location":"first-steps/","text":"\u7b2c\u4e00\u6b65 \u00b6 \u5728\u672c\u7cfb\u5217\u6587\u7ae0\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60 Nest \u7684 \u6838\u5fc3\u57fa\u7840 \u77e5\u8bc6\u3002 \u4e3a\u4e86\u719f\u6089 Nest \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u672c\u6784\u5efa\u5757\uff0c\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2a\u57fa\u672c\u7684 CRUD \u5e94\u7528\u7a0b\u5e8f\uff0c\u5176\u4e2d\u7684\u7279\u6027\u6db5\u76d6\u4e86\u5165\u95e8\u7ea7\u7684\u5927\u91cf\u5185\u5bb9\u3002 \u8bed\u8a00 \u00b6 \u6211\u4eec\u559c\u6b22 TypeScript \uff0c\u4f46\u6700\u91cd\u8981\u7684\u662f\u2014\u2014\u6211\u4eec\u559c\u6b22 Node.js \u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 Nest \u517c\u5bb9 TypeScript \u548c \u7eaf JavaScript \u3002 Nest \u5229\u7528\u4e86\u6700\u65b0\u7684\u8bed\u8a00\u7279\u6027\uff0c\u6240\u4ee5\u8981\u5c06\u5176\u4e0e\u666e\u901a\u7684 JavaScript \u7ed3\u5408\u4f7f\u7528\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a Babel \u7f16\u8bd1\u5668\u3002 \u5728\u6211\u4eec\u63d0\u4f9b\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3b\u8981\u4f7f\u7528 TypeScript\uff0c\u4f46\u4f60\u603b\u662f\u53ef\u4ee5 \u5c06\u4ee3\u7801\u7247\u6bb5 \u8f6c\u6362\u4e3a\u666e\u901a\u7684 JavaScript \u8bed\u6cd5(\u53ea\u9700\u70b9\u51fb\u5207\u6362\u6bcf\u4e2a\u4ee3\u7801\u7247\u6bb5\u53f3\u4e0a\u89d2\u7684\u8bed\u8a00\u6309\u94ae)\u3002 \u9700\u6c42 \u00b6 \u8bf7\u786e\u4fdd Node.js (>= 10.13.0\uff0c\u9664\u4e86 v13)\u5b89\u88c5\u5728\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u3002 \u914d\u7f6e \u00b6 \u4f7f\u7528 Nest CLI .\u8bbe\u7f6e\u4e00\u4e2a\u65b0\u9879\u76ee\u975e\u5e38\u7b80\u5355\u3002 \u5b89\u88c5\u4e86 npm \u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ec8\u7aef\u4e2d\u7528\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Nest \u9879\u76ee: $ npm i -g @nestjs/cli $ nest new project-name project-name \u76ee\u5f55\u5c06\u88ab\u521b\u5efa\uff0c\u8282\u70b9\u6a21\u5757\u548c\u4e00\u4e9b\u5176\u4ed6\u7684\u6837\u677f\u6587\u4ef6\u5c06\u88ab\u5b89\u88c5\uff0c\u4e00\u4e2a src/ \u76ee\u5f55\u5c06\u88ab\u521b\u5efa\u5e76\u7531\u51e0\u4e2a\u6838\u5fc3\u6587\u4ef6\u586b\u5145\u3002 src app.controller.spec.ts app.controller.ts app.module.ts app.service.ts main.ts \u4ee5\u4e0b\u662f\u8fd9\u4e9b\u6838\u5fc3\u6587\u4ef6\u7684\u7b80\u8981\u6982\u8ff0: app.controller.ts \u5177\u6709\u5355\u4e00\u8def\u7531\u7684\u57fa\u672c\u63a7\u5236\u5668\u3002 app.controller.spec.ts \u5355\u5143\u6d4b\u8bd5\u63a7\u5236\u5668\u3002 app.module.ts \u5e94\u7528\u7a0b\u5e8f\u7684\u6839\u6a21\u5757\u3002 app.service.ts \u5177\u6709\u5355\u4e00\u65b9\u6cd5\u7684\u57fa\u672c\u670d\u52a1\u3002 main.ts \u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u6587\u4ef6\uff0c\u5b83\u4f7f\u7528\u6838\u5fc3\u51fd\u6570 NestFactory \u521b\u5efa\u4e00\u4e2a Nest \u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u3002 main.ts \u5305\u542b\u4e00\u4e2a async \u51fd\u6570\uff0c\u5b83\u5c06\u5f15\u5bfc\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); await app . listen ( 3000 ); } bootstrap (); @ @switch import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); await app . listen ( 3000 ); } bootstrap (); \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a Nest \u5e94\u7528\u5b9e\u4f8b\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6838\u5fc3\u7684 NestFactory \u7c7b\u3002 NestFactory \u516c\u5f00\u4e86\u4e00\u4e9b\u9759\u6001\u65b9\u6cd5\uff0c\u5b83\u4eec\u5141\u8bb8\u521b\u5efa\u5e94\u7528\u5b9e\u4f8b\u3002 create() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u5b83\u5b9e\u73b0\u4e86 INestApplication \u63a5\u53e3\u3002 \u8be5\u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u8fdb\u884c\u63cf\u8ff0\u3002 \u5728\u4e0a\u9762\u7684 main.ts \u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u542f\u52a8 HTTP \u4fa6\u542c\u5668\uff0c\u8ba9\u5e94\u7528\u7a0b\u5e8f\u7b49\u5f85\u5165\u7ad9 HTTP \u8bf7\u6c42\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 Nest CLI \u642d\u5efa\u7684\u9879\u76ee\u521b\u5efa\u4e86\u4e00\u4e2a\u521d\u59cb\u9879\u76ee\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u9075\u5faa\u5c06\u6bcf\u4e2a\u6a21\u5757\u4fdd\u5b58\u5728\u81ea\u5df1\u7684\u4e13\u7528\u76ee\u5f55\u4e2d\u7684\u7ea6\u5b9a\u3002 \u5e73\u53f0 \u00b6 Nest \u7684\u76ee\u6807\u662f\u6210\u4e3a\u4e00\u4e2a\u5e73\u53f0\u65e0\u5173\u7684\u6846\u67b6\u3002 \u5e73\u53f0\u72ec\u7acb\u6027\u4f7f\u5f97\u521b\u5efa\u53ef\u91cd\u7528\u7684\u903b\u8f91\u90e8\u5206\u6210\u4e3a\u53ef\u80fd\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u8de8\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u5229\u7528\u8fd9\u4e9b\u903b\u8f91\u90e8\u5206\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u4e00\u65e6\u521b\u5efa\u4e86\u9002\u914d\u5668\uff0cNest \u5c31\u80fd\u591f\u4e0e\u4efb\u4f55 Node HTTP \u6846\u67b6\u4e00\u8d77\u5de5\u4f5c\u3002 \u76ee\u524d\u652f\u6301\u4e24\u79cd\u5373\u65f6\u53ef\u7528\u7684 HTTP \u5e73\u53f0: express \u548c fastify \u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u6700\u9002\u5408\u4f60\u9700\u8981\u7684\u3002 platform-express Express \u662f\u4e00\u4e2a\u8457\u540d\u7684\u6781\u7b80\u8282\u70b9 web \u6846\u67b6\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u8fc7\u5b9e\u6218\u6d4b\u8bd5\u7684\u3001\u53ef\u7528\u4e8e\u751f\u4ea7\u7684\u5e93\uff0c\u7531\u793e\u533a\u5b9e\u73b0\u4e86\u5927\u91cf\u8d44\u6e90\u3002\u9ed8\u8ba4\u4f7f\u7528 @nestjs/platform-express \u5305\u3002Express \u4e3a\u8bb8\u591a\u7528\u6237\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u670d\u52a1\uff0c\u4e0d\u9700\u8981\u91c7\u53d6\u4efb\u4f55\u884c\u52a8\u5c31\u53ef\u4ee5\u542f\u7528\u5b83\u3002 platform-fastify Fastify \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u548c\u4f4e\u5f00\u9500\u7684\u6846\u67b6\uff0c\u9ad8\u5ea6\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u6700\u5927\u7684\u6548\u7387\u548c\u901f\u5ea6\u3002\u9605\u8bfb\u5982\u4f55\u4f7f\u7528\u5b83 \u6b64\u5904 \u3002 \u65e0\u8bba\u4f7f\u7528\u54ea\u4e2a\u5e73\u53f0\uff0c\u5b83\u90fd\u516c\u5f00\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3\u3002 \u5b83\u4eec\u5206\u522b\u88ab\u89c6\u4e3a NestExpressApplication \u548c NestFastifyApplication \u3002 \u5f53\u4f60\u5c06\u4e00\u4e2a\u7c7b\u578b\u4f20\u9012\u7ed9 NestFactory.create() \u65b9\u6cd5\u65f6\uff0c\u5c31\u50cf\u4e0b\u9762\u7684\u4f8b\u5b50\u4e00\u6837\uff0c app \u5bf9\u8c61\u5c06\u4f1a\u6709\u7279\u5b9a\u5e73\u53f0\u4e13\u7528\u7684\u65b9\u6cd5\u3002 \u6ce8\u610f\uff0c\u4f60\u4e0d\u9700\u8981\u6307\u5b9a\u7c7b\u578b\uff0c\u9664\u975e\u4f60\u771f\u7684\u60f3\u8bbf\u95ee\u5e95\u5c42\u7684\u5e73\u53f0 API\u3002 const app = await NestFactory . create < NestExpressApplication > ( AppModule ); \u8fd0\u884c\u5e94\u7528 \u00b6 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u64cd\u4f5c\u7cfb\u7edf\u547d\u4ee4\u63d0\u793a\u7b26\u4e0b\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u542f\u52a8\u4fa6\u542c\u5165\u7ad9 HTTP \u8bf7\u6c42\u7684\u5e94\u7528\u7a0b\u5e8f: $ npm run start \u8fd9\u4e2a\u547d\u4ee4\u542f\u52a8\u5e94\u7528\uff0c\u8ba9 HTTP \u670d\u52a1\u5668\u76d1\u542c src/main.ts \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u7aef\u53e3\u3002 \u4e00\u65e6\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\uff0c\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230 http://localhost:3000/ \u3002 \u4f60\u5e94\u8be5\u770b\u770b Hello World! \u7684\u6d88\u606f\u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"first-steps/#_1","text":"\u5728\u672c\u7cfb\u5217\u6587\u7ae0\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60 Nest \u7684 \u6838\u5fc3\u57fa\u7840 \u77e5\u8bc6\u3002 \u4e3a\u4e86\u719f\u6089 Nest \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u672c\u6784\u5efa\u5757\uff0c\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2a\u57fa\u672c\u7684 CRUD \u5e94\u7528\u7a0b\u5e8f\uff0c\u5176\u4e2d\u7684\u7279\u6027\u6db5\u76d6\u4e86\u5165\u95e8\u7ea7\u7684\u5927\u91cf\u5185\u5bb9\u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"first-steps/#_2","text":"\u6211\u4eec\u559c\u6b22 TypeScript \uff0c\u4f46\u6700\u91cd\u8981\u7684\u662f\u2014\u2014\u6211\u4eec\u559c\u6b22 Node.js \u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 Nest \u517c\u5bb9 TypeScript \u548c \u7eaf JavaScript \u3002 Nest \u5229\u7528\u4e86\u6700\u65b0\u7684\u8bed\u8a00\u7279\u6027\uff0c\u6240\u4ee5\u8981\u5c06\u5176\u4e0e\u666e\u901a\u7684 JavaScript \u7ed3\u5408\u4f7f\u7528\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a Babel \u7f16\u8bd1\u5668\u3002 \u5728\u6211\u4eec\u63d0\u4f9b\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3b\u8981\u4f7f\u7528 TypeScript\uff0c\u4f46\u4f60\u603b\u662f\u53ef\u4ee5 \u5c06\u4ee3\u7801\u7247\u6bb5 \u8f6c\u6362\u4e3a\u666e\u901a\u7684 JavaScript \u8bed\u6cd5(\u53ea\u9700\u70b9\u51fb\u5207\u6362\u6bcf\u4e2a\u4ee3\u7801\u7247\u6bb5\u53f3\u4e0a\u89d2\u7684\u8bed\u8a00\u6309\u94ae)\u3002","title":"\u8bed\u8a00"},{"location":"first-steps/#_3","text":"\u8bf7\u786e\u4fdd Node.js (>= 10.13.0\uff0c\u9664\u4e86 v13)\u5b89\u88c5\u5728\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u3002","title":"\u9700\u6c42"},{"location":"first-steps/#_4","text":"\u4f7f\u7528 Nest CLI .\u8bbe\u7f6e\u4e00\u4e2a\u65b0\u9879\u76ee\u975e\u5e38\u7b80\u5355\u3002 \u5b89\u88c5\u4e86 npm \u540e\uff0c\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ec8\u7aef\u4e2d\u7528\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Nest \u9879\u76ee: $ npm i -g @nestjs/cli $ nest new project-name project-name \u76ee\u5f55\u5c06\u88ab\u521b\u5efa\uff0c\u8282\u70b9\u6a21\u5757\u548c\u4e00\u4e9b\u5176\u4ed6\u7684\u6837\u677f\u6587\u4ef6\u5c06\u88ab\u5b89\u88c5\uff0c\u4e00\u4e2a src/ \u76ee\u5f55\u5c06\u88ab\u521b\u5efa\u5e76\u7531\u51e0\u4e2a\u6838\u5fc3\u6587\u4ef6\u586b\u5145\u3002 src app.controller.spec.ts app.controller.ts app.module.ts app.service.ts main.ts \u4ee5\u4e0b\u662f\u8fd9\u4e9b\u6838\u5fc3\u6587\u4ef6\u7684\u7b80\u8981\u6982\u8ff0: app.controller.ts \u5177\u6709\u5355\u4e00\u8def\u7531\u7684\u57fa\u672c\u63a7\u5236\u5668\u3002 app.controller.spec.ts \u5355\u5143\u6d4b\u8bd5\u63a7\u5236\u5668\u3002 app.module.ts \u5e94\u7528\u7a0b\u5e8f\u7684\u6839\u6a21\u5757\u3002 app.service.ts \u5177\u6709\u5355\u4e00\u65b9\u6cd5\u7684\u57fa\u672c\u670d\u52a1\u3002 main.ts \u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u6587\u4ef6\uff0c\u5b83\u4f7f\u7528\u6838\u5fc3\u51fd\u6570 NestFactory \u521b\u5efa\u4e00\u4e2a Nest \u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u3002 main.ts \u5305\u542b\u4e00\u4e2a async \u51fd\u6570\uff0c\u5b83\u5c06\u5f15\u5bfc\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); await app . listen ( 3000 ); } bootstrap (); @ @switch import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); await app . listen ( 3000 ); } bootstrap (); \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a Nest \u5e94\u7528\u5b9e\u4f8b\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6838\u5fc3\u7684 NestFactory \u7c7b\u3002 NestFactory \u516c\u5f00\u4e86\u4e00\u4e9b\u9759\u6001\u65b9\u6cd5\uff0c\u5b83\u4eec\u5141\u8bb8\u521b\u5efa\u5e94\u7528\u5b9e\u4f8b\u3002 create() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u5b83\u5b9e\u73b0\u4e86 INestApplication \u63a5\u53e3\u3002 \u8be5\u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u7ec4\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u8fdb\u884c\u63cf\u8ff0\u3002 \u5728\u4e0a\u9762\u7684 main.ts \u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u542f\u52a8 HTTP \u4fa6\u542c\u5668\uff0c\u8ba9\u5e94\u7528\u7a0b\u5e8f\u7b49\u5f85\u5165\u7ad9 HTTP \u8bf7\u6c42\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 Nest CLI \u642d\u5efa\u7684\u9879\u76ee\u521b\u5efa\u4e86\u4e00\u4e2a\u521d\u59cb\u9879\u76ee\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u9075\u5faa\u5c06\u6bcf\u4e2a\u6a21\u5757\u4fdd\u5b58\u5728\u81ea\u5df1\u7684\u4e13\u7528\u76ee\u5f55\u4e2d\u7684\u7ea6\u5b9a\u3002","title":"\u914d\u7f6e"},{"location":"first-steps/#_5","text":"Nest \u7684\u76ee\u6807\u662f\u6210\u4e3a\u4e00\u4e2a\u5e73\u53f0\u65e0\u5173\u7684\u6846\u67b6\u3002 \u5e73\u53f0\u72ec\u7acb\u6027\u4f7f\u5f97\u521b\u5efa\u53ef\u91cd\u7528\u7684\u903b\u8f91\u90e8\u5206\u6210\u4e3a\u53ef\u80fd\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u8de8\u51e0\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u5229\u7528\u8fd9\u4e9b\u903b\u8f91\u90e8\u5206\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u4e00\u65e6\u521b\u5efa\u4e86\u9002\u914d\u5668\uff0cNest \u5c31\u80fd\u591f\u4e0e\u4efb\u4f55 Node HTTP \u6846\u67b6\u4e00\u8d77\u5de5\u4f5c\u3002 \u76ee\u524d\u652f\u6301\u4e24\u79cd\u5373\u65f6\u53ef\u7528\u7684 HTTP \u5e73\u53f0: express \u548c fastify \u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u6700\u9002\u5408\u4f60\u9700\u8981\u7684\u3002 platform-express Express \u662f\u4e00\u4e2a\u8457\u540d\u7684\u6781\u7b80\u8282\u70b9 web \u6846\u67b6\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u8fc7\u5b9e\u6218\u6d4b\u8bd5\u7684\u3001\u53ef\u7528\u4e8e\u751f\u4ea7\u7684\u5e93\uff0c\u7531\u793e\u533a\u5b9e\u73b0\u4e86\u5927\u91cf\u8d44\u6e90\u3002\u9ed8\u8ba4\u4f7f\u7528 @nestjs/platform-express \u5305\u3002Express \u4e3a\u8bb8\u591a\u7528\u6237\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u670d\u52a1\uff0c\u4e0d\u9700\u8981\u91c7\u53d6\u4efb\u4f55\u884c\u52a8\u5c31\u53ef\u4ee5\u542f\u7528\u5b83\u3002 platform-fastify Fastify \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u548c\u4f4e\u5f00\u9500\u7684\u6846\u67b6\uff0c\u9ad8\u5ea6\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u6700\u5927\u7684\u6548\u7387\u548c\u901f\u5ea6\u3002\u9605\u8bfb\u5982\u4f55\u4f7f\u7528\u5b83 \u6b64\u5904 \u3002 \u65e0\u8bba\u4f7f\u7528\u54ea\u4e2a\u5e73\u53f0\uff0c\u5b83\u90fd\u516c\u5f00\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u63a5\u53e3\u3002 \u5b83\u4eec\u5206\u522b\u88ab\u89c6\u4e3a NestExpressApplication \u548c NestFastifyApplication \u3002 \u5f53\u4f60\u5c06\u4e00\u4e2a\u7c7b\u578b\u4f20\u9012\u7ed9 NestFactory.create() \u65b9\u6cd5\u65f6\uff0c\u5c31\u50cf\u4e0b\u9762\u7684\u4f8b\u5b50\u4e00\u6837\uff0c app \u5bf9\u8c61\u5c06\u4f1a\u6709\u7279\u5b9a\u5e73\u53f0\u4e13\u7528\u7684\u65b9\u6cd5\u3002 \u6ce8\u610f\uff0c\u4f60\u4e0d\u9700\u8981\u6307\u5b9a\u7c7b\u578b\uff0c\u9664\u975e\u4f60\u771f\u7684\u60f3\u8bbf\u95ee\u5e95\u5c42\u7684\u5e73\u53f0 API\u3002 const app = await NestFactory . create < NestExpressApplication > ( AppModule );","title":"\u5e73\u53f0"},{"location":"first-steps/#_6","text":"\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u64cd\u4f5c\u7cfb\u7edf\u547d\u4ee4\u63d0\u793a\u7b26\u4e0b\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u542f\u52a8\u4fa6\u542c\u5165\u7ad9 HTTP \u8bf7\u6c42\u7684\u5e94\u7528\u7a0b\u5e8f: $ npm run start \u8fd9\u4e2a\u547d\u4ee4\u542f\u52a8\u5e94\u7528\uff0c\u8ba9 HTTP \u670d\u52a1\u5668\u76d1\u542c src/main.ts \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u7aef\u53e3\u3002 \u4e00\u65e6\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\uff0c\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230 http://localhost:3000/ \u3002 \u4f60\u5e94\u8be5\u770b\u770b Hello World! \u7684\u6d88\u606f\u3002","title":"\u8fd0\u884c\u5e94\u7528"},{"location":"guards/","text":"\u8b66\u536b \u00b6 \u5b88\u536b\u662f\u4e00\u4e2a\u5e26\u6709 @Injectable() \u88c5\u9970\u5668\u7684\u7c7b\u3002\u5b88\u536b\u5e94\u8be5\u5b9e\u73b0 CanActivate \u63a5\u53e3\u3002 \u8b66\u536b\u53ea\u6709\u4e00\u4e2a\u804c\u8d23\u3002 \u5b83\u4eec\u6839\u636e\u8fd0\u884c\u65f6\u51fa\u73b0\u7684\u67d0\u4e9b\u6761\u4ef6(\u5982\u6743\u9650\u3001\u89d2\u8272\u3001acl \u7b49)\u6765\u51b3\u5b9a\u7ed9\u5b9a\u7684\u8bf7\u6c42\u662f\u5426\u4f1a\u88ab\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u3002 \u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a \u6388\u6743 \u3002 \u5728\u4f20\u7edf\u7684 Express \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6388\u6743(\u4ee5\u53ca\u5b83\u901a\u5e38\u4e0e\u4e4b\u534f\u4f5c\u7684\u540c\u7c7b\u8ba4\u8bc1)\u901a\u5e38\u662f\u7531 middleware \u5904\u7406\u7684\u3002 \u4e2d\u95f4\u4ef6\u662f\u8eab\u4efd\u9a8c\u8bc1\u7684\u597d\u9009\u62e9\uff0c\u56e0\u4e3a\u50cf\u4ee4\u724c\u9a8c\u8bc1\u548c\u5411 \u8bf7\u6c42 \u5bf9\u8c61\u9644\u52a0\u5c5e\u6027\u8fd9\u6837\u7684\u4e8b\u60c5\u4e0e\u7279\u5b9a\u7684\u8def\u7531\u4e0a\u4e0b\u6587(\u53ca\u5176\u5143\u6570\u636e)\u6ca1\u6709\u5f3a\u8fde\u63a5\u3002 \u4f46\u662f\u4e2d\u95f4\u4ef6\u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\u662f\u611a\u8822\u7684\u3002 \u5b83\u4e0d\u77e5\u9053\u8c03\u7528 next() \u51fd\u6570\u540e\u5c06\u6267\u884c\u54ea\u4e2a\u5904\u7406\u7a0b\u5e8f\u3002 \u53e6\u4e00\u65b9\u9762\uff0c \u5b88\u536b \u53ef\u4ee5\u8bbf\u95ee ExecutionContext \u5b9e\u4f8b\uff0c\u56e0\u6b64\u786e\u5207\u5730\u77e5\u9053\u63a5\u4e0b\u6765\u8981\u6267\u884c\u4ec0\u4e48\u3002 \u5b83\u4eec\u7684\u8bbe\u8ba1\u5f88\u50cf\u5f02\u5e38\u8fc7\u6ee4\u5668\u3001\u7ba1\u9053\u548c\u62e6\u622a\u5668\uff0c\u5141\u8bb8\u60a8\u5728\u8bf7\u6c42/\u54cd\u5e94\u5468\u671f\u7684\u6b63\u786e\u4f4d\u7f6e\u63d2\u5165\u5904\u7406\u903b\u8f91\uff0c\u5e76\u4e14\u4ee5\u58f0\u660e\u7684\u65b9\u5f0f\u8fd9\u6837\u505a\u3002 \u8fd9\u6709\u52a9\u4e8e\u4fdd\u6301\u4ee3\u7801\u7684 DRY \u548c\u58f0\u660e\u6027\u3002 info Hint \u5b88\u536b\u5728\u6bcf\u4e2a\u4e2d\u95f4\u4ef6\u4e4b\u540e\u6267\u884c\uff0c\u5728\u4efb\u4f55\u62e6\u622a\u5668\u6216\u7ba1\u9053\u4e4b\u524d\u6267\u884c\u3002 \u6388\u6743\u4fdd\u62a4 \u00b6 \u5982\u524d\u6240\u8ff0\uff0c authorization \u662f guard \u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7528\u4f8b\uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u8c03\u7528\u8005(\u901a\u5e38\u662f\u4e00\u4e2a\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7279\u5b9a\u7528\u6237)\u5177\u6709\u8db3\u591f\u7684\u6743\u9650\u65f6\uff0c\u7279\u5b9a\u8def\u7531\u624d\u5e94\u8be5\u53ef\u7528\u3002 \u6211\u4eec\u73b0\u5728\u8981\u6784\u5efa\u7684 AuthGuard \u5047\u8bbe\u7528\u6237\u901a\u8fc7\u4e86\u8eab\u4efd\u9a8c\u8bc1(\u56e0\u6b64\uff0c\u4e00\u4e2a\u4ee4\u724c\u88ab\u9644\u52a0\u5230\u8bf7\u6c42\u5934)\u3002 \u5b83\u5c06\u63d0\u53d6\u5e76\u9a8c\u8bc1\u4ee4\u724c\uff0c\u5e76\u4f7f\u7528\u63d0\u53d6\u7684\u4fe1\u606f\u6765\u786e\u5b9a\u8bf7\u6c42\u662f\u5426\u53ef\u4ee5\u7ee7\u7eed\u3002 @ @filename ( auth . guard ) import { Injectable , CanActivate , ExecutionContext } from '@nestjs/common' ; import { Observable } from 'rxjs' ; @Injectable () export class AuthGuard implements CanActivate { canActivate ( context : ExecutionContext , ) : boolean | Promise < boolean > | Observable < boolean > { const request = context . switchToHttp (). getRequest (); return validateRequest ( request ); } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class AuthGuard { async canActivate ( context ) { const request = context . switchToHttp (). getRequest (); return validateRequest ( request ); } } info Hint \u5982\u679c\u4f60\u6b63\u5728\u5bfb\u627e\u4e00\u4e2a\u5173\u4e8e\u5982\u4f55\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u5b9e\u73b0\u8ba4\u8bc1\u673a\u5236\u7684\u771f\u5b9e\u4f8b\u5b50\uff0c\u8bf7\u8bbf\u95ee \u672c\u7ae0 \u3002 \u540c\u6837\uff0c\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6388\u6743\u793a\u4f8b\uff0c\u8bf7\u68c0\u67e5 this page \u3002 validateRequest() \u51fd\u6570\u5185\u90e8\u7684\u903b\u8f91\u53ef\u4ee5\u6839\u636e\u9700\u8981\u7b80\u5355\u6216\u590d\u6742\u3002 \u8fd9\u4e2a\u793a\u4f8b\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5c55\u793a\u5b88\u536b\u5982\u4f55\u9002\u5e94\u8bf7\u6c42/\u54cd\u5e94\u5468\u671f\u3002 \u6bcf\u4e2a\u5b88\u536b\u90fd\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a canActivate() \u51fd\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5141\u8bb8\u5f53\u524d\u8bf7\u6c42\u3002 \u5b83\u53ef\u4ee5\u540c\u6b65\u6216\u5f02\u6b65\u5730\u8fd4\u56de\u54cd\u5e94(\u901a\u8fc7 Promise \u6216 Observable )\u3002 Nest \u4f7f\u7528\u8fd4\u56de\u503c\u6765\u63a7\u5236\u4e0b\u4e00\u4e2a\u52a8\u4f5c: \u5982\u679c\u8fd4\u56de true \uff0c\u8bf7\u6c42\u5c06\u88ab\u5904\u7406\u3002 \u5982\u679c\u8fd4\u56de false \uff0cNest \u5c06\u62d2\u7edd\u8bf7\u6c42\u3002 \u6267\u884c\u4e0a\u4e0b\u6587 \u00b6 canActivate() \u51fd\u6570\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373 ExecutionContext \u5b9e\u4f8b\u3002 ExecutionContext \u7ee7\u627f\u81ea ArgumentsHost \u3002 \u6211\u4eec\u5728\u524d\u9762\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u7ae0\u4e2d\u89c1\u8fc7 ArgumentsHost \u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u4f7f\u7528\u4e86\u4e0e\u524d\u9762\u4f7f\u7528\u7684\u5728 ArgumentsHost \u4e0a\u5b9a\u4e49\u7684\u76f8\u540c\u7684 helper \u65b9\u6cd5\u6765\u83b7\u53d6\u5bf9 Request \u5bf9\u8c61\u7684\u5f15\u7528\u3002 \u4f60\u53ef\u4ee5\u53c2\u8003 \u5f02\u5e38\u8fc7\u6ee4\u5668 \u7ae0\u8282\u7684 Arguments host \u6765\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u4fe1\u606f\u3002 \u901a\u8fc7\u6269\u5c55 ArgumentsHost \uff0c ExecutionContext \u8fd8\u6dfb\u52a0\u4e86\u51e0\u4e2a\u65b0\u7684 helper \u65b9\u6cd5\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e86\u5173\u4e8e\u5f53\u524d\u6267\u884c\u8fc7\u7a0b\u7684\u989d\u5916\u7ec6\u8282\u3002 \u8fd9\u4e9b\u7ec6\u8282\u53ef\u4ee5\u5e2e\u52a9\u6784\u5efa\u66f4\u901a\u7528\u7684\u4fdd\u62a4\uff0c\u8fd9\u4e9b\u4fdd\u62a4\u53ef\u4ee5\u8de8\u4e00\u7ec4\u5e7f\u6cdb\u7684\u63a7\u5236\u5668\u3001\u65b9\u6cd5\u548c\u6267\u884c\u4e0a\u4e0b\u6587\u5de5\u4f5c\u3002 \u4e86\u89e3\u6709\u5173 ExecutionContext \u7684\u66f4\u591a\u4fe1\u606f \u5728\u8fd9\u91cc \u3002 \u57fa\u4e8e\u89d2\u8272\u7684\u9a8c\u8bc1 \u00b6 \u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u4fdd\u62a4\u7a0b\u5e8f\uff0c\u5b83\u53ea\u5141\u8bb8\u5177\u6709\u7279\u5b9a\u89d2\u8272\u7684\u7528\u6237\u8bbf\u95ee\u3002 \u6211\u4eec\u5c06\u4ece\u4e00\u4e2a\u57fa\u672c\u7684\u4fdd\u62a4\u6a21\u677f\u5f00\u59cb\uff0c\u5e76\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u4e2d\u6784\u5efa\u5b83\u3002 \u76ee\u524d\uff0c\u5b83\u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u7ee7\u7eed: @ @filename ( roles . guard ) import { Injectable , CanActivate , ExecutionContext } from '@nestjs/common' ; import { Observable } from 'rxjs' ; @Injectable () export class RolesGuard implements CanActivate { canActivate ( context : ExecutionContext , ) : boolean | Promise < boolean > | Observable < boolean > { return true ; } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class RolesGuard { canActivate ( context ) { return true ; } } \u7ed1\u5b9a\u8b66\u536b \u00b6 \u4e0e\u7ba1\u9053\u548c\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u6837\uff0c\u5b88\u536b\u53ef\u4ee5\u662f\u63a7\u5236\u5668\u4f5c\u7528\u57df\u3001\u65b9\u6cd5\u4f5c\u7528\u57df\u6216\u5168\u5c40\u4f5c\u7528\u57df\u7684\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u4f7f\u7528 @UseGuards() \u88c5\u9970\u5668\u6765\u8bbe\u7f6e\u4e00\u4e2a\u63a7\u5236\u5668\u4f5c\u7528\u57df\u7684\u5b88\u536b\u3002 \u8be5\u4fee\u9970\u7b26\u53ef\u4ee5\u63a5\u53d7\u5355\u4e2a\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u63a5\u53d7\u9017\u53f7\u5206\u9694\u7684\u53c2\u6570\u5217\u8868\u3002 \u8fd9\u4f7f\u60a8\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u58f0\u660e\u8f7b\u677e\u5730\u5e94\u7528\u9002\u5f53\u7684\u4fdd\u62a4\u96c6\u3002 @ @filename () @Controller ( 'cats' ) @UseGuards ( RolesGuard ) export class CatsController {} info Hint @UseGuards() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4e0a\u9762\uff0c\u6211\u4eec\u4f20\u9012\u4e86 RolesGuard \u7c7b\u578b(\u800c\u4e0d\u662f\u4e00\u4e2a\u5b9e\u4f8b)\uff0c\u5c06\u5b9e\u4f8b\u5316\u7684\u8d23\u4efb\u7559\u7ed9\u6846\u67b6\uff0c\u5e76\u542f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u4e0e\u7ba1\u9053\u548c\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5c31\u5730\u5b9e\u4f8b: @ @filename () @Controller ( 'cats' ) @UseGuards ( new RolesGuard ()) export class CatsController {} \u4e0a\u9762\u7684\u7ed3\u6784\u5c06\u8b66\u536b\u9644\u52a0\u5230\u7531\u8fd9\u4e2a\u63a7\u5236\u5668\u58f0\u660e\u7684\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u4e0a\u3002 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u5b88\u536b\u53ea\u5e94\u7528\u4e8e\u4e00\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 \u65b9\u6cd5\u7ea7\u522b \u5e94\u7528 @UseGuards() \u88c5\u9970\u5668\u3002 \u4e3a\u4e86\u5efa\u7acb\u5168\u5c40\u5b88\u536b\uff0c\u4f7f\u7528 Nest \u5e94\u7528\u5b9e\u4f8b\u7684 useGlobalGuards() \u65b9\u6cd5: @ @filename () const app = await NestFactory . create ( AppModule ); app . useGlobalGuards ( new RolesGuard ()); warning Notice \u5728\u6df7\u5408\u5e94\u7528\u7684\u60c5\u51b5\u4e0b\uff0c useGlobalGuards() \u65b9\u6cd5\u9ed8\u8ba4\u4e0d\u4f1a\u4e3a\u7f51\u5173\u548c\u5fae\u670d\u52a1\u8bbe\u7f6e\u5b88\u536b(\u53c2\u89c1 hybrid application \u4e86\u89e3\u5982\u4f55\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a)\u3002 \u5bf9\u4e8e \u6807\u51c6 (\u975e\u6df7\u5408)\u5fae\u670d\u52a1\u5e94\u7528\uff0c useGlobalGuards() \u786e\u5b9e\u5728\u5168\u7403\u5b89\u88c5\u4e86\u5b88\u536b\u3002 \u5168\u5c40\u4fdd\u62a4\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u7528\u4e8e\u6bcf\u4e2a\u63a7\u5236\u5668\u548c\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u5728\u4f9d\u8d56\u9879\u6ce8\u5165\u65b9\u9762\uff0c\u4ece\u4efb\u4f55\u6a21\u5757\u5916\u90e8\u6ce8\u518c\u7684\u5168\u5c40\u5b88\u536b(\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684 useGlobalGuards() )\u4e0d\u80fd\u6ce8\u5165\u4f9d\u8d56\u9879\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u4efb\u4f55\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u5b8c\u6210\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784\u76f4\u63a5\u4ece\u4efb\u4f55\u6a21\u5757\u8bbe\u7f6e\u4e00\u4e2a\u5b88\u536b: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { APP_GUARD } from '@nestjs/core' ; @Module ({ providers : [ { provide : APP_GUARD , useClass : RolesGuard , }, ], }) export class AppModule {} info Hint \u5f53\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u4e3a\u5b88\u536b\u6267\u884c\u4f9d\u8d56\u6ce8\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u4f7f\u7528\u8fd9\u79cd\u6784\u9020\u7684\u6a21\u5757\u662f\u4ec0\u4e48\uff0c\u8be5\u5b88\u536b\u5b9e\u9645\u4e0a\u90fd\u662f\u5168\u5c40\u7684\u3002 \u8fd9\u5e94\u8be5\u5728\u54ea\u91cc\u505a? \u9009\u62e9\u5b88\u536b(\u4e0a\u4f8b\u4e2d\u7684 RolesGuard )\u5b9a\u4e49\u7684\u6a21\u5757\u3002 \u6b64\u5916\uff0c useClass \u5e76\u4e0d\u662f\u5904\u7406\u81ea\u5b9a\u4e49\u63d0\u4f9b\u7a0b\u5e8f\u6ce8\u518c\u7684\u552f\u4e00\u65b9\u6cd5\u3002 \u4e86\u89e3\u66f4\u591a \u8fd9\u91cc \u3002 \u4e3a\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u8bbe\u7f6e\u89d2\u8272 \u00b6 \u6211\u4eec\u7684 RolesGuard \u6b63\u5728\u5de5\u4f5c\uff0c\u4f46\u5b83\u8fd8\u4e0d\u662f\u5f88\u667a\u80fd\u3002 \u6211\u4eec\u8fd8\u6ca1\u6709\u5145\u5206\u5229\u7528\u6700\u91cd\u8981\u7684\u4fdd\u62a4\u7279\u6027\u2014\u2014 \u6267\u884c\u4e0a\u4e0b\u6587 \u3002 \u5b83\u8fd8\u4e0d\u77e5\u9053\u89d2\u8272\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u5141\u8bb8\u54ea\u4e9b\u89d2\u8272\u3002 \u4f8b\u5982\uff0c CatsController \u53ef\u80fd\u5bf9\u4e0d\u540c\u7684\u8def\u7531\u6709\u4e0d\u540c\u7684\u6743\u9650\u65b9\u6848\u3002 \u6709\u4e9b\u53ef\u80fd\u53ea\u5bf9\u7ba1\u7406\u7528\u6237\u53ef\u7528\uff0c\u800c\u5176\u4ed6\u53ef\u80fd\u5bf9\u6240\u6709\u4eba\u5f00\u653e\u3002 \u6211\u4eec\u5982\u4f55\u4ee5\u4e00\u79cd\u7075\u6d3b\u4e14\u53ef\u91cd\u7528\u7684\u65b9\u5f0f\u5c06\u89d2\u8272\u4e0e\u8def\u7531\u5339\u914d? \u8fd9\u5c31\u662f\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u53d1\u6325\u4f5c\u7528\u7684\u5730\u65b9(\u4e86\u89e3\u66f4\u591a \u6b64\u5904 )\u3002 \u5de2\u63d0\u4f9b\u4e86\u901a\u8fc7 @SetMetadata() \u88c5\u9970\u5668\u5c06\u81ea\u5b9a\u4e49\u7684\u5143\u6570\u636e\u9644\u52a0\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7684\u80fd\u529b\u3002 \u8fd9\u4e9b\u5143\u6570\u636e\u63d0\u4f9b\u4e86\u6211\u4eec\u6240\u7f3a\u5c11\u7684 \u89d2\u8272 \u6570\u636e\uff0c\u667a\u80fd\u5b88\u536b\u9700\u8981\u8fd9\u4e9b\u6570\u636e\u6765\u505a\u51fa\u51b3\u7b56\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 @SetMetadata() : @ @filename ( cats . controller ) @Post () @SetMetadata ( 'roles' , [ 'admin' ]) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @SetMetadata ( 'roles' , [ 'admin' ]) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } info Hint @SetMetadata() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u4e0a\u9762\u7684\u6784\u9020\u4e2d\uff0c\u6211\u4eec\u5c06 roles \u5143\u6570\u636e( roles \u662f\u4e00\u4e2a\u952e\uff0c\u800c ['admin'] \u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u503c)\u9644\u52a0\u5230 create() \u65b9\u6cd5\u3002 \u867d\u7136\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4f46\u76f4\u63a5\u5728\u8def\u7531\u4e2d\u4f7f\u7528 @SetMetadata() \u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002 \u76f8\u53cd\uff0c\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( roles . decorator ) import { SetMetadata } from '@nestjs/common' ; export const Roles = ( ...roles : string []) => SetMetadata ( 'roles' , roles ); @ @switch import { SetMetadata } from '@nestjs/common' ; export const Roles = (... roles ) => SetMetadata ( 'roles' , roles ); \u8fd9\u79cd\u65b9\u6cd5\u66f4\u7b80\u6d01\uff0c\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u800c\u4e14\u662f\u5f3a\u7c7b\u578b\u7684\u3002 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 @Roles() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u88c5\u9970 create() \u65b9\u6cd5\u3002 @ @filename ( cats . controller ) @Post () @Roles ( 'admin' ) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @Roles ( 'admin' ) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } \u628a\u5b83\u4eec\u653e\u5728\u4e00\u8d77 \u00b6 \u73b0\u5728\u8ba9\u6211\u4eec\u8fd4\u56de\u5e76\u5c06\u5b83\u4e0e\u6211\u4eec\u7684 RolesGuard \u8fde\u63a5\u8d77\u6765\u3002 \u76ee\u524d\uff0c\u5b83\u53ea\u662f\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u8fd4\u56de true \uff0c\u5141\u8bb8\u6bcf\u4e2a\u8bf7\u6c42\u7ee7\u7eed\u3002 \u6211\u4eec\u5e0c\u671b\u5c06\u5206\u914d\u7ed9\u5f53\u524d\u7528\u6237\u7684 \u89d2\u8272 \u4e0e\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u8def\u7531\u6240\u9700\u7684\u5b9e\u9645\u89d2\u8272\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u4f7f\u8fd4\u56de\u503c\u5177\u6709\u6761\u4ef6\u3002 \u4e3a\u4e86\u8bbf\u95ee\u8def\u7531\u7684\u89d2\u8272(\u81ea\u5b9a\u4e49\u5143\u6570\u636e)\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Reflector \u52a9\u624b\u7c7b\uff0c\u5b83\u662f\u7531\u6846\u67b6\u63d0\u4f9b\u7684\uff0c\u4ece @nestjs/core \u5305\u4e2d\u516c\u5f00\u7684\u3002 @ @filename ( roles . guard ) import { Injectable , CanActivate , ExecutionContext } from '@nestjs/common' ; import { Reflector } from '@nestjs/core' ; @Injectable () export class RolesGuard implements CanActivate { constructor ( private reflector : Reflector ) {} canActivate ( context : ExecutionContext ) : boolean { const roles = this . reflector . get < string [] > ( 'roles' , context . getHandler ()); if ( ! roles ) { return true ; } const request = context . switchToHttp (). getRequest (); const user = request . user ; return matchRoles ( roles , user . roles ); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { Reflector } from '@nestjs/core' ; @Injectable () @Dependencies ( Reflector ) export class RolesGuard { constructor ( reflector ) { this . reflector = reflector ; } canActivate ( context ) { const roles = this . reflector . get ( 'roles' , context . getHandler ()); if ( ! roles ) { return true ; } const request = context . switchToHttp (). getRequest (); const user = request . user ; return matchRoles ( roles , user . roles ); } } info Hint \u5728 node.js \u4e2d\uff0c\u5c06\u6388\u6743\u7528\u6237\u9644\u52a0\u5230 request \u5bf9\u8c61\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u505a\u6cd5\u3002 \u56e0\u6b64\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe request \u3002User` \u5305\u542b\u7528\u6237\u5b9e\u4f8b\u548c\u5141\u8bb8\u7684\u89d2\u8272\u3002 \u5728\u4f60\u7684\u5e94\u7528\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u5728\u4f60\u7684\u81ea\u5b9a\u4e49\u8ba4\u8bc1\u5b88\u536b(\u6216\u4e2d\u95f4\u4ef6)\u4e2d\u521b\u5efa\u8fd9\u4e2a\u5173\u8054\u3002 \u8bf7\u67e5\u770b this chapter \u4ee5\u4e86\u89e3\u6709\u5173\u672c\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\u3002 warning Warning matchRoles() \u51fd\u6570\u5185\u90e8\u7684\u903b\u8f91\u53ef\u4ee5\u6839\u636e\u9700\u8981\u7b80\u5355\u6216\u590d\u6742\u3002 \u8fd9\u4e2a\u793a\u4f8b\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5c55\u793a\u5b88\u536b\u5982\u4f55\u9002\u5e94\u8bf7\u6c42/\u54cd\u5e94\u5468\u671f\u3002 \u8bf7\u53c2\u9605 \u6267\u884c\u4e0a\u4e0b\u6587 \u7ae0\u8282\u7684 \u53cd\u5c04\u548c\u5143\u6570\u636e \u5c0f\u8282\uff0c\u4ee5\u4e0a\u4e0b\u6587\u654f\u611f\u7684\u65b9\u5f0f\u4f7f\u7528 Reflector \u7684\u66f4\u591a\u7ec6\u8282\u3002 \u5f53\u6743\u9650\u4e0d\u8db3\u7684\u7528\u6237\u8bf7\u6c42\u4e00\u4e2a\u7aef\u70b9\u65f6\uff0cNest \u4f1a\u81ea\u52a8\u8fd4\u56de\u4ee5\u4e0b\u54cd\u5e94: { \"statusCode\" : 403 , \"message\" : \"Forbidden resource\" , \"error\" : \"Forbidden\" } \u8bf7\u6ce8\u610f\uff0c\u5728\u5e55\u540e\uff0c\u5f53\u5b88\u536b\u8fd4\u56de false \u65f6\uff0c\u6846\u67b6\u4f1a\u629b\u51fa ForbiddenException \u3002 \u5982\u679c\u4f60\u60f3\u8fd4\u56de\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u4f60\u5e94\u8be5\u629b\u51fa\u4f60\u81ea\u5df1\u7684\u5f02\u5e38\u3002 \u4f8b\u5982: throw new UnauthorizedException (); \u7531\u5b88\u536b\u629b\u51fa\u7684\u4efb\u4f55\u5f02\u5e38\u90fd\u5c06\u7531 exceptions \u5c42 (\u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668\u548c\u5e94\u7528\u4e8e\u5f53\u524d\u4e0a\u4e0b\u6587\u7684\u4efb\u4f55\u5f02\u5e38\u8fc7\u6ee4\u5668)\u5904\u7406\u3002 info Hint \u5982\u679c\u4f60\u6b63\u5728\u5bfb\u627e\u5982\u4f55\u5b9e\u73b0\u6388\u6743\u7684\u771f\u5b9e\u793a\u4f8b\uff0c\u8bf7\u67e5\u770b \u672c\u7ae0 \u3002","title":"\u5b88\u536b"},{"location":"guards/#_1","text":"\u5b88\u536b\u662f\u4e00\u4e2a\u5e26\u6709 @Injectable() \u88c5\u9970\u5668\u7684\u7c7b\u3002\u5b88\u536b\u5e94\u8be5\u5b9e\u73b0 CanActivate \u63a5\u53e3\u3002 \u8b66\u536b\u53ea\u6709\u4e00\u4e2a\u804c\u8d23\u3002 \u5b83\u4eec\u6839\u636e\u8fd0\u884c\u65f6\u51fa\u73b0\u7684\u67d0\u4e9b\u6761\u4ef6(\u5982\u6743\u9650\u3001\u89d2\u8272\u3001acl \u7b49)\u6765\u51b3\u5b9a\u7ed9\u5b9a\u7684\u8bf7\u6c42\u662f\u5426\u4f1a\u88ab\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u3002 \u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a \u6388\u6743 \u3002 \u5728\u4f20\u7edf\u7684 Express \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6388\u6743(\u4ee5\u53ca\u5b83\u901a\u5e38\u4e0e\u4e4b\u534f\u4f5c\u7684\u540c\u7c7b\u8ba4\u8bc1)\u901a\u5e38\u662f\u7531 middleware \u5904\u7406\u7684\u3002 \u4e2d\u95f4\u4ef6\u662f\u8eab\u4efd\u9a8c\u8bc1\u7684\u597d\u9009\u62e9\uff0c\u56e0\u4e3a\u50cf\u4ee4\u724c\u9a8c\u8bc1\u548c\u5411 \u8bf7\u6c42 \u5bf9\u8c61\u9644\u52a0\u5c5e\u6027\u8fd9\u6837\u7684\u4e8b\u60c5\u4e0e\u7279\u5b9a\u7684\u8def\u7531\u4e0a\u4e0b\u6587(\u53ca\u5176\u5143\u6570\u636e)\u6ca1\u6709\u5f3a\u8fde\u63a5\u3002 \u4f46\u662f\u4e2d\u95f4\u4ef6\u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\u662f\u611a\u8822\u7684\u3002 \u5b83\u4e0d\u77e5\u9053\u8c03\u7528 next() \u51fd\u6570\u540e\u5c06\u6267\u884c\u54ea\u4e2a\u5904\u7406\u7a0b\u5e8f\u3002 \u53e6\u4e00\u65b9\u9762\uff0c \u5b88\u536b \u53ef\u4ee5\u8bbf\u95ee ExecutionContext \u5b9e\u4f8b\uff0c\u56e0\u6b64\u786e\u5207\u5730\u77e5\u9053\u63a5\u4e0b\u6765\u8981\u6267\u884c\u4ec0\u4e48\u3002 \u5b83\u4eec\u7684\u8bbe\u8ba1\u5f88\u50cf\u5f02\u5e38\u8fc7\u6ee4\u5668\u3001\u7ba1\u9053\u548c\u62e6\u622a\u5668\uff0c\u5141\u8bb8\u60a8\u5728\u8bf7\u6c42/\u54cd\u5e94\u5468\u671f\u7684\u6b63\u786e\u4f4d\u7f6e\u63d2\u5165\u5904\u7406\u903b\u8f91\uff0c\u5e76\u4e14\u4ee5\u58f0\u660e\u7684\u65b9\u5f0f\u8fd9\u6837\u505a\u3002 \u8fd9\u6709\u52a9\u4e8e\u4fdd\u6301\u4ee3\u7801\u7684 DRY \u548c\u58f0\u660e\u6027\u3002 info Hint \u5b88\u536b\u5728\u6bcf\u4e2a\u4e2d\u95f4\u4ef6\u4e4b\u540e\u6267\u884c\uff0c\u5728\u4efb\u4f55\u62e6\u622a\u5668\u6216\u7ba1\u9053\u4e4b\u524d\u6267\u884c\u3002","title":"\u8b66\u536b"},{"location":"guards/#_2","text":"\u5982\u524d\u6240\u8ff0\uff0c authorization \u662f guard \u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7528\u4f8b\uff0c\u56e0\u4e3a\u53ea\u6709\u5f53\u8c03\u7528\u8005(\u901a\u5e38\u662f\u4e00\u4e2a\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7279\u5b9a\u7528\u6237)\u5177\u6709\u8db3\u591f\u7684\u6743\u9650\u65f6\uff0c\u7279\u5b9a\u8def\u7531\u624d\u5e94\u8be5\u53ef\u7528\u3002 \u6211\u4eec\u73b0\u5728\u8981\u6784\u5efa\u7684 AuthGuard \u5047\u8bbe\u7528\u6237\u901a\u8fc7\u4e86\u8eab\u4efd\u9a8c\u8bc1(\u56e0\u6b64\uff0c\u4e00\u4e2a\u4ee4\u724c\u88ab\u9644\u52a0\u5230\u8bf7\u6c42\u5934)\u3002 \u5b83\u5c06\u63d0\u53d6\u5e76\u9a8c\u8bc1\u4ee4\u724c\uff0c\u5e76\u4f7f\u7528\u63d0\u53d6\u7684\u4fe1\u606f\u6765\u786e\u5b9a\u8bf7\u6c42\u662f\u5426\u53ef\u4ee5\u7ee7\u7eed\u3002 @ @filename ( auth . guard ) import { Injectable , CanActivate , ExecutionContext } from '@nestjs/common' ; import { Observable } from 'rxjs' ; @Injectable () export class AuthGuard implements CanActivate { canActivate ( context : ExecutionContext , ) : boolean | Promise < boolean > | Observable < boolean > { const request = context . switchToHttp (). getRequest (); return validateRequest ( request ); } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class AuthGuard { async canActivate ( context ) { const request = context . switchToHttp (). getRequest (); return validateRequest ( request ); } } info Hint \u5982\u679c\u4f60\u6b63\u5728\u5bfb\u627e\u4e00\u4e2a\u5173\u4e8e\u5982\u4f55\u5728\u4f60\u7684\u5e94\u7528\u4e2d\u5b9e\u73b0\u8ba4\u8bc1\u673a\u5236\u7684\u771f\u5b9e\u4f8b\u5b50\uff0c\u8bf7\u8bbf\u95ee \u672c\u7ae0 \u3002 \u540c\u6837\uff0c\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6388\u6743\u793a\u4f8b\uff0c\u8bf7\u68c0\u67e5 this page \u3002 validateRequest() \u51fd\u6570\u5185\u90e8\u7684\u903b\u8f91\u53ef\u4ee5\u6839\u636e\u9700\u8981\u7b80\u5355\u6216\u590d\u6742\u3002 \u8fd9\u4e2a\u793a\u4f8b\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5c55\u793a\u5b88\u536b\u5982\u4f55\u9002\u5e94\u8bf7\u6c42/\u54cd\u5e94\u5468\u671f\u3002 \u6bcf\u4e2a\u5b88\u536b\u90fd\u5fc5\u987b\u5b9e\u73b0\u4e00\u4e2a canActivate() \u51fd\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5141\u8bb8\u5f53\u524d\u8bf7\u6c42\u3002 \u5b83\u53ef\u4ee5\u540c\u6b65\u6216\u5f02\u6b65\u5730\u8fd4\u56de\u54cd\u5e94(\u901a\u8fc7 Promise \u6216 Observable )\u3002 Nest \u4f7f\u7528\u8fd4\u56de\u503c\u6765\u63a7\u5236\u4e0b\u4e00\u4e2a\u52a8\u4f5c: \u5982\u679c\u8fd4\u56de true \uff0c\u8bf7\u6c42\u5c06\u88ab\u5904\u7406\u3002 \u5982\u679c\u8fd4\u56de false \uff0cNest \u5c06\u62d2\u7edd\u8bf7\u6c42\u3002","title":"\u6388\u6743\u4fdd\u62a4"},{"location":"guards/#_3","text":"canActivate() \u51fd\u6570\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373 ExecutionContext \u5b9e\u4f8b\u3002 ExecutionContext \u7ee7\u627f\u81ea ArgumentsHost \u3002 \u6211\u4eec\u5728\u524d\u9762\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u7ae0\u4e2d\u89c1\u8fc7 ArgumentsHost \u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u4f7f\u7528\u4e86\u4e0e\u524d\u9762\u4f7f\u7528\u7684\u5728 ArgumentsHost \u4e0a\u5b9a\u4e49\u7684\u76f8\u540c\u7684 helper \u65b9\u6cd5\u6765\u83b7\u53d6\u5bf9 Request \u5bf9\u8c61\u7684\u5f15\u7528\u3002 \u4f60\u53ef\u4ee5\u53c2\u8003 \u5f02\u5e38\u8fc7\u6ee4\u5668 \u7ae0\u8282\u7684 Arguments host \u6765\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u4fe1\u606f\u3002 \u901a\u8fc7\u6269\u5c55 ArgumentsHost \uff0c ExecutionContext \u8fd8\u6dfb\u52a0\u4e86\u51e0\u4e2a\u65b0\u7684 helper \u65b9\u6cd5\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e86\u5173\u4e8e\u5f53\u524d\u6267\u884c\u8fc7\u7a0b\u7684\u989d\u5916\u7ec6\u8282\u3002 \u8fd9\u4e9b\u7ec6\u8282\u53ef\u4ee5\u5e2e\u52a9\u6784\u5efa\u66f4\u901a\u7528\u7684\u4fdd\u62a4\uff0c\u8fd9\u4e9b\u4fdd\u62a4\u53ef\u4ee5\u8de8\u4e00\u7ec4\u5e7f\u6cdb\u7684\u63a7\u5236\u5668\u3001\u65b9\u6cd5\u548c\u6267\u884c\u4e0a\u4e0b\u6587\u5de5\u4f5c\u3002 \u4e86\u89e3\u6709\u5173 ExecutionContext \u7684\u66f4\u591a\u4fe1\u606f \u5728\u8fd9\u91cc \u3002","title":"\u6267\u884c\u4e0a\u4e0b\u6587"},{"location":"guards/#_4","text":"\u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u4fdd\u62a4\u7a0b\u5e8f\uff0c\u5b83\u53ea\u5141\u8bb8\u5177\u6709\u7279\u5b9a\u89d2\u8272\u7684\u7528\u6237\u8bbf\u95ee\u3002 \u6211\u4eec\u5c06\u4ece\u4e00\u4e2a\u57fa\u672c\u7684\u4fdd\u62a4\u6a21\u677f\u5f00\u59cb\uff0c\u5e76\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u4e2d\u6784\u5efa\u5b83\u3002 \u76ee\u524d\uff0c\u5b83\u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u7ee7\u7eed: @ @filename ( roles . guard ) import { Injectable , CanActivate , ExecutionContext } from '@nestjs/common' ; import { Observable } from 'rxjs' ; @Injectable () export class RolesGuard implements CanActivate { canActivate ( context : ExecutionContext , ) : boolean | Promise < boolean > | Observable < boolean > { return true ; } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class RolesGuard { canActivate ( context ) { return true ; } }","title":"\u57fa\u4e8e\u89d2\u8272\u7684\u9a8c\u8bc1"},{"location":"guards/#_5","text":"\u4e0e\u7ba1\u9053\u548c\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u6837\uff0c\u5b88\u536b\u53ef\u4ee5\u662f\u63a7\u5236\u5668\u4f5c\u7528\u57df\u3001\u65b9\u6cd5\u4f5c\u7528\u57df\u6216\u5168\u5c40\u4f5c\u7528\u57df\u7684\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u4f7f\u7528 @UseGuards() \u88c5\u9970\u5668\u6765\u8bbe\u7f6e\u4e00\u4e2a\u63a7\u5236\u5668\u4f5c\u7528\u57df\u7684\u5b88\u536b\u3002 \u8be5\u4fee\u9970\u7b26\u53ef\u4ee5\u63a5\u53d7\u5355\u4e2a\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u63a5\u53d7\u9017\u53f7\u5206\u9694\u7684\u53c2\u6570\u5217\u8868\u3002 \u8fd9\u4f7f\u60a8\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u58f0\u660e\u8f7b\u677e\u5730\u5e94\u7528\u9002\u5f53\u7684\u4fdd\u62a4\u96c6\u3002 @ @filename () @Controller ( 'cats' ) @UseGuards ( RolesGuard ) export class CatsController {} info Hint @UseGuards() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4e0a\u9762\uff0c\u6211\u4eec\u4f20\u9012\u4e86 RolesGuard \u7c7b\u578b(\u800c\u4e0d\u662f\u4e00\u4e2a\u5b9e\u4f8b)\uff0c\u5c06\u5b9e\u4f8b\u5316\u7684\u8d23\u4efb\u7559\u7ed9\u6846\u67b6\uff0c\u5e76\u542f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u4e0e\u7ba1\u9053\u548c\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5c31\u5730\u5b9e\u4f8b: @ @filename () @Controller ( 'cats' ) @UseGuards ( new RolesGuard ()) export class CatsController {} \u4e0a\u9762\u7684\u7ed3\u6784\u5c06\u8b66\u536b\u9644\u52a0\u5230\u7531\u8fd9\u4e2a\u63a7\u5236\u5668\u58f0\u660e\u7684\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u4e0a\u3002 \u5982\u679c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u5b88\u536b\u53ea\u5e94\u7528\u4e8e\u4e00\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 \u65b9\u6cd5\u7ea7\u522b \u5e94\u7528 @UseGuards() \u88c5\u9970\u5668\u3002 \u4e3a\u4e86\u5efa\u7acb\u5168\u5c40\u5b88\u536b\uff0c\u4f7f\u7528 Nest \u5e94\u7528\u5b9e\u4f8b\u7684 useGlobalGuards() \u65b9\u6cd5: @ @filename () const app = await NestFactory . create ( AppModule ); app . useGlobalGuards ( new RolesGuard ()); warning Notice \u5728\u6df7\u5408\u5e94\u7528\u7684\u60c5\u51b5\u4e0b\uff0c useGlobalGuards() \u65b9\u6cd5\u9ed8\u8ba4\u4e0d\u4f1a\u4e3a\u7f51\u5173\u548c\u5fae\u670d\u52a1\u8bbe\u7f6e\u5b88\u536b(\u53c2\u89c1 hybrid application \u4e86\u89e3\u5982\u4f55\u6539\u53d8\u8fd9\u79cd\u884c\u4e3a)\u3002 \u5bf9\u4e8e \u6807\u51c6 (\u975e\u6df7\u5408)\u5fae\u670d\u52a1\u5e94\u7528\uff0c useGlobalGuards() \u786e\u5b9e\u5728\u5168\u7403\u5b89\u88c5\u4e86\u5b88\u536b\u3002 \u5168\u5c40\u4fdd\u62a4\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u7528\u4e8e\u6bcf\u4e2a\u63a7\u5236\u5668\u548c\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u5728\u4f9d\u8d56\u9879\u6ce8\u5165\u65b9\u9762\uff0c\u4ece\u4efb\u4f55\u6a21\u5757\u5916\u90e8\u6ce8\u518c\u7684\u5168\u5c40\u5b88\u536b(\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684 useGlobalGuards() )\u4e0d\u80fd\u6ce8\u5165\u4f9d\u8d56\u9879\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u4efb\u4f55\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u5b8c\u6210\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784\u76f4\u63a5\u4ece\u4efb\u4f55\u6a21\u5757\u8bbe\u7f6e\u4e00\u4e2a\u5b88\u536b: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { APP_GUARD } from '@nestjs/core' ; @Module ({ providers : [ { provide : APP_GUARD , useClass : RolesGuard , }, ], }) export class AppModule {} info Hint \u5f53\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u4e3a\u5b88\u536b\u6267\u884c\u4f9d\u8d56\u6ce8\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u4f7f\u7528\u8fd9\u79cd\u6784\u9020\u7684\u6a21\u5757\u662f\u4ec0\u4e48\uff0c\u8be5\u5b88\u536b\u5b9e\u9645\u4e0a\u90fd\u662f\u5168\u5c40\u7684\u3002 \u8fd9\u5e94\u8be5\u5728\u54ea\u91cc\u505a? \u9009\u62e9\u5b88\u536b(\u4e0a\u4f8b\u4e2d\u7684 RolesGuard )\u5b9a\u4e49\u7684\u6a21\u5757\u3002 \u6b64\u5916\uff0c useClass \u5e76\u4e0d\u662f\u5904\u7406\u81ea\u5b9a\u4e49\u63d0\u4f9b\u7a0b\u5e8f\u6ce8\u518c\u7684\u552f\u4e00\u65b9\u6cd5\u3002 \u4e86\u89e3\u66f4\u591a \u8fd9\u91cc \u3002","title":"\u7ed1\u5b9a\u8b66\u536b"},{"location":"guards/#_6","text":"\u6211\u4eec\u7684 RolesGuard \u6b63\u5728\u5de5\u4f5c\uff0c\u4f46\u5b83\u8fd8\u4e0d\u662f\u5f88\u667a\u80fd\u3002 \u6211\u4eec\u8fd8\u6ca1\u6709\u5145\u5206\u5229\u7528\u6700\u91cd\u8981\u7684\u4fdd\u62a4\u7279\u6027\u2014\u2014 \u6267\u884c\u4e0a\u4e0b\u6587 \u3002 \u5b83\u8fd8\u4e0d\u77e5\u9053\u89d2\u8272\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u5141\u8bb8\u54ea\u4e9b\u89d2\u8272\u3002 \u4f8b\u5982\uff0c CatsController \u53ef\u80fd\u5bf9\u4e0d\u540c\u7684\u8def\u7531\u6709\u4e0d\u540c\u7684\u6743\u9650\u65b9\u6848\u3002 \u6709\u4e9b\u53ef\u80fd\u53ea\u5bf9\u7ba1\u7406\u7528\u6237\u53ef\u7528\uff0c\u800c\u5176\u4ed6\u53ef\u80fd\u5bf9\u6240\u6709\u4eba\u5f00\u653e\u3002 \u6211\u4eec\u5982\u4f55\u4ee5\u4e00\u79cd\u7075\u6d3b\u4e14\u53ef\u91cd\u7528\u7684\u65b9\u5f0f\u5c06\u89d2\u8272\u4e0e\u8def\u7531\u5339\u914d? \u8fd9\u5c31\u662f\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u53d1\u6325\u4f5c\u7528\u7684\u5730\u65b9(\u4e86\u89e3\u66f4\u591a \u6b64\u5904 )\u3002 \u5de2\u63d0\u4f9b\u4e86\u901a\u8fc7 @SetMetadata() \u88c5\u9970\u5668\u5c06\u81ea\u5b9a\u4e49\u7684\u5143\u6570\u636e\u9644\u52a0\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7684\u80fd\u529b\u3002 \u8fd9\u4e9b\u5143\u6570\u636e\u63d0\u4f9b\u4e86\u6211\u4eec\u6240\u7f3a\u5c11\u7684 \u89d2\u8272 \u6570\u636e\uff0c\u667a\u80fd\u5b88\u536b\u9700\u8981\u8fd9\u4e9b\u6570\u636e\u6765\u505a\u51fa\u51b3\u7b56\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 @SetMetadata() : @ @filename ( cats . controller ) @Post () @SetMetadata ( 'roles' , [ 'admin' ]) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @SetMetadata ( 'roles' , [ 'admin' ]) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } info Hint @SetMetadata() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u4e0a\u9762\u7684\u6784\u9020\u4e2d\uff0c\u6211\u4eec\u5c06 roles \u5143\u6570\u636e( roles \u662f\u4e00\u4e2a\u952e\uff0c\u800c ['admin'] \u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u503c)\u9644\u52a0\u5230 create() \u65b9\u6cd5\u3002 \u867d\u7136\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4f46\u76f4\u63a5\u5728\u8def\u7531\u4e2d\u4f7f\u7528 @SetMetadata() \u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002 \u76f8\u53cd\uff0c\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( roles . decorator ) import { SetMetadata } from '@nestjs/common' ; export const Roles = ( ...roles : string []) => SetMetadata ( 'roles' , roles ); @ @switch import { SetMetadata } from '@nestjs/common' ; export const Roles = (... roles ) => SetMetadata ( 'roles' , roles ); \u8fd9\u79cd\u65b9\u6cd5\u66f4\u7b80\u6d01\uff0c\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u800c\u4e14\u662f\u5f3a\u7c7b\u578b\u7684\u3002 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 @Roles() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u88c5\u9970 create() \u65b9\u6cd5\u3002 @ @filename ( cats . controller ) @Post () @Roles ( 'admin' ) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @Roles ( 'admin' ) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); }","title":"\u4e3a\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u8bbe\u7f6e\u89d2\u8272"},{"location":"guards/#_7","text":"\u73b0\u5728\u8ba9\u6211\u4eec\u8fd4\u56de\u5e76\u5c06\u5b83\u4e0e\u6211\u4eec\u7684 RolesGuard \u8fde\u63a5\u8d77\u6765\u3002 \u76ee\u524d\uff0c\u5b83\u53ea\u662f\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u8fd4\u56de true \uff0c\u5141\u8bb8\u6bcf\u4e2a\u8bf7\u6c42\u7ee7\u7eed\u3002 \u6211\u4eec\u5e0c\u671b\u5c06\u5206\u914d\u7ed9\u5f53\u524d\u7528\u6237\u7684 \u89d2\u8272 \u4e0e\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u8def\u7531\u6240\u9700\u7684\u5b9e\u9645\u89d2\u8272\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u4f7f\u8fd4\u56de\u503c\u5177\u6709\u6761\u4ef6\u3002 \u4e3a\u4e86\u8bbf\u95ee\u8def\u7531\u7684\u89d2\u8272(\u81ea\u5b9a\u4e49\u5143\u6570\u636e)\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Reflector \u52a9\u624b\u7c7b\uff0c\u5b83\u662f\u7531\u6846\u67b6\u63d0\u4f9b\u7684\uff0c\u4ece @nestjs/core \u5305\u4e2d\u516c\u5f00\u7684\u3002 @ @filename ( roles . guard ) import { Injectable , CanActivate , ExecutionContext } from '@nestjs/common' ; import { Reflector } from '@nestjs/core' ; @Injectable () export class RolesGuard implements CanActivate { constructor ( private reflector : Reflector ) {} canActivate ( context : ExecutionContext ) : boolean { const roles = this . reflector . get < string [] > ( 'roles' , context . getHandler ()); if ( ! roles ) { return true ; } const request = context . switchToHttp (). getRequest (); const user = request . user ; return matchRoles ( roles , user . roles ); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { Reflector } from '@nestjs/core' ; @Injectable () @Dependencies ( Reflector ) export class RolesGuard { constructor ( reflector ) { this . reflector = reflector ; } canActivate ( context ) { const roles = this . reflector . get ( 'roles' , context . getHandler ()); if ( ! roles ) { return true ; } const request = context . switchToHttp (). getRequest (); const user = request . user ; return matchRoles ( roles , user . roles ); } } info Hint \u5728 node.js \u4e2d\uff0c\u5c06\u6388\u6743\u7528\u6237\u9644\u52a0\u5230 request \u5bf9\u8c61\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u505a\u6cd5\u3002 \u56e0\u6b64\uff0c\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe request \u3002User` \u5305\u542b\u7528\u6237\u5b9e\u4f8b\u548c\u5141\u8bb8\u7684\u89d2\u8272\u3002 \u5728\u4f60\u7684\u5e94\u7528\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u5728\u4f60\u7684\u81ea\u5b9a\u4e49\u8ba4\u8bc1\u5b88\u536b(\u6216\u4e2d\u95f4\u4ef6)\u4e2d\u521b\u5efa\u8fd9\u4e2a\u5173\u8054\u3002 \u8bf7\u67e5\u770b this chapter \u4ee5\u4e86\u89e3\u6709\u5173\u672c\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\u3002 warning Warning matchRoles() \u51fd\u6570\u5185\u90e8\u7684\u903b\u8f91\u53ef\u4ee5\u6839\u636e\u9700\u8981\u7b80\u5355\u6216\u590d\u6742\u3002 \u8fd9\u4e2a\u793a\u4f8b\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5c55\u793a\u5b88\u536b\u5982\u4f55\u9002\u5e94\u8bf7\u6c42/\u54cd\u5e94\u5468\u671f\u3002 \u8bf7\u53c2\u9605 \u6267\u884c\u4e0a\u4e0b\u6587 \u7ae0\u8282\u7684 \u53cd\u5c04\u548c\u5143\u6570\u636e \u5c0f\u8282\uff0c\u4ee5\u4e0a\u4e0b\u6587\u654f\u611f\u7684\u65b9\u5f0f\u4f7f\u7528 Reflector \u7684\u66f4\u591a\u7ec6\u8282\u3002 \u5f53\u6743\u9650\u4e0d\u8db3\u7684\u7528\u6237\u8bf7\u6c42\u4e00\u4e2a\u7aef\u70b9\u65f6\uff0cNest \u4f1a\u81ea\u52a8\u8fd4\u56de\u4ee5\u4e0b\u54cd\u5e94: { \"statusCode\" : 403 , \"message\" : \"Forbidden resource\" , \"error\" : \"Forbidden\" } \u8bf7\u6ce8\u610f\uff0c\u5728\u5e55\u540e\uff0c\u5f53\u5b88\u536b\u8fd4\u56de false \u65f6\uff0c\u6846\u67b6\u4f1a\u629b\u51fa ForbiddenException \u3002 \u5982\u679c\u4f60\u60f3\u8fd4\u56de\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u4f60\u5e94\u8be5\u629b\u51fa\u4f60\u81ea\u5df1\u7684\u5f02\u5e38\u3002 \u4f8b\u5982: throw new UnauthorizedException (); \u7531\u5b88\u536b\u629b\u51fa\u7684\u4efb\u4f55\u5f02\u5e38\u90fd\u5c06\u7531 exceptions \u5c42 (\u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668\u548c\u5e94\u7528\u4e8e\u5f53\u524d\u4e0a\u4e0b\u6587\u7684\u4efb\u4f55\u5f02\u5e38\u8fc7\u6ee4\u5668)\u5904\u7406\u3002 info Hint \u5982\u679c\u4f60\u6b63\u5728\u5bfb\u627e\u5982\u4f55\u5b9e\u73b0\u6388\u6743\u7684\u771f\u5b9e\u793a\u4f8b\uff0c\u8bf7\u67e5\u770b \u672c\u7ae0 \u3002","title":"\u628a\u5b83\u4eec\u653e\u5728\u4e00\u8d77"},{"location":"interceptors/","text":"\u62e6\u622a\u5668 \u00b6 \u62e6\u622a\u5668\u662f\u7528 @Injectable() \u88c5\u9970\u5668\u6ce8\u89e3\u7684\u7c7b\u3002 \u62e6\u622a\u5668\u5b9e\u73b0\u4e86 NestInterceptor \u63a5\u53e3\u3002 \u62e6\u622a\u5668\u6709\u4e00\u7ec4\u6709\u7528\u7684\u529f\u80fd\uff0c\u5b83\u4eec\u53d7\u5230\u4e86 \u9762\u5411\u65b9\u9762\u7f16\u7a0b (AOP) \u6280\u672f\u7684\u542f\u53d1\u3002 \u5b83\u4eec\u4f7f\u4ee5\u4e0b\u4e8b\u60c5\u6210\u4e3a\u53ef\u80fd: \u5728\u65b9\u6cd5\u6267\u884c\u4e4b\u524d/\u4e4b\u540e\u7ed1\u5b9a\u989d\u5916\u7684\u903b\u8f91 \u8f6c\u6362\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c \u8f6c\u6362\u51fd\u6570\u629b\u51fa\u7684\u5f02\u5e38 \u6269\u5c55\u57fa\u672c\u51fd\u6570\u884c\u4e3a \u6839\u636e\u7279\u5b9a\u6761\u4ef6\u5b8c\u5168\u91cd\u5199\u51fd\u6570(\u4f8b\u5982\uff0c\u4e3a\u4e86\u7f13\u5b58) \u57fa\u672c \u00b6 \u6bcf\u4e2a\u62e6\u622a\u5668\u90fd\u5b9e\u73b0\u4e86 intercept() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u662f ExecutionContext \u5b9e\u4f8b(\u4e0e \u5b88\u536b \u7684\u5bf9\u8c61\u5b8c\u5168\u76f8\u540c)\u3002 ExecutionContext \u7ee7\u627f\u81ea ArgumentsHost \u3002 \u6211\u4eec\u5728\u4e4b\u524d\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u7ae0\u4e2d\u770b\u5230\u4e86 ArgumentsHost \u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u5b83\u662f\u4f20\u9012\u7ed9\u539f\u59cb\u5904\u7406\u7a0b\u5e8f\u7684\u53c2\u6570\u7684\u5305\u88c5\u5668\uff0c\u5e76\u5305\u542b\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\u7684\u4e0d\u540c\u53c2\u6570\u6570\u7ec4\u3002 \u60a8\u53ef\u4ee5\u53c2\u8003 \u5f02\u5e38\u8fc7\u6ee4\u5668 \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u4fe1\u606f\u3002 \u6267\u884c\u4e0a\u4e0b\u6587 \u00b6 \u901a\u8fc7\u6269\u5c55 ArgumentsHost \uff0c ExecutionContext \u8fd8\u589e\u52a0\u4e86\u51e0\u4e2a\u65b0\u7684\u52a9\u624b\u65b9\u6cd5\uff0c\u63d0\u4f9b\u5173\u4e8e\u5f53\u524d\u6267\u884c\u8fc7\u7a0b\u7684\u989d\u5916\u7ec6\u8282\u3002 \u8fd9\u4e9b\u7ec6\u8282\u6709\u52a9\u4e8e\u6784\u5efa\u66f4\u901a\u7528\u7684\u62e6\u622a\u5668\uff0c\u8fd9\u4e9b\u62e6\u622a\u5668\u53ef\u4ee5\u8de8\u5e7f\u6cdb\u7684\u63a7\u5236\u5668\u3001\u65b9\u6cd5\u548c\u6267\u884c\u4e0a\u4e0b\u6587\u5de5\u4f5c\u3002 \u8fd9\u91cc \u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u5173\u4e8e ExecutionContext \u7684\u4fe1\u606f\u3002 \u8c03\u7528\u7ba1\u7406\u5668 \u00b6 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f CallHandler \u3002 CallHandler \u63a5\u53e3\u5b9e\u73b0\u4e86 handle() \u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5728\u62e6\u622a\u5668\u7684\u67d0\u4e2a\u70b9\u4e0a\u4f7f\u7528\u5b83\u6765\u8c03\u7528\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u6ca1\u6709\u5728\u4f60\u7684 intercept() \u65b9\u6cd5\u7684\u5b9e\u73b0\u4e2d\u8c03\u7528 handle() \u65b9\u6cd5\uff0c\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u5c06\u6839\u672c\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u8fd9\u79cd\u65b9\u6cd5\u610f\u5473\u7740 intercept() \u65b9\u6cd5\u6709\u6548\u5730 \u5305\u88c5 \u4e86\u8bf7\u6c42/\u54cd\u5e94\u6d41\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u5728\u6700\u7ec8\u8def\u7531\u5904\u7406\u5668\u6267\u884c \u4e4b\u524d\u548c\u4e4b\u540e \u90fd\u5b9e\u73b0\u81ea\u5b9a\u4e49\u903b\u8f91\u3002 \u5f88\u660e\u663e\uff0c\u4f60\u53ef\u4ee5\u5728\u4f60\u7684 intercept() \u65b9\u6cd5\u4e2d\u7f16\u5199\u4ee3\u7801\uff0c\u5728\u8c03\u7528 handle() \u4e4b\u524d \u6267\u884c\uff0c\u4f46\u4f60\u5982\u4f55\u5f71\u54cd\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u60c5? \u56e0\u4e3a handle() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u529f\u80fd\u5f3a\u5927\u7684 RxJS \u64cd\u4f5c\u7b26\u6765\u8fdb\u4e00\u6b65\u64cd\u4f5c\u54cd\u5e94\u3002 \u4f7f\u7528\u9762\u5411\u65b9\u9762\u7f16\u7a0b\u672f\u8bed\uff0c\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7684\u8c03\u7528(\u4f8b\u5982\uff0c\u8c03\u7528 handle() )\u79f0\u4e3a \u5207\u5165\u70b9 \uff0c\u8868\u660e\u5b83\u662f\u63d2\u5165\u989d\u5916\u903b\u8f91\u7684\u70b9\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u4f20\u5165\u7684 POST /cats \u8bf7\u6c42\u3002 \u8fd9\u4e2a\u8bf7\u6c42\u7684\u76ee\u7684\u5730\u662f CatsController \u4e2d\u5b9a\u4e49\u7684 create() \u5904\u7406\u7a0b\u5e8f\u3002 \u5982\u679c\u4e00\u4e2a\u6ca1\u6709\u8c03\u7528 handle() \u65b9\u6cd5\u7684\u62e6\u622a\u5668\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u88ab\u8c03\u7528\uff0c create() \u65b9\u6cd5\u5c06\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u4e00\u65e6 handle() \u88ab\u8c03\u7528(\u5e76\u4e14\u5b83\u7684 Observable \u5df2\u7ecf\u88ab\u8fd4\u56de)\uff0c create() \u5904\u7406\u5668\u5c31\u4f1a\u88ab\u89e6\u53d1\u3002 \u4e00\u65e6\u54cd\u5e94\u6d41\u901a\u8fc7 Observable \u88ab\u63a5\u6536\uff0c\u5c31\u53ef\u4ee5\u5728\u6d41\u4e0a\u6267\u884c\u989d\u5916\u7684\u64cd\u4f5c\uff0c\u5e76\u5c06\u6700\u7ec8\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002 \u5207\u9762\u62e6\u622a \u00b6 \u6211\u4eec\u5c06\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u7528\u4f8b\u662f\u4f7f\u7528\u62e6\u622a\u5668\u6765\u8bb0\u5f55\u7528\u6237\u4ea4\u4e92(\u4f8b\u5982\uff0c\u5b58\u50a8\u7528\u6237\u8c03\u7528\u3001\u5f02\u6b65\u8c03\u5ea6\u4e8b\u4ef6\u6216\u8ba1\u7b97\u65f6\u95f4\u6233)\u3002 \u4e0b\u9762\u6211\u4eec\u5c55\u793a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 LoggingInterceptor : @ @filename ( logging . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , CallHandler } from '@nestjs/common' ; import { Observable } from 'rxjs' ; import { tap } from 'rxjs/operators' ; @Injectable () export class LoggingInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { console . log ( 'Before...' ); const now = Date . now (); return next . handle () . pipe ( tap (() => console . log ( `After... ${ Date . now () - now } ms` ))); } } @ @switch import { Injectable } from '@nestjs/common' ; import { Observable } from 'rxjs' ; import { tap } from 'rxjs/operators' ; @Injectable () export class LoggingInterceptor { intercept ( context , next ) { console . log ( 'Before...' ); const now = Date . now (); return next . handle () . pipe ( tap (() => console . log ( `After... ${ Date . now () - now } ms` )), ); } } info Hint NestInterceptor<T, R> \u662f\u4e00\u4e2a\u6cdb\u578b\u63a5\u53e3\uff0c\u5176\u4e2d T \u8868\u793a Observable<T> (\u652f\u6301\u54cd\u5e94\u6d41)\u7684\u7c7b\u578b\uff0c R \u662f Observable<R> \u5305\u88c5\u7684\u503c\u7684\u7c7b\u578b\u3002 warning Notice \u62e6\u622a\u5668\uff0c\u6bd4\u5982\u63a7\u5236\u5668\u3001\u63d0\u4f9b\u5668\u3001\u5b88\u536b\u7b49\u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u7684\u201c\u6784\u9020\u51fd\u6570\u201d \u6ce8\u5165 \u4f9d\u8d56\u3002 \u56e0\u4e3a handle() \u8fd4\u56de RxJS \u7684 Observable \uff0c\u6240\u4ee5\u6211\u4eec\u6709\u5f88\u591a\u64cd\u4f5c\u7b26\u53ef\u4ee5\u7528\u6765\u64cd\u4f5c\u6d41\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 tap() \u64cd\u4f5c\u7b26\uff0c\u5b83\u4f1a\u5728\u53ef\u89c2\u5bdf\u6d41\u4f18\u96c5\u6216\u5f02\u5e38\u7ec8\u6b62\u65f6\u8c03\u7528\u6211\u4eec\u7684\u533f\u540d\u65e5\u5fd7\u51fd\u6570\uff0c\u4f46\u4e0d\u4f1a\u5e72\u6270\u54cd\u5e94\u5468\u671f\u3002 \u62e6\u622a\u5668\u7ed1\u5b9a \u00b6 \u4e3a\u4e86\u8bbe\u7f6e\u8fd9\u4e2a\u62e6\u622a\u5668\uff0c\u6211\u4eec\u4f7f\u7528\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684 @UseInterceptors() \u88c5\u9970\u5668\u3002 \u50cf \u7ba1\u9053 \u548c \u5b88\u536b \u4e00\u6837\uff0c\u62e6\u622a\u5668\u53ef\u4ee5\u662f \u63a7\u5236\u5668\u4f5c\u7528\u57df \u3001 \u65b9\u6cd5\u4f5c\u7528\u57df \u6216 \u5168\u5c40\u4f5c\u7528\u57df \u3002 @ @filename ( cats . controller ) @UseInterceptors ( LoggingInterceptor ) export class CatsController {} info Hint @UseInterceptors() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4f7f\u7528\u4e0a\u9762\u7684\u6784\u9020\uff0c\u6bcf\u4e2a\u5728 CatsController \u4e2d\u5b9a\u4e49\u7684\u8def\u7531\u5904\u7406\u5668\u5c06\u4f7f\u7528 LoggingInterceptor \u3002 \u5f53\u6709\u4eba\u8c03\u7528 GET /cats \u7aef\u70b9\u65f6\uff0c\u4f60\u4f1a\u5728\u6807\u51c6\u8f93\u51fa\u4e2d\u770b\u5230\u5982\u4e0b\u8f93\u51fa: Before ... After ... 1 ms \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4f20\u9012\u4e86 LoggingInterceptor \u7c7b\u578b(\u800c\u4e0d\u662f\u5b9e\u4f8b)\uff0c\u5c06\u5b9e\u4f8b\u5316\u7684\u8d23\u4efb\u7559\u7ed9\u6846\u67b6\u5e76\u542f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u4e0e\u7ba1\u9053\u3001\u5b88\u536b\u548c\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5c31\u5730\u5b9e\u4f8b: @ @filename ( cats . controller ) @UseInterceptors ( new LoggingInterceptor ()) export class CatsController {} \u5982\u4e0a\u6240\u8ff0\uff0c\u4e0a\u9762\u7684\u6784\u9020\u5c06\u62e6\u622a\u5668\u9644\u52a0\u5230\u8fd9\u4e2a\u63a7\u5236\u5668\u58f0\u660e\u7684\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u4e0a\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06\u62e6\u622a\u5668\u7684\u4f5c\u7528\u57df\u9650\u5236\u5230\u5355\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u5728 \u65b9\u6cd5\u7ea7\u522b \u5e94\u7528\u88c5\u9970\u5668\u3002 \u4e3a\u4e86\u8bbe\u7f6e\u4e00\u4e2a\u5168\u5c40\u62e6\u622a\u5668\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Nest \u5e94\u7528\u5b9e\u4f8b\u7684 useGlobalInterceptors() \u65b9\u6cd5: const app = await NestFactory . create ( AppModule ); app . useGlobalInterceptors ( new LoggingInterceptor ()); \u5168\u5c40\u62e6\u622a\u5668\u5728\u6574\u4e2a\u5e94\u7528\u4e2d\u88ab\u4f7f\u7528\uff0c\u7528\u4e8e\u6bcf\u4e2a\u63a7\u5236\u5668\u548c\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u5728\u4f9d\u8d56\u6ce8\u5165\u65b9\u9762\uff0c\u4ece\u4efb\u4f55\u6a21\u5757\u5916\u90e8\u6ce8\u518c\u7684\u5168\u5c40\u62e6\u622a\u5668(\u4f7f\u7528 useGlobalInterceptors() \uff0c\u5c31\u50cf\u4e0a\u9762\u7684\u4f8b\u5b50)\u4e0d\u80fd\u6ce8\u5165\u4f9d\u8d56\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u4efb\u4f55\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u5b8c\u6210\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u6784\u9020\u76f4\u63a5\u4ece\u4efb\u4f55\u6a21\u5757\u4e2d\u5efa\u7acb\u4e00\u4e2a\u62e6\u622a\u5668: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { APP_INTERCEPTOR } from '@nestjs/core' ; @Module ({ providers : [ { provide : APP_INTERCEPTOR , useClass : LoggingInterceptor , }, ], }) export class AppModule {} info Hint \u5f53\u4f7f\u7528\u6b64\u65b9\u6cd5\u4e3a\u62e6\u622a\u5668\u6267\u884c\u4f9d\u8d56\u6ce8\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u5728\u54ea\u4e2a\u6a21\u5757\u4e2d\u4f7f\u7528\u6b64\u6784\u9020\uff0c\u62e6\u622a\u5668\u5b9e\u9645\u4e0a\u90fd\u662f\u5168\u5c40\u7684\u3002 \u8fd9\u5e94\u8be5\u5728\u54ea\u91cc\u505a? \u9009\u62e9\u5b9a\u4e49\u62e6\u622a\u5668\u7684\u6a21\u5757(\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u4e3a LoggingInterceptor )\u3002 \u6b64\u5916\uff0c useClass \u5e76\u4e0d\u662f\u5904\u7406\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668\u6ce8\u518c\u7684\u552f\u4e00\u65b9\u6cd5\u3002 \u4e86\u89e3\u66f4\u591a \u5728\u8fd9\u91cc . \u54cd\u5e94\u6620\u5c04 \u00b6 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053 handle() \u8fd4\u56de\u4e00\u4e2a Observable \u3002 \u8fd9\u4e2a\u6d41\u5305\u542b\u4ece\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u7684 \u503c \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528 RxJS \u7684 map() \u64cd\u4f5c\u7b26\u6765\u6539\u53d8\u5b83\u3002 warning Warning \u54cd\u5e94\u6620\u5c04\u7279\u6027\u4e0d\u80fd\u7528\u4e8e\u7279\u5b9a\u4e8e\u5e93\u7684\u54cd\u5e94\u7b56\u7565(\u76f4\u63a5\u4f7f\u7528 @Res() \u5bf9\u8c61\u662f\u88ab\u7981\u6b62\u7684)\u3002 \u8ba9\u6211\u4eec\u521b\u5efa TransformInterceptor \uff0c\u5b83\u5c06\u4ee5\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u4fee\u6539\u6bcf\u4e2a\u54cd\u5e94\uff0c\u4ee5\u6f14\u793a\u8be5\u8fc7\u7a0b\u3002 \u5b83\u5c06\u4f7f\u7528 RxJS \u7684 map() \u64cd\u4f5c\u7b26\u5c06\u54cd\u5e94\u5bf9\u8c61\u5206\u914d\u7ed9\u65b0\u521b\u5efa\u5bf9\u8c61\u7684 data \u5c5e\u6027\uff0c\u5e76\u5c06\u65b0\u5bf9\u8c61\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 @ @filename ( transform . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , CallHandler } from '@nestjs/common' ; import { Observable } from 'rxjs' ; import { map } from 'rxjs/operators' ; export interface Response < T > { data : T ; } @Injectable () export class TransformInterceptor < T > implements NestInterceptor < T , Response < T >> { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < Response < T >> { return next . handle (). pipe ( map ( data => ({ data }))); } } @ @switch import { Injectable } from '@nestjs/common' ; import { map } from 'rxjs/operators' ; @Injectable () export class TransformInterceptor { intercept ( context , next ) { return next . handle (). pipe ( map ( data => ({ data }))); } } info Hint \u5d4c\u5957\u62e6\u622a\u5668\u540c\u65f6\u4f7f\u7528\u540c\u6b65\u548c\u5f02\u6b65\u7684 intercept() \u65b9\u6cd5\u3002 \u5982\u679c\u9700\u8981\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u8be5\u65b9\u6cd5\u5207\u6362\u5230 async \u3002 \u5728\u4e0a\u9762\u7684\u6784\u9020\u4e2d\uff0c\u5f53\u6709\u4eba\u8c03\u7528 GET /cats \u7aef\u70b9\u65f6\uff0c\u54cd\u5e94\u4f1a\u50cf\u4e0b\u9762\u8fd9\u6837(\u5047\u8bbe\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4 [] ): { \"data\" : [] } \u62e6\u622a\u5668\u5728\u4e3a\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u9700\u6c42\u521b\u5efa\u53ef\u91cd\u7528\u7684\u89e3\u51b3\u65b9\u6848\u65b9\u9762\u6709\u5f88\u5927\u7684\u4ef7\u503c\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5c06\u6bcf\u4e2a null \u503c\u7684\u51fa\u73b0\u8f6c\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32 '' \u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u884c\u4ee3\u7801\uff0c\u5e76\u5168\u5c40\u7ed1\u5b9a\u62e6\u622a\u5668\uff0c\u8fd9\u6837\u6bcf\u4e2a\u6ce8\u518c\u7684\u5904\u7406\u7a0b\u5e8f\u90fd\u4f1a\u81ea\u52a8\u4f7f\u7528\u5b83\u3002 @ @filename () import { Injectable , NestInterceptor , ExecutionContext , CallHandler } from '@nestjs/common' ; import { Observable } from 'rxjs' ; import { map } from 'rxjs/operators' ; @Injectable () export class ExcludeNullInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { return next . handle () . pipe ( map ( value => value === null ? '' : value )); } } @ @switch import { Injectable } from '@nestjs/common' ; import { map } from 'rxjs/operators' ; @Injectable () export class ExcludeNullInterceptor { intercept ( context , next ) { return next . handle () . pipe ( map ( value => value === null ? '' : value )); } } \u5f02\u5e38\u6620\u5c04 \u00b6 \u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u7528\u4f8b\u662f\u5229\u7528 RxJS \u7684 catchError() \u64cd\u4f5c\u7b26\u6765\u91cd\u5199\u629b\u51fa\u7684\u5f02\u5e38: @ @filename ( errors . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , BadGatewayException , CallHandler , } from '@nestjs/common' ; import { Observable , throwError } from 'rxjs' ; import { catchError } from 'rxjs/operators' ; @Injectable () export class ErrorsInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { return next . handle () . pipe ( catchError ( err => throwError ( new BadGatewayException ())), ); } } @ @switch import { Injectable , BadGatewayException } from '@nestjs/common' ; import { throwError } from 'rxjs' ; import { catchError } from 'rxjs/operators' ; @Injectable () export class ErrorsInterceptor { intercept ( context , next ) { return next . handle () . pipe ( catchError ( err => throwError ( new BadGatewayException ())), ); } } \u6d41\u8986\u76d6 \u00b6 \u6211\u4eec\u6709\u65f6\u53ef\u80fd\u5e0c\u671b\u5b8c\u5168\u907f\u514d\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u800c\u8fd4\u56de\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u539f\u56e0\u6709\u51e0\u4e2a\u3002 \u4e00\u4e2a\u660e\u663e\u7684\u4f8b\u5b50\u662f\u5b9e\u73b0\u7f13\u5b58\u4ee5\u63d0\u9ad8\u54cd\u5e94\u65f6\u95f4\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e2a\u7b80\u5355\u7684 \u7f13\u5b58\u62e6\u622a\u5668 \uff0c\u5b83\u4ece\u7f13\u5b58\u4e2d\u8fd4\u56de\u54cd\u5e94\u3002 \u5728\u5b9e\u9645\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u8003\u8651\u5176\u4ed6\u56e0\u7d20\uff0c\u5982 TTL \u3001\u7f13\u5b58\u5931\u6548\u3001\u7f13\u5b58\u5927\u5c0f\u7b49\uff0c\u4f46\u8fd9\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8ba8\u8bba\u8303\u56f4\u3002 \u8fd9\u91cc\u6211\u4eec\u5c06\u63d0\u4f9b\u4e00\u4e2a\u6f14\u793a\u4e3b\u8981\u6982\u5ff5\u7684\u57fa\u672c\u793a\u4f8b\u3002 @ @filename ( cache . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , CallHandler } from '@nestjs/common' ; import { Observable , of } from 'rxjs' ; @Injectable () export class CacheInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { const isCached = true ; if ( isCached ) { return of ([]); } return next . handle (); } } @ @switch import { Injectable } from '@nestjs/common' ; import { of } from 'rxjs' ; @Injectable () export class CacheInterceptor { intercept ( context , next ) { const isCached = true ; if ( isCached ) { return of ([]); } return next . handle (); } } \u6211\u4eec\u7684 CacheInterceptor \u6709\u4e00\u4e2a\u786c\u7f16\u7801\u7684 cache \u53d8\u91cf\u548c\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u54cd\u5e94 [] \u3002 \u9700\u8981\u6ce8\u610f\u7684\u5173\u952e\u70b9\u662f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8fd4\u56de\u4e86\u4e00\u4e2a\u7531 RxJS \u7684 of() \u64cd\u4f5c\u7b26\u521b\u5efa\u7684\u65b0\u6d41\uff0c\u56e0\u6b64\u8def\u7531\u5904\u7406\u5668 \u6839\u672c\u4e0d\u4f1a\u88ab\u8c03\u7528 \u3002 \u5f53\u6709\u4eba\u8c03\u7528\u4f7f\u7528 CacheInterceptor \u7684\u7aef\u70b9\u65f6\uff0c\u54cd\u5e94(\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u7a7a\u6570\u7ec4)\u5c06\u7acb\u5373\u8fd4\u56de\u3002 \u4e3a\u4e86\u521b\u5efa\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u60a8\u53ef\u4ee5\u5229\u7528 Reflector \u5e76\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\u3002 Reflector \u5728 \u5b88\u536b \u7ae0\u8282\u4e2d\u6709\u5f88\u597d\u7684\u63cf\u8ff0\u3002 \u66f4\u591a\u7684\u64cd\u4f5c\u7b26 \u00b6 \u4f7f\u7528 RxJS \u64cd\u4f5c\u7b26\u64cd\u4f5c\u6d41\u7684\u53ef\u80fd\u6027\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8bb8\u591a\u529f\u80fd\u3002 \u8ba9\u6211\u4eec\u8003\u8651\u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u4f8b\u3002 \u5047\u8bbe\u4f60\u60f3\u5904\u7406\u8def\u7531\u8bf7\u6c42\u7684 \u8d85\u65f6 \u3002 \u5f53\u7aef\u70b9\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\u65f6\uff0c\u60a8\u5e0c\u671b\u4ee5\u4e00\u4e2a\u9519\u8bef\u54cd\u5e94\u7ed3\u675f\u3002 \u4e0b\u9762\u7684\u6784\u9020\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u70b9: @ @filename ( timeout . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , CallHandler , RequestTimeoutException } from '@nestjs/common' ; import { Observable , throwError , TimeoutError } from 'rxjs' ; import { catchError , timeout } from 'rxjs/operators' ; @Injectable () export class TimeoutInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { return next . handle (). pipe ( timeout ( 5000 ), catchError ( err => { if ( err instanceof TimeoutError ) { return throwError ( new RequestTimeoutException ()); } return throwError ( err ); }), ); }; }; @ @switch import { Injectable , RequestTimeoutException } from '@nestjs/common' ; import { Observable , throwError , TimeoutError } from 'rxjs' ; import { catchError , timeout } from 'rxjs/operators' ; @Injectable () export class TimeoutInterceptor { intercept ( context , next ) { return next . handle (). pipe ( timeout ( 5000 ), catchError ( err => { if ( err instanceof TimeoutError ) { return throwError ( new RequestTimeoutException ()); } return throwError ( err ); }), ); }; }; 5 \u79d2\u540e\uff0c\u8bf7\u6c42\u5904\u7406\u5c06\u88ab\u53d6\u6d88\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728\u629b\u51fa RequestTimeoutException (\u4f8b\u5982\u91ca\u653e\u8d44\u6e90)\u4e4b\u524d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\u3002","title":"\u62e6\u622a\u5668"},{"location":"interceptors/#_1","text":"\u62e6\u622a\u5668\u662f\u7528 @Injectable() \u88c5\u9970\u5668\u6ce8\u89e3\u7684\u7c7b\u3002 \u62e6\u622a\u5668\u5b9e\u73b0\u4e86 NestInterceptor \u63a5\u53e3\u3002 \u62e6\u622a\u5668\u6709\u4e00\u7ec4\u6709\u7528\u7684\u529f\u80fd\uff0c\u5b83\u4eec\u53d7\u5230\u4e86 \u9762\u5411\u65b9\u9762\u7f16\u7a0b (AOP) \u6280\u672f\u7684\u542f\u53d1\u3002 \u5b83\u4eec\u4f7f\u4ee5\u4e0b\u4e8b\u60c5\u6210\u4e3a\u53ef\u80fd: \u5728\u65b9\u6cd5\u6267\u884c\u4e4b\u524d/\u4e4b\u540e\u7ed1\u5b9a\u989d\u5916\u7684\u903b\u8f91 \u8f6c\u6362\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c \u8f6c\u6362\u51fd\u6570\u629b\u51fa\u7684\u5f02\u5e38 \u6269\u5c55\u57fa\u672c\u51fd\u6570\u884c\u4e3a \u6839\u636e\u7279\u5b9a\u6761\u4ef6\u5b8c\u5168\u91cd\u5199\u51fd\u6570(\u4f8b\u5982\uff0c\u4e3a\u4e86\u7f13\u5b58)","title":"\u62e6\u622a\u5668"},{"location":"interceptors/#_2","text":"\u6bcf\u4e2a\u62e6\u622a\u5668\u90fd\u5b9e\u73b0\u4e86 intercept() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u662f ExecutionContext \u5b9e\u4f8b(\u4e0e \u5b88\u536b \u7684\u5bf9\u8c61\u5b8c\u5168\u76f8\u540c)\u3002 ExecutionContext \u7ee7\u627f\u81ea ArgumentsHost \u3002 \u6211\u4eec\u5728\u4e4b\u524d\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u7ae0\u4e2d\u770b\u5230\u4e86 ArgumentsHost \u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u5b83\u662f\u4f20\u9012\u7ed9\u539f\u59cb\u5904\u7406\u7a0b\u5e8f\u7684\u53c2\u6570\u7684\u5305\u88c5\u5668\uff0c\u5e76\u5305\u542b\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\u7684\u4e0d\u540c\u53c2\u6570\u6570\u7ec4\u3002 \u60a8\u53ef\u4ee5\u53c2\u8003 \u5f02\u5e38\u8fc7\u6ee4\u5668 \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u4fe1\u606f\u3002","title":"\u57fa\u672c"},{"location":"interceptors/#_3","text":"\u901a\u8fc7\u6269\u5c55 ArgumentsHost \uff0c ExecutionContext \u8fd8\u589e\u52a0\u4e86\u51e0\u4e2a\u65b0\u7684\u52a9\u624b\u65b9\u6cd5\uff0c\u63d0\u4f9b\u5173\u4e8e\u5f53\u524d\u6267\u884c\u8fc7\u7a0b\u7684\u989d\u5916\u7ec6\u8282\u3002 \u8fd9\u4e9b\u7ec6\u8282\u6709\u52a9\u4e8e\u6784\u5efa\u66f4\u901a\u7528\u7684\u62e6\u622a\u5668\uff0c\u8fd9\u4e9b\u62e6\u622a\u5668\u53ef\u4ee5\u8de8\u5e7f\u6cdb\u7684\u63a7\u5236\u5668\u3001\u65b9\u6cd5\u548c\u6267\u884c\u4e0a\u4e0b\u6587\u5de5\u4f5c\u3002 \u8fd9\u91cc \u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u5173\u4e8e ExecutionContext \u7684\u4fe1\u606f\u3002","title":"\u6267\u884c\u4e0a\u4e0b\u6587"},{"location":"interceptors/#_4","text":"\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f CallHandler \u3002 CallHandler \u63a5\u53e3\u5b9e\u73b0\u4e86 handle() \u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5728\u62e6\u622a\u5668\u7684\u67d0\u4e2a\u70b9\u4e0a\u4f7f\u7528\u5b83\u6765\u8c03\u7528\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u3002 \u5982\u679c\u4f60\u6ca1\u6709\u5728\u4f60\u7684 intercept() \u65b9\u6cd5\u7684\u5b9e\u73b0\u4e2d\u8c03\u7528 handle() \u65b9\u6cd5\uff0c\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u5c06\u6839\u672c\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u8fd9\u79cd\u65b9\u6cd5\u610f\u5473\u7740 intercept() \u65b9\u6cd5\u6709\u6548\u5730 \u5305\u88c5 \u4e86\u8bf7\u6c42/\u54cd\u5e94\u6d41\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u5728\u6700\u7ec8\u8def\u7531\u5904\u7406\u5668\u6267\u884c \u4e4b\u524d\u548c\u4e4b\u540e \u90fd\u5b9e\u73b0\u81ea\u5b9a\u4e49\u903b\u8f91\u3002 \u5f88\u660e\u663e\uff0c\u4f60\u53ef\u4ee5\u5728\u4f60\u7684 intercept() \u65b9\u6cd5\u4e2d\u7f16\u5199\u4ee3\u7801\uff0c\u5728\u8c03\u7528 handle() \u4e4b\u524d \u6267\u884c\uff0c\u4f46\u4f60\u5982\u4f55\u5f71\u54cd\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u60c5? \u56e0\u4e3a handle() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u529f\u80fd\u5f3a\u5927\u7684 RxJS \u64cd\u4f5c\u7b26\u6765\u8fdb\u4e00\u6b65\u64cd\u4f5c\u54cd\u5e94\u3002 \u4f7f\u7528\u9762\u5411\u65b9\u9762\u7f16\u7a0b\u672f\u8bed\uff0c\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7684\u8c03\u7528(\u4f8b\u5982\uff0c\u8c03\u7528 handle() )\u79f0\u4e3a \u5207\u5165\u70b9 \uff0c\u8868\u660e\u5b83\u662f\u63d2\u5165\u989d\u5916\u903b\u8f91\u7684\u70b9\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u4f20\u5165\u7684 POST /cats \u8bf7\u6c42\u3002 \u8fd9\u4e2a\u8bf7\u6c42\u7684\u76ee\u7684\u5730\u662f CatsController \u4e2d\u5b9a\u4e49\u7684 create() \u5904\u7406\u7a0b\u5e8f\u3002 \u5982\u679c\u4e00\u4e2a\u6ca1\u6709\u8c03\u7528 handle() \u65b9\u6cd5\u7684\u62e6\u622a\u5668\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u88ab\u8c03\u7528\uff0c create() \u65b9\u6cd5\u5c06\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u4e00\u65e6 handle() \u88ab\u8c03\u7528(\u5e76\u4e14\u5b83\u7684 Observable \u5df2\u7ecf\u88ab\u8fd4\u56de)\uff0c create() \u5904\u7406\u5668\u5c31\u4f1a\u88ab\u89e6\u53d1\u3002 \u4e00\u65e6\u54cd\u5e94\u6d41\u901a\u8fc7 Observable \u88ab\u63a5\u6536\uff0c\u5c31\u53ef\u4ee5\u5728\u6d41\u4e0a\u6267\u884c\u989d\u5916\u7684\u64cd\u4f5c\uff0c\u5e76\u5c06\u6700\u7ec8\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002","title":"\u8c03\u7528\u7ba1\u7406\u5668"},{"location":"interceptors/#_5","text":"\u6211\u4eec\u5c06\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u7528\u4f8b\u662f\u4f7f\u7528\u62e6\u622a\u5668\u6765\u8bb0\u5f55\u7528\u6237\u4ea4\u4e92(\u4f8b\u5982\uff0c\u5b58\u50a8\u7528\u6237\u8c03\u7528\u3001\u5f02\u6b65\u8c03\u5ea6\u4e8b\u4ef6\u6216\u8ba1\u7b97\u65f6\u95f4\u6233)\u3002 \u4e0b\u9762\u6211\u4eec\u5c55\u793a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 LoggingInterceptor : @ @filename ( logging . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , CallHandler } from '@nestjs/common' ; import { Observable } from 'rxjs' ; import { tap } from 'rxjs/operators' ; @Injectable () export class LoggingInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { console . log ( 'Before...' ); const now = Date . now (); return next . handle () . pipe ( tap (() => console . log ( `After... ${ Date . now () - now } ms` ))); } } @ @switch import { Injectable } from '@nestjs/common' ; import { Observable } from 'rxjs' ; import { tap } from 'rxjs/operators' ; @Injectable () export class LoggingInterceptor { intercept ( context , next ) { console . log ( 'Before...' ); const now = Date . now (); return next . handle () . pipe ( tap (() => console . log ( `After... ${ Date . now () - now } ms` )), ); } } info Hint NestInterceptor<T, R> \u662f\u4e00\u4e2a\u6cdb\u578b\u63a5\u53e3\uff0c\u5176\u4e2d T \u8868\u793a Observable<T> (\u652f\u6301\u54cd\u5e94\u6d41)\u7684\u7c7b\u578b\uff0c R \u662f Observable<R> \u5305\u88c5\u7684\u503c\u7684\u7c7b\u578b\u3002 warning Notice \u62e6\u622a\u5668\uff0c\u6bd4\u5982\u63a7\u5236\u5668\u3001\u63d0\u4f9b\u5668\u3001\u5b88\u536b\u7b49\u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u7684\u201c\u6784\u9020\u51fd\u6570\u201d \u6ce8\u5165 \u4f9d\u8d56\u3002 \u56e0\u4e3a handle() \u8fd4\u56de RxJS \u7684 Observable \uff0c\u6240\u4ee5\u6211\u4eec\u6709\u5f88\u591a\u64cd\u4f5c\u7b26\u53ef\u4ee5\u7528\u6765\u64cd\u4f5c\u6d41\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 tap() \u64cd\u4f5c\u7b26\uff0c\u5b83\u4f1a\u5728\u53ef\u89c2\u5bdf\u6d41\u4f18\u96c5\u6216\u5f02\u5e38\u7ec8\u6b62\u65f6\u8c03\u7528\u6211\u4eec\u7684\u533f\u540d\u65e5\u5fd7\u51fd\u6570\uff0c\u4f46\u4e0d\u4f1a\u5e72\u6270\u54cd\u5e94\u5468\u671f\u3002","title":"\u5207\u9762\u62e6\u622a"},{"location":"interceptors/#_6","text":"\u4e3a\u4e86\u8bbe\u7f6e\u8fd9\u4e2a\u62e6\u622a\u5668\uff0c\u6211\u4eec\u4f7f\u7528\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684 @UseInterceptors() \u88c5\u9970\u5668\u3002 \u50cf \u7ba1\u9053 \u548c \u5b88\u536b \u4e00\u6837\uff0c\u62e6\u622a\u5668\u53ef\u4ee5\u662f \u63a7\u5236\u5668\u4f5c\u7528\u57df \u3001 \u65b9\u6cd5\u4f5c\u7528\u57df \u6216 \u5168\u5c40\u4f5c\u7528\u57df \u3002 @ @filename ( cats . controller ) @UseInterceptors ( LoggingInterceptor ) export class CatsController {} info Hint @UseInterceptors() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4f7f\u7528\u4e0a\u9762\u7684\u6784\u9020\uff0c\u6bcf\u4e2a\u5728 CatsController \u4e2d\u5b9a\u4e49\u7684\u8def\u7531\u5904\u7406\u5668\u5c06\u4f7f\u7528 LoggingInterceptor \u3002 \u5f53\u6709\u4eba\u8c03\u7528 GET /cats \u7aef\u70b9\u65f6\uff0c\u4f60\u4f1a\u5728\u6807\u51c6\u8f93\u51fa\u4e2d\u770b\u5230\u5982\u4e0b\u8f93\u51fa: Before ... After ... 1 ms \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4f20\u9012\u4e86 LoggingInterceptor \u7c7b\u578b(\u800c\u4e0d\u662f\u5b9e\u4f8b)\uff0c\u5c06\u5b9e\u4f8b\u5316\u7684\u8d23\u4efb\u7559\u7ed9\u6846\u67b6\u5e76\u542f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u4e0e\u7ba1\u9053\u3001\u5b88\u536b\u548c\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5c31\u5730\u5b9e\u4f8b: @ @filename ( cats . controller ) @UseInterceptors ( new LoggingInterceptor ()) export class CatsController {} \u5982\u4e0a\u6240\u8ff0\uff0c\u4e0a\u9762\u7684\u6784\u9020\u5c06\u62e6\u622a\u5668\u9644\u52a0\u5230\u8fd9\u4e2a\u63a7\u5236\u5668\u58f0\u660e\u7684\u6bcf\u4e2a\u5904\u7406\u7a0b\u5e8f\u4e0a\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06\u62e6\u622a\u5668\u7684\u4f5c\u7528\u57df\u9650\u5236\u5230\u5355\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u5728 \u65b9\u6cd5\u7ea7\u522b \u5e94\u7528\u88c5\u9970\u5668\u3002 \u4e3a\u4e86\u8bbe\u7f6e\u4e00\u4e2a\u5168\u5c40\u62e6\u622a\u5668\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Nest \u5e94\u7528\u5b9e\u4f8b\u7684 useGlobalInterceptors() \u65b9\u6cd5: const app = await NestFactory . create ( AppModule ); app . useGlobalInterceptors ( new LoggingInterceptor ()); \u5168\u5c40\u62e6\u622a\u5668\u5728\u6574\u4e2a\u5e94\u7528\u4e2d\u88ab\u4f7f\u7528\uff0c\u7528\u4e8e\u6bcf\u4e2a\u63a7\u5236\u5668\u548c\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u5728\u4f9d\u8d56\u6ce8\u5165\u65b9\u9762\uff0c\u4ece\u4efb\u4f55\u6a21\u5757\u5916\u90e8\u6ce8\u518c\u7684\u5168\u5c40\u62e6\u622a\u5668(\u4f7f\u7528 useGlobalInterceptors() \uff0c\u5c31\u50cf\u4e0a\u9762\u7684\u4f8b\u5b50)\u4e0d\u80fd\u6ce8\u5165\u4f9d\u8d56\uff0c\u56e0\u4e3a\u8fd9\u662f\u5728\u4efb\u4f55\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u5b8c\u6210\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u6784\u9020\u76f4\u63a5\u4ece\u4efb\u4f55\u6a21\u5757\u4e2d\u5efa\u7acb\u4e00\u4e2a\u62e6\u622a\u5668: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { APP_INTERCEPTOR } from '@nestjs/core' ; @Module ({ providers : [ { provide : APP_INTERCEPTOR , useClass : LoggingInterceptor , }, ], }) export class AppModule {} info Hint \u5f53\u4f7f\u7528\u6b64\u65b9\u6cd5\u4e3a\u62e6\u622a\u5668\u6267\u884c\u4f9d\u8d56\u6ce8\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u5728\u54ea\u4e2a\u6a21\u5757\u4e2d\u4f7f\u7528\u6b64\u6784\u9020\uff0c\u62e6\u622a\u5668\u5b9e\u9645\u4e0a\u90fd\u662f\u5168\u5c40\u7684\u3002 \u8fd9\u5e94\u8be5\u5728\u54ea\u91cc\u505a? \u9009\u62e9\u5b9a\u4e49\u62e6\u622a\u5668\u7684\u6a21\u5757(\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u4e3a LoggingInterceptor )\u3002 \u6b64\u5916\uff0c useClass \u5e76\u4e0d\u662f\u5904\u7406\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668\u6ce8\u518c\u7684\u552f\u4e00\u65b9\u6cd5\u3002 \u4e86\u89e3\u66f4\u591a \u5728\u8fd9\u91cc .","title":"\u62e6\u622a\u5668\u7ed1\u5b9a"},{"location":"interceptors/#_7","text":"\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 handle() \u8fd4\u56de\u4e00\u4e2a Observable \u3002 \u8fd9\u4e2a\u6d41\u5305\u542b\u4ece\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u7684 \u503c \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528 RxJS \u7684 map() \u64cd\u4f5c\u7b26\u6765\u6539\u53d8\u5b83\u3002 warning Warning \u54cd\u5e94\u6620\u5c04\u7279\u6027\u4e0d\u80fd\u7528\u4e8e\u7279\u5b9a\u4e8e\u5e93\u7684\u54cd\u5e94\u7b56\u7565(\u76f4\u63a5\u4f7f\u7528 @Res() \u5bf9\u8c61\u662f\u88ab\u7981\u6b62\u7684)\u3002 \u8ba9\u6211\u4eec\u521b\u5efa TransformInterceptor \uff0c\u5b83\u5c06\u4ee5\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u4fee\u6539\u6bcf\u4e2a\u54cd\u5e94\uff0c\u4ee5\u6f14\u793a\u8be5\u8fc7\u7a0b\u3002 \u5b83\u5c06\u4f7f\u7528 RxJS \u7684 map() \u64cd\u4f5c\u7b26\u5c06\u54cd\u5e94\u5bf9\u8c61\u5206\u914d\u7ed9\u65b0\u521b\u5efa\u5bf9\u8c61\u7684 data \u5c5e\u6027\uff0c\u5e76\u5c06\u65b0\u5bf9\u8c61\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 @ @filename ( transform . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , CallHandler } from '@nestjs/common' ; import { Observable } from 'rxjs' ; import { map } from 'rxjs/operators' ; export interface Response < T > { data : T ; } @Injectable () export class TransformInterceptor < T > implements NestInterceptor < T , Response < T >> { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < Response < T >> { return next . handle (). pipe ( map ( data => ({ data }))); } } @ @switch import { Injectable } from '@nestjs/common' ; import { map } from 'rxjs/operators' ; @Injectable () export class TransformInterceptor { intercept ( context , next ) { return next . handle (). pipe ( map ( data => ({ data }))); } } info Hint \u5d4c\u5957\u62e6\u622a\u5668\u540c\u65f6\u4f7f\u7528\u540c\u6b65\u548c\u5f02\u6b65\u7684 intercept() \u65b9\u6cd5\u3002 \u5982\u679c\u9700\u8981\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u8be5\u65b9\u6cd5\u5207\u6362\u5230 async \u3002 \u5728\u4e0a\u9762\u7684\u6784\u9020\u4e2d\uff0c\u5f53\u6709\u4eba\u8c03\u7528 GET /cats \u7aef\u70b9\u65f6\uff0c\u54cd\u5e94\u4f1a\u50cf\u4e0b\u9762\u8fd9\u6837(\u5047\u8bbe\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4 [] ): { \"data\" : [] } \u62e6\u622a\u5668\u5728\u4e3a\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u9700\u6c42\u521b\u5efa\u53ef\u91cd\u7528\u7684\u89e3\u51b3\u65b9\u6848\u65b9\u9762\u6709\u5f88\u5927\u7684\u4ef7\u503c\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5c06\u6bcf\u4e2a null \u503c\u7684\u51fa\u73b0\u8f6c\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32 '' \u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u884c\u4ee3\u7801\uff0c\u5e76\u5168\u5c40\u7ed1\u5b9a\u62e6\u622a\u5668\uff0c\u8fd9\u6837\u6bcf\u4e2a\u6ce8\u518c\u7684\u5904\u7406\u7a0b\u5e8f\u90fd\u4f1a\u81ea\u52a8\u4f7f\u7528\u5b83\u3002 @ @filename () import { Injectable , NestInterceptor , ExecutionContext , CallHandler } from '@nestjs/common' ; import { Observable } from 'rxjs' ; import { map } from 'rxjs/operators' ; @Injectable () export class ExcludeNullInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { return next . handle () . pipe ( map ( value => value === null ? '' : value )); } } @ @switch import { Injectable } from '@nestjs/common' ; import { map } from 'rxjs/operators' ; @Injectable () export class ExcludeNullInterceptor { intercept ( context , next ) { return next . handle () . pipe ( map ( value => value === null ? '' : value )); } }","title":"\u54cd\u5e94\u6620\u5c04"},{"location":"interceptors/#_8","text":"\u53e6\u4e00\u4e2a\u6709\u8da3\u7684\u7528\u4f8b\u662f\u5229\u7528 RxJS \u7684 catchError() \u64cd\u4f5c\u7b26\u6765\u91cd\u5199\u629b\u51fa\u7684\u5f02\u5e38: @ @filename ( errors . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , BadGatewayException , CallHandler , } from '@nestjs/common' ; import { Observable , throwError } from 'rxjs' ; import { catchError } from 'rxjs/operators' ; @Injectable () export class ErrorsInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { return next . handle () . pipe ( catchError ( err => throwError ( new BadGatewayException ())), ); } } @ @switch import { Injectable , BadGatewayException } from '@nestjs/common' ; import { throwError } from 'rxjs' ; import { catchError } from 'rxjs/operators' ; @Injectable () export class ErrorsInterceptor { intercept ( context , next ) { return next . handle () . pipe ( catchError ( err => throwError ( new BadGatewayException ())), ); } }","title":"\u5f02\u5e38\u6620\u5c04"},{"location":"interceptors/#_9","text":"\u6211\u4eec\u6709\u65f6\u53ef\u80fd\u5e0c\u671b\u5b8c\u5168\u907f\u514d\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u800c\u8fd4\u56de\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u539f\u56e0\u6709\u51e0\u4e2a\u3002 \u4e00\u4e2a\u660e\u663e\u7684\u4f8b\u5b50\u662f\u5b9e\u73b0\u7f13\u5b58\u4ee5\u63d0\u9ad8\u54cd\u5e94\u65f6\u95f4\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e2a\u7b80\u5355\u7684 \u7f13\u5b58\u62e6\u622a\u5668 \uff0c\u5b83\u4ece\u7f13\u5b58\u4e2d\u8fd4\u56de\u54cd\u5e94\u3002 \u5728\u5b9e\u9645\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u8003\u8651\u5176\u4ed6\u56e0\u7d20\uff0c\u5982 TTL \u3001\u7f13\u5b58\u5931\u6548\u3001\u7f13\u5b58\u5927\u5c0f\u7b49\uff0c\u4f46\u8fd9\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8ba8\u8bba\u8303\u56f4\u3002 \u8fd9\u91cc\u6211\u4eec\u5c06\u63d0\u4f9b\u4e00\u4e2a\u6f14\u793a\u4e3b\u8981\u6982\u5ff5\u7684\u57fa\u672c\u793a\u4f8b\u3002 @ @filename ( cache . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , CallHandler } from '@nestjs/common' ; import { Observable , of } from 'rxjs' ; @Injectable () export class CacheInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { const isCached = true ; if ( isCached ) { return of ([]); } return next . handle (); } } @ @switch import { Injectable } from '@nestjs/common' ; import { of } from 'rxjs' ; @Injectable () export class CacheInterceptor { intercept ( context , next ) { const isCached = true ; if ( isCached ) { return of ([]); } return next . handle (); } } \u6211\u4eec\u7684 CacheInterceptor \u6709\u4e00\u4e2a\u786c\u7f16\u7801\u7684 cache \u53d8\u91cf\u548c\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u54cd\u5e94 [] \u3002 \u9700\u8981\u6ce8\u610f\u7684\u5173\u952e\u70b9\u662f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8fd4\u56de\u4e86\u4e00\u4e2a\u7531 RxJS \u7684 of() \u64cd\u4f5c\u7b26\u521b\u5efa\u7684\u65b0\u6d41\uff0c\u56e0\u6b64\u8def\u7531\u5904\u7406\u5668 \u6839\u672c\u4e0d\u4f1a\u88ab\u8c03\u7528 \u3002 \u5f53\u6709\u4eba\u8c03\u7528\u4f7f\u7528 CacheInterceptor \u7684\u7aef\u70b9\u65f6\uff0c\u54cd\u5e94(\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u7a7a\u6570\u7ec4)\u5c06\u7acb\u5373\u8fd4\u56de\u3002 \u4e3a\u4e86\u521b\u5efa\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u60a8\u53ef\u4ee5\u5229\u7528 Reflector \u5e76\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\u3002 Reflector \u5728 \u5b88\u536b \u7ae0\u8282\u4e2d\u6709\u5f88\u597d\u7684\u63cf\u8ff0\u3002","title":"\u6d41\u8986\u76d6"},{"location":"interceptors/#_10","text":"\u4f7f\u7528 RxJS \u64cd\u4f5c\u7b26\u64cd\u4f5c\u6d41\u7684\u53ef\u80fd\u6027\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u8bb8\u591a\u529f\u80fd\u3002 \u8ba9\u6211\u4eec\u8003\u8651\u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u4f8b\u3002 \u5047\u8bbe\u4f60\u60f3\u5904\u7406\u8def\u7531\u8bf7\u6c42\u7684 \u8d85\u65f6 \u3002 \u5f53\u7aef\u70b9\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\u65f6\uff0c\u60a8\u5e0c\u671b\u4ee5\u4e00\u4e2a\u9519\u8bef\u54cd\u5e94\u7ed3\u675f\u3002 \u4e0b\u9762\u7684\u6784\u9020\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u70b9: @ @filename ( timeout . interceptor ) import { Injectable , NestInterceptor , ExecutionContext , CallHandler , RequestTimeoutException } from '@nestjs/common' ; import { Observable , throwError , TimeoutError } from 'rxjs' ; import { catchError , timeout } from 'rxjs/operators' ; @Injectable () export class TimeoutInterceptor implements NestInterceptor { intercept ( context : ExecutionContext , next : CallHandler ) : Observable < any > { return next . handle (). pipe ( timeout ( 5000 ), catchError ( err => { if ( err instanceof TimeoutError ) { return throwError ( new RequestTimeoutException ()); } return throwError ( err ); }), ); }; }; @ @switch import { Injectable , RequestTimeoutException } from '@nestjs/common' ; import { Observable , throwError , TimeoutError } from 'rxjs' ; import { catchError , timeout } from 'rxjs/operators' ; @Injectable () export class TimeoutInterceptor { intercept ( context , next ) { return next . handle (). pipe ( timeout ( 5000 ), catchError ( err => { if ( err instanceof TimeoutError ) { return throwError ( new RequestTimeoutException ()); } return throwError ( err ); }), ); }; }; 5 \u79d2\u540e\uff0c\u8bf7\u6c42\u5904\u7406\u5c06\u88ab\u53d6\u6d88\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728\u629b\u51fa RequestTimeoutException (\u4f8b\u5982\u91ca\u653e\u8d44\u6e90)\u4e4b\u524d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u903b\u8f91\u3002","title":"\u66f4\u591a\u7684\u64cd\u4f5c\u7b26"},{"location":"introduction/","text":"\u4ecb\u7ecd \u00b6 Nest (NestJS)\u662f\u4e00\u4e2a\u6784\u5efa\u9ad8\u6548\u3001\u53ef\u6269\u5c55\u7684 Node.js \u670d\u52a1\u5668\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\u3002 \u5b83\u4f7f\u7528\u4e86\u6e10\u8fdb JavaScript\uff0c\u4f7f\u7528\u5e76\u5b8c\u5168\u652f\u6301 TypeScript \u6784\u5efa(\u4f46\u4ecd\u7136\u5141\u8bb8\u5f00\u53d1\u8005\u4f7f\u7528\u7eaf JavaScript \u7f16\u5199\u4ee3\u7801)\uff0c\u5e76\u7ed3\u5408\u4e86 OOP(\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b)\u3001FP(\u51fd\u6570\u5f0f\u7f16\u7a0b)\u548c FRP(\u51fd\u6570\u5f0f\u53cd\u5e94\u5f0f\u7f16\u7a0b)\u7684\u5143\u7d20\u3002 \u5728\u5185\u90e8\uff0cNest \u5229\u7528\u4e86\u5065\u58ee\u7684 HTTP \u670d\u52a1\u5668\u6846\u67b6\uff0c\u5982 Express (\u9ed8\u8ba4)\uff0c\u4e5f\u53ef\u4ee5\u914d\u7f6e\u4e3a\u4f7f\u7528 Fastify ! Nest \u5728\u8fd9\u4e9b\u5e38\u89c1\u7684 Node.js \u6846\u67b6(Express/Fastify)\u4e4b\u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u62bd\u8c61\u7ea7\u522b\uff0c\u4f46\u4e5f\u76f4\u63a5\u5411\u5f00\u53d1\u4eba\u5458\u516c\u5f00\u4e86\u5b83\u4eec\u7684 api\u3002 \u8fd9\u4f7f\u5f97\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u81ea\u7531\u5730\u4f7f\u7528\u53ef\u7528\u4e8e\u5e95\u5c42\u5e73\u53f0\u7684\u65e0\u6570\u7b2c\u4e09\u65b9\u6a21\u5757\u3002 \u54f2\u5b66 \u00b6 \u8fd1\u5e74\u6765\uff0c\u7531\u4e8e Node.js \u7684\u51fa\u73b0\uff0cJavaScript \u5df2\u7ecf\u6210\u4e3a web \u524d\u7aef\u548c\u540e\u7aef\u5e94\u7528\u7684\u201c\u901a\u7528\u8bed\u201d\u3002 \u8fd9\u4e5f\u50ac\u751f\u4e86\u4e00\u4e9b\u4ee4\u4eba\u60ca\u53f9\u7684\u9879\u76ee\uff0c\u6bd4\u5982 Angular \u3001 React \u548c Vue \uff0c\u5b83\u4eec\u63d0\u9ad8\u4e86\u5f00\u53d1\u4eba\u5458\u7684\u5de5\u4f5c\u6548\u7387\uff0c\u5e76\u652f\u6301\u521b\u5efa\u5feb\u901f\u3001\u53ef\u6d4b\u8bd5\u548c\u53ef\u6269\u5c55\u7684\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u3002 \u7136\u800c\uff0c\u867d\u7136\u6709\u5f88\u591a\u4f18\u79c0\u7684\u5e93\u3001\u52a9\u624b\u548c\u5de5\u5177\u53ef\u4ee5\u7528\u4e8e Node(\u548c\u670d\u52a1\u5668\u7aef JavaScript)\uff0c\u4f46\u5b83\u4eec\u90fd\u4e0d\u80fd\u6709\u6548\u5730\u89e3\u51b3 Architecture \u7684\u4e3b\u8981\u95ee\u9898\u3002 Nest \u63d0\u4f9b\u4e86\u4e00\u79cd\u5f00\u7bb1\u5373\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u67b6\u6784\uff0c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u548c\u56e2\u961f\u521b\u5efa\u9ad8\u5ea6\u53ef\u6d4b\u8bd5\u3001\u53ef\u4f38\u7f29\u3001\u677e\u6563\u8026\u5408\u548c\u6613\u4e8e\u7ef4\u62a4\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u8be5\u67b6\u6784\u6df1\u53d7 Angular \u7684\u542f\u53d1\u3002 \u5b89\u88c5 \u00b6 \u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Nest CLI \u6784\u5efa\u9879\u76ee\uff0c\u6216\u8005\u514b\u9686\u4e00\u4e2a\u542f\u52a8\u9879\u76ee(\u4e24\u8005\u90fd\u4f1a\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c)\u3002 \u8981\u4f7f\u7528 Nest CLI \u6784\u5efa\u9879\u76ee\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u76ee\u5f55\uff0c\u5e76\u4f7f\u7528\u521d\u59cb\u6838\u5fc3 Nest \u6587\u4ef6\u548c\u652f\u6301\u6a21\u5757\u586b\u5145\u8be5\u76ee\u5f55\uff0c\u4e3a\u60a8\u7684\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u5e38\u89c4\u7684\u57fa\u672c\u7ed3\u6784\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u6b21\u4f7f\u7528\u7684\u7528\u6237\uff0c\u5efa\u8bae\u4f7f\u7528 Nest CLI \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u3002 \u6211\u4eec\u5c06\u5728 \u7b2c\u4e00\u6b65 \u4e2d\u7ee7\u7eed\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002 $ npm i -g @nestjs/cli $ nest new project-name \u9009\u62e9 \u00b6 \u6216\u8005\uff0c\u7528 Git \u5b89\u88c5 TypeScript \u542f\u52a8\u5668\u9879\u76ee: $ git clone https://github.com/nestjs/typescript-starter.git project $ cd project $ npm install $ npm run start info Hint \u5982\u679c\u4f60\u60f3\u5728\u6ca1\u6709 git \u5386\u53f2\u8bb0\u5f55\u7684\u60c5\u51b5\u4e0b\u514b\u9686\u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 degit \u3002 \u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230 http://localhost:3000/ \u3002 \u8981\u5b89\u88c5 JavaScript \u98ce\u683c\u7684 starter \u9879\u76ee\uff0c\u8bf7\u4f7f\u7528 javascript-starter.git \u3002 \u5728\u4e0a\u9762\u7684\u547d\u4ee4\u5e8f\u5217\u4e2d\u4f7f\u7528 Git\u3002 \u4f60\u4e5f\u53ef\u4ee5\u7528 npm (\u6216 yarn )\u5b89\u88c5\u6838\u5fc3\u6587\u4ef6\u548c\u652f\u6301\u6587\u4ef6\uff0c\u4ece\u5934\u5f00\u59cb\u624b\u52a8\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u3002 \u5f53\u7136\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u8d1f\u8d23\u81ea\u5df1\u521b\u5efa\u9879\u76ee\u6837\u677f\u6587\u4ef6\u3002 $ npm i --save @nestjs/core @nestjs/common rxjs reflect-metadata","title":"\u4ecb\u7ecd"},{"location":"introduction/#_1","text":"Nest (NestJS)\u662f\u4e00\u4e2a\u6784\u5efa\u9ad8\u6548\u3001\u53ef\u6269\u5c55\u7684 Node.js \u670d\u52a1\u5668\u7aef\u5e94\u7528\u7a0b\u5e8f\u7684\u6846\u67b6\u3002 \u5b83\u4f7f\u7528\u4e86\u6e10\u8fdb JavaScript\uff0c\u4f7f\u7528\u5e76\u5b8c\u5168\u652f\u6301 TypeScript \u6784\u5efa(\u4f46\u4ecd\u7136\u5141\u8bb8\u5f00\u53d1\u8005\u4f7f\u7528\u7eaf JavaScript \u7f16\u5199\u4ee3\u7801)\uff0c\u5e76\u7ed3\u5408\u4e86 OOP(\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b)\u3001FP(\u51fd\u6570\u5f0f\u7f16\u7a0b)\u548c FRP(\u51fd\u6570\u5f0f\u53cd\u5e94\u5f0f\u7f16\u7a0b)\u7684\u5143\u7d20\u3002 \u5728\u5185\u90e8\uff0cNest \u5229\u7528\u4e86\u5065\u58ee\u7684 HTTP \u670d\u52a1\u5668\u6846\u67b6\uff0c\u5982 Express (\u9ed8\u8ba4)\uff0c\u4e5f\u53ef\u4ee5\u914d\u7f6e\u4e3a\u4f7f\u7528 Fastify ! Nest \u5728\u8fd9\u4e9b\u5e38\u89c1\u7684 Node.js \u6846\u67b6(Express/Fastify)\u4e4b\u4e0a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u62bd\u8c61\u7ea7\u522b\uff0c\u4f46\u4e5f\u76f4\u63a5\u5411\u5f00\u53d1\u4eba\u5458\u516c\u5f00\u4e86\u5b83\u4eec\u7684 api\u3002 \u8fd9\u4f7f\u5f97\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u81ea\u7531\u5730\u4f7f\u7528\u53ef\u7528\u4e8e\u5e95\u5c42\u5e73\u53f0\u7684\u65e0\u6570\u7b2c\u4e09\u65b9\u6a21\u5757\u3002","title":"\u4ecb\u7ecd"},{"location":"introduction/#_2","text":"\u8fd1\u5e74\u6765\uff0c\u7531\u4e8e Node.js \u7684\u51fa\u73b0\uff0cJavaScript \u5df2\u7ecf\u6210\u4e3a web \u524d\u7aef\u548c\u540e\u7aef\u5e94\u7528\u7684\u201c\u901a\u7528\u8bed\u201d\u3002 \u8fd9\u4e5f\u50ac\u751f\u4e86\u4e00\u4e9b\u4ee4\u4eba\u60ca\u53f9\u7684\u9879\u76ee\uff0c\u6bd4\u5982 Angular \u3001 React \u548c Vue \uff0c\u5b83\u4eec\u63d0\u9ad8\u4e86\u5f00\u53d1\u4eba\u5458\u7684\u5de5\u4f5c\u6548\u7387\uff0c\u5e76\u652f\u6301\u521b\u5efa\u5feb\u901f\u3001\u53ef\u6d4b\u8bd5\u548c\u53ef\u6269\u5c55\u7684\u524d\u7aef\u5e94\u7528\u7a0b\u5e8f\u3002 \u7136\u800c\uff0c\u867d\u7136\u6709\u5f88\u591a\u4f18\u79c0\u7684\u5e93\u3001\u52a9\u624b\u548c\u5de5\u5177\u53ef\u4ee5\u7528\u4e8e Node(\u548c\u670d\u52a1\u5668\u7aef JavaScript)\uff0c\u4f46\u5b83\u4eec\u90fd\u4e0d\u80fd\u6709\u6548\u5730\u89e3\u51b3 Architecture \u7684\u4e3b\u8981\u95ee\u9898\u3002 Nest \u63d0\u4f9b\u4e86\u4e00\u79cd\u5f00\u7bb1\u5373\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u67b6\u6784\uff0c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u548c\u56e2\u961f\u521b\u5efa\u9ad8\u5ea6\u53ef\u6d4b\u8bd5\u3001\u53ef\u4f38\u7f29\u3001\u677e\u6563\u8026\u5408\u548c\u6613\u4e8e\u7ef4\u62a4\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u8be5\u67b6\u6784\u6df1\u53d7 Angular \u7684\u542f\u53d1\u3002","title":"\u54f2\u5b66"},{"location":"introduction/#_3","text":"\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Nest CLI \u6784\u5efa\u9879\u76ee\uff0c\u6216\u8005\u514b\u9686\u4e00\u4e2a\u542f\u52a8\u9879\u76ee(\u4e24\u8005\u90fd\u4f1a\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c)\u3002 \u8981\u4f7f\u7528 Nest CLI \u6784\u5efa\u9879\u76ee\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u76ee\u5f55\uff0c\u5e76\u4f7f\u7528\u521d\u59cb\u6838\u5fc3 Nest \u6587\u4ef6\u548c\u652f\u6301\u6a21\u5757\u586b\u5145\u8be5\u76ee\u5f55\uff0c\u4e3a\u60a8\u7684\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u5e38\u89c4\u7684\u57fa\u672c\u7ed3\u6784\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u6b21\u4f7f\u7528\u7684\u7528\u6237\uff0c\u5efa\u8bae\u4f7f\u7528 Nest CLI \u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u3002 \u6211\u4eec\u5c06\u5728 \u7b2c\u4e00\u6b65 \u4e2d\u7ee7\u7eed\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002 $ npm i -g @nestjs/cli $ nest new project-name","title":"\u5b89\u88c5"},{"location":"introduction/#_4","text":"\u6216\u8005\uff0c\u7528 Git \u5b89\u88c5 TypeScript \u542f\u52a8\u5668\u9879\u76ee: $ git clone https://github.com/nestjs/typescript-starter.git project $ cd project $ npm install $ npm run start info Hint \u5982\u679c\u4f60\u60f3\u5728\u6ca1\u6709 git \u5386\u53f2\u8bb0\u5f55\u7684\u60c5\u51b5\u4e0b\u514b\u9686\u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 degit \u3002 \u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230 http://localhost:3000/ \u3002 \u8981\u5b89\u88c5 JavaScript \u98ce\u683c\u7684 starter \u9879\u76ee\uff0c\u8bf7\u4f7f\u7528 javascript-starter.git \u3002 \u5728\u4e0a\u9762\u7684\u547d\u4ee4\u5e8f\u5217\u4e2d\u4f7f\u7528 Git\u3002 \u4f60\u4e5f\u53ef\u4ee5\u7528 npm (\u6216 yarn )\u5b89\u88c5\u6838\u5fc3\u6587\u4ef6\u548c\u652f\u6301\u6587\u4ef6\uff0c\u4ece\u5934\u5f00\u59cb\u624b\u52a8\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u3002 \u5f53\u7136\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u8d1f\u8d23\u81ea\u5df1\u521b\u5efa\u9879\u76ee\u6837\u677f\u6587\u4ef6\u3002 $ npm i --save @nestjs/core @nestjs/common rxjs reflect-metadata","title":"\u9009\u62e9"},{"location":"middlewares/","text":"\u4e2d\u95f4\u4ef6 \u00b6 \u4e2d\u95f4\u4ef6\u662f\u4e00\u4e2a\u5728\u8def\u7531\u5904\u7406\u5668 \u4e4b\u524d \u88ab\u79f0\u4e3a\u7684\u51fd\u6570\u3002 \u4e2d\u95f4\u4ef6\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee request \u548c response \u5bf9\u8c61\uff0c\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\u4e2d\u7684 next() \u4e2d\u95f4\u4ef6\u51fd\u6570\u3002 next \u4e2d\u95f4\u4ef6\u51fd\u6570\u901a\u5e38\u7531\u4e00\u4e2a\u540d\u4e3a next \u7684\u53d8\u91cf\u8868\u793a\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNest \u4e2d\u95f4\u4ef6\u7b49\u4ef7\u4e8e express \u4e2d\u95f4\u4ef6\u3002 \u4ee5\u4e0b\u662f\u5b98\u65b9\u6587\u6863\u4e2d\u5bf9\u4e2d\u95f4\u4ef6\u529f\u80fd\u7684\u63cf\u8ff0: \u4e2d\u95f4\u4ef6\u529f\u80fd\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4efb\u52a1: \u6267\u884c\u4efb\u4f55\u4ee3\u7801\u3002 \u5bf9\u8bf7\u6c42\u548c\u54cd\u5e94\u5bf9\u8c61\u8fdb\u884c\u66f4\u6539\u3002 \u7ed3\u675f\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\u3002 \u8c03\u7528\u5806\u6808\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u51fd\u6570\u3002 \u5982\u679c\u5f53\u524d\u7684\u4e2d\u95f4\u4ef6\u51fd\u6570\u6ca1\u6709\u7ed3\u675f\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\uff0c\u5b83\u5fc5\u987b\u8c03\u7528 next() \u6765\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u51fd\u6570\u3002\u5426\u5219\uff0c\u8bf7\u6c42\u5c06\u4fdd\u6301\u6302\u8d77\u72b6\u6001\u3002 \u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u6216\u4e00\u4e2a\u5e26\u6709 @Injectable() \u88c5\u9970\u5668\u7684\u7c7b\u4e2d\u5b9e\u73b0\u5b9a\u5236\u7684 Nest \u4e2d\u95f4\u4ef6\u3002 \u7c7b\u5e94\u8be5\u5b9e\u73b0 NestMiddleware \u63a5\u53e3\uff0c\u800c\u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u8981\u6c42\u3002 \u8ba9\u6211\u4eec\u4ece\u4f7f\u7528\u7c7b\u65b9\u6cd5\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u4e2d\u95f4\u4ef6\u7279\u6027\u5f00\u59cb\u3002 @ @filename ( logger . middleware ) import { Injectable , NestMiddleware } from '@nestjs/common' ; import { Request , Response , NextFunction } from 'express' ; @Injectable () export class LoggerMiddleware implements NestMiddleware { use ( req : Request , res : Response , next : NextFunction ) { console . log ( 'Request...' ); next (); } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class LoggerMiddleware { use ( req , res , next ) { console . log ( 'Request...' ); next (); } } \u4f9d\u8d56\u6ce8\u5165 \u00b6 \u5d4c\u5957\u4e2d\u95f4\u4ef6\u5b8c\u5168\u652f\u6301\u4f9d\u8d56\u6ce8\u5165\u3002 \u5c31\u50cf\u63d0\u4f9b\u7a0b\u5e8f\u548c\u63a7\u5236\u5668\u4e00\u6837\uff0c\u5b83\u4eec\u80fd\u591f\u6ce8\u5165\u5728\u540c\u4e00\u4e2a\u6a21\u5757\u4e2d\u53ef\u7528\u7684 \u4f9d\u8d56\u9879 \u3002 \u901a\u5e38\uff0c\u8fd9\u662f\u901a\u8fc7 \u6784\u9020\u51fd\u6570 \u6765\u5b8c\u6210\u7684\u3002 \u5e94\u7528\u4e2d\u95f4\u4ef6 \u00b6 \u5728 @Module() \u88c5\u9970\u5668\u4e2d\u6ca1\u6709\u4e2d\u95f4\u4ef6\u7684\u4f4d\u7f6e\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528\u6a21\u5757\u7c7b\u7684 configure() \u65b9\u6cd5\u6765\u8bbe\u7f6e\u5b83\u4eec\u3002 \u5305\u542b\u4e2d\u95f4\u4ef6\u7684\u6a21\u5757\u5fc5\u987b\u5b9e\u73b0 NestModule \u63a5\u53e3\u3002 \u8ba9\u6211\u4eec\u5728 AppModule \u7ea7\u522b\u8bbe\u7f6e LoggerMiddleware \u3002 @ @filename ( app . module ) import { Module , NestModule , MiddlewareConsumer } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule implements NestModule { configure ( consumer : MiddlewareConsumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ( 'cats' ); } } @ @switch import { Module } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule { configure ( consumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ( 'cats' ); } } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e3a\u4e4b\u524d\u5728 CatsController \u4e2d\u5b9a\u4e49\u7684\u8def\u7531\u5904\u7406\u5668 /cats \u8bbe\u7f6e\u4e86 LoggerMiddleware \u3002 \u5728\u914d\u7f6e\u4e2d\u95f4\u4ef6\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5c06\u5305\u542b\u8def\u5f84\u548c\u8bf7\u6c42\u65b9\u6cd5\u7684\u5bf9\u8c61\u4f20\u9012\u7ed9 forRoutes()\u65b9\u6cd5\u6765\u8fdb\u4e00\u6b65\u9650\u5236\u4e2d\u95f4\u4ef6\u53ea\u80fd\u4f7f\u7528\u7279\u5b9a\u7684\u8bf7\u6c42\u65b9\u6cd5\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8bf7\u6ce8\u610f\u6211\u4eec\u5bfc\u5165\u4e86 RequestMethod enum \u6765\u5f15\u7528\u6240\u9700\u7684\u8bf7\u6c42\u65b9\u6cd5\u7c7b\u578b\u3002 @ @filename ( app . module ) import { Module , NestModule , RequestMethod , MiddlewareConsumer } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule implements NestModule { configure ( consumer : MiddlewareConsumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ({ path : 'cats' , method : RequestMethod.GET }); } } @ @switch import { Module , RequestMethod } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule { configure ( consumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ({ path : 'cats' , method : RequestMethod.GET }); } } info Hint \u53ef\u4ee5\u4f7f\u7528 async/await \u65b9\u6cd5\u4f7f configure() \u65b9\u6cd5\u53d8\u4e3a\u5f02\u6b65\u7684(\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728 configure() \u65b9\u6cd5\u4f53\u4e2d await \u5f02\u6b65\u64cd\u4f5c\u7684\u5b8c\u6210)\u3002 \u8def\u7ebf\u901a\u914d\u7b26 \u00b6 \u4e5f\u652f\u6301\u57fa\u4e8e\u6a21\u5f0f\u7684\u8def\u7531\u3002 \u4f8b\u5982\uff0c\u661f\u53f7\u88ab\u7528\u4f5c \u901a\u914d\u7b26 \uff0c\u5b83\u5c06\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u7ec4\u5408: forRoutes ({ path : 'ab*cd' , method : RequestMethod.ALL }); \" ab cd '\u8def\u7531\u8def\u5f84\u5c06\u5339\u914d abcd \uff0c ab_cd \uff0c abecd \uff0c\u7b49\u7b49\u3002 \u4eba\u7269\u7684?'\uff0c + \uff0c \u548c'()'\u53ef\u4ee5\u5728\u8def\u7531\u8def\u5f84\u4e2d\u4f7f\u7528\uff0c\u5b83\u4eec\u662f\u5b83\u4eec\u5bf9\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5b50\u96c6\u3002 \u8fde\u5b57\u7b26( - )\u548c\u70b9( .` )\u6309\u5b57\u9762\u610f\u601d\u89e3\u91ca\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u8def\u5f84\u3002 warning Warning fastify \u5305\u4f7f\u7528 path-to-regexp \u5305\u7684\u6700\u65b0\u7248\u672c\uff0c\u8be5\u5305\u4e0d\u518d\u652f\u6301\u901a\u914d\u7b26\u661f\u53f7 _ \u3002 \u76f8\u53cd,\u60a8\u5fc5\u987b\u4f7f\u7528\u53c2\u6570(\u5982 ., (._) , : \u957f\u6761\u6728\u677f\\* )\u3002 \u4e2d\u95f4\u4ef6\u7684\u6d88\u8d39\u8005 \u00b6 MiddlewareConsumer \u662f\u4e00\u4e2a\u52a9\u624b\u7c7b\u3002 \u5b83\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5185\u5efa\u7684\u65b9\u6cd5\u6765\u7ba1\u7406\u4e2d\u95f4\u4ef6\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7528[\u6d41\u5229\u7684\u98ce\u683c]\u7b80\u5355\u5730\u94fe\u63a5\u8d77\u6765(https://en.wikipedia.org/wiki/Fluent_interface)\u3002 forRoutes() \u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a RouteInfo \u5bf9\u8c61\uff0c\u4e00\u4e2a\u63a7\u5236\u5668\u7c7b\uff0c\u751a\u81f3\u591a\u4e2a\u63a7\u5236\u5668\u7c7b\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u53ea\u662f\u4f20\u9012\u4e00\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684 \u63a7\u5236\u5668 \u5217\u8868\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5355\u63a7\u5236\u5668\u7684\u4f8b\u5b50: @ @filename ( app . module ) import { Module , NestModule , MiddlewareConsumer } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; import { CatsController } from './cats/cats.controller.ts' ; @Module ({ imports : [ CatsModule ], }) export class AppModule implements NestModule { configure ( consumer : MiddlewareConsumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ( CatsController ); } } @ @switch import { Module } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; import { CatsController } from './cats/cats.controller.ts' ; @Module ({ imports : [ CatsModule ], }) export class AppModule { configure ( consumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ( CatsController ); } } info Hint apply() \u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u53c2\u6570\u6765\u6307\u5b9a multiple middleware \u3002 \u4e0d\u5305\u62ec\u8def\u7ebf \u00b6 \u6709\u65f6\u6211\u4eec\u60f3\u8981\u4ece\u4e2d\u95f4\u4ef6\u5e94\u7528\u4e2d\u6392\u9664\u67d0\u4e9b\u8def\u7531\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 exclude() \u65b9\u6cd5\u8f7b\u677e\u5730\u6392\u9664\u67d0\u4e9b\u8def\u7531\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c\u6216\u8005\u4e00\u4e2a RouteInfo \u5bf9\u8c61\u6765\u6807\u8bc6\u8981\u6392\u9664\u7684\u8def\u7531\uff0c\u5982\u4e0b\u6240\u793a: consumer . apply ( LoggerMiddleware ) . exclude ( { path : 'cats' , method : RequestMethod.GET }, { path : 'cats' , method : RequestMethod.POST }, 'cats/(.*)' , ) . forRoutes ( CatsController ); info Hint exclude() \u65b9\u6cd5\u652f\u6301\u4f7f\u7528 path-to-regexp \u5305\u7684\u901a\u914d\u7b26\u53c2\u6570\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c LoggerMiddleware \u5c06\u88ab\u7ed1\u5b9a\u5230 CatsController \u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u8def\u7531\uff0c\u9664\u4e86\u4f20\u9012\u7ed9 exclude() \u65b9\u6cd5\u7684\u4e09\u4e2a\u8def\u7531\u3002 \u529f\u80fd\u7684\u4e2d\u95f4\u4ef6 \u00b6 \u6211\u4eec\u4f7f\u7528\u7684 LoggerMiddleware \u7c7b\u975e\u5e38\u7b80\u5355\u3002 \u5b83\u6ca1\u6709\u6210\u5458\uff0c\u6ca1\u6709\u989d\u5916\u7684\u65b9\u6cd5\uff0c\u4e5f\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u80fd\u5728\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e2d\u5b9a\u4e49\u5b83\uff0c\u800c\u4e0d\u662f\u5728\u4e00\u4e2a\u7c7b\u4e2d?\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u3002 \u8fd9\u79cd\u7c7b\u578b\u7684\u4e2d\u95f4\u4ef6\u88ab\u79f0\u4e3a\u529f\u80fd\u4e2d\u95f4\u4ef6\u3002 \u8ba9\u6211\u4eec\u5c06 logger \u4e2d\u95f4\u4ef6\u4ece\u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6\u8f6c\u6362\u4e3a\u529f\u80fd\u4e2d\u95f4\u4ef6\u6765\u8bf4\u660e\u4e24\u8005\u7684\u533a\u522b: @ @filename ( logger . middleware ) import { Request , Response , NextFunction } from 'express' ; export function logger ( req : Request , res : Response , next : NextFunction ) { console . log ( `Request...` ); next (); }; @ @switch export function logger ( req , res , next ) { console . log ( `Request...` ); next (); }; \u5e76\u5728 AppModule \u4e2d\u4f7f\u7528\u5b83: @ @filename ( app . module ) consumer . apply ( logger ) . forRoutes ( CatsController ); info Hint \u5f53\u4f60\u7684\u4e2d\u95f4\u4ef6\u4e0d\u9700\u8981\u4efb\u4f55\u4f9d\u8d56\u65f6\uff0c\u8003\u8651\u4f7f\u7528\u66f4\u7b80\u5355\u7684\u529f\u80fd\u6027\u4e2d\u95f4\u4ef6\u3002 \u591a\u4e2a\u4e2d\u95f4\u4ef6 \u00b6 \u5982\u4e0a\u6240\u8ff0\uff0c\u4e3a\u4e86\u7ed1\u5b9a\u591a\u4e2a\u987a\u5e8f\u6267\u884c\u7684\u4e2d\u95f4\u4ef6\uff0c\u53ea\u9700\u5728 apply() \u65b9\u6cd5\u4e2d\u63d0\u4f9b\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5217\u8868: consumer . apply ( cors (), helmet (), logger ). forRoutes ( CatsController ); \u5168\u7403\u7684\u4e2d\u95f4\u4ef6 \u00b6 \u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06\u4e2d\u95f4\u4ef6\u7ed1\u5b9a\u5230\u6bcf\u4e00\u4e2a\u6ce8\u518c\u7684\u8def\u7531\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 INestApplication \u5b9e\u4f8b\u63d0\u4f9b\u7684 use() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); app . use ( logger ); await app . listen ( 3000 ); info Hint \u8bbf\u95ee\u5168\u5c40\u4e2d\u95f4\u4ef6\u4e2d\u7684 DI \u5bb9\u5668\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u5f53\u4f7f\u7528 app.use() \u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 functional middleware \u6765\u4ee3\u66ff\u3002 \u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7c7b\u4e2d\u95f4\u4ef6\uff0c\u5728 AppModule (\u6216\u4efb\u4f55\u5176\u4ed6\u6a21\u5757)\u4e2d\u4f7f\u7528 . forroutes('\\*') \u6765\u4f7f\u7528\u5b83\u3002","title":"\u4e2d\u95f4\u4ef6"},{"location":"middlewares/#_1","text":"\u4e2d\u95f4\u4ef6\u662f\u4e00\u4e2a\u5728\u8def\u7531\u5904\u7406\u5668 \u4e4b\u524d \u88ab\u79f0\u4e3a\u7684\u51fd\u6570\u3002 \u4e2d\u95f4\u4ef6\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee request \u548c response \u5bf9\u8c61\uff0c\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\u4e2d\u7684 next() \u4e2d\u95f4\u4ef6\u51fd\u6570\u3002 next \u4e2d\u95f4\u4ef6\u51fd\u6570\u901a\u5e38\u7531\u4e00\u4e2a\u540d\u4e3a next \u7684\u53d8\u91cf\u8868\u793a\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNest \u4e2d\u95f4\u4ef6\u7b49\u4ef7\u4e8e express \u4e2d\u95f4\u4ef6\u3002 \u4ee5\u4e0b\u662f\u5b98\u65b9\u6587\u6863\u4e2d\u5bf9\u4e2d\u95f4\u4ef6\u529f\u80fd\u7684\u63cf\u8ff0: \u4e2d\u95f4\u4ef6\u529f\u80fd\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4efb\u52a1: \u6267\u884c\u4efb\u4f55\u4ee3\u7801\u3002 \u5bf9\u8bf7\u6c42\u548c\u54cd\u5e94\u5bf9\u8c61\u8fdb\u884c\u66f4\u6539\u3002 \u7ed3\u675f\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\u3002 \u8c03\u7528\u5806\u6808\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u51fd\u6570\u3002 \u5982\u679c\u5f53\u524d\u7684\u4e2d\u95f4\u4ef6\u51fd\u6570\u6ca1\u6709\u7ed3\u675f\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\uff0c\u5b83\u5fc5\u987b\u8c03\u7528 next() \u6765\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u51fd\u6570\u3002\u5426\u5219\uff0c\u8bf7\u6c42\u5c06\u4fdd\u6301\u6302\u8d77\u72b6\u6001\u3002 \u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u6216\u4e00\u4e2a\u5e26\u6709 @Injectable() \u88c5\u9970\u5668\u7684\u7c7b\u4e2d\u5b9e\u73b0\u5b9a\u5236\u7684 Nest \u4e2d\u95f4\u4ef6\u3002 \u7c7b\u5e94\u8be5\u5b9e\u73b0 NestMiddleware \u63a5\u53e3\uff0c\u800c\u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u8981\u6c42\u3002 \u8ba9\u6211\u4eec\u4ece\u4f7f\u7528\u7c7b\u65b9\u6cd5\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u4e2d\u95f4\u4ef6\u7279\u6027\u5f00\u59cb\u3002 @ @filename ( logger . middleware ) import { Injectable , NestMiddleware } from '@nestjs/common' ; import { Request , Response , NextFunction } from 'express' ; @Injectable () export class LoggerMiddleware implements NestMiddleware { use ( req : Request , res : Response , next : NextFunction ) { console . log ( 'Request...' ); next (); } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class LoggerMiddleware { use ( req , res , next ) { console . log ( 'Request...' ); next (); } }","title":"\u4e2d\u95f4\u4ef6"},{"location":"middlewares/#_2","text":"\u5d4c\u5957\u4e2d\u95f4\u4ef6\u5b8c\u5168\u652f\u6301\u4f9d\u8d56\u6ce8\u5165\u3002 \u5c31\u50cf\u63d0\u4f9b\u7a0b\u5e8f\u548c\u63a7\u5236\u5668\u4e00\u6837\uff0c\u5b83\u4eec\u80fd\u591f\u6ce8\u5165\u5728\u540c\u4e00\u4e2a\u6a21\u5757\u4e2d\u53ef\u7528\u7684 \u4f9d\u8d56\u9879 \u3002 \u901a\u5e38\uff0c\u8fd9\u662f\u901a\u8fc7 \u6784\u9020\u51fd\u6570 \u6765\u5b8c\u6210\u7684\u3002","title":"\u4f9d\u8d56\u6ce8\u5165"},{"location":"middlewares/#_3","text":"\u5728 @Module() \u88c5\u9970\u5668\u4e2d\u6ca1\u6709\u4e2d\u95f4\u4ef6\u7684\u4f4d\u7f6e\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528\u6a21\u5757\u7c7b\u7684 configure() \u65b9\u6cd5\u6765\u8bbe\u7f6e\u5b83\u4eec\u3002 \u5305\u542b\u4e2d\u95f4\u4ef6\u7684\u6a21\u5757\u5fc5\u987b\u5b9e\u73b0 NestModule \u63a5\u53e3\u3002 \u8ba9\u6211\u4eec\u5728 AppModule \u7ea7\u522b\u8bbe\u7f6e LoggerMiddleware \u3002 @ @filename ( app . module ) import { Module , NestModule , MiddlewareConsumer } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule implements NestModule { configure ( consumer : MiddlewareConsumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ( 'cats' ); } } @ @switch import { Module } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule { configure ( consumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ( 'cats' ); } } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e3a\u4e4b\u524d\u5728 CatsController \u4e2d\u5b9a\u4e49\u7684\u8def\u7531\u5904\u7406\u5668 /cats \u8bbe\u7f6e\u4e86 LoggerMiddleware \u3002 \u5728\u914d\u7f6e\u4e2d\u95f4\u4ef6\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5c06\u5305\u542b\u8def\u5f84\u548c\u8bf7\u6c42\u65b9\u6cd5\u7684\u5bf9\u8c61\u4f20\u9012\u7ed9 forRoutes()\u65b9\u6cd5\u6765\u8fdb\u4e00\u6b65\u9650\u5236\u4e2d\u95f4\u4ef6\u53ea\u80fd\u4f7f\u7528\u7279\u5b9a\u7684\u8bf7\u6c42\u65b9\u6cd5\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8bf7\u6ce8\u610f\u6211\u4eec\u5bfc\u5165\u4e86 RequestMethod enum \u6765\u5f15\u7528\u6240\u9700\u7684\u8bf7\u6c42\u65b9\u6cd5\u7c7b\u578b\u3002 @ @filename ( app . module ) import { Module , NestModule , RequestMethod , MiddlewareConsumer } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule implements NestModule { configure ( consumer : MiddlewareConsumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ({ path : 'cats' , method : RequestMethod.GET }); } } @ @switch import { Module , RequestMethod } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule { configure ( consumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ({ path : 'cats' , method : RequestMethod.GET }); } } info Hint \u53ef\u4ee5\u4f7f\u7528 async/await \u65b9\u6cd5\u4f7f configure() \u65b9\u6cd5\u53d8\u4e3a\u5f02\u6b65\u7684(\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728 configure() \u65b9\u6cd5\u4f53\u4e2d await \u5f02\u6b65\u64cd\u4f5c\u7684\u5b8c\u6210)\u3002","title":"\u5e94\u7528\u4e2d\u95f4\u4ef6"},{"location":"middlewares/#_4","text":"\u4e5f\u652f\u6301\u57fa\u4e8e\u6a21\u5f0f\u7684\u8def\u7531\u3002 \u4f8b\u5982\uff0c\u661f\u53f7\u88ab\u7528\u4f5c \u901a\u914d\u7b26 \uff0c\u5b83\u5c06\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u7ec4\u5408: forRoutes ({ path : 'ab*cd' , method : RequestMethod.ALL }); \" ab cd '\u8def\u7531\u8def\u5f84\u5c06\u5339\u914d abcd \uff0c ab_cd \uff0c abecd \uff0c\u7b49\u7b49\u3002 \u4eba\u7269\u7684?'\uff0c + \uff0c \u548c'()'\u53ef\u4ee5\u5728\u8def\u7531\u8def\u5f84\u4e2d\u4f7f\u7528\uff0c\u5b83\u4eec\u662f\u5b83\u4eec\u5bf9\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5b50\u96c6\u3002 \u8fde\u5b57\u7b26( - )\u548c\u70b9( .` )\u6309\u5b57\u9762\u610f\u601d\u89e3\u91ca\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u8def\u5f84\u3002 warning Warning fastify \u5305\u4f7f\u7528 path-to-regexp \u5305\u7684\u6700\u65b0\u7248\u672c\uff0c\u8be5\u5305\u4e0d\u518d\u652f\u6301\u901a\u914d\u7b26\u661f\u53f7 _ \u3002 \u76f8\u53cd,\u60a8\u5fc5\u987b\u4f7f\u7528\u53c2\u6570(\u5982 ., (._) , : \u957f\u6761\u6728\u677f\\* )\u3002","title":"\u8def\u7ebf\u901a\u914d\u7b26"},{"location":"middlewares/#_5","text":"MiddlewareConsumer \u662f\u4e00\u4e2a\u52a9\u624b\u7c7b\u3002 \u5b83\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5185\u5efa\u7684\u65b9\u6cd5\u6765\u7ba1\u7406\u4e2d\u95f4\u4ef6\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u7528[\u6d41\u5229\u7684\u98ce\u683c]\u7b80\u5355\u5730\u94fe\u63a5\u8d77\u6765(https://en.wikipedia.org/wiki/Fluent_interface)\u3002 forRoutes() \u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a RouteInfo \u5bf9\u8c61\uff0c\u4e00\u4e2a\u63a7\u5236\u5668\u7c7b\uff0c\u751a\u81f3\u591a\u4e2a\u63a7\u5236\u5668\u7c7b\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u53ea\u662f\u4f20\u9012\u4e00\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684 \u63a7\u5236\u5668 \u5217\u8868\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5355\u63a7\u5236\u5668\u7684\u4f8b\u5b50: @ @filename ( app . module ) import { Module , NestModule , MiddlewareConsumer } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; import { CatsController } from './cats/cats.controller.ts' ; @Module ({ imports : [ CatsModule ], }) export class AppModule implements NestModule { configure ( consumer : MiddlewareConsumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ( CatsController ); } } @ @switch import { Module } from '@nestjs/common' ; import { LoggerMiddleware } from './common/middleware/logger.middleware' ; import { CatsModule } from './cats/cats.module' ; import { CatsController } from './cats/cats.controller.ts' ; @Module ({ imports : [ CatsModule ], }) export class AppModule { configure ( consumer ) { consumer . apply ( LoggerMiddleware ) . forRoutes ( CatsController ); } } info Hint apply() \u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u53c2\u6570\u6765\u6307\u5b9a multiple middleware \u3002","title":"\u4e2d\u95f4\u4ef6\u7684\u6d88\u8d39\u8005"},{"location":"middlewares/#_6","text":"\u6709\u65f6\u6211\u4eec\u60f3\u8981\u4ece\u4e2d\u95f4\u4ef6\u5e94\u7528\u4e2d\u6392\u9664\u67d0\u4e9b\u8def\u7531\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 exclude() \u65b9\u6cd5\u8f7b\u677e\u5730\u6392\u9664\u67d0\u4e9b\u8def\u7531\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c\u6216\u8005\u4e00\u4e2a RouteInfo \u5bf9\u8c61\u6765\u6807\u8bc6\u8981\u6392\u9664\u7684\u8def\u7531\uff0c\u5982\u4e0b\u6240\u793a: consumer . apply ( LoggerMiddleware ) . exclude ( { path : 'cats' , method : RequestMethod.GET }, { path : 'cats' , method : RequestMethod.POST }, 'cats/(.*)' , ) . forRoutes ( CatsController ); info Hint exclude() \u65b9\u6cd5\u652f\u6301\u4f7f\u7528 path-to-regexp \u5305\u7684\u901a\u914d\u7b26\u53c2\u6570\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c LoggerMiddleware \u5c06\u88ab\u7ed1\u5b9a\u5230 CatsController \u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u8def\u7531\uff0c\u9664\u4e86\u4f20\u9012\u7ed9 exclude() \u65b9\u6cd5\u7684\u4e09\u4e2a\u8def\u7531\u3002","title":"\u4e0d\u5305\u62ec\u8def\u7ebf"},{"location":"middlewares/#_7","text":"\u6211\u4eec\u4f7f\u7528\u7684 LoggerMiddleware \u7c7b\u975e\u5e38\u7b80\u5355\u3002 \u5b83\u6ca1\u6709\u6210\u5458\uff0c\u6ca1\u6709\u989d\u5916\u7684\u65b9\u6cd5\uff0c\u4e5f\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u80fd\u5728\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4e2d\u5b9a\u4e49\u5b83\uff0c\u800c\u4e0d\u662f\u5728\u4e00\u4e2a\u7c7b\u4e2d?\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u3002 \u8fd9\u79cd\u7c7b\u578b\u7684\u4e2d\u95f4\u4ef6\u88ab\u79f0\u4e3a\u529f\u80fd\u4e2d\u95f4\u4ef6\u3002 \u8ba9\u6211\u4eec\u5c06 logger \u4e2d\u95f4\u4ef6\u4ece\u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6\u8f6c\u6362\u4e3a\u529f\u80fd\u4e2d\u95f4\u4ef6\u6765\u8bf4\u660e\u4e24\u8005\u7684\u533a\u522b: @ @filename ( logger . middleware ) import { Request , Response , NextFunction } from 'express' ; export function logger ( req : Request , res : Response , next : NextFunction ) { console . log ( `Request...` ); next (); }; @ @switch export function logger ( req , res , next ) { console . log ( `Request...` ); next (); }; \u5e76\u5728 AppModule \u4e2d\u4f7f\u7528\u5b83: @ @filename ( app . module ) consumer . apply ( logger ) . forRoutes ( CatsController ); info Hint \u5f53\u4f60\u7684\u4e2d\u95f4\u4ef6\u4e0d\u9700\u8981\u4efb\u4f55\u4f9d\u8d56\u65f6\uff0c\u8003\u8651\u4f7f\u7528\u66f4\u7b80\u5355\u7684\u529f\u80fd\u6027\u4e2d\u95f4\u4ef6\u3002","title":"\u529f\u80fd\u7684\u4e2d\u95f4\u4ef6"},{"location":"middlewares/#_8","text":"\u5982\u4e0a\u6240\u8ff0\uff0c\u4e3a\u4e86\u7ed1\u5b9a\u591a\u4e2a\u987a\u5e8f\u6267\u884c\u7684\u4e2d\u95f4\u4ef6\uff0c\u53ea\u9700\u5728 apply() \u65b9\u6cd5\u4e2d\u63d0\u4f9b\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5217\u8868: consumer . apply ( cors (), helmet (), logger ). forRoutes ( CatsController );","title":"\u591a\u4e2a\u4e2d\u95f4\u4ef6"},{"location":"middlewares/#_9","text":"\u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06\u4e2d\u95f4\u4ef6\u7ed1\u5b9a\u5230\u6bcf\u4e00\u4e2a\u6ce8\u518c\u7684\u8def\u7531\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 INestApplication \u5b9e\u4f8b\u63d0\u4f9b\u7684 use() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); app . use ( logger ); await app . listen ( 3000 ); info Hint \u8bbf\u95ee\u5168\u5c40\u4e2d\u95f4\u4ef6\u4e2d\u7684 DI \u5bb9\u5668\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u5f53\u4f7f\u7528 app.use() \u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 functional middleware \u6765\u4ee3\u66ff\u3002 \u6216\u8005\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7c7b\u4e2d\u95f4\u4ef6\uff0c\u5728 AppModule (\u6216\u4efb\u4f55\u5176\u4ed6\u6a21\u5757)\u4e2d\u4f7f\u7528 . forroutes('\\*') \u6765\u4f7f\u7528\u5b83\u3002","title":"\u5168\u7403\u7684\u4e2d\u95f4\u4ef6"},{"location":"migration/","text":"Migration guide \u00b6 This article provides a set of guidelines for migrating from Nest version 7 to version 8. To learn more about the new features we've added in the v8, check out this link . HTTP module \u00b6 The HttpModule exported from the @nestjs/common package has been deprecated and will be removed in the next major release. Instead, please use the @nestjs/axios package (otherwise, there are no API differences). gRPC strategy \u00b6 The original Node gRPC library ( grpc ) has been deprecated and will no longer receive feature updates. With Nest v8, you should use the @grpc/grpc-js library instead. NATS strategy \u00b6 NATS has released a new major version (2.0) which has many changes and it is not API compatible with nats@1.x.x . If you interact with a Nest microservice (that uses NATS as a transfer layer), from a service written in a different framework, please, see their migration document to learn what's changed in v2. Otherwise, you should not see any major differences when communicating between Nest microservices. To upgrade, make sure to install the latest version of the nats package ( npm i nats@latest ). Also, update your NATS configuration . Example: // Before const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.NATS , options : { url : 'nats://localhost:4222' , }, }, ); // Now const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], }, }, ); @All() decorator \u00b6 Routes annotated with the @All() decorator will now map to the router.all() method instead of the router.use() . Async listen/start methods \u00b6 listenAsync() and startAllMicroservicesAsync() methods have been deprecated. Instead, simply use the listen() and startAllMicroservices() methods (they are async either way). Socket.io \u00b6 The @nestjs/platform-socket.io package was upgraded to use the socket.io@4.x.x version (Nest v7 was based on the socket.io v2). To learn more, check out these articles: Socket.io 3 Release and Socket.io 4 Release . Logger breaking changes \u00b6 For better extensibility, we separated out the Logger and ConsoleLogger classes ( PR , learn more in the Logging chapter). If your application uses a custom logger class that extends the built-in Logger , you should update it to extend the ConsoleLogger now. Before: export class MyLogger extends Logger {} Now: export class MyLogger extends ConsoleLogger {} @nestjs/config package \u00b6 There was a minor breaking change in the registerAs function (typings), you can see what has changed in this PR . @nestjs/graphql package \u00b6 There might be some small differences in how your auto-generated schema file looks like (changed types order). Also, if you use the schema-first approach, the automatically generated type definitions will change as there was a new Nullable<T> type introduced in the latest release. Also, all HttpException errors thrown from your resolvers will be now automatically mapped to the corresponding ApolloError instances, unless you set the autoTransformHttpErrors configuration property (in the options object you pass into the GraphQLModule#forRoot() method) to false . @nestjs/terminus package \u00b6 HttpHealthIndicator requires @nestjs/axios to be installed as well as HttpModule to be imported. Also, the deprecated TerminusModule.forRootAsync has been removed. To migrate, check out the @nestjs/terminus v7.x.x upgrade guide . RxJS \u00b6 Make sure to upgrade to the latest version of the rxjs package (v7).","title":"\u8fc1\u79fb\u5411\u5bfc"},{"location":"migration/#migration-guide","text":"This article provides a set of guidelines for migrating from Nest version 7 to version 8. To learn more about the new features we've added in the v8, check out this link .","title":"Migration guide"},{"location":"migration/#http-module","text":"The HttpModule exported from the @nestjs/common package has been deprecated and will be removed in the next major release. Instead, please use the @nestjs/axios package (otherwise, there are no API differences).","title":"HTTP module"},{"location":"migration/#grpc-strategy","text":"The original Node gRPC library ( grpc ) has been deprecated and will no longer receive feature updates. With Nest v8, you should use the @grpc/grpc-js library instead.","title":"gRPC strategy"},{"location":"migration/#nats-strategy","text":"NATS has released a new major version (2.0) which has many changes and it is not API compatible with nats@1.x.x . If you interact with a Nest microservice (that uses NATS as a transfer layer), from a service written in a different framework, please, see their migration document to learn what's changed in v2. Otherwise, you should not see any major differences when communicating between Nest microservices. To upgrade, make sure to install the latest version of the nats package ( npm i nats@latest ). Also, update your NATS configuration . Example: // Before const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.NATS , options : { url : 'nats://localhost:4222' , }, }, ); // Now const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], }, }, );","title":"NATS strategy"},{"location":"migration/#all-decorator","text":"Routes annotated with the @All() decorator will now map to the router.all() method instead of the router.use() .","title":"@All() decorator"},{"location":"migration/#async-listenstart-methods","text":"listenAsync() and startAllMicroservicesAsync() methods have been deprecated. Instead, simply use the listen() and startAllMicroservices() methods (they are async either way).","title":"Async listen/start methods"},{"location":"migration/#socketio","text":"The @nestjs/platform-socket.io package was upgraded to use the socket.io@4.x.x version (Nest v7 was based on the socket.io v2). To learn more, check out these articles: Socket.io 3 Release and Socket.io 4 Release .","title":"Socket.io"},{"location":"migration/#logger-breaking-changes","text":"For better extensibility, we separated out the Logger and ConsoleLogger classes ( PR , learn more in the Logging chapter). If your application uses a custom logger class that extends the built-in Logger , you should update it to extend the ConsoleLogger now. Before: export class MyLogger extends Logger {} Now: export class MyLogger extends ConsoleLogger {}","title":"Logger breaking changes"},{"location":"migration/#nestjsconfig-package","text":"There was a minor breaking change in the registerAs function (typings), you can see what has changed in this PR .","title":"@nestjs/config package"},{"location":"migration/#nestjsgraphql-package","text":"There might be some small differences in how your auto-generated schema file looks like (changed types order). Also, if you use the schema-first approach, the automatically generated type definitions will change as there was a new Nullable<T> type introduced in the latest release. Also, all HttpException errors thrown from your resolvers will be now automatically mapped to the corresponding ApolloError instances, unless you set the autoTransformHttpErrors configuration property (in the options object you pass into the GraphQLModule#forRoot() method) to false .","title":"@nestjs/graphql package"},{"location":"migration/#nestjsterminus-package","text":"HttpHealthIndicator requires @nestjs/axios to be installed as well as HttpModule to be imported. Also, the deprecated TerminusModule.forRootAsync has been removed. To migrate, check out the @nestjs/terminus v7.x.x upgrade guide .","title":"@nestjs/terminus package"},{"location":"migration/#rxjs","text":"Make sure to upgrade to the latest version of the rxjs package (v7).","title":"RxJS"},{"location":"modules/","text":"\u6a21\u5757 \u00b6 \u6a21\u5757\u662f\u4e00\u4e2a\u5e26\u6709 @Module() \u88c5\u9970\u5668\u7684\u7c7b\u3002 @Module() \u88c5\u9970\u5668\u63d0\u4f9b\u4e86\u5143\u6570\u636e\uff0c Nest \u5229\u7528\u8fd9\u4e9b\u5143\u6570\u636e\u6765\u7ec4\u7ec7\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\u3002 \u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u81f3\u5c11\u6709\u4e00\u4e2a\u6a21\u5757\uff0c\u4e00\u4e2a \u6839\u6a21\u5757 \u3002 \u6839\u6a21\u5757\u662f Nest \u7528\u6765\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u56fe\u7684\u8d77\u70b9\u2014\u2014Nest \u7528\u6765\u89e3\u6790\u6a21\u5757\u548c\u63d0\u4f9b\u5668\u5173\u7cfb\u548c\u4f9d\u8d56\u5173\u7cfb\u7684\u5185\u90e8\u6570\u636e\u7ed3\u6784\u3002 \u867d\u7136\u975e\u5e38\u5c0f\u7684\u5e94\u7528\u7a0b\u5e8f\u7406\u8bba\u4e0a\u53ef\u80fd\u53ea\u6709\u6839\u6a21\u5757\uff0c\u4f46\u8fd9\u4e0d\u662f\u5178\u578b\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u5f3a\u70c8\u5efa\u8bae\u5c06\u6a21\u5757\u4f5c\u4e3a\u7ec4\u7ec7\u7ec4\u4ef6\u7684\u6709\u6548\u65b9\u5f0f\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\uff0c\u6700\u7ec8\u7684\u4f53\u7cfb\u7ed3\u6784\u5c06\u4f7f\u7528\u591a\u4e2a\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u5c01\u88c5\u4e86\u4e00\u7ec4\u5bc6\u5207\u76f8\u5173\u7684\u529f\u80fd\u3002 @Module() \u88c5\u9970\u5668\u63a5\u53d7\u5355\u4e2a\u5bf9\u8c61\uff0c\u5176\u5c5e\u6027\u63cf\u8ff0\u4e86\u8be5\u6a21\u5757: providers \u8fd9\u4e9b\u63d0\u4f9b\u5668\u5c06\u88ab Nest \u6ce8\u5165\u5668\u5b9e\u4f8b\u5316\uff0c\u5e76\u4e14\u81f3\u5c11\u53ef\u4ee5\u5728\u6574\u4e2a\u6a21\u5757\u4e2d\u5171\u4eab controllers \u5728\u8be5\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5fc5\u987b\u5b9e\u4f8b\u5316\u7684\u63a7\u5236\u5668\u96c6 imports \u5bfc\u5165\u6b64\u6a21\u5757\u4e2d\u6240\u9700\u7684\u63d0\u4f9b\u7a0b\u5e8f\u7684\u5bfc\u5165\u6a21\u5757\u5217\u8868 exports \u7531\u672c\u6a21\u5757\u63d0\u4f9b\u7684 providers \u5b50\u96c6\uff0c\u5e94\u8be5\u5728\u5bfc\u5165\u672c\u6a21\u5757\u7684\u5176\u4ed6\u6a21\u5757\u4e2d\u53ef\u7528\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u5668\u672c\u8eab\uff0c\u4e5f\u53ef\u4ee5\u53ea\u4f7f\u7528\u5b83\u7684\u4ee4\u724c( provider \u503c) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5757 \u5c01\u88c5 \u63d0\u4f9b\u7a0b\u5e8f\u3002 \u8fd9\u610f\u5473\u7740\u4e0d\u53ef\u80fd\u6ce8\u5165\u65e2\u4e0d\u76f4\u63a5\u5c5e\u4e8e\u5f53\u524d\u6a21\u5757\u4e5f\u4e0d\u4ece\u5bfc\u5165\u6a21\u5757\u5bfc\u51fa\u7684\u63d0\u4f9b\u5668\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5c06\u6a21\u5757\u4e2d\u5bfc\u51fa\u7684\u63d0\u4f9b\u5668\u89c6\u4e3a\u8be5\u6a21\u5757\u7684\u516c\u5171\u63a5\u53e3\u6216 API\u3002 \u529f\u80fd\u6a21\u5757 \u00b6 CatsController \u548c CatsService \u5c5e\u4e8e\u540c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u57df\u3002 \u56e0\u4e3a\u5b83\u4eec\u662f\u5bc6\u5207\u76f8\u5173\u7684\uff0c\u6240\u4ee5\u5c06\u5b83\u4eec\u79fb\u5230\u7279\u6027\u6a21\u5757\u4e2d\u662f\u6709\u610f\u4e49\u7684\u3002 \u7279\u6027\u6a21\u5757\u53ea\u662f\u7ec4\u7ec7\u4e0e\u7279\u5b9a\u7279\u6027\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u4fdd\u6301\u4ee3\u7801\u7684\u7ec4\u7ec7\u548c\u5efa\u7acb\u6e05\u6670\u7684\u8fb9\u754c\u3002 \u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u7ba1\u7406\u590d\u6742\u6027\u5e76\u4f7f\u7528 SOLID \u539f\u5219\u8fdb\u884c\u5f00\u53d1\uff0c\u7279\u522b\u662f\u5f53\u5e94\u7528\u7a0b\u5e8f\u548c/\u6216\u56e2\u961f\u7684\u89c4\u6a21\u589e\u957f\u65f6\u3002 \u4e3a\u4e86\u6f14\u793a\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u521b\u5efa CatsModule \u3002 @ @filename ( cats / cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) export class CatsModule {} info Hint \u8981\u4f7f\u7528 CLI \u521b\u5efa\u6a21\u5757\uff0c\u53ea\u9700\u6267\u884c $ nest g module cats \u547d\u4ee4\u3002 \u4e0a\u9762\uff0c\u6211\u4eec\u5728 cats.module \u4e2d\u5b9a\u4e49\u4e86 CatsModule \u3002\u5e76\u5c06\u4e0e\u6b64\u6a21\u5757\u76f8\u5173\u7684\u6240\u6709\u5185\u5bb9\u79fb\u5230 cats \u76ee\u5f55\u4e2d\u3002 \u6211\u4eec\u9700\u8981\u505a\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u662f\u5c06\u8fd9\u4e2a\u6a21\u5757\u5bfc\u5165\u5230\u6839\u6a21\u5757( AppModule \uff0c\u5b9a\u4e49\u5728 app.module.module \u4e2d\u3002ts \u6587\u4ef6)\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule {} \u4e0b\u9762\u662f\u6211\u4eec\u73b0\u5728\u7684\u76ee\u5f55\u7ed3\u6784: src cats dto create-cat.dto.ts interfaces cat.interface.ts cats.controller.ts cats.module.ts cats.service.ts app.module.ts main.ts \u5171\u4eab\u6a21\u5757 \u00b6 \u5728 Nest \u4e2d\uff0c\u6a21\u5757\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f \u5355\u4f8b \u7684\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u6beb\u4e0d\u8d39\u529b\u5730\u5728\u591a\u4e2a\u6a21\u5757\u4e4b\u95f4\u5171\u4eab\u4efb\u4f55\u63d0\u4f9b\u5668\u7684\u540c\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u6bcf\u4e2a\u6a21\u5757\u81ea\u52a8\u6210\u4e3a\u4e00\u4e2a\u5171\u4eab\u6a21\u5757\u3002 \u4e00\u65e6\u521b\u5efa\uff0c\u5b83\u5c31\u53ef\u4ee5\u88ab\u4efb\u4f55\u6a21\u5757\u91cd\u7528\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5728\u51e0\u4e2a\u5176\u4ed6\u6a21\u5757\u4e4b\u95f4\u5171\u4eab CatsService \u7684\u5b9e\u4f8b\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u901a\u8fc7\u5c06 CatsService provider \u6dfb\u52a0\u5230\u6a21\u5757\u7684 exports \u6570\u7ec4\u4e2d\u6765 export \uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], exports : [ CatsService ] }) export class CatsModule {} \u73b0\u5728\uff0c\u4efb\u4f55\u5bfc\u5165 CatsModule \u7684\u6a21\u5757\u90fd\u53ef\u4ee5\u8bbf\u95ee CatsService \uff0c\u5e76\u5c06\u4e0e\u6240\u6709\u5bfc\u5165\u5b83\u7684\u5176\u4ed6\u6a21\u5757\u5171\u4eab\u540c\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u6a21\u5757\u518d\u51fa\u53e3 \u00b6 \u5982\u4e0a\u6240\u8ff0\uff0c\u6a21\u5757\u53ef\u4ee5\u5bfc\u51fa\u5b83\u4eec\u7684\u5185\u90e8\u63d0\u4f9b\u7a0b\u5e8f\u3002 \u6b64\u5916\uff0c\u5b83\u4eec\u8fd8\u53ef\u4ee5\u91cd\u65b0\u5bfc\u51fa\u6240\u5bfc\u5165\u7684\u6a21\u5757\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c CommonModule \u88ab\u5bfc\u5165\u5230 CoreModule \u4e2d\uff0c \u4e5f \u4ece CoreModule \u4e2d\u5bfc\u51fa\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u88ab\u5176\u4ed6\u5bfc\u5165\u8fd9\u4e2a\u6a21\u5757\u7684\u6a21\u5757\u4f7f\u7528\u3002 @Module ({ imports : [ CommonModule ], exports : [ CommonModule ], }) export class CoreModule {} \u4f9d\u8d56\u6ce8\u5165 \u00b6 \u6a21\u5757\u7c7b\u4e5f\u53ef\u4ee5 \u6ce8\u5165 \u63d0\u4f9b\u5668(\u4f8b\u5982\uff0c\u7528\u4e8e\u914d\u7f6e\u76ee\u7684): @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) export class CatsModule { constructor ( private catsService : CatsService ) {} } @ @switch import { Module , Dependencies } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) @Dependencies ( CatsService ) export class CatsModule { constructor ( catsService ) { this . catsService = catsService ; } } \u7136\u800c\uff0c\u7531\u4e8e circular dependency \uff0c\u6a21\u5757\u7c7b\u672c\u8eab\u4e0d\u80fd\u4f5c\u4e3a\u63d0\u4f9b\u5668\u6ce8\u5165\u3002 \u5168\u5c40\u6a21\u5757 \u00b6 \u5982\u679c\u60a8\u5fc5\u987b\u5728\u6240\u6709\u5730\u65b9\u5bfc\u5165\u76f8\u540c\u7684\u6a21\u5757\u96c6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f88\u4e4f\u5473\u3002 \u4e0e Nest \u4e0d\u540c\u7684\u662f\uff0c Angular providers \u662f\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u6ce8\u518c\u7684\u3002 \u4e00\u65e6\u5b9a\u4e49\uff0c\u5b83\u4eec\u5c31\u65e0\u5904\u4e0d\u5728\u3002 \u7136\u800c\uff0cNest \u5c06\u63d0\u4f9b\u7a0b\u5e8f\u5c01\u88c5\u5728\u6a21\u5757\u8303\u56f4\u5185\u3002 \u5982\u679c\u4e0d\u5148\u5bfc\u5165\u5c01\u88c5\u6a21\u5757\uff0c\u5c31\u4e0d\u80fd\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528\u6a21\u5757\u7684\u63d0\u4f9b\u5668\u3002 \u5f53\u4f60\u60f3\u8981\u63d0\u4f9b\u4e00\u7ec4\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528\u7684\u63d0\u4f9b\u7a0b\u5e8f(\u4f8b\u5982\uff0c\u52a9\u624b\uff0c\u6570\u636e\u5e93\u8fde\u63a5\u7b49)\u65f6\uff0c\u4f7f\u7528 @Global() \u88c5\u9970\u5668\u5c06\u6a21\u5757\u8bbe\u4e3a global \u3002 import { Module , Global } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Global () @Module ({ controllers : [ CatsController ], providers : [ CatsService ], exports : [ CatsService ], }) export class CatsModule {} @Global() \u88c5\u9970\u5668\u4f7f\u6a21\u5757\u6210\u4e3a\u5168\u5c40\u4f5c\u7528\u57df\u3002 \u5168\u5c40\u6a21\u5757\u5e94\u8be5 \u53ea\u6ce8\u518c\u4e00\u6b21 \uff0c\u901a\u5e38\u7531\u6839\u6a21\u5757\u6216\u6838\u5fc3\u6a21\u5757\u6ce8\u518c\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c CatsService \u63d0\u4f9b\u5668\u5c06\u662f\u666e\u904d\u5b58\u5728\u7684\uff0c\u5e0c\u671b\u6ce8\u5165\u8be5\u670d\u52a1\u7684\u6a21\u5757\u5c06\u4e0d\u9700\u8981\u5728 imports \u6570\u7ec4\u4e2d\u5bfc\u5165 CatsModule \u3002 info Hint \u5168\u5c40\u5316\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u8bbe\u8ba1\u51b3\u7b56\u3002 \u5168\u5c40\u6a21\u5757\u53ef\u7528\u6765\u51cf\u5c11\u5fc5\u8981\u7684\u6837\u677f\u6587\u4ef6\u7684\u6570\u91cf\u3002 imports \u6570\u7ec4\u901a\u5e38\u662f\u8ba9\u6d88\u8d39\u8005\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757 API \u7684\u9996\u9009\u65b9\u5f0f\u3002 \u52a8\u6001\u6a21\u5757 \u00b6 Nest \u6a21\u5757\u7cfb\u7edf\u5305\u542b\u4e00\u4e2a\u5f3a\u5927\u7684\u7279\u6027\uff0c\u79f0\u4e3a\u52a8\u6001\u6a21\u5757\u3002 \u8fd9\u4e2a\u7279\u6027\u4f7f\u60a8\u80fd\u591f\u8f7b\u677e\u5730\u521b\u5efa\u53ef\u5b9a\u5236\u7684\u6a21\u5757\uff0c\u8fd9\u4e9b\u6a21\u5757\u53ef\u4ee5\u52a8\u6001\u5730\u6ce8\u518c\u548c\u914d\u7f6e\u63d0\u4f9b\u5668\u3002 \u52a8\u6001\u6a21\u5757\u5728 \u8fd9\u91cc \u6709\u5e7f\u6cdb\u7684\u4ecb\u7ecd\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u6982\u8ff0\u4ee5\u5b8c\u6210\u5bf9\u6a21\u5757\u7684\u4ecb\u7ecd\u3002 \u4e0b\u9762\u662f DatabaseModule \u7684\u52a8\u6001\u6a21\u5757\u5b9a\u4e49\u793a\u4f8b: @ @filename () import { Module , DynamicModule } from '@nestjs/common' ; import { createDatabaseProviders } from './database.providers' ; import { Connection } from './connection.provider' ; @Module ({ providers : [ Connection ], }) export class DatabaseModule { static forRoot ( entities = [], options ? ) : DynamicModule { const providers = createDatabaseProviders ( options , entities ); return { module : DatabaseModule , providers : providers , exports : providers , }; } } @ @switch import { Module } from '@nestjs/common' ; import { createDatabaseProviders } from './database.providers' ; import { Connection } from './connection.provider' ; @Module ({ providers : [ Connection ], }) export class DatabaseModule { static forRoot ( entities = [], options ? ) { const providers = createDatabaseProviders ( options , entities ); return { module : DatabaseModule , providers : providers , exports : providers , }; } } info Hint forRoot() \u65b9\u6cd5\u53ef\u4ee5\u540c\u6b65\u6216\u5f02\u6b65\u5730\u8fd4\u56de\u4e00\u4e2a\u52a8\u6001\u6a21\u5757(\u4f8b\u5982\uff0c\u901a\u8fc7 Promise )\u3002 \u8be5\u6a21\u5757\u9ed8\u8ba4\u5b9a\u4e49\u4e86 Connection \u63d0\u4f9b\u7a0b\u5e8f(\u5728 @Module() \u88c5\u9970\u5668\u5143\u6570\u636e\u4e2d)\uff0c\u4f46\u53e6\u5916-\u53d6\u51b3\u4e8e\u4f20\u9012\u7ed9 forRoot() \u65b9\u6cd5\u7684 entities \u548c options \u5bf9\u8c61-\u516c\u5f00\u4e86\u4e00\u4e2a\u63d0\u4f9b\u7a0b\u5e8f\u96c6\u5408\uff0c\u4f8b\u5982\uff0c\u5b58\u50a8\u5e93\u3002 \u8bf7\u6ce8\u610f\uff0c\u52a8\u6001\u6a21\u5757 \u8fd4\u56de\u7684\u5c5e\u6027\u6269\u5c55 (\u800c\u4e0d\u662f\u8986\u76d6)\u5728 @Module() \u88c5\u9970\u5668\u4e2d\u5b9a\u4e49\u7684\u57fa\u672c\u6a21\u5757\u5143\u6570\u636e\u3002 \u8fd9\u5c31\u662f\u5982\u4f55\u4ece\u6a21\u5757\u4e2d\u5bfc\u51fa\u9759\u6001\u58f0\u660e\u7684 Connection \u63d0\u4f9b\u7a0b\u5e8f \u548c\u52a8\u6001\u751f\u6210\u7684\u5b58\u50a8\u5e93\u63d0\u4f9b\u7a0b\u5e8f \u7684\u3002 \u5982\u679c\u4f60\u60f3\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u6ce8\u518c\u4e00\u4e2a\u52a8\u6001\u6a21\u5757\uff0c\u5c06 global \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u3002 { global : true , module : DatabaseModule , providers : providers , exports : providers , } warning Warning \u5c31\u50cf\u524d\u9762\u63d0\u5230\u7684\uff0c\u5c06\u6240\u6709\u5185\u5bb9\u90fd\u8bbe\u7f6e\u4e3a\u5168\u5c40\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u8bbe\u8ba1\u51b3\u7b56\u3002 DatabaseModule \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5bfc\u5165\u548c\u914d\u7f6e: import { Module } from '@nestjs/common' ; import { DatabaseModule } from './database/database.module' ; import { User } from './users/entities/user.entity' ; @Module ({ imports : [ DatabaseModule . forRoot ([ User ])], }) export class AppModule {} \u5982\u679c\u4f60\u60f3\u91cd\u65b0\u5bfc\u51fa\u4e00\u4e2a\u52a8\u6001\u6a21\u5757\uff0c\u4f60\u53ef\u4ee5\u7701\u7565 exports \u6570\u7ec4\u4e2d\u7684 forRoot() \u65b9\u6cd5\u8c03\u7528: import { Module } from '@nestjs/common' ; import { DatabaseModule } from './database/database.module' ; import { User } from './users/entities/user.entity' ; @Module ({ imports : [ DatabaseModule . forRoot ([ User ])], exports : [ DatabaseModule ], }) export class AppModule {} \u52a8\u6001\u6a21\u5757 \u4e00\u7ae0\u66f4\u8be6\u7ec6\u5730\u4ecb\u7ecd\u4e86\u8fd9\u4e2a\u4e3b\u9898\uff0c\u5e76\u5305\u62ec\u4e86\u4e00\u4e2a \u5de5\u4f5c\u793a\u4f8b \u3002","title":"\u6a21\u5757"},{"location":"modules/#_1","text":"\u6a21\u5757\u662f\u4e00\u4e2a\u5e26\u6709 @Module() \u88c5\u9970\u5668\u7684\u7c7b\u3002 @Module() \u88c5\u9970\u5668\u63d0\u4f9b\u4e86\u5143\u6570\u636e\uff0c Nest \u5229\u7528\u8fd9\u4e9b\u5143\u6570\u636e\u6765\u7ec4\u7ec7\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\u3002 \u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u81f3\u5c11\u6709\u4e00\u4e2a\u6a21\u5757\uff0c\u4e00\u4e2a \u6839\u6a21\u5757 \u3002 \u6839\u6a21\u5757\u662f Nest \u7528\u6765\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u56fe\u7684\u8d77\u70b9\u2014\u2014Nest \u7528\u6765\u89e3\u6790\u6a21\u5757\u548c\u63d0\u4f9b\u5668\u5173\u7cfb\u548c\u4f9d\u8d56\u5173\u7cfb\u7684\u5185\u90e8\u6570\u636e\u7ed3\u6784\u3002 \u867d\u7136\u975e\u5e38\u5c0f\u7684\u5e94\u7528\u7a0b\u5e8f\u7406\u8bba\u4e0a\u53ef\u80fd\u53ea\u6709\u6839\u6a21\u5757\uff0c\u4f46\u8fd9\u4e0d\u662f\u5178\u578b\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u5f3a\u70c8\u5efa\u8bae\u5c06\u6a21\u5757\u4f5c\u4e3a\u7ec4\u7ec7\u7ec4\u4ef6\u7684\u6709\u6548\u65b9\u5f0f\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\uff0c\u6700\u7ec8\u7684\u4f53\u7cfb\u7ed3\u6784\u5c06\u4f7f\u7528\u591a\u4e2a\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u5c01\u88c5\u4e86\u4e00\u7ec4\u5bc6\u5207\u76f8\u5173\u7684\u529f\u80fd\u3002 @Module() \u88c5\u9970\u5668\u63a5\u53d7\u5355\u4e2a\u5bf9\u8c61\uff0c\u5176\u5c5e\u6027\u63cf\u8ff0\u4e86\u8be5\u6a21\u5757: providers \u8fd9\u4e9b\u63d0\u4f9b\u5668\u5c06\u88ab Nest \u6ce8\u5165\u5668\u5b9e\u4f8b\u5316\uff0c\u5e76\u4e14\u81f3\u5c11\u53ef\u4ee5\u5728\u6574\u4e2a\u6a21\u5757\u4e2d\u5171\u4eab controllers \u5728\u8be5\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5fc5\u987b\u5b9e\u4f8b\u5316\u7684\u63a7\u5236\u5668\u96c6 imports \u5bfc\u5165\u6b64\u6a21\u5757\u4e2d\u6240\u9700\u7684\u63d0\u4f9b\u7a0b\u5e8f\u7684\u5bfc\u5165\u6a21\u5757\u5217\u8868 exports \u7531\u672c\u6a21\u5757\u63d0\u4f9b\u7684 providers \u5b50\u96c6\uff0c\u5e94\u8be5\u5728\u5bfc\u5165\u672c\u6a21\u5757\u7684\u5176\u4ed6\u6a21\u5757\u4e2d\u53ef\u7528\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u5668\u672c\u8eab\uff0c\u4e5f\u53ef\u4ee5\u53ea\u4f7f\u7528\u5b83\u7684\u4ee4\u724c( provider \u503c) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5757 \u5c01\u88c5 \u63d0\u4f9b\u7a0b\u5e8f\u3002 \u8fd9\u610f\u5473\u7740\u4e0d\u53ef\u80fd\u6ce8\u5165\u65e2\u4e0d\u76f4\u63a5\u5c5e\u4e8e\u5f53\u524d\u6a21\u5757\u4e5f\u4e0d\u4ece\u5bfc\u5165\u6a21\u5757\u5bfc\u51fa\u7684\u63d0\u4f9b\u5668\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5c06\u6a21\u5757\u4e2d\u5bfc\u51fa\u7684\u63d0\u4f9b\u5668\u89c6\u4e3a\u8be5\u6a21\u5757\u7684\u516c\u5171\u63a5\u53e3\u6216 API\u3002","title":"\u6a21\u5757"},{"location":"modules/#_2","text":"CatsController \u548c CatsService \u5c5e\u4e8e\u540c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u57df\u3002 \u56e0\u4e3a\u5b83\u4eec\u662f\u5bc6\u5207\u76f8\u5173\u7684\uff0c\u6240\u4ee5\u5c06\u5b83\u4eec\u79fb\u5230\u7279\u6027\u6a21\u5757\u4e2d\u662f\u6709\u610f\u4e49\u7684\u3002 \u7279\u6027\u6a21\u5757\u53ea\u662f\u7ec4\u7ec7\u4e0e\u7279\u5b9a\u7279\u6027\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u4fdd\u6301\u4ee3\u7801\u7684\u7ec4\u7ec7\u548c\u5efa\u7acb\u6e05\u6670\u7684\u8fb9\u754c\u3002 \u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u7ba1\u7406\u590d\u6742\u6027\u5e76\u4f7f\u7528 SOLID \u539f\u5219\u8fdb\u884c\u5f00\u53d1\uff0c\u7279\u522b\u662f\u5f53\u5e94\u7528\u7a0b\u5e8f\u548c/\u6216\u56e2\u961f\u7684\u89c4\u6a21\u589e\u957f\u65f6\u3002 \u4e3a\u4e86\u6f14\u793a\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u521b\u5efa CatsModule \u3002 @ @filename ( cats / cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) export class CatsModule {} info Hint \u8981\u4f7f\u7528 CLI \u521b\u5efa\u6a21\u5757\uff0c\u53ea\u9700\u6267\u884c $ nest g module cats \u547d\u4ee4\u3002 \u4e0a\u9762\uff0c\u6211\u4eec\u5728 cats.module \u4e2d\u5b9a\u4e49\u4e86 CatsModule \u3002\u5e76\u5c06\u4e0e\u6b64\u6a21\u5757\u76f8\u5173\u7684\u6240\u6709\u5185\u5bb9\u79fb\u5230 cats \u76ee\u5f55\u4e2d\u3002 \u6211\u4eec\u9700\u8981\u505a\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u662f\u5c06\u8fd9\u4e2a\u6a21\u5757\u5bfc\u5165\u5230\u6839\u6a21\u5757( AppModule \uff0c\u5b9a\u4e49\u5728 app.module.module \u4e2d\u3002ts \u6587\u4ef6)\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { CatsModule } from './cats/cats.module' ; @Module ({ imports : [ CatsModule ], }) export class AppModule {} \u4e0b\u9762\u662f\u6211\u4eec\u73b0\u5728\u7684\u76ee\u5f55\u7ed3\u6784: src cats dto create-cat.dto.ts interfaces cat.interface.ts cats.controller.ts cats.module.ts cats.service.ts app.module.ts main.ts","title":"\u529f\u80fd\u6a21\u5757"},{"location":"modules/#_3","text":"\u5728 Nest \u4e2d\uff0c\u6a21\u5757\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f \u5355\u4f8b \u7684\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u6beb\u4e0d\u8d39\u529b\u5730\u5728\u591a\u4e2a\u6a21\u5757\u4e4b\u95f4\u5171\u4eab\u4efb\u4f55\u63d0\u4f9b\u5668\u7684\u540c\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u6bcf\u4e2a\u6a21\u5757\u81ea\u52a8\u6210\u4e3a\u4e00\u4e2a\u5171\u4eab\u6a21\u5757\u3002 \u4e00\u65e6\u521b\u5efa\uff0c\u5b83\u5c31\u53ef\u4ee5\u88ab\u4efb\u4f55\u6a21\u5757\u91cd\u7528\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5728\u51e0\u4e2a\u5176\u4ed6\u6a21\u5757\u4e4b\u95f4\u5171\u4eab CatsService \u7684\u5b9e\u4f8b\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u901a\u8fc7\u5c06 CatsService provider \u6dfb\u52a0\u5230\u6a21\u5757\u7684 exports \u6570\u7ec4\u4e2d\u6765 export \uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], exports : [ CatsService ] }) export class CatsModule {} \u73b0\u5728\uff0c\u4efb\u4f55\u5bfc\u5165 CatsModule \u7684\u6a21\u5757\u90fd\u53ef\u4ee5\u8bbf\u95ee CatsService \uff0c\u5e76\u5c06\u4e0e\u6240\u6709\u5bfc\u5165\u5b83\u7684\u5176\u4ed6\u6a21\u5757\u5171\u4eab\u540c\u4e00\u4e2a\u5b9e\u4f8b\u3002","title":"\u5171\u4eab\u6a21\u5757"},{"location":"modules/#_4","text":"\u5982\u4e0a\u6240\u8ff0\uff0c\u6a21\u5757\u53ef\u4ee5\u5bfc\u51fa\u5b83\u4eec\u7684\u5185\u90e8\u63d0\u4f9b\u7a0b\u5e8f\u3002 \u6b64\u5916\uff0c\u5b83\u4eec\u8fd8\u53ef\u4ee5\u91cd\u65b0\u5bfc\u51fa\u6240\u5bfc\u5165\u7684\u6a21\u5757\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c CommonModule \u88ab\u5bfc\u5165\u5230 CoreModule \u4e2d\uff0c \u4e5f \u4ece CoreModule \u4e2d\u5bfc\u51fa\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u88ab\u5176\u4ed6\u5bfc\u5165\u8fd9\u4e2a\u6a21\u5757\u7684\u6a21\u5757\u4f7f\u7528\u3002 @Module ({ imports : [ CommonModule ], exports : [ CommonModule ], }) export class CoreModule {}","title":"\u6a21\u5757\u518d\u51fa\u53e3"},{"location":"modules/#_5","text":"\u6a21\u5757\u7c7b\u4e5f\u53ef\u4ee5 \u6ce8\u5165 \u63d0\u4f9b\u5668(\u4f8b\u5982\uff0c\u7528\u4e8e\u914d\u7f6e\u76ee\u7684): @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) export class CatsModule { constructor ( private catsService : CatsService ) {} } @ @switch import { Module , Dependencies } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) @Dependencies ( CatsService ) export class CatsModule { constructor ( catsService ) { this . catsService = catsService ; } } \u7136\u800c\uff0c\u7531\u4e8e circular dependency \uff0c\u6a21\u5757\u7c7b\u672c\u8eab\u4e0d\u80fd\u4f5c\u4e3a\u63d0\u4f9b\u5668\u6ce8\u5165\u3002","title":"\u4f9d\u8d56\u6ce8\u5165"},{"location":"modules/#_6","text":"\u5982\u679c\u60a8\u5fc5\u987b\u5728\u6240\u6709\u5730\u65b9\u5bfc\u5165\u76f8\u540c\u7684\u6a21\u5757\u96c6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f88\u4e4f\u5473\u3002 \u4e0e Nest \u4e0d\u540c\u7684\u662f\uff0c Angular providers \u662f\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u6ce8\u518c\u7684\u3002 \u4e00\u65e6\u5b9a\u4e49\uff0c\u5b83\u4eec\u5c31\u65e0\u5904\u4e0d\u5728\u3002 \u7136\u800c\uff0cNest \u5c06\u63d0\u4f9b\u7a0b\u5e8f\u5c01\u88c5\u5728\u6a21\u5757\u8303\u56f4\u5185\u3002 \u5982\u679c\u4e0d\u5148\u5bfc\u5165\u5c01\u88c5\u6a21\u5757\uff0c\u5c31\u4e0d\u80fd\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528\u6a21\u5757\u7684\u63d0\u4f9b\u5668\u3002 \u5f53\u4f60\u60f3\u8981\u63d0\u4f9b\u4e00\u7ec4\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528\u7684\u63d0\u4f9b\u7a0b\u5e8f(\u4f8b\u5982\uff0c\u52a9\u624b\uff0c\u6570\u636e\u5e93\u8fde\u63a5\u7b49)\u65f6\uff0c\u4f7f\u7528 @Global() \u88c5\u9970\u5668\u5c06\u6a21\u5757\u8bbe\u4e3a global \u3002 import { Module , Global } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; @Global () @Module ({ controllers : [ CatsController ], providers : [ CatsService ], exports : [ CatsService ], }) export class CatsModule {} @Global() \u88c5\u9970\u5668\u4f7f\u6a21\u5757\u6210\u4e3a\u5168\u5c40\u4f5c\u7528\u57df\u3002 \u5168\u5c40\u6a21\u5757\u5e94\u8be5 \u53ea\u6ce8\u518c\u4e00\u6b21 \uff0c\u901a\u5e38\u7531\u6839\u6a21\u5757\u6216\u6838\u5fc3\u6a21\u5757\u6ce8\u518c\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c CatsService \u63d0\u4f9b\u5668\u5c06\u662f\u666e\u904d\u5b58\u5728\u7684\uff0c\u5e0c\u671b\u6ce8\u5165\u8be5\u670d\u52a1\u7684\u6a21\u5757\u5c06\u4e0d\u9700\u8981\u5728 imports \u6570\u7ec4\u4e2d\u5bfc\u5165 CatsModule \u3002 info Hint \u5168\u5c40\u5316\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u8bbe\u8ba1\u51b3\u7b56\u3002 \u5168\u5c40\u6a21\u5757\u53ef\u7528\u6765\u51cf\u5c11\u5fc5\u8981\u7684\u6837\u677f\u6587\u4ef6\u7684\u6570\u91cf\u3002 imports \u6570\u7ec4\u901a\u5e38\u662f\u8ba9\u6d88\u8d39\u8005\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757 API \u7684\u9996\u9009\u65b9\u5f0f\u3002","title":"\u5168\u5c40\u6a21\u5757"},{"location":"modules/#_7","text":"Nest \u6a21\u5757\u7cfb\u7edf\u5305\u542b\u4e00\u4e2a\u5f3a\u5927\u7684\u7279\u6027\uff0c\u79f0\u4e3a\u52a8\u6001\u6a21\u5757\u3002 \u8fd9\u4e2a\u7279\u6027\u4f7f\u60a8\u80fd\u591f\u8f7b\u677e\u5730\u521b\u5efa\u53ef\u5b9a\u5236\u7684\u6a21\u5757\uff0c\u8fd9\u4e9b\u6a21\u5757\u53ef\u4ee5\u52a8\u6001\u5730\u6ce8\u518c\u548c\u914d\u7f6e\u63d0\u4f9b\u5668\u3002 \u52a8\u6001\u6a21\u5757\u5728 \u8fd9\u91cc \u6709\u5e7f\u6cdb\u7684\u4ecb\u7ecd\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u6982\u8ff0\u4ee5\u5b8c\u6210\u5bf9\u6a21\u5757\u7684\u4ecb\u7ecd\u3002 \u4e0b\u9762\u662f DatabaseModule \u7684\u52a8\u6001\u6a21\u5757\u5b9a\u4e49\u793a\u4f8b: @ @filename () import { Module , DynamicModule } from '@nestjs/common' ; import { createDatabaseProviders } from './database.providers' ; import { Connection } from './connection.provider' ; @Module ({ providers : [ Connection ], }) export class DatabaseModule { static forRoot ( entities = [], options ? ) : DynamicModule { const providers = createDatabaseProviders ( options , entities ); return { module : DatabaseModule , providers : providers , exports : providers , }; } } @ @switch import { Module } from '@nestjs/common' ; import { createDatabaseProviders } from './database.providers' ; import { Connection } from './connection.provider' ; @Module ({ providers : [ Connection ], }) export class DatabaseModule { static forRoot ( entities = [], options ? ) { const providers = createDatabaseProviders ( options , entities ); return { module : DatabaseModule , providers : providers , exports : providers , }; } } info Hint forRoot() \u65b9\u6cd5\u53ef\u4ee5\u540c\u6b65\u6216\u5f02\u6b65\u5730\u8fd4\u56de\u4e00\u4e2a\u52a8\u6001\u6a21\u5757(\u4f8b\u5982\uff0c\u901a\u8fc7 Promise )\u3002 \u8be5\u6a21\u5757\u9ed8\u8ba4\u5b9a\u4e49\u4e86 Connection \u63d0\u4f9b\u7a0b\u5e8f(\u5728 @Module() \u88c5\u9970\u5668\u5143\u6570\u636e\u4e2d)\uff0c\u4f46\u53e6\u5916-\u53d6\u51b3\u4e8e\u4f20\u9012\u7ed9 forRoot() \u65b9\u6cd5\u7684 entities \u548c options \u5bf9\u8c61-\u516c\u5f00\u4e86\u4e00\u4e2a\u63d0\u4f9b\u7a0b\u5e8f\u96c6\u5408\uff0c\u4f8b\u5982\uff0c\u5b58\u50a8\u5e93\u3002 \u8bf7\u6ce8\u610f\uff0c\u52a8\u6001\u6a21\u5757 \u8fd4\u56de\u7684\u5c5e\u6027\u6269\u5c55 (\u800c\u4e0d\u662f\u8986\u76d6)\u5728 @Module() \u88c5\u9970\u5668\u4e2d\u5b9a\u4e49\u7684\u57fa\u672c\u6a21\u5757\u5143\u6570\u636e\u3002 \u8fd9\u5c31\u662f\u5982\u4f55\u4ece\u6a21\u5757\u4e2d\u5bfc\u51fa\u9759\u6001\u58f0\u660e\u7684 Connection \u63d0\u4f9b\u7a0b\u5e8f \u548c\u52a8\u6001\u751f\u6210\u7684\u5b58\u50a8\u5e93\u63d0\u4f9b\u7a0b\u5e8f \u7684\u3002 \u5982\u679c\u4f60\u60f3\u5728\u5168\u5c40\u4f5c\u7528\u57df\u4e2d\u6ce8\u518c\u4e00\u4e2a\u52a8\u6001\u6a21\u5757\uff0c\u5c06 global \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u3002 { global : true , module : DatabaseModule , providers : providers , exports : providers , } warning Warning \u5c31\u50cf\u524d\u9762\u63d0\u5230\u7684\uff0c\u5c06\u6240\u6709\u5185\u5bb9\u90fd\u8bbe\u7f6e\u4e3a\u5168\u5c40\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u8bbe\u8ba1\u51b3\u7b56\u3002 DatabaseModule \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5bfc\u5165\u548c\u914d\u7f6e: import { Module } from '@nestjs/common' ; import { DatabaseModule } from './database/database.module' ; import { User } from './users/entities/user.entity' ; @Module ({ imports : [ DatabaseModule . forRoot ([ User ])], }) export class AppModule {} \u5982\u679c\u4f60\u60f3\u91cd\u65b0\u5bfc\u51fa\u4e00\u4e2a\u52a8\u6001\u6a21\u5757\uff0c\u4f60\u53ef\u4ee5\u7701\u7565 exports \u6570\u7ec4\u4e2d\u7684 forRoot() \u65b9\u6cd5\u8c03\u7528: import { Module } from '@nestjs/common' ; import { DatabaseModule } from './database/database.module' ; import { User } from './users/entities/user.entity' ; @Module ({ imports : [ DatabaseModule . forRoot ([ User ])], exports : [ DatabaseModule ], }) export class AppModule {} \u52a8\u6001\u6a21\u5757 \u4e00\u7ae0\u66f4\u8be6\u7ec6\u5730\u4ecb\u7ecd\u4e86\u8fd9\u4e2a\u4e3b\u9898\uff0c\u5e76\u5305\u62ec\u4e86\u4e00\u4e2a \u5de5\u4f5c\u793a\u4f8b \u3002","title":"\u52a8\u6001\u6a21\u5757"},{"location":"pipes/","text":"\u7ba1\u9053 \u00b6 \u7ba1\u9053\u662f\u4e00\u4e2a\u5e26\u6709 @Injectable() \u88c5\u9970\u5668\u7684\u7c7b\u3002 \u7ba1\u9053\u5e94\u8be5\u5b9e\u73b0 PipeTransform \u63a5\u53e3\u3002 \u7ba1\u9053\u6709\u4e24\u79cd\u5178\u578b\u7684\u7528\u4f8b: transformation : \u5c06\u8f93\u5165\u6570\u636e\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u5f62\u5f0f(\u4f8b\u5982\uff0c\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570) validation : \u8ba1\u7b97\u8f93\u5165\u6570\u636e\uff0c\u5982\u679c\u6709\u6548\uff0c\u5219\u4e0d\u52a0\u66f4\u6539\u5730\u4f20\u9012;\u5426\u5219\uff0c\u5f53\u6570\u636e\u4e0d\u6b63\u786e\u65f6\u629b\u51fa\u5f02\u5e38 \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ba1\u9053\u90fd\u5bf9 \u63a7\u5236\u5668\u8def\u7531\u5904\u7406\u5668 \u5904\u7406\u7684 arguments \u8fdb\u884c\u64cd\u4f5c\u3002 Nest \u5728\u8c03\u7528\u65b9\u6cd5\u4e4b\u524d\u63d2\u5165\u4e00\u4e2a\u7ba1\u9053\uff0c\u8be5\u7ba1\u9053\u63a5\u6536\u7528\u4e8e\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002 \u4efb\u4f55\u8f6c\u6362\u6216\u9a8c\u8bc1\u64cd\u4f5c\u90fd\u5c06\u5728\u6b64\u65f6\u8fdb\u884c\uff0c\u4e4b\u540e\u5c06\u4f7f\u7528\u4efb\u4f55(\u53ef\u80fd\u7684)\u8f6c\u6362\u540e\u7684\u53c2\u6570\u8c03\u7528\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 Nest \u9644\u5e26\u4e86\u8bb8\u591a\u5185\u7f6e\u7ba1\u9053\uff0c\u60a8\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528\u3002 \u60a8\u8fd8\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u7ba1\u9053\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5185\u7f6e\u7ba1\u9053\uff0c\u5e76\u5c55\u793a\u5982\u4f55\u5c06\u5b83\u4eec\u7ed1\u5b9a\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u51e0\u4e2a\u5b9a\u5236\u7684\u7ba1\u9053\uff0c\u4ee5\u5c55\u793a\u5982\u4f55\u4ece\u5934\u6784\u5efa\u4e00\u4e2a\u7ba1\u9053\u3002 info Hint \u7ba1\u9053\u8fd0\u884c\u5728\u5f02\u5e38\u533a\u57df\u5185\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5f53 Pipe \u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u65f6\uff0c\u5b83\u662f\u7531\u5f02\u5e38\u5c42(\u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668\u548c\u5e94\u7528\u4e8e\u5f53\u524d\u4e0a\u4e0b\u6587\u7684\u4efb\u4f55 \u5f02\u5e38\u8fc7\u6ee4\u5668 \u5904\u7406\u7684\u3002 \u9274\u4e8e\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5e94\u8be5\u5f88\u6e05\u695a\uff0c\u5f53\u5728 Pipe \u4e2d\u629b\u51fa\u5f02\u5e38\u65f6\uff0c\u968f\u540e\u4e0d\u4f1a\u6267\u884c\u63a7\u5236\u5668\u65b9\u6cd5\u3002 \u8fd9\u4e3a\u60a8\u63d0\u4f9b\u4e86\u5728\u7cfb\u7edf\u8fb9\u754c\u9a8c\u8bc1\u6765\u81ea\u5916\u90e8\u6e90\u8fdb\u5165\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u7684\u6700\u4f73\u5b9e\u8df5\u6280\u672f\u3002 \u5185\u7f6e\u7684\u7ba1\u9053 \u00b6 Nest \u6709 8 \u4e2a\u73b0\u6210\u7684\u7ba1\u9053: ValidationPipe ParseIntPipe ParseFloatPipe ParseBoolPipe ParseArrayPipe ParseUUIDPipe ParseEnumPipe DefaultValuePipe info Hint \u5b83\u4eec\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 \u8ba9\u6211\u4eec\u5feb\u901f\u770b\u770b\u5982\u4f55\u4f7f\u7528 ParseIntPipe \u3002 \u8fd9\u662f\u4e00\u4e2a \u8f6c\u6362 \u7528\u4f8b\u7684\u4f8b\u5b50\uff0c\u7ba1\u9053\u786e\u4fdd\u4e00\u4e2a\u65b9\u6cd5\u5904\u7406\u53c2\u6570\u88ab\u8f6c\u6362\u4e3a JavaScript \u6574\u6570(\u6216\u5728\u8f6c\u6362\u5931\u8d25\u65f6\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38)\u3002 \u5728\u672c\u7ae0\u7684\u540e\u9762\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u4e00\u4e2a ParseIntPipe \u7684\u7b80\u5355\u81ea\u5b9a\u4e49\u5b9e\u73b0\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u6280\u672f\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u5185\u7f6e\u8f6c\u6362\u7ba1\u9053( ParseBoolPipe \uff0c ParseFloatPipe \uff0c ParseEnumPipe \uff0c ParseArrayPipe \u548c ParseUUIDPipe \uff0c\u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u79f0\u4e4b\u4e3a Parse* \u7ba1\u9053)\u3002 \u7ed1\u5b9a\u7ba1\u9053 \u00b6 \u8981\u4f7f\u7528\u7ba1\u9053\uff0c\u6211\u4eec\u9700\u8981\u5c06\u7ba1\u9053\u7c7b\u7684\u5b9e\u4f8b\u7ed1\u5b9a\u5230\u9002\u5f53\u7684\u4e0a\u4e0b\u6587\u3002 \u5728\u6211\u4eec\u7684 ParseIntPipe \u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u7ba1\u9053\u4e0e\u4e00\u4e2a\u7279\u5b9a\u7684\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u76f8\u5173\u8054\uff0c\u5e76\u786e\u4fdd\u5b83\u5728\u65b9\u6cd5\u88ab\u8c03\u7528\u4e4b\u524d\u8fd0\u884c\u3002 \u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u7ed3\u6784\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u5728\u65b9\u6cd5\u53c2\u6570\u7ea7\u522b\u7ed1\u5b9a\u7ba1\u9053: @Get ( ':id' ) async findOne ( @Param ( 'id' , ParseIntPipe ) id : number ) { return this . catsService . findOne ( id ); } \u8fd9\u5c06\u786e\u4fdd\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\u4e4b\u4e00\u4e3a\u771f:\u6211\u4eec\u5728 findOne() \u65b9\u6cd5\u4e2d\u63a5\u6536\u5230\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u5b57(\u6b63\u5982\u6211\u4eec\u5728\u8c03\u7528 this.catsService.findOne() \u65f6\u6240\u671f\u671b\u7684\u90a3\u6837)\uff0c\u6216\u8005\u5728\u8c03\u7528\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u4e4b\u524d\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u8def\u7531\u662f\u8fd9\u6837\u8c03\u7528\u7684: GET localhost:3000/abc Nest \u5c06\u629b\u51fa\u8fd9\u6837\u7684\u5f02\u5e38: { \"statusCode\" : 400 , \"message\" : \"Validation failed (numeric string is expected)\" , \"error\" : \"Bad Request\" } \u8be5\u5f02\u5e38\u5c06\u963b\u6b62 findOne() \u65b9\u6cd5\u4f53\u7684\u6267\u884c\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a\u7c7b( ParseIntPipe )\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5c06\u5b9e\u4f8b\u5316\u7684\u8d23\u4efb\u7559\u7ed9\u6846\u67b6\uff0c\u5e76\u542f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u4e0e\u7ba1\u9053\u548c\u5b88\u536b\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5c31\u5730\u5b9e\u4f8b\u3002 \u5982\u679c\u6211\u4eec\u60f3\u901a\u8fc7\u4f20\u9012\u9009\u9879\u81ea\u5b9a\u4e49\u5185\u7f6e\u7ba1\u9053\u7684\u884c\u4e3a\uff0c\u4f20\u9012\u4e00\u4e2a\u5c31\u5730\u5b9e\u4f8b\u662f\u5f88\u6709\u7528\u7684: @Get ( ':id' ) async findOne ( @Param ( 'id' , new ParseIntPipe ({ errorHttpStatusCode : HttpStatus.NOT_ACCEPTABLE })) id : number , ) { return this . catsService . findOne ( id ); } \u7ed1\u5b9a\u5176\u4ed6\u8f6c\u6362\u7ba1\u9053(\u6240\u6709 Parse* \u7ba1\u9053)\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u3002 \u8fd9\u4e9b\u7ba1\u9053\u90fd\u5728\u9a8c\u8bc1\u8def\u7531\u53c2\u6570\u3001\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u503c\u7684\u4e0a\u4e0b\u6587\u4e2d\u5de5\u4f5c\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570: @Get () async findOne ( @Query ( 'id' , ParseIntPipe ) id : number ) { return this . catsService . findOne ( id ); } \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 ParseUUIDPipe \u6765\u89e3\u6790\u5b57\u7b26\u4e32\u53c2\u6570\u5e76\u9a8c\u8bc1\u5b83\u662f\u5426\u4e3a UUID \u7684\u793a\u4f8b\u3002 @ @filename () @Get ( ':uuid' ) async findOne ( @Param ( 'uuid' , new ParseUUIDPipe ()) uuid : string ) { return this . catsService . findOne ( uuid ); } @ @switch @Get ( ':uuid' ) @Bind ( Param ( 'uuid' , new ParseUUIDPipe ())) async findOne ( uuid ) { return this . catsService . findOne ( uuid ); } info Hint \u5f53\u4f7f\u7528 ParseUUIDPipe() \u65f6\uff0c\u4f60\u6b63\u5728\u89e3\u6790\u7248\u672c 3\u30014 \u6216 5 \u4e2d\u7684 UUID\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u7279\u5b9a\u7684 UUID \u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u5728\u7ba1\u9053\u9009\u9879\u4e2d\u4f20\u9012\u4e00\u4e2a\u7248\u672c\u3002 \u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u7ed1\u5b9a\u5404\u79cd Parse* \u5185\u7f6e\u7ba1\u9053\u5bb6\u65cf\u7684\u4f8b\u5b50\u3002 \u7ed1\u5b9a\u9a8c\u8bc1\u7ba1\u9053\u6709\u70b9\u4e0d\u540c;\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u5bf9\u6b64\u8fdb\u884c\u8ba8\u8bba\u3002 info Hint \u53e6\u5916\uff0c\u8bf7\u53c2\u9605 \u9a8c\u8bc1\u6280\u672f \u4e86\u89e3\u66f4\u591a\u9a8c\u8bc1\u7ba1\u9053\u7684\u4f8b\u5b50\u3002 \u81ea\u5b9a\u4e49\u7684\u7ba1\u9053 \u00b6 \u5982\u524d\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u7ba1\u9053\u3002 \u867d\u7136 Nest \u63d0\u4f9b\u4e86\u5065\u58ee\u7684\u5185\u7f6e ParseIntPipe \u548c ValidationPipe \uff0c\u4f46\u8ba9\u6211\u4eec\u4ece\u5934\u6784\u5efa\u5b83\u4eec\u7684\u7b80\u5355\u81ea\u5b9a\u4e49\u7248\u672c\uff0c\u770b\u770b\u81ea\u5b9a\u4e49\u7ba1\u9053\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002 \u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684 ValidationPipe \u5f00\u59cb\u3002 \u6700\u521d\uff0c\u6211\u4eec\u5c06\u8ba9\u5b83\u7b80\u5355\u5730\u63a5\u53d7\u4e00\u4e2a\u8f93\u5165\u503c\u5e76\u7acb\u5373\u8fd4\u56de\u76f8\u540c\u7684\u503c\uff0c\u5c31\u50cf\u4e00\u4e2a\u6052\u7b49\u51fd\u6570\u4e00\u6837\u3002 @ @filename ( validation . pipe ) import { PipeTransform , Injectable , ArgumentMetadata } from '@nestjs/common' ; @Injectable () export class ValidationPipe implements PipeTransform { transform ( value : any , metadata : ArgumentMetadata ) { return value ; } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class ValidationPipe { transform ( value , metadata ) { return value ; } } info Hint PipeTransform<T, R> \u662f\u4e00\u4e2a\u901a\u7528\u63a5\u53e3\uff0c\u5fc5\u987b\u7531\u4efb\u4f55\u7ba1\u9053\u5b9e\u73b0\u3002 \u6cdb\u578b\u63a5\u53e3\u4f7f\u7528 T \u8868\u793a\u8f93\u5165 value \u7684\u7c7b\u578b\uff0c\u4f7f\u7528 R \u8868\u793a transform() \u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\u3002 \u6bcf\u4e2a\u7ba1\u9053\u5fc5\u987b\u5b9e\u73b0 transform() \u65b9\u6cd5\u6765\u5b9e\u73b0 PipeTransform \u63a5\u53e3\u5951\u7ea6\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570: value metadata value \u53c2\u6570\u662f\u5f53\u524d\u5904\u7406\u7684\u65b9\u6cd5\u53c2\u6570(\u5728\u5b83\u88ab\u8def\u7531\u5904\u7406\u65b9\u6cd5\u63a5\u6536\u4e4b\u524d)\uff0c metadata \u662f\u5f53\u524d\u5904\u7406\u7684\u65b9\u6cd5\u53c2\u6570\u7684\u5143\u6570\u636e\u3002 \u5143\u6570\u636e\u5bf9\u8c61\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027: export interface ArgumentMetadata { type : 'body' | 'query' | 'param' | 'custom' ; metatype? : Type < unknown > ; data? : string ; } \u8fd9\u4e9b\u5c5e\u6027\u63cf\u8ff0\u5f53\u524d\u5904\u7406\u7684\u53c2\u6570\u3002 type Indicates whether the argument is a body @Body() , query @Query() , param @Param() , or a custom parameter (read more here ). metatype Provides the metatype of the argument, for example, String . Note: the value is undefined if you either omit a type declaration in the route handler method signature, or use vanilla JavaScript. data The string passed to the decorator, for example @Body('string') . It's undefined if you leave the decorator parenthesis empty. warning Warning TypeScript \u63a5\u53e3\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u6d88\u5931\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u65b9\u6cd5\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a\u63a5\u53e3\u800c\u4e0d\u662f\u7c7b\uff0c\u5219\u201c\u5143\u7c7b\u578b\u201d\u503c\u5c06\u4e3a\u201c\u5bf9\u8c61\u201d\u3002 \u57fa\u4e8e\u6a21\u5f0f\u7684\u9a8c\u8bc1 \u00b6 \u8ba9\u6211\u4eec\u8ba9\u9a8c\u8bc1\u7ba1\u9053\u66f4\u6709\u7528\u4e00\u4e9b\u3002 \u4ed4\u7ec6\u770b\u770b CatsController \u7684 create() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728\u5c1d\u8bd5\u8fd0\u884c\u6211\u4eec\u7684 service \u65b9\u6cd5\u4e4b\u524d\u786e\u4fdd post \u4e3b\u4f53\u5bf9\u8c61\u662f\u6709\u6548\u7684\u3002 @ @filename () @Post () async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () async create ( @Body () createCatDto ) { this . catsService . create ( createCatDto ); } \u8ba9\u6211\u4eec\u5173\u6ce8\u4e3b\u4f53\u53c2\u6570\u201ccreateCatDto\u201d\u3002 \u5b83\u7684\u7c7b\u578b\u662f CreateCatDto : @ @filename ( create - cat . dto ) export class CreateCatDto { name : string ; age : number ; breed : string ; } \u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5bf9 create \u65b9\u6cd5\u7684\u4efb\u4f55\u4f20\u5165\u8bf7\u6c42\u90fd\u5305\u542b\u4e00\u4e2a\u6709\u6548\u7684\u4e3b\u4f53\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u9a8c\u8bc1 createCatDto \u5bf9\u8c61\u7684\u4e09\u4e2a\u6210\u5458\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u4e2d\u8fd9\u6837\u505a\uff0c\u4f46\u8fd9\u6837\u505a\u5e76\u4e0d\u7406\u60f3\uff0c\u56e0\u4e3a\u5b83\u4f1a\u6253\u7834\u201c\u5355\u4e00\u8d23\u4efb\u89c4\u5219\u201d(SRP)\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u53ef\u80fd\u662f\u521b\u5efa\u4e00\u4e2a \u9a8c\u8bc1\u5668\u7c7b \uff0c\u5e76\u5c06\u4efb\u52a1\u59d4\u6258\u7ed9\u5b83\u3002 \u8fd9\u6837\u505a\u7684\u7f3a\u70b9\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u8bb0\u4f4f\u5728\u6bcf\u4e2a\u65b9\u6cd5\u5f00\u59cb\u65f6\u8c03\u7528\u8fd9\u4e2a\u9a8c\u8bc1\u5668\u3002 \u521b\u5efa\u9a8c\u8bc1\u4e2d\u95f4\u4ef6\u600e\u4e48\u6837? \u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u4e0d\u53ef\u80fd\u521b\u5efa\u80fd\u591f\u8de8\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u4e0a\u4e0b\u6587\u4f7f\u7528\u7684 \u901a\u7528\u4e2d\u95f4\u4ef6 \u3002 \u8fd9\u662f\u56e0\u4e3a\u4e2d\u95f4\u4ef6\u4e0d\u77e5\u9053 \u6267\u884c\u4e0a\u4e0b\u6587 \uff0c\u5305\u62ec\u5c06\u88ab\u8c03\u7528\u7684\u5904\u7406\u7a0b\u5e8f\u548c\u5b83\u7684\u4efb\u4f55\u53c2\u6570\u3002 \u5f53\u7136\uff0c\u8fd9\u6b63\u662f\u7ba1\u9053\u8bbe\u8ba1\u7684\u7528\u4f8b\u3002 \u8ba9\u6211\u4eec\u7ee7\u7eed\u6539\u8fdb\u6211\u4eec\u7684\u9a8c\u8bc1\u7ba1\u9053\u3002 \u5bf9\u8c61\u6a21\u5f0f\u9a8c\u8bc1 \u00b6 \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ee5\u5e72\u51c0\u7684 DRY \u65b9\u5f0f\u8fdb\u884c\u5bf9\u8c61\u9a8c\u8bc1\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 \u57fa\u4e8e\u6a21\u5f0f \u7684\u9a8c\u8bc1\u3002 \u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u8fd9\u79cd\u65b9\u6cd5\u3002 Joi \u5e93\u5141\u8bb8\u60a8\u901a\u8fc7\u4e00\u4e2a\u53ef\u8bfb\u7684 API \u4ee5\u76f4\u63a5\u7684\u65b9\u5f0f\u521b\u5efa\u6a21\u5f0f\u3002 \u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u4f7f\u7528\u57fa\u4e8e joi \u7684\u6a21\u5f0f\u7684\u9a8c\u8bc1\u7ba1\u9053\u3002 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm install --save joi $ npm install --save-dev @types/joi \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6a21\u5f0f\u4f5c\u4e3a\u201c\u6784\u9020\u51fd\u6570\u201d\u53c2\u6570\u3002 \u7136\u540e\u5e94\u7528 schema.validate() \u65b9\u6cd5\uff0c\u5b83\u6839\u636e\u6240\u63d0\u4f9b\u7684\u6a21\u5f0f\u9a8c\u8bc1\u4f20\u5165\u7684\u53c2\u6570\u3002 \u5982\u524d\u6240\u8ff0\uff0c \u9a8c\u8bc1\u7ba1\u9053 \u8981\u4e48\u539f\u6837\u8fd4\u56de\u503c\uff0c\u8981\u4e48\u629b\u51fa\u5f02\u5e38\u3002 \u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u60a8\u5c06\u770b\u5230\u6211\u4eec\u5982\u4f55\u4f7f\u7528 @UsePipes() \u88c5\u9970\u5668\u4e3a\u7ed9\u5b9a\u7684\u63a7\u5236\u5668\u65b9\u6cd5\u63d0\u4f9b\u9002\u5f53\u7684\u6a21\u5f0f\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u4f7f\u6211\u4eec\u7684\u9a8c\u8bc1\u7ba1\u9053\u8de8\u4e0a\u4e0b\u6587\u91cd\u7528\uff0c\u5c31\u50cf\u6211\u4eec\u5f00\u59cb\u505a\u7684\u90a3\u6837\u3002 @ @filename () import { PipeTransform , Injectable , ArgumentMetadata , BadRequestException } from '@nestjs/common' ; import { ObjectSchema } from 'joi' ; @Injectable () export class JoiValidationPipe implements PipeTransform { constructor ( private schema : ObjectSchema ) {} transform ( value : any , metadata : ArgumentMetadata ) { const { error } = this . schema . validate ( value ); if ( error ) { throw new BadRequestException ( 'Validation failed' ); } return value ; } } @ @switch import { Injectable , BadRequestException } from '@nestjs/common' ; @Injectable () export class JoiValidationPipe { constructor ( schema ) { this . schema = schema ; } transform ( value , metadata ) { const { error } = this . schema . validate ( value ); if ( error ) { throw new BadRequestException ( 'Validation failed' ); } return value ; } } \u7ed1\u5b9a\u9a8c\u8bc1\u7ba1\u9053 \u00b6 \u5728\u524d\u9762\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5982\u4f55\u7ed1\u5b9a\u8f6c\u6362\u7ba1\u9053(\u5982 ParseIntPipe \u548c Parse* \u7ba1\u9053\u7684\u5176\u4f59\u90e8\u5206)\u3002 \u7ed1\u5b9a\u9a8c\u8bc1\u7ba1\u9053\u4e5f\u975e\u5e38\u7b80\u5355\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u65b9\u6cd5\u8c03\u7528\u7ea7\u522b\u7ed1\u5b9a\u7ba1\u9053\u3002 \u5728\u6211\u4eec\u5f53\u524d\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u505a\u4ee5\u4e0b\u4e8b\u60c5\u6765\u4f7f\u7528 JoiValidationPipe : \u521b\u5efa\u4e00\u4e2a\u201cJoiValidationPipe\u201d\u7684\u5b9e\u4f8b \u5728\u7ba1\u9053\u7684\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u4f20\u9012\u7279\u5b9a\u4e8e\u4e0a\u4e0b\u6587\u7684 Joi \u6a21\u5f0f \u5c06\u7ba1\u9053\u7ed1\u5b9a\u5230\u65b9\u6cd5 \u6211\u4eec\u4f7f\u7528\u201c@UsePipes()\u201d\u88c5\u9970\u5668\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @Post () @UsePipes ( new JoiValidationPipe ( createCatSchema )) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @Bind ( Body ()) @UsePipes ( new JoiValidationPipe ( createCatSchema )) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } info Hint @UsePipes() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u7c7b\u9a8c\u8bc1\u5668 \u00b6 warning Warning \u672c\u8282\u4e2d\u63d0\u5230\u7684\u6280\u672f\u9700\u8981 TypeScript\uff0c\u5982\u679c\u4f60\u7684\u5e94\u7528\u662f\u7528 JavaScript \u7f16\u5199\u7684\uff0c\u90a3\u4e48\u5b83\u662f\u4e0d\u53ef\u7528\u7684\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u9a8c\u8bc1\u6280\u672f\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u3002 Nest \u4e0e class-validator \u5e93\u4e00\u8d77\u5de5\u4f5c\u5f97\u5f88\u597d\u3002 \u8fd9\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u5e93\u5141\u8bb8\u60a8\u4f7f\u7528\u57fa\u4e8e\u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u3002 \u57fa\u4e8e\u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u975e\u5e38\u5f3a\u5927\uff0c\u7279\u522b\u662f\u5f53\u4e0e Nest \u7684 Pipe \u529f\u80fd\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u88ab\u5904\u7406\u5c5e\u6027\u7684\u201c\u5143\u7c7b\u578b\u201d\u3002 \u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i --save class-validator class-transformer \u4e00\u65e6\u5b89\u88c5\u4e86\u8fd9\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u88c5\u9970\u5668\u5230 CreateCatDto \u7c7b\u3002 \u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e86\u8fd9\u79cd\u6280\u672f\u7684\u4e00\u4e2a\u663e\u8457\u4f18\u52bf:\u201cCreateCatDto\u201d\u7c7b\u4ecd\u7136\u662f Post \u4e3b\u4f53\u5bf9\u8c61\u7684\u552f\u4e00\u771f\u5b9e\u6e90(\u800c\u4e0d\u662f\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u9a8c\u8bc1\u7c7b)\u3002 @ @filename ( create - cat . dto ) import { IsString , IsInt } from 'class-validator' ; export class CreateCatDto { @IsString () name : string ; @IsInt () age : number ; @IsString () breed : string ; } info Hint \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u7c7b\u9a8c\u8bc1\u5668\u88c5\u9970\u5668\u7684\u4fe1\u606f \u6b64\u5904 . \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e9b\u6ce8\u91ca\u7684 ValidationPipe \u7c7b\u3002 @ @filename ( validation . pipe ) import { PipeTransform , Injectable , ArgumentMetadata , BadRequestException } from '@nestjs/common' ; import { validate } from 'class-validator' ; import { plainToClass } from 'class-transformer' ; @Injectable () export class ValidationPipe implements PipeTransform < any > { async transform ( value : any , { metatype } : ArgumentMetadata ) { if ( ! metatype || ! this . toValidate ( metatype )) { return value ; } const object = plainToClass ( metatype , value ); const errors = await validate ( object ); if ( errors . length > 0 ) { throw new BadRequestException ( 'Validation failed' ); } return value ; } private toValidate ( metatype : Function ) : boolean { const types : Function [] = [ String , Boolean , Number , Array , Object ]; return ! types . includes ( metatype ); } } warning Notice \u5728\u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 class-transformer \u5e93\u3002 \u5b83\u4e0e \u7c7b\u9a8c\u8bc1\u5668 \u5e93\u662f\u7531\u540c\u4e00\u4f5c\u8005\u7f16\u5199\u7684\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u53ef\u4ee5\u5f88\u597d\u5730\u7ed3\u5408\u5728\u4e00\u8d77\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 \u9996\u5148\uff0c\u8bf7\u6ce8\u610f transform() \u65b9\u6cd5\u88ab\u6807\u8bb0\u4e3a async \u3002 \u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a Nest \u540c\u65f6\u652f\u6301\u540c\u6b65\u548c \u5f02\u6b65 \u7ba1\u9053\u3002 \u6211\u4eec\u4f7f\u8fd9\u4e2a\u65b9\u6cd5\u4e3a async \uff0c\u56e0\u4e3a\u4e00\u4e9b\u7c7b\u9a8c\u8bc1\u5668\u9a8c\u8bc1 \u53ef\u4ee5\u662f async (\u5229\u7528 Promises)\u3002 \u63a5\u4e0b\u6765\u6ce8\u610f\uff0c\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u89e3\u6784\u6765\u63d0\u53d6\u5143\u7c7b\u578b\u5b57\u6bb5(\u4ec5\u4ece ArgumentMetadata \u4e2d\u63d0\u53d6\u8fd9\u4e2a\u6210\u5458)\u5230\u6211\u4eec\u7684 metatype \u53c2\u6570\u4e2d\u3002 \u8fd9\u53ea\u662f\u83b7\u53d6\u5b8c\u6574\u7684 ArgumentMetadata \u7684\u7b80\u5199\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u989d\u5916\u7684\u8bed\u53e5\u6765\u5206\u914d\u5143\u7c7b\u578b\u53d8\u91cf\u3002 \u63a5\u4e0b\u6765\uff0c\u8bf7\u6ce8\u610f\u52a9\u624b\u51fd\u6570 toValidate() \u3002 \u5f53\u5f53\u524d\u5904\u7406\u7684\u53c2\u6570\u662f\u672c\u5730 JavaScript \u7c7b\u578b\u65f6\uff0c\u5b83\u8d1f\u8d23\u7ed5\u8fc7\u9a8c\u8bc1\u6b65\u9aa4(\u8fd9\u4e9b\u53c2\u6570\u4e0d\u80fd\u9644\u52a0\u9a8c\u8bc1\u4fee\u9970\u7b26\uff0c\u6240\u4ee5\u6ca1\u6709\u7406\u7531\u901a\u8fc7\u9a8c\u8bc1\u6b65\u9aa4\u8fd0\u884c\u5b83\u4eec)\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528\u7c7b\u8f6c\u6362\u5668\u51fd\u6570 plainToClass() \u5c06\u666e\u901a JavaScript \u53c2\u6570\u5bf9\u8c61\u8f6c\u6362\u4e3a\u7c7b\u578b\u5316\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5e94\u7528\u9a8c\u8bc1\u3002 \u6211\u4eec\u5fc5\u987b\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff0c\u4f20\u5165\u7684 post \u4e3b\u4f53\u5bf9\u8c61\uff0c\u5f53\u4ece\u7f51\u7edc\u8bf7\u6c42\u53cd\u5e8f\u5217\u5316\u65f6\uff0c \u6ca1\u6709\u4efb\u4f55\u7c7b\u578b\u4fe1\u606f (\u8fd9\u662f\u5e95\u5c42\u5e73\u53f0\uff0c\u5982 Express \u7684\u5de5\u4f5c\u65b9\u5f0f)\u3002 \u7c7b\u9a8c\u8bc1\u5668\u9700\u8981\u4f7f\u7528\u524d\u9762\u4e3a DTO \u5b9a\u4e49\u7684\u9a8c\u8bc1\u4fee\u9970\u5668\uff0c\u56e0\u6b64\u9700\u8981\u6267\u884c\u6b64\u8f6c\u6362\uff0c\u5c06\u4f20\u5165\u7684\u4e3b\u4f53\u89c6\u4e3a\u9002\u5f53\u4fee\u9970\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u666e\u901a\u7684\u5bf9\u8c61\u3002 \u6700\u540e\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a \u9a8c\u8bc1\u7ba1\u9053 \uff0c\u6240\u4ee5\u5b83\u8981\u4e48\u4e0d\u52a0\u4fee\u6539\u5730\u8fd4\u56de\u503c\uff0c\u8981\u4e48\u629b\u51fa\u5f02\u5e38\u3002 \u6700\u540e\u4e00\u6b65\u662f\u7ed1\u5b9a ValidationPipe \u3002 \u7ba1\u9053\u53ef\u4ee5\u662f\u53c2\u6570\u4f5c\u7528\u57df\u3001\u65b9\u6cd5\u4f5c\u7528\u57df\u3001\u63a7\u5236\u5668\u4f5c\u7528\u57df\u6216\u5168\u5c40\u4f5c\u7528\u57df\u3002 \u5728\u524d\u9762\u7684\u57fa\u4e8e joi \u7684\u9a8c\u8bc1\u7ba1\u9053\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4e86\u4e00\u4e2a\u5728\u65b9\u6cd5\u7ea7\u522b\u7ed1\u5b9a\u7ba1\u9053\u7684\u793a\u4f8b\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u628a\u7ba1\u9053\u5b9e\u4f8b\u7ed1\u5b9a\u5230\u8def\u7531\u5904\u7406\u5668\u7684 @Body() \u88c5\u9970\u5668\u4e0a\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u7ba1\u9053\u5c31\u4f1a\u88ab\u8c03\u7528\u6765\u9a8c\u8bc1\u53d1\u9001\u4e3b\u4f53\u3002 @ @filename ( cats . controller ) @Post () async create ( @Body ( new ValidationPipe ()) createCatDto : CreateCatDto , ) { this . catsService . create ( createCatDto ); } \u5f53\u9a8c\u8bc1\u903b\u8f91\u53ea\u6d89\u53ca\u4e00\u4e2a\u6307\u5b9a\u53c2\u6570\u65f6\uff0c\u53c2\u6570\u4f5c\u7528\u57df\u7684\u7ba1\u9053\u5f88\u6709\u7528\u3002 \u5168\u7403\u8303\u56f4\u7684\u7ba1\u9053 \u00b6 \u7531\u4e8e\u201cValidationPipe\u201d\u88ab\u521b\u5efa\u5f97\u5c3d\u53ef\u80fd\u901a\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5b83\u8bbe\u7f6e\u4e3a\u4e00\u4e2a \u5168\u5c40\u4f5c\u7528\u57df\u7684 \u7ba1\u9053\u6765\u5b9e\u73b0\u5b83\u7684\u5b8c\u6574\u5b9e\u7528\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u5e94\u7528\u4e8e\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 @ @filename ( main ) async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . useGlobalPipes ( new ValidationPipe ()); await app . listen ( 3000 ); } bootstrap (); warning Notice \u5728 hybrid apps \u7684\u60c5\u51b5\u4e0b\uff0c useGlobalPipes() \u65b9\u6cd5\u4e0d\u4e3a\u7f51\u5173\u548c\u5fae\u670d\u52a1\u8bbe\u7f6e\u7ba1\u9053\u3002 \u5bf9\u4e8e\u201c\u6807\u51c6\u201d(\u975e\u6df7\u5408)\u5fae\u670d\u52a1\u5e94\u7528\uff0c useGlobalPipes() \u4f1a\u5168\u5c40\u5b89\u88c5\u7ba1\u9053\u3002 \u5168\u5c40\u7ba1\u9053\u7528\u4e8e\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5305\u62ec\u6bcf\u4e2a\u63a7\u5236\u5668\u548c\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u6ce8\u610f\uff0c\u5728\u4f9d\u8d56\u9879\u6ce8\u5165\u65b9\u9762\uff0c\u4ece\u4efb\u4f55\u6a21\u5757\u5916\u90e8\u6ce8\u518c\u7684\u5168\u5c40\u7ba1\u9053(\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528 useGlobalPipes() )\u4e0d\u80fd\u6ce8\u5165\u4f9d\u8d56\u9879\uff0c\u56e0\u4e3a\u7ed1\u5b9a\u5df2\u7ecf\u5728\u4efb\u4f55\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u5b8c\u6210\u4e86\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5 \u76f4\u63a5\u4ece\u4efb\u4f55\u6a21\u5757 \u5efa\u7acb\u4e00\u4e2a\u5168\u5c40\u7ba1\u9053\uff0c\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { APP_PIPE } from '@nestjs/core' ; @Module ({ providers : [ { provide : APP_PIPE , useClass : ValidationPipe , }, ], }) export class AppModule {} info Hint \u5f53\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u7ba1\u9053\u6267\u884c\u4f9d\u8d56\u6ce8\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u4f7f\u7528\u8fd9\u79cd\u7ed3\u6784\u7684\u6a21\u5757\u662f\u4ec0\u4e48\uff0c\u7ba1\u9053\u5b9e\u9645\u4e0a\u90fd\u662f\u5168\u5c40\u7684\u3002 \u8fd9\u5e94\u8be5\u5728\u54ea\u91cc\u505a?\u9009\u62e9\u7ba1\u9053(\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 ValidationPipe )\u5b9a\u4e49\u7684\u6a21\u5757\u3002 \u6b64\u5916\uff0c useClass \u5e76\u4e0d\u662f\u5904\u7406\u81ea\u5b9a\u4e49\u63d0\u4f9b\u7a0b\u5e8f\u6ce8\u518c\u7684\u552f\u4e00\u65b9\u6cd5\u3002 \u4e86\u89e3\u66f4\u591a \u8fd9\u91cc \u3002 \u5185\u7f6e\u7684 ValidationPipe \u00b6 \u63d0\u9192\u4e00\u4e0b\uff0c\u4f60\u4e0d\u9700\u8981\u81ea\u5df1\u6784\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u9a8c\u8bc1\u7ba1\u9053\uff0c\u56e0\u4e3a ValidationPipe \u662f\u7531 Nest \u5f00\u7bb1\u5373\u7528\u63d0\u4f9b\u7684\u3002 \u5185\u7f6e\u7684 ValidationPipe \u6bd4\u6211\u4eec\u5728\u672c\u7ae0\u4e2d\u6784\u5efa\u7684\u793a\u4f8b\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u9009\u9879\uff0c\u5728\u672c\u7ae0\u4e2d\uff0c\u4e3a\u4e86\u6f14\u793a\u81ea\u5b9a\u4e49\u6784\u5efa\u7ba1\u9053\u7684\u673a\u5236\uff0c\u6211\u4eec\u4e00\u76f4\u4fdd\u6301\u57fa\u672c\u7684\u793a\u4f8b\u3002 \u60a8\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u5b8c\u6574\u7684\u7ec6\u8282\uff0c\u4ee5\u53ca\u5927\u91cf\u7684\u793a\u4f8b\u3002 \u8f6c\u6362\u7528\u4f8b \u00b6 \u9a8c\u8bc1\u5e76\u4e0d\u662f\u81ea\u5b9a\u4e49\u7ba1\u9053\u7684\u552f\u4e00\u7528\u4f8b\u3002 \u5728\u672c\u7ae0\u7684\u5f00\u59cb\uff0c\u6211\u4eec\u63d0\u5230\u7ba1\u9053\u4e5f\u53ef\u4ee5 \u8f6c\u6362 \u8f93\u5165\u6570\u636e\u5230\u6240\u9700\u7684\u683c\u5f0f\u3002 \u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a transform \u51fd\u6570\u8fd4\u56de\u7684\u503c\u5b8c\u5168\u8986\u76d6\u4e86\u53c2\u6570\u4e4b\u524d\u7684\u503c\u3002 \u8fd9\u5728\u4ec0\u4e48\u65f6\u5019\u6709\u7528? \u8003\u8651\u5230\u6709\u65f6\u4ece\u5ba2\u6237\u7aef\u4f20\u9012\u7684\u6570\u636e\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u2014\u4f8b\u5982\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u2014\u7136\u540e\u624d\u80fd\u7531\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u6b63\u786e\u5904\u7406\u3002 \u6b64\u5916\uff0c\u4e00\u4e9b\u5fc5\u9700\u7684\u6570\u636e\u5b57\u6bb5\u53ef\u80fd\u4f1a\u4e22\u5931\uff0c\u6211\u4eec\u5e0c\u671b\u5e94\u7528\u9ed8\u8ba4\u503c\u3002 \u8f6c\u6362\u7ba1\u9053\u53ef\u4ee5\u901a\u8fc7\u5728\u5ba2\u6237\u7aef\u8bf7\u6c42\u548c\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u4e4b\u95f4\u63d2\u5165\u5904\u7406\u51fd\u6570\u6765\u6267\u884c\u8fd9\u4e9b\u529f\u80fd\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u201cParseIntPipe\u201d\uff0c\u5b83\u8d1f\u8d23\u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u6574\u6570\u503c\u3002 (\u5982\u524d\u6240\u8ff0\uff0cNest \u6709\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u5185\u7f6e ParseIntPipe ;\u6211\u4eec\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u8f6c\u6362\u7ba1\u9053\u793a\u4f8b)\u3002 @ @filename ( parse - int . pipe ) import { PipeTransform , Injectable , ArgumentMetadata , BadRequestException } from '@nestjs/common' ; @Injectable () export class ParseIntPipe implements PipeTransform < string , number > { transform ( value : string , metadata : ArgumentMetadata ) : number { const val = parseInt ( value , 10 ); if ( isNaN ( val )) { throw new BadRequestException ( 'Validation failed' ); } return val ; } } @ @switch import { Injectable , BadRequestException } from '@nestjs/common' ; @Injectable () export class ParseIntPipe { transform ( value , metadata ) { const val = parseInt ( value , 10 ); if ( isNaN ( val )) { throw new BadRequestException ( 'Validation failed' ); } return val ; } } \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u7ba1\u9053\u7ed1\u5b9a\u5230\u9009\u5b9a\u7684\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @Get ( ':id' ) async findOne ( @Param ( 'id' , new ParseIntPipe ()) id ) { return this . catsService . findOne ( id ); } @ @switch @Get ( ':id' ) @Bind ( Param ( 'id' , new ParseIntPipe ())) async findOne ( id ) { return this . catsService . findOne ( id ); } \u53e6\u4e00\u4e2a\u6709\u7528\u7684\u8f6c\u6362\u6848\u4f8b\u662f\u4f7f\u7528\u8bf7\u6c42\u4e2d\u63d0\u4f9b\u7684 id \u4ece\u6570\u636e\u5e93\u4e2d\u9009\u62e9\u4e00\u4e2a\u73b0\u6709\u7528\u6237\u5b9e\u4f53: @ @filename () @Get ( ':id' ) findOne ( @Param ( 'id' , UserByIdPipe ) userEntity : UserEntity ) { return userEntity ; } @ @switch @Get ( ':id' ) @Bind ( Param ( 'id' , UserByIdPipe )) findOne ( userEntity ) { return userEntity ; } \u6211\u4eec\u5c06\u8be5\u7ba1\u9053\u7684\u5b9e\u73b0\u7559\u7ed9\u8bfb\u8005\uff0c\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u50cf\u6240\u6709\u5176\u4ed6\u8f6c\u6362\u7ba1\u9053\u4e00\u6837\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u8f93\u5165\u503c(\u4e00\u4e2a\u201cid\u201d)\u5e76\u8fd4\u56de\u4e00\u4e2a\u8f93\u51fa\u503c(\u4e00\u4e2a\u201cUserEntity\u201d\u5bf9\u8c61)\u3002 \u8fd9\u53ef\u4ee5\u4f7f\u60a8\u7684\u4ee3\u7801\u66f4\u5177\u6709\u58f0\u660e\u6027\u548c DRY \uff0c\u65b9\u6cd5\u662f\u5c06\u6837\u677f\u4ee3\u7801\u4ece\u5904\u7406\u7a0b\u5e8f\u4e2d\u62bd\u8c61\u51fa\u6765\uff0c\u653e\u5230\u4e00\u4e2a\u516c\u5171\u7ba1\u9053\u4e2d\u3002 \u63d0\u4f9b\u9ed8\u8ba4\u503c \u00b6 Parse* \u7ba1\u9053\u5e0c\u671b\u5b9a\u4e49\u53c2\u6570\u7684\u503c\u3002 \u5b83\u4eec\u5728\u63a5\u6536\u5230\u201cnull\u201d\u6216\u201cundefined\u201d\u503c\u65f6\u629b\u51fa\u5f02\u5e38\u3002 \u4e3a\u4e86\u5141\u8bb8\u7aef\u70b9\u5904\u7406\u7f3a\u5931\u7684 querystring \u53c2\u6570\u503c\uff0c\u6211\u4eec\u5fc5\u987b\u5728 Parse* \u7ba1\u9053\u5bf9\u8fd9\u4e9b\u503c\u8fdb\u884c\u64cd\u4f5c\u4e4b\u524d\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u503c\u6765\u6ce8\u5165\u3002 DefaultValuePipe \u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002 \u53ea\u9700\u5728 @Query() \u88c5\u9970\u5668\u4e2d\u76f8\u5173\u7684 Parse* \u7ba1\u9053\u4e4b\u524d\u5b9e\u4f8b\u5316\u4e00\u4e2a DefaultValuePipe \uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @Get () async findAll ( @Query ( 'activeOnly' , new DefaultValuePipe ( false ), ParseBoolPipe ) activeOnly : boolean , @Query ( 'page' , new DefaultValuePipe ( 0 ), ParseIntPipe ) page : number , ) { return this . catsService . findAll ({ activeOnly , page }); }","title":"\u7ba1\u9053"},{"location":"pipes/#_1","text":"\u7ba1\u9053\u662f\u4e00\u4e2a\u5e26\u6709 @Injectable() \u88c5\u9970\u5668\u7684\u7c7b\u3002 \u7ba1\u9053\u5e94\u8be5\u5b9e\u73b0 PipeTransform \u63a5\u53e3\u3002 \u7ba1\u9053\u6709\u4e24\u79cd\u5178\u578b\u7684\u7528\u4f8b: transformation : \u5c06\u8f93\u5165\u6570\u636e\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u5f62\u5f0f(\u4f8b\u5982\uff0c\u4ece\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570) validation : \u8ba1\u7b97\u8f93\u5165\u6570\u636e\uff0c\u5982\u679c\u6709\u6548\uff0c\u5219\u4e0d\u52a0\u66f4\u6539\u5730\u4f20\u9012;\u5426\u5219\uff0c\u5f53\u6570\u636e\u4e0d\u6b63\u786e\u65f6\u629b\u51fa\u5f02\u5e38 \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ba1\u9053\u90fd\u5bf9 \u63a7\u5236\u5668\u8def\u7531\u5904\u7406\u5668 \u5904\u7406\u7684 arguments \u8fdb\u884c\u64cd\u4f5c\u3002 Nest \u5728\u8c03\u7528\u65b9\u6cd5\u4e4b\u524d\u63d2\u5165\u4e00\u4e2a\u7ba1\u9053\uff0c\u8be5\u7ba1\u9053\u63a5\u6536\u7528\u4e8e\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002 \u4efb\u4f55\u8f6c\u6362\u6216\u9a8c\u8bc1\u64cd\u4f5c\u90fd\u5c06\u5728\u6b64\u65f6\u8fdb\u884c\uff0c\u4e4b\u540e\u5c06\u4f7f\u7528\u4efb\u4f55(\u53ef\u80fd\u7684)\u8f6c\u6362\u540e\u7684\u53c2\u6570\u8c03\u7528\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 Nest \u9644\u5e26\u4e86\u8bb8\u591a\u5185\u7f6e\u7ba1\u9053\uff0c\u60a8\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528\u3002 \u60a8\u8fd8\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u7ba1\u9053\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5185\u7f6e\u7ba1\u9053\uff0c\u5e76\u5c55\u793a\u5982\u4f55\u5c06\u5b83\u4eec\u7ed1\u5b9a\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u51e0\u4e2a\u5b9a\u5236\u7684\u7ba1\u9053\uff0c\u4ee5\u5c55\u793a\u5982\u4f55\u4ece\u5934\u6784\u5efa\u4e00\u4e2a\u7ba1\u9053\u3002 info Hint \u7ba1\u9053\u8fd0\u884c\u5728\u5f02\u5e38\u533a\u57df\u5185\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5f53 Pipe \u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u65f6\uff0c\u5b83\u662f\u7531\u5f02\u5e38\u5c42(\u5168\u5c40\u5f02\u5e38\u8fc7\u6ee4\u5668\u548c\u5e94\u7528\u4e8e\u5f53\u524d\u4e0a\u4e0b\u6587\u7684\u4efb\u4f55 \u5f02\u5e38\u8fc7\u6ee4\u5668 \u5904\u7406\u7684\u3002 \u9274\u4e8e\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5e94\u8be5\u5f88\u6e05\u695a\uff0c\u5f53\u5728 Pipe \u4e2d\u629b\u51fa\u5f02\u5e38\u65f6\uff0c\u968f\u540e\u4e0d\u4f1a\u6267\u884c\u63a7\u5236\u5668\u65b9\u6cd5\u3002 \u8fd9\u4e3a\u60a8\u63d0\u4f9b\u4e86\u5728\u7cfb\u7edf\u8fb9\u754c\u9a8c\u8bc1\u6765\u81ea\u5916\u90e8\u6e90\u8fdb\u5165\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u7684\u6700\u4f73\u5b9e\u8df5\u6280\u672f\u3002","title":"\u7ba1\u9053"},{"location":"pipes/#_2","text":"Nest \u6709 8 \u4e2a\u73b0\u6210\u7684\u7ba1\u9053: ValidationPipe ParseIntPipe ParseFloatPipe ParseBoolPipe ParseArrayPipe ParseUUIDPipe ParseEnumPipe DefaultValuePipe info Hint \u5b83\u4eec\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 \u8ba9\u6211\u4eec\u5feb\u901f\u770b\u770b\u5982\u4f55\u4f7f\u7528 ParseIntPipe \u3002 \u8fd9\u662f\u4e00\u4e2a \u8f6c\u6362 \u7528\u4f8b\u7684\u4f8b\u5b50\uff0c\u7ba1\u9053\u786e\u4fdd\u4e00\u4e2a\u65b9\u6cd5\u5904\u7406\u53c2\u6570\u88ab\u8f6c\u6362\u4e3a JavaScript \u6574\u6570(\u6216\u5728\u8f6c\u6362\u5931\u8d25\u65f6\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38)\u3002 \u5728\u672c\u7ae0\u7684\u540e\u9762\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u4e00\u4e2a ParseIntPipe \u7684\u7b80\u5355\u81ea\u5b9a\u4e49\u5b9e\u73b0\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u6280\u672f\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u5185\u7f6e\u8f6c\u6362\u7ba1\u9053( ParseBoolPipe \uff0c ParseFloatPipe \uff0c ParseEnumPipe \uff0c ParseArrayPipe \u548c ParseUUIDPipe \uff0c\u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u79f0\u4e4b\u4e3a Parse* \u7ba1\u9053)\u3002","title":"\u5185\u7f6e\u7684\u7ba1\u9053"},{"location":"pipes/#_3","text":"\u8981\u4f7f\u7528\u7ba1\u9053\uff0c\u6211\u4eec\u9700\u8981\u5c06\u7ba1\u9053\u7c7b\u7684\u5b9e\u4f8b\u7ed1\u5b9a\u5230\u9002\u5f53\u7684\u4e0a\u4e0b\u6587\u3002 \u5728\u6211\u4eec\u7684 ParseIntPipe \u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u7ba1\u9053\u4e0e\u4e00\u4e2a\u7279\u5b9a\u7684\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u76f8\u5173\u8054\uff0c\u5e76\u786e\u4fdd\u5b83\u5728\u65b9\u6cd5\u88ab\u8c03\u7528\u4e4b\u524d\u8fd0\u884c\u3002 \u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u7ed3\u6784\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u5728\u65b9\u6cd5\u53c2\u6570\u7ea7\u522b\u7ed1\u5b9a\u7ba1\u9053: @Get ( ':id' ) async findOne ( @Param ( 'id' , ParseIntPipe ) id : number ) { return this . catsService . findOne ( id ); } \u8fd9\u5c06\u786e\u4fdd\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\u4e4b\u4e00\u4e3a\u771f:\u6211\u4eec\u5728 findOne() \u65b9\u6cd5\u4e2d\u63a5\u6536\u5230\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u5b57(\u6b63\u5982\u6211\u4eec\u5728\u8c03\u7528 this.catsService.findOne() \u65f6\u6240\u671f\u671b\u7684\u90a3\u6837)\uff0c\u6216\u8005\u5728\u8c03\u7528\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u4e4b\u524d\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u8def\u7531\u662f\u8fd9\u6837\u8c03\u7528\u7684: GET localhost:3000/abc Nest \u5c06\u629b\u51fa\u8fd9\u6837\u7684\u5f02\u5e38: { \"statusCode\" : 400 , \"message\" : \"Validation failed (numeric string is expected)\" , \"error\" : \"Bad Request\" } \u8be5\u5f02\u5e38\u5c06\u963b\u6b62 findOne() \u65b9\u6cd5\u4f53\u7684\u6267\u884c\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a\u7c7b( ParseIntPipe )\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5c06\u5b9e\u4f8b\u5316\u7684\u8d23\u4efb\u7559\u7ed9\u6846\u67b6\uff0c\u5e76\u542f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u4e0e\u7ba1\u9053\u548c\u5b88\u536b\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5c31\u5730\u5b9e\u4f8b\u3002 \u5982\u679c\u6211\u4eec\u60f3\u901a\u8fc7\u4f20\u9012\u9009\u9879\u81ea\u5b9a\u4e49\u5185\u7f6e\u7ba1\u9053\u7684\u884c\u4e3a\uff0c\u4f20\u9012\u4e00\u4e2a\u5c31\u5730\u5b9e\u4f8b\u662f\u5f88\u6709\u7528\u7684: @Get ( ':id' ) async findOne ( @Param ( 'id' , new ParseIntPipe ({ errorHttpStatusCode : HttpStatus.NOT_ACCEPTABLE })) id : number , ) { return this . catsService . findOne ( id ); } \u7ed1\u5b9a\u5176\u4ed6\u8f6c\u6362\u7ba1\u9053(\u6240\u6709 Parse* \u7ba1\u9053)\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u3002 \u8fd9\u4e9b\u7ba1\u9053\u90fd\u5728\u9a8c\u8bc1\u8def\u7531\u53c2\u6570\u3001\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u503c\u7684\u4e0a\u4e0b\u6587\u4e2d\u5de5\u4f5c\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528\u67e5\u8be2\u5b57\u7b26\u4e32\u53c2\u6570: @Get () async findOne ( @Query ( 'id' , ParseIntPipe ) id : number ) { return this . catsService . findOne ( id ); } \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 ParseUUIDPipe \u6765\u89e3\u6790\u5b57\u7b26\u4e32\u53c2\u6570\u5e76\u9a8c\u8bc1\u5b83\u662f\u5426\u4e3a UUID \u7684\u793a\u4f8b\u3002 @ @filename () @Get ( ':uuid' ) async findOne ( @Param ( 'uuid' , new ParseUUIDPipe ()) uuid : string ) { return this . catsService . findOne ( uuid ); } @ @switch @Get ( ':uuid' ) @Bind ( Param ( 'uuid' , new ParseUUIDPipe ())) async findOne ( uuid ) { return this . catsService . findOne ( uuid ); } info Hint \u5f53\u4f7f\u7528 ParseUUIDPipe() \u65f6\uff0c\u4f60\u6b63\u5728\u89e3\u6790\u7248\u672c 3\u30014 \u6216 5 \u4e2d\u7684 UUID\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u7279\u5b9a\u7684 UUID \u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u5728\u7ba1\u9053\u9009\u9879\u4e2d\u4f20\u9012\u4e00\u4e2a\u7248\u672c\u3002 \u4e0a\u9762\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u7ed1\u5b9a\u5404\u79cd Parse* \u5185\u7f6e\u7ba1\u9053\u5bb6\u65cf\u7684\u4f8b\u5b50\u3002 \u7ed1\u5b9a\u9a8c\u8bc1\u7ba1\u9053\u6709\u70b9\u4e0d\u540c;\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u5bf9\u6b64\u8fdb\u884c\u8ba8\u8bba\u3002 info Hint \u53e6\u5916\uff0c\u8bf7\u53c2\u9605 \u9a8c\u8bc1\u6280\u672f \u4e86\u89e3\u66f4\u591a\u9a8c\u8bc1\u7ba1\u9053\u7684\u4f8b\u5b50\u3002","title":"\u7ed1\u5b9a\u7ba1\u9053"},{"location":"pipes/#_4","text":"\u5982\u524d\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u6784\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u7ba1\u9053\u3002 \u867d\u7136 Nest \u63d0\u4f9b\u4e86\u5065\u58ee\u7684\u5185\u7f6e ParseIntPipe \u548c ValidationPipe \uff0c\u4f46\u8ba9\u6211\u4eec\u4ece\u5934\u6784\u5efa\u5b83\u4eec\u7684\u7b80\u5355\u81ea\u5b9a\u4e49\u7248\u672c\uff0c\u770b\u770b\u81ea\u5b9a\u4e49\u7ba1\u9053\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002 \u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684 ValidationPipe \u5f00\u59cb\u3002 \u6700\u521d\uff0c\u6211\u4eec\u5c06\u8ba9\u5b83\u7b80\u5355\u5730\u63a5\u53d7\u4e00\u4e2a\u8f93\u5165\u503c\u5e76\u7acb\u5373\u8fd4\u56de\u76f8\u540c\u7684\u503c\uff0c\u5c31\u50cf\u4e00\u4e2a\u6052\u7b49\u51fd\u6570\u4e00\u6837\u3002 @ @filename ( validation . pipe ) import { PipeTransform , Injectable , ArgumentMetadata } from '@nestjs/common' ; @Injectable () export class ValidationPipe implements PipeTransform { transform ( value : any , metadata : ArgumentMetadata ) { return value ; } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class ValidationPipe { transform ( value , metadata ) { return value ; } } info Hint PipeTransform<T, R> \u662f\u4e00\u4e2a\u901a\u7528\u63a5\u53e3\uff0c\u5fc5\u987b\u7531\u4efb\u4f55\u7ba1\u9053\u5b9e\u73b0\u3002 \u6cdb\u578b\u63a5\u53e3\u4f7f\u7528 T \u8868\u793a\u8f93\u5165 value \u7684\u7c7b\u578b\uff0c\u4f7f\u7528 R \u8868\u793a transform() \u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\u3002 \u6bcf\u4e2a\u7ba1\u9053\u5fc5\u987b\u5b9e\u73b0 transform() \u65b9\u6cd5\u6765\u5b9e\u73b0 PipeTransform \u63a5\u53e3\u5951\u7ea6\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570: value metadata value \u53c2\u6570\u662f\u5f53\u524d\u5904\u7406\u7684\u65b9\u6cd5\u53c2\u6570(\u5728\u5b83\u88ab\u8def\u7531\u5904\u7406\u65b9\u6cd5\u63a5\u6536\u4e4b\u524d)\uff0c metadata \u662f\u5f53\u524d\u5904\u7406\u7684\u65b9\u6cd5\u53c2\u6570\u7684\u5143\u6570\u636e\u3002 \u5143\u6570\u636e\u5bf9\u8c61\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027: export interface ArgumentMetadata { type : 'body' | 'query' | 'param' | 'custom' ; metatype? : Type < unknown > ; data? : string ; } \u8fd9\u4e9b\u5c5e\u6027\u63cf\u8ff0\u5f53\u524d\u5904\u7406\u7684\u53c2\u6570\u3002 type Indicates whether the argument is a body @Body() , query @Query() , param @Param() , or a custom parameter (read more here ). metatype Provides the metatype of the argument, for example, String . Note: the value is undefined if you either omit a type declaration in the route handler method signature, or use vanilla JavaScript. data The string passed to the decorator, for example @Body('string') . It's undefined if you leave the decorator parenthesis empty. warning Warning TypeScript \u63a5\u53e3\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u6d88\u5931\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u65b9\u6cd5\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a\u63a5\u53e3\u800c\u4e0d\u662f\u7c7b\uff0c\u5219\u201c\u5143\u7c7b\u578b\u201d\u503c\u5c06\u4e3a\u201c\u5bf9\u8c61\u201d\u3002","title":"\u81ea\u5b9a\u4e49\u7684\u7ba1\u9053"},{"location":"pipes/#_5","text":"\u8ba9\u6211\u4eec\u8ba9\u9a8c\u8bc1\u7ba1\u9053\u66f4\u6709\u7528\u4e00\u4e9b\u3002 \u4ed4\u7ec6\u770b\u770b CatsController \u7684 create() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728\u5c1d\u8bd5\u8fd0\u884c\u6211\u4eec\u7684 service \u65b9\u6cd5\u4e4b\u524d\u786e\u4fdd post \u4e3b\u4f53\u5bf9\u8c61\u662f\u6709\u6548\u7684\u3002 @ @filename () @Post () async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () async create ( @Body () createCatDto ) { this . catsService . create ( createCatDto ); } \u8ba9\u6211\u4eec\u5173\u6ce8\u4e3b\u4f53\u53c2\u6570\u201ccreateCatDto\u201d\u3002 \u5b83\u7684\u7c7b\u578b\u662f CreateCatDto : @ @filename ( create - cat . dto ) export class CreateCatDto { name : string ; age : number ; breed : string ; } \u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5bf9 create \u65b9\u6cd5\u7684\u4efb\u4f55\u4f20\u5165\u8bf7\u6c42\u90fd\u5305\u542b\u4e00\u4e2a\u6709\u6548\u7684\u4e3b\u4f53\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u9a8c\u8bc1 createCatDto \u5bf9\u8c61\u7684\u4e09\u4e2a\u6210\u5458\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u4e2d\u8fd9\u6837\u505a\uff0c\u4f46\u8fd9\u6837\u505a\u5e76\u4e0d\u7406\u60f3\uff0c\u56e0\u4e3a\u5b83\u4f1a\u6253\u7834\u201c\u5355\u4e00\u8d23\u4efb\u89c4\u5219\u201d(SRP)\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u53ef\u80fd\u662f\u521b\u5efa\u4e00\u4e2a \u9a8c\u8bc1\u5668\u7c7b \uff0c\u5e76\u5c06\u4efb\u52a1\u59d4\u6258\u7ed9\u5b83\u3002 \u8fd9\u6837\u505a\u7684\u7f3a\u70b9\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u8bb0\u4f4f\u5728\u6bcf\u4e2a\u65b9\u6cd5\u5f00\u59cb\u65f6\u8c03\u7528\u8fd9\u4e2a\u9a8c\u8bc1\u5668\u3002 \u521b\u5efa\u9a8c\u8bc1\u4e2d\u95f4\u4ef6\u600e\u4e48\u6837? \u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u4e0d\u53ef\u80fd\u521b\u5efa\u80fd\u591f\u8de8\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u4e0a\u4e0b\u6587\u4f7f\u7528\u7684 \u901a\u7528\u4e2d\u95f4\u4ef6 \u3002 \u8fd9\u662f\u56e0\u4e3a\u4e2d\u95f4\u4ef6\u4e0d\u77e5\u9053 \u6267\u884c\u4e0a\u4e0b\u6587 \uff0c\u5305\u62ec\u5c06\u88ab\u8c03\u7528\u7684\u5904\u7406\u7a0b\u5e8f\u548c\u5b83\u7684\u4efb\u4f55\u53c2\u6570\u3002 \u5f53\u7136\uff0c\u8fd9\u6b63\u662f\u7ba1\u9053\u8bbe\u8ba1\u7684\u7528\u4f8b\u3002 \u8ba9\u6211\u4eec\u7ee7\u7eed\u6539\u8fdb\u6211\u4eec\u7684\u9a8c\u8bc1\u7ba1\u9053\u3002","title":"\u57fa\u4e8e\u6a21\u5f0f\u7684\u9a8c\u8bc1"},{"location":"pipes/#_6","text":"\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ee5\u5e72\u51c0\u7684 DRY \u65b9\u5f0f\u8fdb\u884c\u5bf9\u8c61\u9a8c\u8bc1\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 \u57fa\u4e8e\u6a21\u5f0f \u7684\u9a8c\u8bc1\u3002 \u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u8fd9\u79cd\u65b9\u6cd5\u3002 Joi \u5e93\u5141\u8bb8\u60a8\u901a\u8fc7\u4e00\u4e2a\u53ef\u8bfb\u7684 API \u4ee5\u76f4\u63a5\u7684\u65b9\u5f0f\u521b\u5efa\u6a21\u5f0f\u3002 \u8ba9\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u4f7f\u7528\u57fa\u4e8e joi \u7684\u6a21\u5f0f\u7684\u9a8c\u8bc1\u7ba1\u9053\u3002 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm install --save joi $ npm install --save-dev @types/joi \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6a21\u5f0f\u4f5c\u4e3a\u201c\u6784\u9020\u51fd\u6570\u201d\u53c2\u6570\u3002 \u7136\u540e\u5e94\u7528 schema.validate() \u65b9\u6cd5\uff0c\u5b83\u6839\u636e\u6240\u63d0\u4f9b\u7684\u6a21\u5f0f\u9a8c\u8bc1\u4f20\u5165\u7684\u53c2\u6570\u3002 \u5982\u524d\u6240\u8ff0\uff0c \u9a8c\u8bc1\u7ba1\u9053 \u8981\u4e48\u539f\u6837\u8fd4\u56de\u503c\uff0c\u8981\u4e48\u629b\u51fa\u5f02\u5e38\u3002 \u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u60a8\u5c06\u770b\u5230\u6211\u4eec\u5982\u4f55\u4f7f\u7528 @UsePipes() \u88c5\u9970\u5668\u4e3a\u7ed9\u5b9a\u7684\u63a7\u5236\u5668\u65b9\u6cd5\u63d0\u4f9b\u9002\u5f53\u7684\u6a21\u5f0f\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u4f7f\u6211\u4eec\u7684\u9a8c\u8bc1\u7ba1\u9053\u8de8\u4e0a\u4e0b\u6587\u91cd\u7528\uff0c\u5c31\u50cf\u6211\u4eec\u5f00\u59cb\u505a\u7684\u90a3\u6837\u3002 @ @filename () import { PipeTransform , Injectable , ArgumentMetadata , BadRequestException } from '@nestjs/common' ; import { ObjectSchema } from 'joi' ; @Injectable () export class JoiValidationPipe implements PipeTransform { constructor ( private schema : ObjectSchema ) {} transform ( value : any , metadata : ArgumentMetadata ) { const { error } = this . schema . validate ( value ); if ( error ) { throw new BadRequestException ( 'Validation failed' ); } return value ; } } @ @switch import { Injectable , BadRequestException } from '@nestjs/common' ; @Injectable () export class JoiValidationPipe { constructor ( schema ) { this . schema = schema ; } transform ( value , metadata ) { const { error } = this . schema . validate ( value ); if ( error ) { throw new BadRequestException ( 'Validation failed' ); } return value ; } }","title":"\u5bf9\u8c61\u6a21\u5f0f\u9a8c\u8bc1"},{"location":"pipes/#_7","text":"\u5728\u524d\u9762\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5982\u4f55\u7ed1\u5b9a\u8f6c\u6362\u7ba1\u9053(\u5982 ParseIntPipe \u548c Parse* \u7ba1\u9053\u7684\u5176\u4f59\u90e8\u5206)\u3002 \u7ed1\u5b9a\u9a8c\u8bc1\u7ba1\u9053\u4e5f\u975e\u5e38\u7b80\u5355\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u65b9\u6cd5\u8c03\u7528\u7ea7\u522b\u7ed1\u5b9a\u7ba1\u9053\u3002 \u5728\u6211\u4eec\u5f53\u524d\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u505a\u4ee5\u4e0b\u4e8b\u60c5\u6765\u4f7f\u7528 JoiValidationPipe : \u521b\u5efa\u4e00\u4e2a\u201cJoiValidationPipe\u201d\u7684\u5b9e\u4f8b \u5728\u7ba1\u9053\u7684\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u4f20\u9012\u7279\u5b9a\u4e8e\u4e0a\u4e0b\u6587\u7684 Joi \u6a21\u5f0f \u5c06\u7ba1\u9053\u7ed1\u5b9a\u5230\u65b9\u6cd5 \u6211\u4eec\u4f7f\u7528\u201c@UsePipes()\u201d\u88c5\u9970\u5668\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @Post () @UsePipes ( new JoiValidationPipe ( createCatSchema )) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @Bind ( Body ()) @UsePipes ( new JoiValidationPipe ( createCatSchema )) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } info Hint @UsePipes() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u7ed1\u5b9a\u9a8c\u8bc1\u7ba1\u9053"},{"location":"pipes/#_8","text":"warning Warning \u672c\u8282\u4e2d\u63d0\u5230\u7684\u6280\u672f\u9700\u8981 TypeScript\uff0c\u5982\u679c\u4f60\u7684\u5e94\u7528\u662f\u7528 JavaScript \u7f16\u5199\u7684\uff0c\u90a3\u4e48\u5b83\u662f\u4e0d\u53ef\u7528\u7684\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u9a8c\u8bc1\u6280\u672f\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u3002 Nest \u4e0e class-validator \u5e93\u4e00\u8d77\u5de5\u4f5c\u5f97\u5f88\u597d\u3002 \u8fd9\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u5e93\u5141\u8bb8\u60a8\u4f7f\u7528\u57fa\u4e8e\u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u3002 \u57fa\u4e8e\u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u975e\u5e38\u5f3a\u5927\uff0c\u7279\u522b\u662f\u5f53\u4e0e Nest \u7684 Pipe \u529f\u80fd\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u88ab\u5904\u7406\u5c5e\u6027\u7684\u201c\u5143\u7c7b\u578b\u201d\u3002 \u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i --save class-validator class-transformer \u4e00\u65e6\u5b89\u88c5\u4e86\u8fd9\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u88c5\u9970\u5668\u5230 CreateCatDto \u7c7b\u3002 \u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e86\u8fd9\u79cd\u6280\u672f\u7684\u4e00\u4e2a\u663e\u8457\u4f18\u52bf:\u201cCreateCatDto\u201d\u7c7b\u4ecd\u7136\u662f Post \u4e3b\u4f53\u5bf9\u8c61\u7684\u552f\u4e00\u771f\u5b9e\u6e90(\u800c\u4e0d\u662f\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u9a8c\u8bc1\u7c7b)\u3002 @ @filename ( create - cat . dto ) import { IsString , IsInt } from 'class-validator' ; export class CreateCatDto { @IsString () name : string ; @IsInt () age : number ; @IsString () breed : string ; } info Hint \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u7c7b\u9a8c\u8bc1\u5668\u88c5\u9970\u5668\u7684\u4fe1\u606f \u6b64\u5904 . \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e9b\u6ce8\u91ca\u7684 ValidationPipe \u7c7b\u3002 @ @filename ( validation . pipe ) import { PipeTransform , Injectable , ArgumentMetadata , BadRequestException } from '@nestjs/common' ; import { validate } from 'class-validator' ; import { plainToClass } from 'class-transformer' ; @Injectable () export class ValidationPipe implements PipeTransform < any > { async transform ( value : any , { metatype } : ArgumentMetadata ) { if ( ! metatype || ! this . toValidate ( metatype )) { return value ; } const object = plainToClass ( metatype , value ); const errors = await validate ( object ); if ( errors . length > 0 ) { throw new BadRequestException ( 'Validation failed' ); } return value ; } private toValidate ( metatype : Function ) : boolean { const types : Function [] = [ String , Boolean , Number , Array , Object ]; return ! types . includes ( metatype ); } } warning Notice \u5728\u4e0a\u9762\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 class-transformer \u5e93\u3002 \u5b83\u4e0e \u7c7b\u9a8c\u8bc1\u5668 \u5e93\u662f\u7531\u540c\u4e00\u4f5c\u8005\u7f16\u5199\u7684\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u53ef\u4ee5\u5f88\u597d\u5730\u7ed3\u5408\u5728\u4e00\u8d77\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 \u9996\u5148\uff0c\u8bf7\u6ce8\u610f transform() \u65b9\u6cd5\u88ab\u6807\u8bb0\u4e3a async \u3002 \u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a Nest \u540c\u65f6\u652f\u6301\u540c\u6b65\u548c \u5f02\u6b65 \u7ba1\u9053\u3002 \u6211\u4eec\u4f7f\u8fd9\u4e2a\u65b9\u6cd5\u4e3a async \uff0c\u56e0\u4e3a\u4e00\u4e9b\u7c7b\u9a8c\u8bc1\u5668\u9a8c\u8bc1 \u53ef\u4ee5\u662f async (\u5229\u7528 Promises)\u3002 \u63a5\u4e0b\u6765\u6ce8\u610f\uff0c\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u89e3\u6784\u6765\u63d0\u53d6\u5143\u7c7b\u578b\u5b57\u6bb5(\u4ec5\u4ece ArgumentMetadata \u4e2d\u63d0\u53d6\u8fd9\u4e2a\u6210\u5458)\u5230\u6211\u4eec\u7684 metatype \u53c2\u6570\u4e2d\u3002 \u8fd9\u53ea\u662f\u83b7\u53d6\u5b8c\u6574\u7684 ArgumentMetadata \u7684\u7b80\u5199\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u989d\u5916\u7684\u8bed\u53e5\u6765\u5206\u914d\u5143\u7c7b\u578b\u53d8\u91cf\u3002 \u63a5\u4e0b\u6765\uff0c\u8bf7\u6ce8\u610f\u52a9\u624b\u51fd\u6570 toValidate() \u3002 \u5f53\u5f53\u524d\u5904\u7406\u7684\u53c2\u6570\u662f\u672c\u5730 JavaScript \u7c7b\u578b\u65f6\uff0c\u5b83\u8d1f\u8d23\u7ed5\u8fc7\u9a8c\u8bc1\u6b65\u9aa4(\u8fd9\u4e9b\u53c2\u6570\u4e0d\u80fd\u9644\u52a0\u9a8c\u8bc1\u4fee\u9970\u7b26\uff0c\u6240\u4ee5\u6ca1\u6709\u7406\u7531\u901a\u8fc7\u9a8c\u8bc1\u6b65\u9aa4\u8fd0\u884c\u5b83\u4eec)\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528\u7c7b\u8f6c\u6362\u5668\u51fd\u6570 plainToClass() \u5c06\u666e\u901a JavaScript \u53c2\u6570\u5bf9\u8c61\u8f6c\u6362\u4e3a\u7c7b\u578b\u5316\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5e94\u7528\u9a8c\u8bc1\u3002 \u6211\u4eec\u5fc5\u987b\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\uff0c\u4f20\u5165\u7684 post \u4e3b\u4f53\u5bf9\u8c61\uff0c\u5f53\u4ece\u7f51\u7edc\u8bf7\u6c42\u53cd\u5e8f\u5217\u5316\u65f6\uff0c \u6ca1\u6709\u4efb\u4f55\u7c7b\u578b\u4fe1\u606f (\u8fd9\u662f\u5e95\u5c42\u5e73\u53f0\uff0c\u5982 Express \u7684\u5de5\u4f5c\u65b9\u5f0f)\u3002 \u7c7b\u9a8c\u8bc1\u5668\u9700\u8981\u4f7f\u7528\u524d\u9762\u4e3a DTO \u5b9a\u4e49\u7684\u9a8c\u8bc1\u4fee\u9970\u5668\uff0c\u56e0\u6b64\u9700\u8981\u6267\u884c\u6b64\u8f6c\u6362\uff0c\u5c06\u4f20\u5165\u7684\u4e3b\u4f53\u89c6\u4e3a\u9002\u5f53\u4fee\u9970\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u666e\u901a\u7684\u5bf9\u8c61\u3002 \u6700\u540e\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a \u9a8c\u8bc1\u7ba1\u9053 \uff0c\u6240\u4ee5\u5b83\u8981\u4e48\u4e0d\u52a0\u4fee\u6539\u5730\u8fd4\u56de\u503c\uff0c\u8981\u4e48\u629b\u51fa\u5f02\u5e38\u3002 \u6700\u540e\u4e00\u6b65\u662f\u7ed1\u5b9a ValidationPipe \u3002 \u7ba1\u9053\u53ef\u4ee5\u662f\u53c2\u6570\u4f5c\u7528\u57df\u3001\u65b9\u6cd5\u4f5c\u7528\u57df\u3001\u63a7\u5236\u5668\u4f5c\u7528\u57df\u6216\u5168\u5c40\u4f5c\u7528\u57df\u3002 \u5728\u524d\u9762\u7684\u57fa\u4e8e joi \u7684\u9a8c\u8bc1\u7ba1\u9053\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u4e86\u4e00\u4e2a\u5728\u65b9\u6cd5\u7ea7\u522b\u7ed1\u5b9a\u7ba1\u9053\u7684\u793a\u4f8b\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u628a\u7ba1\u9053\u5b9e\u4f8b\u7ed1\u5b9a\u5230\u8def\u7531\u5904\u7406\u5668\u7684 @Body() \u88c5\u9970\u5668\u4e0a\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u7ba1\u9053\u5c31\u4f1a\u88ab\u8c03\u7528\u6765\u9a8c\u8bc1\u53d1\u9001\u4e3b\u4f53\u3002 @ @filename ( cats . controller ) @Post () async create ( @Body ( new ValidationPipe ()) createCatDto : CreateCatDto , ) { this . catsService . create ( createCatDto ); } \u5f53\u9a8c\u8bc1\u903b\u8f91\u53ea\u6d89\u53ca\u4e00\u4e2a\u6307\u5b9a\u53c2\u6570\u65f6\uff0c\u53c2\u6570\u4f5c\u7528\u57df\u7684\u7ba1\u9053\u5f88\u6709\u7528\u3002","title":"\u7c7b\u9a8c\u8bc1\u5668"},{"location":"pipes/#_9","text":"\u7531\u4e8e\u201cValidationPipe\u201d\u88ab\u521b\u5efa\u5f97\u5c3d\u53ef\u80fd\u901a\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5b83\u8bbe\u7f6e\u4e3a\u4e00\u4e2a \u5168\u5c40\u4f5c\u7528\u57df\u7684 \u7ba1\u9053\u6765\u5b9e\u73b0\u5b83\u7684\u5b8c\u6574\u5b9e\u7528\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u5e94\u7528\u4e8e\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 @ @filename ( main ) async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . useGlobalPipes ( new ValidationPipe ()); await app . listen ( 3000 ); } bootstrap (); warning Notice \u5728 hybrid apps \u7684\u60c5\u51b5\u4e0b\uff0c useGlobalPipes() \u65b9\u6cd5\u4e0d\u4e3a\u7f51\u5173\u548c\u5fae\u670d\u52a1\u8bbe\u7f6e\u7ba1\u9053\u3002 \u5bf9\u4e8e\u201c\u6807\u51c6\u201d(\u975e\u6df7\u5408)\u5fae\u670d\u52a1\u5e94\u7528\uff0c useGlobalPipes() \u4f1a\u5168\u5c40\u5b89\u88c5\u7ba1\u9053\u3002 \u5168\u5c40\u7ba1\u9053\u7528\u4e8e\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5305\u62ec\u6bcf\u4e2a\u63a7\u5236\u5668\u548c\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 \u6ce8\u610f\uff0c\u5728\u4f9d\u8d56\u9879\u6ce8\u5165\u65b9\u9762\uff0c\u4ece\u4efb\u4f55\u6a21\u5757\u5916\u90e8\u6ce8\u518c\u7684\u5168\u5c40\u7ba1\u9053(\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528 useGlobalPipes() )\u4e0d\u80fd\u6ce8\u5165\u4f9d\u8d56\u9879\uff0c\u56e0\u4e3a\u7ed1\u5b9a\u5df2\u7ecf\u5728\u4efb\u4f55\u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e4b\u5916\u5b8c\u6210\u4e86\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5 \u76f4\u63a5\u4ece\u4efb\u4f55\u6a21\u5757 \u5efa\u7acb\u4e00\u4e2a\u5168\u5c40\u7ba1\u9053\uff0c\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { APP_PIPE } from '@nestjs/core' ; @Module ({ providers : [ { provide : APP_PIPE , useClass : ValidationPipe , }, ], }) export class AppModule {} info Hint \u5f53\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u7ba1\u9053\u6267\u884c\u4f9d\u8d56\u6ce8\u5165\u65f6\uff0c\u8bf7\u6ce8\u610f\uff0c\u65e0\u8bba\u4f7f\u7528\u8fd9\u79cd\u7ed3\u6784\u7684\u6a21\u5757\u662f\u4ec0\u4e48\uff0c\u7ba1\u9053\u5b9e\u9645\u4e0a\u90fd\u662f\u5168\u5c40\u7684\u3002 \u8fd9\u5e94\u8be5\u5728\u54ea\u91cc\u505a?\u9009\u62e9\u7ba1\u9053(\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 ValidationPipe )\u5b9a\u4e49\u7684\u6a21\u5757\u3002 \u6b64\u5916\uff0c useClass \u5e76\u4e0d\u662f\u5904\u7406\u81ea\u5b9a\u4e49\u63d0\u4f9b\u7a0b\u5e8f\u6ce8\u518c\u7684\u552f\u4e00\u65b9\u6cd5\u3002 \u4e86\u89e3\u66f4\u591a \u8fd9\u91cc \u3002","title":"\u5168\u7403\u8303\u56f4\u7684\u7ba1\u9053"},{"location":"pipes/#validationpipe","text":"\u63d0\u9192\u4e00\u4e0b\uff0c\u4f60\u4e0d\u9700\u8981\u81ea\u5df1\u6784\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u9a8c\u8bc1\u7ba1\u9053\uff0c\u56e0\u4e3a ValidationPipe \u662f\u7531 Nest \u5f00\u7bb1\u5373\u7528\u63d0\u4f9b\u7684\u3002 \u5185\u7f6e\u7684 ValidationPipe \u6bd4\u6211\u4eec\u5728\u672c\u7ae0\u4e2d\u6784\u5efa\u7684\u793a\u4f8b\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u9009\u9879\uff0c\u5728\u672c\u7ae0\u4e2d\uff0c\u4e3a\u4e86\u6f14\u793a\u81ea\u5b9a\u4e49\u6784\u5efa\u7ba1\u9053\u7684\u673a\u5236\uff0c\u6211\u4eec\u4e00\u76f4\u4fdd\u6301\u57fa\u672c\u7684\u793a\u4f8b\u3002 \u60a8\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u5b8c\u6574\u7684\u7ec6\u8282\uff0c\u4ee5\u53ca\u5927\u91cf\u7684\u793a\u4f8b\u3002","title":"\u5185\u7f6e\u7684 ValidationPipe"},{"location":"pipes/#_10","text":"\u9a8c\u8bc1\u5e76\u4e0d\u662f\u81ea\u5b9a\u4e49\u7ba1\u9053\u7684\u552f\u4e00\u7528\u4f8b\u3002 \u5728\u672c\u7ae0\u7684\u5f00\u59cb\uff0c\u6211\u4eec\u63d0\u5230\u7ba1\u9053\u4e5f\u53ef\u4ee5 \u8f6c\u6362 \u8f93\u5165\u6570\u636e\u5230\u6240\u9700\u7684\u683c\u5f0f\u3002 \u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a transform \u51fd\u6570\u8fd4\u56de\u7684\u503c\u5b8c\u5168\u8986\u76d6\u4e86\u53c2\u6570\u4e4b\u524d\u7684\u503c\u3002 \u8fd9\u5728\u4ec0\u4e48\u65f6\u5019\u6709\u7528? \u8003\u8651\u5230\u6709\u65f6\u4ece\u5ba2\u6237\u7aef\u4f20\u9012\u7684\u6570\u636e\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\u2014\u4f8b\u5982\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u2014\u7136\u540e\u624d\u80fd\u7531\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u6b63\u786e\u5904\u7406\u3002 \u6b64\u5916\uff0c\u4e00\u4e9b\u5fc5\u9700\u7684\u6570\u636e\u5b57\u6bb5\u53ef\u80fd\u4f1a\u4e22\u5931\uff0c\u6211\u4eec\u5e0c\u671b\u5e94\u7528\u9ed8\u8ba4\u503c\u3002 \u8f6c\u6362\u7ba1\u9053\u53ef\u4ee5\u901a\u8fc7\u5728\u5ba2\u6237\u7aef\u8bf7\u6c42\u548c\u8bf7\u6c42\u5904\u7406\u7a0b\u5e8f\u4e4b\u95f4\u63d2\u5165\u5904\u7406\u51fd\u6570\u6765\u6267\u884c\u8fd9\u4e9b\u529f\u80fd\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u201cParseIntPipe\u201d\uff0c\u5b83\u8d1f\u8d23\u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u6574\u6570\u503c\u3002 (\u5982\u524d\u6240\u8ff0\uff0cNest \u6709\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u5185\u7f6e ParseIntPipe ;\u6211\u4eec\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u81ea\u5b9a\u4e49\u8f6c\u6362\u7ba1\u9053\u793a\u4f8b)\u3002 @ @filename ( parse - int . pipe ) import { PipeTransform , Injectable , ArgumentMetadata , BadRequestException } from '@nestjs/common' ; @Injectable () export class ParseIntPipe implements PipeTransform < string , number > { transform ( value : string , metadata : ArgumentMetadata ) : number { const val = parseInt ( value , 10 ); if ( isNaN ( val )) { throw new BadRequestException ( 'Validation failed' ); } return val ; } } @ @switch import { Injectable , BadRequestException } from '@nestjs/common' ; @Injectable () export class ParseIntPipe { transform ( value , metadata ) { const val = parseInt ( value , 10 ); if ( isNaN ( val )) { throw new BadRequestException ( 'Validation failed' ); } return val ; } } \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u7ba1\u9053\u7ed1\u5b9a\u5230\u9009\u5b9a\u7684\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @Get ( ':id' ) async findOne ( @Param ( 'id' , new ParseIntPipe ()) id ) { return this . catsService . findOne ( id ); } @ @switch @Get ( ':id' ) @Bind ( Param ( 'id' , new ParseIntPipe ())) async findOne ( id ) { return this . catsService . findOne ( id ); } \u53e6\u4e00\u4e2a\u6709\u7528\u7684\u8f6c\u6362\u6848\u4f8b\u662f\u4f7f\u7528\u8bf7\u6c42\u4e2d\u63d0\u4f9b\u7684 id \u4ece\u6570\u636e\u5e93\u4e2d\u9009\u62e9\u4e00\u4e2a\u73b0\u6709\u7528\u6237\u5b9e\u4f53: @ @filename () @Get ( ':id' ) findOne ( @Param ( 'id' , UserByIdPipe ) userEntity : UserEntity ) { return userEntity ; } @ @switch @Get ( ':id' ) @Bind ( Param ( 'id' , UserByIdPipe )) findOne ( userEntity ) { return userEntity ; } \u6211\u4eec\u5c06\u8be5\u7ba1\u9053\u7684\u5b9e\u73b0\u7559\u7ed9\u8bfb\u8005\uff0c\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u50cf\u6240\u6709\u5176\u4ed6\u8f6c\u6362\u7ba1\u9053\u4e00\u6837\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u8f93\u5165\u503c(\u4e00\u4e2a\u201cid\u201d)\u5e76\u8fd4\u56de\u4e00\u4e2a\u8f93\u51fa\u503c(\u4e00\u4e2a\u201cUserEntity\u201d\u5bf9\u8c61)\u3002 \u8fd9\u53ef\u4ee5\u4f7f\u60a8\u7684\u4ee3\u7801\u66f4\u5177\u6709\u58f0\u660e\u6027\u548c DRY \uff0c\u65b9\u6cd5\u662f\u5c06\u6837\u677f\u4ee3\u7801\u4ece\u5904\u7406\u7a0b\u5e8f\u4e2d\u62bd\u8c61\u51fa\u6765\uff0c\u653e\u5230\u4e00\u4e2a\u516c\u5171\u7ba1\u9053\u4e2d\u3002","title":"\u8f6c\u6362\u7528\u4f8b"},{"location":"pipes/#_11","text":"Parse* \u7ba1\u9053\u5e0c\u671b\u5b9a\u4e49\u53c2\u6570\u7684\u503c\u3002 \u5b83\u4eec\u5728\u63a5\u6536\u5230\u201cnull\u201d\u6216\u201cundefined\u201d\u503c\u65f6\u629b\u51fa\u5f02\u5e38\u3002 \u4e3a\u4e86\u5141\u8bb8\u7aef\u70b9\u5904\u7406\u7f3a\u5931\u7684 querystring \u53c2\u6570\u503c\uff0c\u6211\u4eec\u5fc5\u987b\u5728 Parse* \u7ba1\u9053\u5bf9\u8fd9\u4e9b\u503c\u8fdb\u884c\u64cd\u4f5c\u4e4b\u524d\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u503c\u6765\u6ce8\u5165\u3002 DefaultValuePipe \u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002 \u53ea\u9700\u5728 @Query() \u88c5\u9970\u5668\u4e2d\u76f8\u5173\u7684 Parse* \u7ba1\u9053\u4e4b\u524d\u5b9e\u4f8b\u5316\u4e00\u4e2a DefaultValuePipe \uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @Get () async findAll ( @Query ( 'activeOnly' , new DefaultValuePipe ( false ), ParseBoolPipe ) activeOnly : boolean , @Query ( 'page' , new DefaultValuePipe ( 0 ), ParseIntPipe ) page : number , ) { return this . catsService . findAll ({ activeOnly , page }); }","title":"\u63d0\u4f9b\u9ed8\u8ba4\u503c"},{"location":"support/","text":"\u652f\u6301 \u00b6 Nest\u662fMIT\u6388\u6743\u7684\u5f00\u653e\u6e90\u7801\u9879\u76ee\uff0c\u5176\u6b63\u5728\u8fdb\u884c\u7684\u5f00\u53d1\u5f97\u76ca\u4e8e\u793e\u533a\u7684\u652f\u6301\u3002 \u8fd9\u4e2a\u6846\u67b6\u662f\u6f2b\u957f\u9053\u8def\u7684\u7ed3\u679c\uff0c\u5145\u6ee1\u4e86\u4e0d\u7720\u4e4b\u591c\uff0c\u5de5\u4f5c \u540e\u7684\u65f6\u95f4 \uff0c\u548c\u7e41\u5fd9\u7684\u5468\u672b\u3002 \u4f60\u80fd\u5e2e\u4e0a\u4ec0\u4e48\u5fd9? \u00b6 Nest\u5e76\u6ca1\u6709\u4e00\u5bb6\u5927\u516c\u53f8\u5728\u80cc\u540e\u652f\u6301\u5b83\uff0c\u800c\u4e14\u5b83\u8fd8\u5728\u4e0d\u65ad\u5730\u4e3a\u5176\u5f00\u53d1\u65f6\u95f4\u4ed8\u8d39\u3002 \u6211\u5b8c\u5168\u4f9d\u9760\u4eba\u6c11\u7684 \u5584\u826f \u2764\ufe0f\u3002\u7136\u800c\uff0c\u6211\u60f3\u8ba9\u8fd9\u4e2a\u6846\u67b6\u66f4\u52a0 \u5f3a\u5927 \uff0c\u5b8c\u5168\u4e13\u6ce8\u4e8e\u4e3a\u60a8\u63d0\u4f9b\u4f1f\u5927\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f7f\u7f16\u7801\u8fc7\u7a0b\u53d8\u5f97\u6109\u5feb:\u4e3a\u4e86\u5e2e\u52a9\u6211\uff0c\u6211\u8fd0\u884c\u4e86\u51e0\u4e2a\u652f\u6301\u5e73\u53f0: \u6210\u4e3a OpenCollective \u7684\u652f\u6301\u8005\u6216\u8d5e\u52a9\u5546 \u4f7f\u7528 PayPal \u53d1\u9001\u4e00\u6b21\u6027\u6350\u6b3e \u6216\u8005\u76f4\u63a5\u8054\u7cfb\u6211: mail@kamilmysliwiec.com \u5982\u679c\u4f60\u7231\u4e0a\u4e86Nest\uff0c\u6216\u8005\u4f60\u7ecf\u8425\u7740\u4e00\u5bb6\u4f7f\u7528Nest\u7684\u4f01\u4e1a\uff0c\u8003\u8651\u8d5e\u52a9\u5b83\u7684\u5f00\u53d1\uff0c\u4ee5\u786e\u4fdd\u4f60\u7684\u4ea7\u54c1\u6240\u4f9d\u8d56\u7684\u9879\u76ee\u5f97\u5230 \u79ef\u6781\u7684\u7ef4\u62a4 \u548c\u6539\u8fdb\u3002 \u6b64\u5916\uff0c\u60a8\u7684\u652f\u6301\u53ef\u4ee5\u5e2e\u52a9\u6211\u66f4\u591a\u5730\u81f4\u529b\u4e8e\u6709\u76ca\u4e8e\u6574\u4e2aNest\u793e\u533a\u7684\u5185\u5bb9\uff0c\u6bd4\u5982\u64b0\u5199\u6559\u80b2\u7c7b\u535a\u5ba2\u6216\u5f55\u5236\u89c6\u9891\u3002","title":"\u652f\u6301\u6211\u4eec"},{"location":"support/#_1","text":"Nest\u662fMIT\u6388\u6743\u7684\u5f00\u653e\u6e90\u7801\u9879\u76ee\uff0c\u5176\u6b63\u5728\u8fdb\u884c\u7684\u5f00\u53d1\u5f97\u76ca\u4e8e\u793e\u533a\u7684\u652f\u6301\u3002 \u8fd9\u4e2a\u6846\u67b6\u662f\u6f2b\u957f\u9053\u8def\u7684\u7ed3\u679c\uff0c\u5145\u6ee1\u4e86\u4e0d\u7720\u4e4b\u591c\uff0c\u5de5\u4f5c \u540e\u7684\u65f6\u95f4 \uff0c\u548c\u7e41\u5fd9\u7684\u5468\u672b\u3002","title":"\u652f\u6301"},{"location":"support/#_2","text":"Nest\u5e76\u6ca1\u6709\u4e00\u5bb6\u5927\u516c\u53f8\u5728\u80cc\u540e\u652f\u6301\u5b83\uff0c\u800c\u4e14\u5b83\u8fd8\u5728\u4e0d\u65ad\u5730\u4e3a\u5176\u5f00\u53d1\u65f6\u95f4\u4ed8\u8d39\u3002 \u6211\u5b8c\u5168\u4f9d\u9760\u4eba\u6c11\u7684 \u5584\u826f \u2764\ufe0f\u3002\u7136\u800c\uff0c\u6211\u60f3\u8ba9\u8fd9\u4e2a\u6846\u67b6\u66f4\u52a0 \u5f3a\u5927 \uff0c\u5b8c\u5168\u4e13\u6ce8\u4e8e\u4e3a\u60a8\u63d0\u4f9b\u4f1f\u5927\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f7f\u7f16\u7801\u8fc7\u7a0b\u53d8\u5f97\u6109\u5feb:\u4e3a\u4e86\u5e2e\u52a9\u6211\uff0c\u6211\u8fd0\u884c\u4e86\u51e0\u4e2a\u652f\u6301\u5e73\u53f0: \u6210\u4e3a OpenCollective \u7684\u652f\u6301\u8005\u6216\u8d5e\u52a9\u5546 \u4f7f\u7528 PayPal \u53d1\u9001\u4e00\u6b21\u6027\u6350\u6b3e \u6216\u8005\u76f4\u63a5\u8054\u7cfb\u6211: mail@kamilmysliwiec.com \u5982\u679c\u4f60\u7231\u4e0a\u4e86Nest\uff0c\u6216\u8005\u4f60\u7ecf\u8425\u7740\u4e00\u5bb6\u4f7f\u7528Nest\u7684\u4f01\u4e1a\uff0c\u8003\u8651\u8d5e\u52a9\u5b83\u7684\u5f00\u53d1\uff0c\u4ee5\u786e\u4fdd\u4f60\u7684\u4ea7\u54c1\u6240\u4f9d\u8d56\u7684\u9879\u76ee\u5f97\u5230 \u79ef\u6781\u7684\u7ef4\u62a4 \u548c\u6539\u8fdb\u3002 \u6b64\u5916\uff0c\u60a8\u7684\u652f\u6301\u53ef\u4ee5\u5e2e\u52a9\u6211\u66f4\u591a\u5730\u81f4\u529b\u4e8e\u6709\u76ca\u4e8e\u6574\u4e2aNest\u793e\u533a\u7684\u5185\u5bb9\uff0c\u6bd4\u5982\u64b0\u5199\u6559\u80b2\u7c7b\u535a\u5ba2\u6216\u5f55\u5236\u89c6\u9891\u3002","title":"\u4f60\u80fd\u5e2e\u4e0a\u4ec0\u4e48\u5fd9?"},{"location":"cli/libraries/","text":"Libraries \u00b6 Many applications need to solve the same general problems, or re-use a modular component in several different contexts. Nest has a few ways of addressing this, but each works at a different level to solve the problem in a way that helps meet different architectural and organizational objectives. Nest modules are useful for providing an execution context that enables sharing components within a single application. Modules can also be packaged with npm to create a reusable library that can be installed in different projects. This can be an effective way to distribute configurable, re-usable libraries that can be used by different, loosely connected or unaffiliated organizations (e.g., by distributing/installing 3rd party libraries). For sharing code within closely organized groups (e.g., within company/project boundaries), it can be useful to have a more lightweight approach to sharing components. Monorepos have arisen as a construct to enable that, and within a monorepo, a library provides a way to share code in an easy, lightweight fashion. In a Nest monorepo, using libraries enables easy assembly of applications that share components. In fact, this encourages decomposition of monolithic applications and development processes to focus on building and composing modular components. Nest libraries \u00b6 A Nest library is a Nest project that differs from an application in that it cannot run on its own. A library must be imported into a containing application in order for its code to execute. The built-in support for libraries described in this section is only available for monorepos (standard mode projects can achieve similar functionality using npm packages). For example, an organization may develop an AuthModule that manages authentication by implementing company policies that govern all internal applications. Rather than build that module separately for each application, or physically packaging the code with npm and requiring each project to install it, a monorepo can define this module as a library. When organized this way, all consumers of the library module can see an up-to-date version of the AuthModule as it is committed. This can have significant benefits for coordinating component development and assembly, and simplifying end-to-end testing. Creating libraries \u00b6 Any functionality that is suitable for re-use is a candidate for being managed as a library. Deciding what should be a library, and what should be part of an application, is an architectural design decision. Creating libraries involves more than simply copying code from an existing application to a new library. When packaged as a library, the library code must be decoupled from the application. This may require more time up front and force some design decisions that you may not face with more tightly coupled code. But this additional effort can pay off when the library can be used to enable more rapid application assembly across multiple applications. To get started with creating a library, run the following command: nest g library my-library When you run the command, the library schematic prompts you for a prefix (AKA alias) for the library: What prefix would you like to use for the library ( default: @app ) ? This creates a new project in your workspace called my-library . A library-type project, like an application-type project, is generated into a named folder using a schematic. Libraries are managed under the libs folder of the monorepo root. Nest creates the libs folder the first time a library is created. The files generated for a library are slightly different from those generated for an application. Here is the contents of the libs folder after executing the command above: libs my-library src index.ts my-library.module.ts my-library.service.ts tsconfig.lib.json The nest-cli.json file will have a new entry for the library under the \"projects\" key: ... { \"my-library\" : { \"type\" : \"library\" , \"root\" : \"libs/my-library\" , \"entryFile\" : \"index\" , \"sourceRoot\" : \"libs/my-library/src\" , \"compilerOptions\" : { \"tsConfigPath\" : \"libs/my-library/tsconfig.lib.json\" } } ... There are two differences in nest-cli.json metadata between libraries and applications: the \"type\" property is set to \"library\" instead of \"application\" the \"entryFile\" property is set to \"index\" instead of \"main\" These differences key the build process to handle libraries appropriately. For example, a library exports its functions through the index.js file. As with application-type projects, libraries each have their own tsconfig.lib.json file that extends the root (monorepo-wide) tsconfig.json file. You can modify this file, if necessary, to provide library-specific compiler options. You can build the library with the CLI command: nest build my-library Using libraries \u00b6 With the automatically generated configuration files in place, using libraries is straightforward. How would we import MyLibraryService from the my-library library into the my-project application? First, note that using library modules is the same as using any other Nest module. What the monorepo does is manage paths in a way that importing libraries and generating builds is now transparent. To use MyLibraryService , we need to import its declaring module. We can modify my-project/src/app.module.ts as follows to import MyLibraryModule . import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { MyLibraryModule } from '@app/my-library' ; @Module ({ imports : [ MyLibraryModule ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} Notice above that we've used a path alias of @app in the ES module import line, which was the prefix we supplied with the nest g library command above. Under the covers, Nest handles this through tsconfig path mapping. When adding a library, Nest updates the global (monorepo) tsconfig.json file's \"paths\" key like this: \"paths\" : { \"@app/my-library\" : [ \"libs/my-library/src\" ], \"@app/my-library/*\" : [ \"libs/my-library/src/*\" ] } So, in a nutshell, the combination of the monorepo and library features has made it easy and intuitive to include library modules into applications. This same mechanism enables building and deploying applications that compose libraries. Once you've imported the MyLibraryModule , running nest build handles all the module resolution automatically and bundles the app along with any library dependencies, for deployment. The default compiler for a monorepo is webpack , so the resulting distribution file is a single file that bundles all of the transpiled JavaScript files into a single file. You can also switch to tsc as described here .","title":"\u5e93"},{"location":"cli/libraries/#libraries","text":"Many applications need to solve the same general problems, or re-use a modular component in several different contexts. Nest has a few ways of addressing this, but each works at a different level to solve the problem in a way that helps meet different architectural and organizational objectives. Nest modules are useful for providing an execution context that enables sharing components within a single application. Modules can also be packaged with npm to create a reusable library that can be installed in different projects. This can be an effective way to distribute configurable, re-usable libraries that can be used by different, loosely connected or unaffiliated organizations (e.g., by distributing/installing 3rd party libraries). For sharing code within closely organized groups (e.g., within company/project boundaries), it can be useful to have a more lightweight approach to sharing components. Monorepos have arisen as a construct to enable that, and within a monorepo, a library provides a way to share code in an easy, lightweight fashion. In a Nest monorepo, using libraries enables easy assembly of applications that share components. In fact, this encourages decomposition of monolithic applications and development processes to focus on building and composing modular components.","title":"Libraries"},{"location":"cli/libraries/#nest-libraries","text":"A Nest library is a Nest project that differs from an application in that it cannot run on its own. A library must be imported into a containing application in order for its code to execute. The built-in support for libraries described in this section is only available for monorepos (standard mode projects can achieve similar functionality using npm packages). For example, an organization may develop an AuthModule that manages authentication by implementing company policies that govern all internal applications. Rather than build that module separately for each application, or physically packaging the code with npm and requiring each project to install it, a monorepo can define this module as a library. When organized this way, all consumers of the library module can see an up-to-date version of the AuthModule as it is committed. This can have significant benefits for coordinating component development and assembly, and simplifying end-to-end testing.","title":"Nest libraries"},{"location":"cli/libraries/#creating-libraries","text":"Any functionality that is suitable for re-use is a candidate for being managed as a library. Deciding what should be a library, and what should be part of an application, is an architectural design decision. Creating libraries involves more than simply copying code from an existing application to a new library. When packaged as a library, the library code must be decoupled from the application. This may require more time up front and force some design decisions that you may not face with more tightly coupled code. But this additional effort can pay off when the library can be used to enable more rapid application assembly across multiple applications. To get started with creating a library, run the following command: nest g library my-library When you run the command, the library schematic prompts you for a prefix (AKA alias) for the library: What prefix would you like to use for the library ( default: @app ) ? This creates a new project in your workspace called my-library . A library-type project, like an application-type project, is generated into a named folder using a schematic. Libraries are managed under the libs folder of the monorepo root. Nest creates the libs folder the first time a library is created. The files generated for a library are slightly different from those generated for an application. Here is the contents of the libs folder after executing the command above: libs my-library src index.ts my-library.module.ts my-library.service.ts tsconfig.lib.json The nest-cli.json file will have a new entry for the library under the \"projects\" key: ... { \"my-library\" : { \"type\" : \"library\" , \"root\" : \"libs/my-library\" , \"entryFile\" : \"index\" , \"sourceRoot\" : \"libs/my-library/src\" , \"compilerOptions\" : { \"tsConfigPath\" : \"libs/my-library/tsconfig.lib.json\" } } ... There are two differences in nest-cli.json metadata between libraries and applications: the \"type\" property is set to \"library\" instead of \"application\" the \"entryFile\" property is set to \"index\" instead of \"main\" These differences key the build process to handle libraries appropriately. For example, a library exports its functions through the index.js file. As with application-type projects, libraries each have their own tsconfig.lib.json file that extends the root (monorepo-wide) tsconfig.json file. You can modify this file, if necessary, to provide library-specific compiler options. You can build the library with the CLI command: nest build my-library","title":"Creating libraries"},{"location":"cli/libraries/#using-libraries","text":"With the automatically generated configuration files in place, using libraries is straightforward. How would we import MyLibraryService from the my-library library into the my-project application? First, note that using library modules is the same as using any other Nest module. What the monorepo does is manage paths in a way that importing libraries and generating builds is now transparent. To use MyLibraryService , we need to import its declaring module. We can modify my-project/src/app.module.ts as follows to import MyLibraryModule . import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { MyLibraryModule } from '@app/my-library' ; @Module ({ imports : [ MyLibraryModule ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} Notice above that we've used a path alias of @app in the ES module import line, which was the prefix we supplied with the nest g library command above. Under the covers, Nest handles this through tsconfig path mapping. When adding a library, Nest updates the global (monorepo) tsconfig.json file's \"paths\" key like this: \"paths\" : { \"@app/my-library\" : [ \"libs/my-library/src\" ], \"@app/my-library/*\" : [ \"libs/my-library/src/*\" ] } So, in a nutshell, the combination of the monorepo and library features has made it easy and intuitive to include library modules into applications. This same mechanism enables building and deploying applications that compose libraries. Once you've imported the MyLibraryModule , running nest build handles all the module resolution automatically and bundles the app along with any library dependencies, for deployment. The default compiler for a monorepo is webpack , so the resulting distribution file is a single file that bundles all of the transpiled JavaScript files into a single file. You can also switch to tsc as described here .","title":"Using libraries"},{"location":"cli/overview/","text":"Overview \u00b6 The Nest CLI is a command-line interface tool that helps you to initialize, develop, and maintain your Nest applications. It assists in multiple ways, including scaffolding the project, serving it in development mode, and building and bundling the application for production distribution. It embodies best-practice architectural patterns to encourage well-structured apps. Installation \u00b6 Note : In this guide we describe using npm to install packages, including the Nest CLI. Other package managers may be used at your discretion. With npm, you have several options available for managing how your OS command line resolves the location of the nest CLI binary file. Here, we describe installing the nest binary globally using the -g option. This provides a measure of convenience, and is the approach we assume throughout the documentation. Note that installing any npm package globally leaves the responsibility of ensuring they're running the correct version up to the user. It also means that if you have different projects, each will run the same version of the CLI. A reasonable alternative is to use the npx program (or similar features with other package managers) to ensure that you run a managed version of the Nest CLI. We recommend you consult the npx documentation and/or your DevOps support staff for more information. Install the CLI globally using the npm install -g command (see the Note above for details about global installs). $ npm install -g @nestjs/cli Basic workflow \u00b6 Once installed, you can invoke CLI commands directly from your OS command line through the nest executable. See the available nest commands by entering the following: $ nest --help Get help on an individual command using the following construct. Substitute any command, like new , add , etc., where you see generate in the example below to get detailed help on that command: $ nest generate --help To create, build and run a new basic Nest project in development mode, go to the folder that should be the parent of your new project, and run the following commands: $ nest new my-nest-project $ cd my-nest-project $ npm run start:dev In your browser, open http://localhost:3000 to see the new application running. The app will automatically recompile and reload when you change any of the source files. Project structure \u00b6 When you run nest new , Nest generates a boilerplate application structure by creating a new folder and populating an initial set of files. You can continue working in this default structure, adding new components, as described throughout this documentation. We refer to the project structure generated by nest new as standard mode . Nest also supports an alternate structure for managing multiple projects and libraries called monorepo mode . Aside from a few specific considerations around how the build process works (essentially, monorepo mode simplifies build complexities that can sometimes arise from monorepo-style project structures), and built-in library support, the rest of the Nest features, and this documentation, apply equally to both standard and monorepo mode project structures. In fact, you can easily switch from standard mode to monorepo mode at any time in the future, so you can safely defer this decision while you're still learning about Nest. You can use either mode to manage multiple projects. Here's a quick summary of the differences: Feature Standard Mode Monorepo Mode Multiple projects Separate file system structure Single file system structure node_modules & package.json Separate instances Shared across monorepo Default compiler tsc webpack Compiler settings Specified separately Monorepo defaults that can be overridden per project Config files like .eslintrc.js , .prettierrc , etc. Specified separately Shared across monorepo nest build and nest start commands Target defaults automatically to the (only) project in the context Target defaults to the default project in the monorepo Libraries Managed manually, usually via npm packaging Built-in support, including path management and bundling Read the sections on Workspaces and Libraries for more detailed information to help you decide which mode is most suitable for you. CLI command syntax \u00b6 All nest commands follow the same format: nest commandOrAlias requiredArg [ optionalArg ] [ options ] For example: $ nest new my-nest-project --dry-run Here, new is the commandOrAlias . The new command has an alias of n . my-nest-project is the requiredArg . If a requiredArg is not supplied on the command line, nest will prompt for it. Also, --dry-run has an equivalent short-hand form -d . With this in mind, the following command is the equivalent of the above: $ nest n my-nest-project -d Most commands, and some options, have aliases. Try running nest new --help to see these options and aliases, and to confirm your understanding of the above constructs. Command overview \u00b6 Run nest <command> --help for any of the following commands to see command-specific options. See usage for detailed descriptions for each command. Command Alias Description new n Scaffolds a new standard mode application with all boilerplate files needed to run. generate g Generates and/or modifies files based on a schematic. build Compiles an application or workspace into an output folder. start Compiles and runs an application (or default project in a workspace). add Imports a library that has been packaged as a nest library , running its install schematic. update u Update @nestjs dependencies in the package.json \"dependencies\" list to their @latest version. info i Displays information about installed nest packages and other helpful system info.","title":"\u6982\u8ff0"},{"location":"cli/overview/#overview","text":"The Nest CLI is a command-line interface tool that helps you to initialize, develop, and maintain your Nest applications. It assists in multiple ways, including scaffolding the project, serving it in development mode, and building and bundling the application for production distribution. It embodies best-practice architectural patterns to encourage well-structured apps.","title":"Overview"},{"location":"cli/overview/#installation","text":"Note : In this guide we describe using npm to install packages, including the Nest CLI. Other package managers may be used at your discretion. With npm, you have several options available for managing how your OS command line resolves the location of the nest CLI binary file. Here, we describe installing the nest binary globally using the -g option. This provides a measure of convenience, and is the approach we assume throughout the documentation. Note that installing any npm package globally leaves the responsibility of ensuring they're running the correct version up to the user. It also means that if you have different projects, each will run the same version of the CLI. A reasonable alternative is to use the npx program (or similar features with other package managers) to ensure that you run a managed version of the Nest CLI. We recommend you consult the npx documentation and/or your DevOps support staff for more information. Install the CLI globally using the npm install -g command (see the Note above for details about global installs). $ npm install -g @nestjs/cli","title":"Installation"},{"location":"cli/overview/#basic-workflow","text":"Once installed, you can invoke CLI commands directly from your OS command line through the nest executable. See the available nest commands by entering the following: $ nest --help Get help on an individual command using the following construct. Substitute any command, like new , add , etc., where you see generate in the example below to get detailed help on that command: $ nest generate --help To create, build and run a new basic Nest project in development mode, go to the folder that should be the parent of your new project, and run the following commands: $ nest new my-nest-project $ cd my-nest-project $ npm run start:dev In your browser, open http://localhost:3000 to see the new application running. The app will automatically recompile and reload when you change any of the source files.","title":"Basic workflow"},{"location":"cli/overview/#project-structure","text":"When you run nest new , Nest generates a boilerplate application structure by creating a new folder and populating an initial set of files. You can continue working in this default structure, adding new components, as described throughout this documentation. We refer to the project structure generated by nest new as standard mode . Nest also supports an alternate structure for managing multiple projects and libraries called monorepo mode . Aside from a few specific considerations around how the build process works (essentially, monorepo mode simplifies build complexities that can sometimes arise from monorepo-style project structures), and built-in library support, the rest of the Nest features, and this documentation, apply equally to both standard and monorepo mode project structures. In fact, you can easily switch from standard mode to monorepo mode at any time in the future, so you can safely defer this decision while you're still learning about Nest. You can use either mode to manage multiple projects. Here's a quick summary of the differences: Feature Standard Mode Monorepo Mode Multiple projects Separate file system structure Single file system structure node_modules & package.json Separate instances Shared across monorepo Default compiler tsc webpack Compiler settings Specified separately Monorepo defaults that can be overridden per project Config files like .eslintrc.js , .prettierrc , etc. Specified separately Shared across monorepo nest build and nest start commands Target defaults automatically to the (only) project in the context Target defaults to the default project in the monorepo Libraries Managed manually, usually via npm packaging Built-in support, including path management and bundling Read the sections on Workspaces and Libraries for more detailed information to help you decide which mode is most suitable for you.","title":"Project structure"},{"location":"cli/overview/#cli-command-syntax","text":"All nest commands follow the same format: nest commandOrAlias requiredArg [ optionalArg ] [ options ] For example: $ nest new my-nest-project --dry-run Here, new is the commandOrAlias . The new command has an alias of n . my-nest-project is the requiredArg . If a requiredArg is not supplied on the command line, nest will prompt for it. Also, --dry-run has an equivalent short-hand form -d . With this in mind, the following command is the equivalent of the above: $ nest n my-nest-project -d Most commands, and some options, have aliases. Try running nest new --help to see these options and aliases, and to confirm your understanding of the above constructs.","title":"CLI command syntax"},{"location":"cli/overview/#command-overview","text":"Run nest <command> --help for any of the following commands to see command-specific options. See usage for detailed descriptions for each command. Command Alias Description new n Scaffolds a new standard mode application with all boilerplate files needed to run. generate g Generates and/or modifies files based on a schematic. build Compiles an application or workspace into an output folder. start Compiles and runs an application (or default project in a workspace). add Imports a library that has been packaged as a nest library , running its install schematic. update u Update @nestjs dependencies in the package.json \"dependencies\" list to their @latest version. info i Displays information about installed nest packages and other helpful system info.","title":"Command overview"},{"location":"cli/scripts/","text":"Nest CLI and scripts \u00b6 This section provides additional background on how the nest command interacts with compilers and scripts to help DevOps personnel manage the development environment. A Nest application is a standard TypeScript application that needs to be compiled to JavaScript before it can be executed. There are various ways to accomplish the compilation step, and developers/teams are free to choose a way that works best for them. With that in mind, Nest provides a set of tools out-of-the-box that seek to do the following: Provide a standard build/execute process, available at the command line, that \"just works\" with reasonable defaults. Ensure that the build/execute process is open , so developers can directly access the underlying tools to customize them using native features and options. Remain a completely standard TypeScript/Node.js framework, so that the entire compile/deploy/execute pipeline can be managed by any external tools that the development team chooses to use. This goal is accomplished through a combination of the nest command, a locally installed TypeScript compiler, and package.json scripts. We describe how these technologies work together below. This should help you understand what's happening at each step of the build/execute process, and how to customize that behavior if necessary. The nest binary \u00b6 The nest command is an OS level binary (i.e., runs from the OS command line). This command actually encompasses 3 distinct areas, described below. We recommend that you run the build ( nest build ) and execution ( nest start ) sub-commands via the package.json scripts provided automatically when a project is scaffolded (see typescript starter if you wish to start by cloning a repo, instead of running nest new ). Build \u00b6 nest build is a wrapper on top of the standard tsc compiler (for standard projects ) or the webpack compiler (for monorepos ). It does not add any other compilation features or steps except for handling tsconfig-paths out of the box. The reason it exists is that most developers, especially when starting out with Nest, do not need to adjust compiler options (e.g., tsconfig.json file) which can sometimes be tricky. See the nest build documentation for more details. Execution \u00b6 nest start simply ensures the project has been built (same as nest build ), then invokes the node command in a portable, easy way to execute the compiled application. As with builds, you are free to customize this process as needed, either using the nest start command and its options, or completely replacing it. The entire process is a standard TypeScript application build and execute pipeline, and you are free to manage the process as such. See the nest start documentation for more details. Generation \u00b6 The nest generate commands, as the name implies, generate new Nest projects, or components within them. Package scripts \u00b6 Running the nest commands at the OS command level requires that the nest binary be installed globally. This is a standard feature of npm, and outside of Nest's direct control. One consequence of this is that the globally installed nest binary is not managed as a project dependency in package.json . For example, two different developers can be running two different versions of the nest binary. The standard solution for this is to use package scripts so that you can treat the tools used in the build and execute steps as development dependencies. When you run nest new , or clone the typescript starter , Nest populates the new project's package.json scripts with commands like build and start . It also installs the underlying compiler tools (such as typescript ) as dev dependencies . You run the build and execute scripts with commands like: $ npm run build and $ npm run start These commands use npm's script running capabilities to execute nest build or nest start using the locally installed nest binary. By using these built-in package scripts, you have full dependency management over the Nest CLI commands*. This means that, by following this recommended usage, all members of your organization can be assured of running the same version of the commands. *This applies to the build and start commands. The nest new and nest generate commands aren't part of the build/execute pipeline, so they operate in a different context, and do not come with built-in package.json scripts. For most developers/teams, it is recommended to utilize the package scripts for building and executing their Nest projects. You can fully customize the behavior of these scripts via their options ( --path , --webpack , --webpackPath ) and/or customize the tsc or webpack compiler options files (e.g., tsconfig.json ) as needed. You are also free to run a completely custom build process to compile the TypeScript (or even to execute TypeScript directly with ts-node ). Backward compatibility \u00b6 Because Nest applications are pure TypeScript applications, previous versions of the Nest build/execute scripts will continue to operate. You are not required to upgrade them. You can choose to take advantage of the new nest build and nest start commands when you are ready, or continue running previous or customized scripts. Migration \u00b6 While you are not required to make any changes, you may want to migrate to using the new CLI commands instead of using tools such as tsc-watch or ts-node . In this case, simply install the latest version of the @nestjs/cli , both globally and locally: $ npm install -g @nestjs/cli $ cd /some/project/root/folder $ npm install -D @nestjs/cli You can then replace the scripts defined in package.json with the following ones: \"build\" : \"nest build\" , \"start\" : \"nest start\" , \"start:dev\" : \"nest start --watch\" , \"start:debug\" : \"nest start --debug --watch\" ,","title":"\u811a\u672c"},{"location":"cli/scripts/#nest-cli-and-scripts","text":"This section provides additional background on how the nest command interacts with compilers and scripts to help DevOps personnel manage the development environment. A Nest application is a standard TypeScript application that needs to be compiled to JavaScript before it can be executed. There are various ways to accomplish the compilation step, and developers/teams are free to choose a way that works best for them. With that in mind, Nest provides a set of tools out-of-the-box that seek to do the following: Provide a standard build/execute process, available at the command line, that \"just works\" with reasonable defaults. Ensure that the build/execute process is open , so developers can directly access the underlying tools to customize them using native features and options. Remain a completely standard TypeScript/Node.js framework, so that the entire compile/deploy/execute pipeline can be managed by any external tools that the development team chooses to use. This goal is accomplished through a combination of the nest command, a locally installed TypeScript compiler, and package.json scripts. We describe how these technologies work together below. This should help you understand what's happening at each step of the build/execute process, and how to customize that behavior if necessary.","title":"Nest CLI and scripts"},{"location":"cli/scripts/#the-nest-binary","text":"The nest command is an OS level binary (i.e., runs from the OS command line). This command actually encompasses 3 distinct areas, described below. We recommend that you run the build ( nest build ) and execution ( nest start ) sub-commands via the package.json scripts provided automatically when a project is scaffolded (see typescript starter if you wish to start by cloning a repo, instead of running nest new ).","title":"The nest binary"},{"location":"cli/scripts/#build","text":"nest build is a wrapper on top of the standard tsc compiler (for standard projects ) or the webpack compiler (for monorepos ). It does not add any other compilation features or steps except for handling tsconfig-paths out of the box. The reason it exists is that most developers, especially when starting out with Nest, do not need to adjust compiler options (e.g., tsconfig.json file) which can sometimes be tricky. See the nest build documentation for more details.","title":"Build"},{"location":"cli/scripts/#execution","text":"nest start simply ensures the project has been built (same as nest build ), then invokes the node command in a portable, easy way to execute the compiled application. As with builds, you are free to customize this process as needed, either using the nest start command and its options, or completely replacing it. The entire process is a standard TypeScript application build and execute pipeline, and you are free to manage the process as such. See the nest start documentation for more details.","title":"Execution"},{"location":"cli/scripts/#generation","text":"The nest generate commands, as the name implies, generate new Nest projects, or components within them.","title":"Generation"},{"location":"cli/scripts/#package-scripts","text":"Running the nest commands at the OS command level requires that the nest binary be installed globally. This is a standard feature of npm, and outside of Nest's direct control. One consequence of this is that the globally installed nest binary is not managed as a project dependency in package.json . For example, two different developers can be running two different versions of the nest binary. The standard solution for this is to use package scripts so that you can treat the tools used in the build and execute steps as development dependencies. When you run nest new , or clone the typescript starter , Nest populates the new project's package.json scripts with commands like build and start . It also installs the underlying compiler tools (such as typescript ) as dev dependencies . You run the build and execute scripts with commands like: $ npm run build and $ npm run start These commands use npm's script running capabilities to execute nest build or nest start using the locally installed nest binary. By using these built-in package scripts, you have full dependency management over the Nest CLI commands*. This means that, by following this recommended usage, all members of your organization can be assured of running the same version of the commands. *This applies to the build and start commands. The nest new and nest generate commands aren't part of the build/execute pipeline, so they operate in a different context, and do not come with built-in package.json scripts. For most developers/teams, it is recommended to utilize the package scripts for building and executing their Nest projects. You can fully customize the behavior of these scripts via their options ( --path , --webpack , --webpackPath ) and/or customize the tsc or webpack compiler options files (e.g., tsconfig.json ) as needed. You are also free to run a completely custom build process to compile the TypeScript (or even to execute TypeScript directly with ts-node ).","title":"Package scripts"},{"location":"cli/scripts/#backward-compatibility","text":"Because Nest applications are pure TypeScript applications, previous versions of the Nest build/execute scripts will continue to operate. You are not required to upgrade them. You can choose to take advantage of the new nest build and nest start commands when you are ready, or continue running previous or customized scripts.","title":"Backward compatibility"},{"location":"cli/scripts/#migration","text":"While you are not required to make any changes, you may want to migrate to using the new CLI commands instead of using tools such as tsc-watch or ts-node . In this case, simply install the latest version of the @nestjs/cli , both globally and locally: $ npm install -g @nestjs/cli $ cd /some/project/root/folder $ npm install -D @nestjs/cli You can then replace the scripts defined in package.json with the following ones: \"build\" : \"nest build\" , \"start\" : \"nest start\" , \"start:dev\" : \"nest start --watch\" , \"start:debug\" : \"nest start --debug --watch\" ,","title":"Migration"},{"location":"cli/usages/","text":"CLI command reference \u00b6 nest new \u00b6 Creates a new (standard mode) Nest project. $ nest new <name> [ options ] $ nest n <name> [ options ] Description \u00b6 Creates and initializes a new Nest project. Prompts for package manager. Creates a folder with the given <name> Populates the folder with configuration files Creates sub-folders for source code ( /src ) and end-to-end tests ( /test ) Populates the sub-folders with default files for app components and tests Arguments \u00b6 Argument Description <name> The name of the new project Options \u00b6 Option Description --dry-run Reports changes that would be made, but does not change the filesystem. Alias: -d --skip-git Skip git repository initialization. Alias: -g --skip-install Skip package installation. Alias: -s --package-manager [package-manager] Specify package manager. Use npm , yarn , or pnpm . Package manager must be installed globally. Alias: -p --language [language] Specify programming language ( TS or JS ). Alias: -l --collection [collectionName] Specify schematics collection. Use package name of installed npm package containing schematic. Alias: -c nest generate \u00b6 Generates and/or modifies files based on a schematic $ nest generate <schematic> <name> [ options ] $ nest g <schematic> <name> [ options ] Arguments \u00b6 Argument Description <schematic> The schematic or collection:schematic to generate. See the table below for the available schematics. <name> The name of the generated component. Schematics \u00b6 Name Alias Description app Generate a new application within a monorepo (converting to monorepo if it's a standard structure). library lib Generate a new library within a monorepo (converting to monorepo if it's a standard structure). class cl Generate a new class. controller co Generate a controller declaration. decorator d Generate a custom decorator. filter f Generate a filter declaration. gateway ga Generate a gateway declaration. guard gu Generate a guard declaration. interface Generate an interface. interceptor in Generate an interceptor declaration. middleware mi Generate a middleware declaration. module mo Generate a module declaration. pipe pi Generate a pipe declaration. provider pr Generate a provider declaration. resolver r Generate a resolver declaration. resource res Generate a new CRUD resource. See the CRUD (resource) generator for more details. service s Generate a service declaration. Options \u00b6 Option Description --dry-run Reports changes that would be made, but does not change the filesystem. Alias: -d --project [project] Project that element should be added to. Alias: -p --flat Do not generate a folder for the element. --collection [collectionName] Specify schematics collection. Use package name of installed npm package containing schematic. Alias: -c --spec Enforce spec files generation (default) --no-spec Disable spec files generation nest build \u00b6 Compiles an application or workspace into an output folder. $ nest build <name> [ options ] Arguments \u00b6 Argument Description <name> The name of the project to build. Options \u00b6 Option Description --path [path] Path to tsconfig file. Alias -p --config [path] Path to nest-cli configuration file. Alias -c --watch Run in watch mode (live-reload) Alias -w --webpack Use webpack for compilation. --webpackPath Path to webpack configuration. --tsc Force use tsc for compilation. nest start \u00b6 Compiles and runs an application (or default project in a workspace). $ nest start <name> [ options ] Arguments \u00b6 Argument Description <name> The name of the project to run. Options \u00b6 Option Description --path [path] Path to tsconfig file. Alias -p --config [path] Path to nest-cli configuration file. Alias -c --watch Run in watch mode (live-reload) Alias -w --preserveWatchOutput Keep outdated console output in watch mode instead of clearing the screen. ( tsc watch mode only) --watchAssets Run in watch mode (live-reload), watching non-TS files (assets). See Assets for more details. --debug [hostport] Run in debug mode (with --inspect flag) Alias -d --webpack Use webpack for compilation. --webpackPath Path to webpack configuration. --tsc Force use tsc for compilation. --exec [binary] Binary to run (default: node ). Alias -e nest add \u00b6 Imports a library that has been packaged as a nest library , running its install schematic. $ nest add <name> [ options ] Arguments \u00b6 Argument Description <name> The name of the library to import. nest update \u00b6 Updates @nestjs dependencies in the package.json \"dependencies\" list to their @latest version. Options \u00b6 Option Description --force Do upgrade instead of update Alias -f --tag Update to tagged version (use @latest , @<tag> , etc) Alias -t nest info \u00b6 Displays information about installed nest packages and other helpful system info. For example: $ nest info _ _ _ ___ _____ _____ _ _____ | \\ | | | | | _ | / ___ | / __ \\| | | _ _ | | \\| | ___ ___ | | _ | | \\ ` --. | / \\/ | | | | | . ` | / _ \\/ __ || __ | | | ` --. \\| | | | | | | | \\ || __/ \\_ _ \\| | _ / \\_ _/ // \\_ _/ / | \\_ _/ \\| | _____ | | _ \\_ | \\_ / \\_ __ || ___/ \\_ _ | \\_ ___/ \\_ ___/ \\_ ___/ \\_ ____/ \\_ __/ [ System Information ] OS Version : macOS High Sierra NodeJS Version : v8.9.0 YARN Version : 1 .5.1 [ Nest Information ] microservices version : 6 .0.0 websockets version : 6 .0.0 testing version : 6 .0.0 common version : 6 .0.0 core version : 6 .0.0","title":"\u4f7f\u7528"},{"location":"cli/usages/#cli-command-reference","text":"","title":"CLI command reference"},{"location":"cli/usages/#nest-new","text":"Creates a new (standard mode) Nest project. $ nest new <name> [ options ] $ nest n <name> [ options ]","title":"nest new"},{"location":"cli/usages/#description","text":"Creates and initializes a new Nest project. Prompts for package manager. Creates a folder with the given <name> Populates the folder with configuration files Creates sub-folders for source code ( /src ) and end-to-end tests ( /test ) Populates the sub-folders with default files for app components and tests","title":"Description"},{"location":"cli/usages/#arguments","text":"Argument Description <name> The name of the new project","title":"Arguments"},{"location":"cli/usages/#options","text":"Option Description --dry-run Reports changes that would be made, but does not change the filesystem. Alias: -d --skip-git Skip git repository initialization. Alias: -g --skip-install Skip package installation. Alias: -s --package-manager [package-manager] Specify package manager. Use npm , yarn , or pnpm . Package manager must be installed globally. Alias: -p --language [language] Specify programming language ( TS or JS ). Alias: -l --collection [collectionName] Specify schematics collection. Use package name of installed npm package containing schematic. Alias: -c","title":"Options"},{"location":"cli/usages/#nest-generate","text":"Generates and/or modifies files based on a schematic $ nest generate <schematic> <name> [ options ] $ nest g <schematic> <name> [ options ]","title":"nest generate"},{"location":"cli/usages/#arguments_1","text":"Argument Description <schematic> The schematic or collection:schematic to generate. See the table below for the available schematics. <name> The name of the generated component.","title":"Arguments"},{"location":"cli/usages/#schematics","text":"Name Alias Description app Generate a new application within a monorepo (converting to monorepo if it's a standard structure). library lib Generate a new library within a monorepo (converting to monorepo if it's a standard structure). class cl Generate a new class. controller co Generate a controller declaration. decorator d Generate a custom decorator. filter f Generate a filter declaration. gateway ga Generate a gateway declaration. guard gu Generate a guard declaration. interface Generate an interface. interceptor in Generate an interceptor declaration. middleware mi Generate a middleware declaration. module mo Generate a module declaration. pipe pi Generate a pipe declaration. provider pr Generate a provider declaration. resolver r Generate a resolver declaration. resource res Generate a new CRUD resource. See the CRUD (resource) generator for more details. service s Generate a service declaration.","title":"Schematics"},{"location":"cli/usages/#options_1","text":"Option Description --dry-run Reports changes that would be made, but does not change the filesystem. Alias: -d --project [project] Project that element should be added to. Alias: -p --flat Do not generate a folder for the element. --collection [collectionName] Specify schematics collection. Use package name of installed npm package containing schematic. Alias: -c --spec Enforce spec files generation (default) --no-spec Disable spec files generation","title":"Options"},{"location":"cli/usages/#nest-build","text":"Compiles an application or workspace into an output folder. $ nest build <name> [ options ]","title":"nest build"},{"location":"cli/usages/#arguments_2","text":"Argument Description <name> The name of the project to build.","title":"Arguments"},{"location":"cli/usages/#options_2","text":"Option Description --path [path] Path to tsconfig file. Alias -p --config [path] Path to nest-cli configuration file. Alias -c --watch Run in watch mode (live-reload) Alias -w --webpack Use webpack for compilation. --webpackPath Path to webpack configuration. --tsc Force use tsc for compilation.","title":"Options"},{"location":"cli/usages/#nest-start","text":"Compiles and runs an application (or default project in a workspace). $ nest start <name> [ options ]","title":"nest start"},{"location":"cli/usages/#arguments_3","text":"Argument Description <name> The name of the project to run.","title":"Arguments"},{"location":"cli/usages/#options_3","text":"Option Description --path [path] Path to tsconfig file. Alias -p --config [path] Path to nest-cli configuration file. Alias -c --watch Run in watch mode (live-reload) Alias -w --preserveWatchOutput Keep outdated console output in watch mode instead of clearing the screen. ( tsc watch mode only) --watchAssets Run in watch mode (live-reload), watching non-TS files (assets). See Assets for more details. --debug [hostport] Run in debug mode (with --inspect flag) Alias -d --webpack Use webpack for compilation. --webpackPath Path to webpack configuration. --tsc Force use tsc for compilation. --exec [binary] Binary to run (default: node ). Alias -e","title":"Options"},{"location":"cli/usages/#nest-add","text":"Imports a library that has been packaged as a nest library , running its install schematic. $ nest add <name> [ options ]","title":"nest add"},{"location":"cli/usages/#arguments_4","text":"Argument Description <name> The name of the library to import.","title":"Arguments"},{"location":"cli/usages/#nest-update","text":"Updates @nestjs dependencies in the package.json \"dependencies\" list to their @latest version.","title":"nest update"},{"location":"cli/usages/#options_4","text":"Option Description --force Do upgrade instead of update Alias -f --tag Update to tagged version (use @latest , @<tag> , etc) Alias -t","title":"Options"},{"location":"cli/usages/#nest-info","text":"Displays information about installed nest packages and other helpful system info. For example: $ nest info _ _ _ ___ _____ _____ _ _____ | \\ | | | | | _ | / ___ | / __ \\| | | _ _ | | \\| | ___ ___ | | _ | | \\ ` --. | / \\/ | | | | | . ` | / _ \\/ __ || __ | | | ` --. \\| | | | | | | | \\ || __/ \\_ _ \\| | _ / \\_ _/ // \\_ _/ / | \\_ _/ \\| | _____ | | _ \\_ | \\_ / \\_ __ || ___/ \\_ _ | \\_ ___/ \\_ ___/ \\_ ___/ \\_ ____/ \\_ __/ [ System Information ] OS Version : macOS High Sierra NodeJS Version : v8.9.0 YARN Version : 1 .5.1 [ Nest Information ] microservices version : 6 .0.0 websockets version : 6 .0.0 testing version : 6 .0.0 common version : 6 .0.0 core version : 6 .0.0","title":"nest info"},{"location":"cli/workspaces/","text":"\u5de5\u4f5c\u533a \u00b6 Nest \u6709\u4e24\u79cd\u7ec4\u7ec7\u4ee3\u7801\u7684\u6a21\u5f0f: \u6807\u51c6\u6a21\u5f0f : \u5bf9\u4e8e\u6784\u5efa\u5177\u6709\u81ea\u5df1\u7684\u4f9d\u8d56\u9879\u548c\u8bbe\u7f6e\u3001\u4e0d\u9700\u8981\u4e3a\u5171\u4eab\u6a21\u5757\u8fdb\u884c\u4f18\u5316\u6216\u4f18\u5316\u590d\u6742\u6784\u5efa\u7684\u72ec\u7acb\u9879\u76ee\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u6709\u7528\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002 monorepo \u6a21\u5f0f : \u8fd9\u79cd\u6a21\u5f0f\u5c06\u4ee3\u7801\u5de5\u4ef6\u89c6\u4e3a\u8f7b\u91cf\u7ea7\u7684\u5355\u4e00\u9879\u76ee\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u80fd\u66f4\u9002\u5408\u5f00\u53d1\u56e2\u961f\u548c/\u6216\u591a\u9879\u76ee\u73af\u5883\u3002 \u5b83\u81ea\u52a8\u5316\u4e86\u90e8\u5206\u6784\u5efa\u8fc7\u7a0b\uff0c\u4f7f\u521b\u5efa\u548c\u7ec4\u5408\u6a21\u5757\u5316\u7ec4\u4ef6\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u4fc3\u8fdb\u4e86\u4ee3\u7801\u91cd\u7528\uff0c\u4f7f\u96c6\u6210\u6d4b\u8bd5\u66f4\u5bb9\u6613\uff0c\u4f7f\u5b83\u66f4\u5bb9\u6613\u5171\u4eab\u9879\u76ee\u8303\u56f4\u5185\u7684\u5de5\u4ef6\uff0c\u5982 eslint \u89c4\u5219\u548c\u5176\u4ed6\u914d\u7f6e\u7b56\u7565\uff0c\u6bd4 github \u5b50\u6a21\u5757\u66f4\u5bb9\u6613\u4f7f\u7528\u3002 Monorepo \u6a21\u5f0f\u4f7f\u7528\u4e86\u4e00\u4e2a workspace \u7684\u6982\u5ff5\uff0c\u5728 nest-cli.json \u6587\u4ef6\u4e2d\u8868\u793a\uff0c\u4ee5\u534f\u8c03 Monorepo \u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5b9e\u9645\u4e0a Nest \u7684\u6240\u6709\u7279\u6027\u90fd\u662f\u72ec\u7acb\u4e8e\u4ee3\u7801\u7ec4\u7ec7\u6a21\u5f0f\u7684\u3002 \u8fd9\u4e2a\u9009\u62e9\u7684 \u552f\u4e00\u7684 \u5f71\u54cd\u662f\u9879\u76ee\u662f\u5982\u4f55\u7ec4\u6210\u7684\uff0c\u4ee5\u53ca\u6784\u5efa\u6784\u4ef6\u662f\u5982\u4f55\u751f\u6210\u7684\u3002 \u6240\u6709\u5176\u4ed6\u529f\u80fd\uff0c\u4ece CLI \u5230\u6838\u5fc3\u6a21\u5757\u518d\u5230\u9644\u52a0\u6a21\u5757\uff0c\u5728\u4e24\u79cd\u6a21\u5f0f\u4e0b\u90fd\u662f\u4e00\u6837\u7684\u3002 \u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8f7b\u677e\u5730\u4ece \u6807\u51c6\u6a21\u5f0f \u5207\u6362\u5230 monorepo \u6a21\u5f0f \uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u63a8\u8fdf\u8fd9\u4e2a\u51b3\u5b9a\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u79cd\u6216\u53e6\u4e00\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u53d8\u5f97\u66f4\u6e05\u695a\u3002 \u6807\u51c6\u6a21\u5f0f \u00b6 \u5f53\u4f60\u8fd0\u884c nest new \u65f6\uff0c\u4e00\u4e2a\u65b0\u7684 \u9879\u76ee \u4f1a\u4f7f\u7528\u4e00\u4e2a\u5185\u7f6e\u539f\u7406\u56fe\u4e3a\u4f60\u521b\u5efa\u3002 Nest \u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c: \u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u5939\uff0c\u5bf9\u5e94\u4e8e\u4f60\u63d0\u4f9b\u7ed9 nest new \u7684 name \u53c2\u6570 \u7528\u4e0e\u6700\u5c0f\u57fa\u7840\u7ea7 Nest \u5e94\u7528\u7a0b\u5e8f\u5bf9\u5e94\u7684\u9ed8\u8ba4\u6587\u4ef6\u586b\u5145\u8be5\u6587\u4ef6\u5939\u3002 \u4f60\u53ef\u4ee5\u5728 typescript-starter \u5e93\u4e2d\u67e5\u770b\u8fd9\u4e9b\u6587\u4ef6\u3002 \u63d0\u4f9b\u989d\u5916\u7684\u6587\u4ef6\uff0c\u5982' nest-cli.json '\uff0c ' package.json '\u548c' tsconfig.json '\uff0c\u914d\u7f6e\u548c\u542f\u7528\u5404\u79cd\u5de5\u5177\u6765\u7f16\u8bd1\uff0c\u6d4b\u8bd5\u548c\u670d\u52a1\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u4ece\u90a3\u91cc\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u542f\u52a8\u5668\u6587\u4ef6\uff0c\u6dfb\u52a0\u65b0\u7ec4\u4ef6\uff0c\u6dfb\u52a0\u4f9d\u8d56\u9879(\u4f8b\u5982\uff0c' npm install ')\uff0c\u6216\u8005\u5f00\u53d1\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u672c\u6587\u6863\u5176\u4f59\u90e8\u5206\u6240\u8ff0\u3002 Monorepo \u6a21\u5f0f \u00b6 \u8981\u542f\u7528 monorepo \u6a21\u5f0f\uff0c\u4f60\u9700\u8981\u4ece\u4e00\u4e2a standard mode \u7ed3\u6784\u5f00\u59cb\uff0c\u7136\u540e\u6dfb\u52a0 projects \u3002 \u4e00\u4e2a\u9879\u76ee\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 \u5e94\u7528\u7a0b\u5e8f (\u4f60\u53ef\u4ee5\u7528\u547d\u4ee4' nest generate app '\u6dfb\u52a0\u5230\u5de5\u4f5c\u533a\u4e2d)\u6216\u8005\u4e00\u4e2a \u5e93 (\u4f60\u53ef\u4ee5\u7528\u547d\u4ee4' nest generate library '\u6dfb\u52a0\u5230\u5de5\u4f5c\u533a\u4e2d)\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u9879\u76ee\u7ec4\u4ef6\u3002 \u73b0\u5728\u8981\u6ce8\u610f\u7684\u5173\u952e\u70b9\u662f\uff0c\u5c06\u9879\u76ee\u6dfb\u52a0\u5230\u73b0\u6709\u7684\u6807\u51c6\u6a21\u5f0f\u7ed3\u6784\u7684\u884c\u4e3a\u5c06\u5176\u8f6c\u6362\u4e3a Monorepo \u6a21\u5f0f\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002 \u5982\u679c\u6211\u4eec\u8fd0\u884c: nest new my-project \u6211\u4eec\u5df2\u7ecf\u6784\u9020\u4e86\u4e00\u4e2a standard mode \u7ed3\u6784\uff0c\u5176\u6587\u4ef6\u5939\u7ed3\u6784\u5982\u4e0b: node_modules src app.controller.ts app.module.ts app.service.ts main.ts nest-cli.json package.json tsconfig.json .eslintrc.js \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u5982\u4e0b\u7684\u5355\u6a21\u6001\u7ed3\u6784: cd my-project nest generate app my-app \u6b64\u65f6\uff0c' nest '\u5c06\u73b0\u6709\u7ed3\u6784\u8f6c\u6362\u4e3a monorepo \u6a21\u5f0f \u7ed3\u6784\u3002 \u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e9b\u91cd\u8981\u7684\u53d8\u5316\u3002 \u6587\u4ef6\u5939\u7ed3\u6784\u73b0\u5728\u770b\u8d77\u6765\u50cf\u8fd9\u6837: apps my-app src app.controller.ts app.module.ts app.service.ts main.ts tsconfig.app.json my-project src app.controller.ts app.module.ts app.service.ts main.ts tsconfig.app.json nest-cli.json package.json tsconfig.json .eslintrc.js The generate app schematic has reorganized the code - moving each application project under the apps folder, and adding a project-specific tsconfig.app.json file in each project's root folder. Our original my-project app has become the default project for the monorepo, and is now a peer with the just-added my-app , located under the apps folder. We'll cover default projects below. error Warning The conversion of a standard mode structure to monorepo only works for projects that have followed the canonical Nest project structure. Specifically, during conversion, the schematic attempts to relocate the src and test folders in a project folder beneath the apps folder in the root. If a project does not use this structure, the conversion will fail or produce unreliable results. \u5de5\u4f5c\u533a\u9879\u76ee \u00b6 A monorepo uses the concept of a workspace to manage its member entities. Workspaces are composed of projects . A project may be either: an application : a full Nest application including a main.ts file to bootstrap the application. Aside from compile and build considerations, an application-type project within a workspace is functionally identical to an application within a standard mode structure. a library : a library is a way of packaging a general purpose set of features (modules, providers, controllers, etc.) that can be used within other projects. A library cannot run on its own, and has no main.ts file. Read more about libraries here . All workspaces have a default project (which should be an application-type project). This is defined by the top-level \"root\" property in the nest-cli.json file, which points at the root of the default project (see CLI properties below for more details). Usually, this is the standard mode application you started with, and later converted to a monorepo using nest generate app . When you follow these steps, this property is populated automatically. Default projects are used by nest commands like nest build and nest start when a project name is not supplied. For example, in the above monorepo structure, running $ nest start will start up the my-project app. To start my-app , we'd use: $ nest start my-app \u5e94\u7528\u7a0b\u5e8f \u00b6 Application-type projects, or what we might informally refer to as just \"applications\", are complete Nest applications that you can run and deploy. You generate an application-type project with nest generate app . This command automatically generates a project skeleton, including the standard src and test folders from the typescript starter . Unlike standard mode, an application project in a monorepo does not have any of the package dependency ( package.json ) or other project configuration artifacts like .prettierrc and .eslintrc.js . Instead, the monorepo-wide dependencies and config files are used. However, the schematic does generate a project-specific tsconfig.app.json file in the root folder of the project. This config file automatically sets appropriate build options, including setting the compilation output folder properly. The file extends the top-level (monorepo) tsconfig.json file, so you can manage global settings monorepo-wide, but override them if needed at the project level. \u5e93 \u00b6 As mentioned, library-type projects, or simply \"libraries\", are packages of Nest components that need to be composed into applications in order to run. You generate a library-type project with nest generate library . Deciding what belongs in a library is an architectural design decision. We discuss libraries in depth in the libraries chapter. CLI \u5c5e\u6027 \u00b6 Nest keeps the metadata needed to organize, build and deploy both standard and monorepo structured projects in the nest-cli.json file. Nest automatically adds to and updates this file as you add projects, so you usually do not have to think about it or edit its contents. However, there are some settings you may want to change manually, so it's helpful to have an overview understanding of the file. After running the steps above to create a monorepo, our nest-cli.json file looks like this: { \"collection\" : \"@nestjs/schematics\" , \"sourceRoot\" : \"apps/my-project/src\" , \"monorepo\" : true , \"root\" : \"apps/my-project\" , \"compilerOptions\" : { \"webpack\" : true , \"tsConfigPath\" : \"apps/my-project/tsconfig.app.json\" }, \"projects\" : { \"my-project\" : { \"type\" : \"application\" , \"root\" : \"apps/my-project\" , \"entryFile\" : \"main\" , \"sourceRoot\" : \"apps/my-project/src\" , \"compilerOptions\" : { \"tsConfigPath\" : \"apps/my-project/tsconfig.app.json\" } }, \"my-app\" : { \"type\" : \"application\" , \"root\" : \"apps/my-app\" , \"entryFile\" : \"main\" , \"sourceRoot\" : \"apps/my-app/src\" , \"compilerOptions\" : { \"tsConfigPath\" : \"apps/my-app/tsconfig.app.json\" } } } } The file is divided into sections: a global section with top-level properties controlling standard and monorepo-wide settings a top level property ( \"projects\" ) with metadata about each project. This section is present only for monorepo-mode structures. The top-level properties are as follows: \"collection\" : points at the collection of schematics used to generate components; you generally should not change this value \"sourceRoot\" : points at the root of the source code for the single project in standard mode structures, or the default project in monorepo mode structures \"compilerOptions\" : a map with keys specifying compiler options and values specifying the option setting; see details below \"generateOptions\" : a map with keys specifying global generate options and values specifying the option setting; see details below \"monorepo\" : (monorepo only) for a monorepo mode structure, this value is always true \"root\" : (monorepo only) points at the project root of the default project \u5168\u5c40\u7684\u7f16\u8bd1\u5668\u9009\u9879 \u00b6 These properties specify the compiler to use as well as various options that affect any compilation step, whether as part of nest build or nest start , and regardless of the compiler, whether tsc or webpack. Property Name Property Value Type Description webpack boolean If true , use webpack compiler . If false or not present, use tsc . In monorepo mode, the default is true (use webpack), in standard mode, the default is false (use tsc ). See below for details. | | tsConfigPath | string | ( monorepo only ) Points at the file containing the tsconfig.json settings that will be used when nest build or nest start is called without a project option (e.g., when the default project is built or started). | | webpackConfigPath | string | Points at a webpack options file. If not specified, Nest looks for the file webpack.config.js . See below for more details. | | deleteOutDir | boolean | If true , whenever the compiler is invoked, it will first remove the compilation output directory (as configured in tsconfig.json , where the default is ./dist ). | | assets | array | Enables automatically distributing non-TypeScript assets whenever a compilation step begins (asset distribution does not happen on incremental compiles in --watch mode). See below for details. | | watchAssets | boolean | If true , run in watch-mode, watching all non-TypeScript assets. (For more fine-grained control of the assets to watch, see Assets section below). | \u5168\u5c40\u751f\u6210\u9009\u9879 \u00b6 These properties specify the default generate options to be used by the nest generate command. Property Name Property Value Type Description spec boolean or object If the value is boolean, a value of true enables spec generation by default and a value of false disables it. A flag passed on the CLI command line overrides this setting, as does a project-specific generateOptions setting (more below). If the value is an object, each key represents a schematic name, and the boolean value determines whether the default spec generation is enabled / disabled for that specific schematic. | The following example uses a boolean value to specify that spec file generation should be disabled by default for all projects: { \"generateOptions\" : { \"spec\" : false }, ... } In the following example, spec file generation is disabled only for service schematics (e.g., nest generate service... ): { \"generateOptions\" : { \"spec\" : { \"service\" : false } }, ... } warning Warning When specifying the spec as an object, the key for the generation schematic does not currently support automatic alias handling. This means that specifying a key as for example service: false and trying to generate a service via the alias s , the spec would still be generated. To make sure both the normal schematic name and the alias work as intended, specify both the normal command name as well as the alias, as seen below. { \"generateOptions\" : { \"spec\" : { \"service\" : false , \"s\" : false } }, ... } \u5177\u4f53\u9879\u76ee\u751f\u6210\u9009\u9879 \u00b6 In addition to providing global generate options, you may also specify project-specific generate options. The project specific generate options follow the exact same format as the global generate options, but are specified directly on each project. Project-specific generate options override global generate options. { \"projects\" : { \"cats-project\" : { \"generateOptions\" : { \"spec\" : { \"service\" : false } }, ... } }, ... } warning Warning The order of precedence for generate options is as follows. Options specified on the CLI command line take precedence over project-specific options. Project-specific options override global options. \u6307\u5b9a\u7f16\u8bd1\u5668 \u00b6 The reason for the different default compilers is that for larger projects (e.g., more typical in a monorepo) webpack can have significant advantages in build times and in producing a single file bundling all project components together. If you wish to generate individual files, set \"webpack\" to false , which will cause the build process to use tsc . Webpack \u53ef\u9009\u7684 \u00b6 The webpack options file can contain standard webpack configuration options . For example, to tell webpack to bundle node_modules (which are excluded by default), add the following to webpack.config.js : module . exports = { externals : [], }; Since the webpack config file is a JavaScript file, you can even expose a function that takes default options and returns a modified object: module . exports = function ( options ) { return { ... options , externals : [], }; }; \u8d44\u4ea7 \u00b6 TypeScript compilation automatically distributes compiler output ( .js and .d.ts files) to the specified output directory. It can also be convenient to distribute non-TypeScript files, such as .graphql files, images , .html files and other assets. This allows you to treat nest build (and any initial compilation step) as a lightweight development build step, where you may be editing non-TypeScript files and iteratively compiling and testing. The assets should be located in the src folder otherwise they will not be copied. The value of the assets key should be an array of elements specifying the files to be distributed. The elements can be simple strings with glob -like file specs, for example: \"assets\" : [ \"**/*.graphql\" ], \"watchAssets\" : true , For finer control, the elements can be objects with the following keys: \"include\" : glob -like file specifications for the assets to be distributed \"exclude\" : glob -like file specifications for assets to be excluded from the include list \"outDir\" : a string specifying the path (relative to the root folder) where the assets should be distributed. Defaults to the same output directory configured for compiler output. \"watchAssets\" : boolean; if true , run in watch mode watching specified assets For example: \"assets\" : [ { \"include\" : \"**/*.graphql\" , \"exclude\" : \"**/omitted.graphql\" , \"watchAssets\" : true }, ] warning Warning Setting watchAssets in a top-level compilerOptions property overrides any watchAssets settings within the assets property. \u9879\u76ee\u5c5e\u6027 \u00b6 \u8fd9\u4e2a\u5143\u7d20\u53ea\u5b58\u5728\u4e8e\u5355\u6a21\u7ed3\u6784\u4e2d\u3002 \u4f60\u901a\u5e38\u4e0d\u5e94\u8be5\u7f16\u8f91\u8fd9\u4e9b\u5c5e\u6027\uff0c\u56e0\u4e3a\u5b83\u4eec\u88ab Nest \u7528\u6765\u5728 monorepo \u4e2d\u5b9a\u4f4d\u9879\u76ee\u53ca\u5176\u914d\u7f6e\u9009\u9879\u3002","title":"\u5de5\u4f5c\u533a"},{"location":"cli/workspaces/#_1","text":"Nest \u6709\u4e24\u79cd\u7ec4\u7ec7\u4ee3\u7801\u7684\u6a21\u5f0f: \u6807\u51c6\u6a21\u5f0f : \u5bf9\u4e8e\u6784\u5efa\u5177\u6709\u81ea\u5df1\u7684\u4f9d\u8d56\u9879\u548c\u8bbe\u7f6e\u3001\u4e0d\u9700\u8981\u4e3a\u5171\u4eab\u6a21\u5757\u8fdb\u884c\u4f18\u5316\u6216\u4f18\u5316\u590d\u6742\u6784\u5efa\u7684\u72ec\u7acb\u9879\u76ee\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u6709\u7528\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002 monorepo \u6a21\u5f0f : \u8fd9\u79cd\u6a21\u5f0f\u5c06\u4ee3\u7801\u5de5\u4ef6\u89c6\u4e3a\u8f7b\u91cf\u7ea7\u7684\u5355\u4e00\u9879\u76ee\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u80fd\u66f4\u9002\u5408\u5f00\u53d1\u56e2\u961f\u548c/\u6216\u591a\u9879\u76ee\u73af\u5883\u3002 \u5b83\u81ea\u52a8\u5316\u4e86\u90e8\u5206\u6784\u5efa\u8fc7\u7a0b\uff0c\u4f7f\u521b\u5efa\u548c\u7ec4\u5408\u6a21\u5757\u5316\u7ec4\u4ef6\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u4fc3\u8fdb\u4e86\u4ee3\u7801\u91cd\u7528\uff0c\u4f7f\u96c6\u6210\u6d4b\u8bd5\u66f4\u5bb9\u6613\uff0c\u4f7f\u5b83\u66f4\u5bb9\u6613\u5171\u4eab\u9879\u76ee\u8303\u56f4\u5185\u7684\u5de5\u4ef6\uff0c\u5982 eslint \u89c4\u5219\u548c\u5176\u4ed6\u914d\u7f6e\u7b56\u7565\uff0c\u6bd4 github \u5b50\u6a21\u5757\u66f4\u5bb9\u6613\u4f7f\u7528\u3002 Monorepo \u6a21\u5f0f\u4f7f\u7528\u4e86\u4e00\u4e2a workspace \u7684\u6982\u5ff5\uff0c\u5728 nest-cli.json \u6587\u4ef6\u4e2d\u8868\u793a\uff0c\u4ee5\u534f\u8c03 Monorepo \u7ec4\u4ef6\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5b9e\u9645\u4e0a Nest \u7684\u6240\u6709\u7279\u6027\u90fd\u662f\u72ec\u7acb\u4e8e\u4ee3\u7801\u7ec4\u7ec7\u6a21\u5f0f\u7684\u3002 \u8fd9\u4e2a\u9009\u62e9\u7684 \u552f\u4e00\u7684 \u5f71\u54cd\u662f\u9879\u76ee\u662f\u5982\u4f55\u7ec4\u6210\u7684\uff0c\u4ee5\u53ca\u6784\u5efa\u6784\u4ef6\u662f\u5982\u4f55\u751f\u6210\u7684\u3002 \u6240\u6709\u5176\u4ed6\u529f\u80fd\uff0c\u4ece CLI \u5230\u6838\u5fc3\u6a21\u5757\u518d\u5230\u9644\u52a0\u6a21\u5757\uff0c\u5728\u4e24\u79cd\u6a21\u5f0f\u4e0b\u90fd\u662f\u4e00\u6837\u7684\u3002 \u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8f7b\u677e\u5730\u4ece \u6807\u51c6\u6a21\u5f0f \u5207\u6362\u5230 monorepo \u6a21\u5f0f \uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u63a8\u8fdf\u8fd9\u4e2a\u51b3\u5b9a\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u79cd\u6216\u53e6\u4e00\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u53d8\u5f97\u66f4\u6e05\u695a\u3002","title":"\u5de5\u4f5c\u533a"},{"location":"cli/workspaces/#_2","text":"\u5f53\u4f60\u8fd0\u884c nest new \u65f6\uff0c\u4e00\u4e2a\u65b0\u7684 \u9879\u76ee \u4f1a\u4f7f\u7528\u4e00\u4e2a\u5185\u7f6e\u539f\u7406\u56fe\u4e3a\u4f60\u521b\u5efa\u3002 Nest \u505a\u4e86\u4ee5\u4e0b\u5de5\u4f5c: \u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u5939\uff0c\u5bf9\u5e94\u4e8e\u4f60\u63d0\u4f9b\u7ed9 nest new \u7684 name \u53c2\u6570 \u7528\u4e0e\u6700\u5c0f\u57fa\u7840\u7ea7 Nest \u5e94\u7528\u7a0b\u5e8f\u5bf9\u5e94\u7684\u9ed8\u8ba4\u6587\u4ef6\u586b\u5145\u8be5\u6587\u4ef6\u5939\u3002 \u4f60\u53ef\u4ee5\u5728 typescript-starter \u5e93\u4e2d\u67e5\u770b\u8fd9\u4e9b\u6587\u4ef6\u3002 \u63d0\u4f9b\u989d\u5916\u7684\u6587\u4ef6\uff0c\u5982' nest-cli.json '\uff0c ' package.json '\u548c' tsconfig.json '\uff0c\u914d\u7f6e\u548c\u542f\u7528\u5404\u79cd\u5de5\u5177\u6765\u7f16\u8bd1\uff0c\u6d4b\u8bd5\u548c\u670d\u52a1\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u4ece\u90a3\u91cc\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u542f\u52a8\u5668\u6587\u4ef6\uff0c\u6dfb\u52a0\u65b0\u7ec4\u4ef6\uff0c\u6dfb\u52a0\u4f9d\u8d56\u9879(\u4f8b\u5982\uff0c' npm install ')\uff0c\u6216\u8005\u5f00\u53d1\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u672c\u6587\u6863\u5176\u4f59\u90e8\u5206\u6240\u8ff0\u3002","title":"\u6807\u51c6\u6a21\u5f0f"},{"location":"cli/workspaces/#monorepo","text":"\u8981\u542f\u7528 monorepo \u6a21\u5f0f\uff0c\u4f60\u9700\u8981\u4ece\u4e00\u4e2a standard mode \u7ed3\u6784\u5f00\u59cb\uff0c\u7136\u540e\u6dfb\u52a0 projects \u3002 \u4e00\u4e2a\u9879\u76ee\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 \u5e94\u7528\u7a0b\u5e8f (\u4f60\u53ef\u4ee5\u7528\u547d\u4ee4' nest generate app '\u6dfb\u52a0\u5230\u5de5\u4f5c\u533a\u4e2d)\u6216\u8005\u4e00\u4e2a \u5e93 (\u4f60\u53ef\u4ee5\u7528\u547d\u4ee4' nest generate library '\u6dfb\u52a0\u5230\u5de5\u4f5c\u533a\u4e2d)\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u9879\u76ee\u7ec4\u4ef6\u3002 \u73b0\u5728\u8981\u6ce8\u610f\u7684\u5173\u952e\u70b9\u662f\uff0c\u5c06\u9879\u76ee\u6dfb\u52a0\u5230\u73b0\u6709\u7684\u6807\u51c6\u6a21\u5f0f\u7ed3\u6784\u7684\u884c\u4e3a\u5c06\u5176\u8f6c\u6362\u4e3a Monorepo \u6a21\u5f0f\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002 \u5982\u679c\u6211\u4eec\u8fd0\u884c: nest new my-project \u6211\u4eec\u5df2\u7ecf\u6784\u9020\u4e86\u4e00\u4e2a standard mode \u7ed3\u6784\uff0c\u5176\u6587\u4ef6\u5939\u7ed3\u6784\u5982\u4e0b: node_modules src app.controller.ts app.module.ts app.service.ts main.ts nest-cli.json package.json tsconfig.json .eslintrc.js \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a\u5982\u4e0b\u7684\u5355\u6a21\u6001\u7ed3\u6784: cd my-project nest generate app my-app \u6b64\u65f6\uff0c' nest '\u5c06\u73b0\u6709\u7ed3\u6784\u8f6c\u6362\u4e3a monorepo \u6a21\u5f0f \u7ed3\u6784\u3002 \u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e9b\u91cd\u8981\u7684\u53d8\u5316\u3002 \u6587\u4ef6\u5939\u7ed3\u6784\u73b0\u5728\u770b\u8d77\u6765\u50cf\u8fd9\u6837: apps my-app src app.controller.ts app.module.ts app.service.ts main.ts tsconfig.app.json my-project src app.controller.ts app.module.ts app.service.ts main.ts tsconfig.app.json nest-cli.json package.json tsconfig.json .eslintrc.js The generate app schematic has reorganized the code - moving each application project under the apps folder, and adding a project-specific tsconfig.app.json file in each project's root folder. Our original my-project app has become the default project for the monorepo, and is now a peer with the just-added my-app , located under the apps folder. We'll cover default projects below. error Warning The conversion of a standard mode structure to monorepo only works for projects that have followed the canonical Nest project structure. Specifically, during conversion, the schematic attempts to relocate the src and test folders in a project folder beneath the apps folder in the root. If a project does not use this structure, the conversion will fail or produce unreliable results.","title":"Monorepo \u6a21\u5f0f"},{"location":"cli/workspaces/#_3","text":"A monorepo uses the concept of a workspace to manage its member entities. Workspaces are composed of projects . A project may be either: an application : a full Nest application including a main.ts file to bootstrap the application. Aside from compile and build considerations, an application-type project within a workspace is functionally identical to an application within a standard mode structure. a library : a library is a way of packaging a general purpose set of features (modules, providers, controllers, etc.) that can be used within other projects. A library cannot run on its own, and has no main.ts file. Read more about libraries here . All workspaces have a default project (which should be an application-type project). This is defined by the top-level \"root\" property in the nest-cli.json file, which points at the root of the default project (see CLI properties below for more details). Usually, this is the standard mode application you started with, and later converted to a monorepo using nest generate app . When you follow these steps, this property is populated automatically. Default projects are used by nest commands like nest build and nest start when a project name is not supplied. For example, in the above monorepo structure, running $ nest start will start up the my-project app. To start my-app , we'd use: $ nest start my-app","title":"\u5de5\u4f5c\u533a\u9879\u76ee"},{"location":"cli/workspaces/#_4","text":"Application-type projects, or what we might informally refer to as just \"applications\", are complete Nest applications that you can run and deploy. You generate an application-type project with nest generate app . This command automatically generates a project skeleton, including the standard src and test folders from the typescript starter . Unlike standard mode, an application project in a monorepo does not have any of the package dependency ( package.json ) or other project configuration artifacts like .prettierrc and .eslintrc.js . Instead, the monorepo-wide dependencies and config files are used. However, the schematic does generate a project-specific tsconfig.app.json file in the root folder of the project. This config file automatically sets appropriate build options, including setting the compilation output folder properly. The file extends the top-level (monorepo) tsconfig.json file, so you can manage global settings monorepo-wide, but override them if needed at the project level.","title":"\u5e94\u7528\u7a0b\u5e8f"},{"location":"cli/workspaces/#_5","text":"As mentioned, library-type projects, or simply \"libraries\", are packages of Nest components that need to be composed into applications in order to run. You generate a library-type project with nest generate library . Deciding what belongs in a library is an architectural design decision. We discuss libraries in depth in the libraries chapter.","title":"\u5e93"},{"location":"cli/workspaces/#cli","text":"Nest keeps the metadata needed to organize, build and deploy both standard and monorepo structured projects in the nest-cli.json file. Nest automatically adds to and updates this file as you add projects, so you usually do not have to think about it or edit its contents. However, there are some settings you may want to change manually, so it's helpful to have an overview understanding of the file. After running the steps above to create a monorepo, our nest-cli.json file looks like this: { \"collection\" : \"@nestjs/schematics\" , \"sourceRoot\" : \"apps/my-project/src\" , \"monorepo\" : true , \"root\" : \"apps/my-project\" , \"compilerOptions\" : { \"webpack\" : true , \"tsConfigPath\" : \"apps/my-project/tsconfig.app.json\" }, \"projects\" : { \"my-project\" : { \"type\" : \"application\" , \"root\" : \"apps/my-project\" , \"entryFile\" : \"main\" , \"sourceRoot\" : \"apps/my-project/src\" , \"compilerOptions\" : { \"tsConfigPath\" : \"apps/my-project/tsconfig.app.json\" } }, \"my-app\" : { \"type\" : \"application\" , \"root\" : \"apps/my-app\" , \"entryFile\" : \"main\" , \"sourceRoot\" : \"apps/my-app/src\" , \"compilerOptions\" : { \"tsConfigPath\" : \"apps/my-app/tsconfig.app.json\" } } } } The file is divided into sections: a global section with top-level properties controlling standard and monorepo-wide settings a top level property ( \"projects\" ) with metadata about each project. This section is present only for monorepo-mode structures. The top-level properties are as follows: \"collection\" : points at the collection of schematics used to generate components; you generally should not change this value \"sourceRoot\" : points at the root of the source code for the single project in standard mode structures, or the default project in monorepo mode structures \"compilerOptions\" : a map with keys specifying compiler options and values specifying the option setting; see details below \"generateOptions\" : a map with keys specifying global generate options and values specifying the option setting; see details below \"monorepo\" : (monorepo only) for a monorepo mode structure, this value is always true \"root\" : (monorepo only) points at the project root of the default project","title":"CLI \u5c5e\u6027"},{"location":"cli/workspaces/#_6","text":"These properties specify the compiler to use as well as various options that affect any compilation step, whether as part of nest build or nest start , and regardless of the compiler, whether tsc or webpack. Property Name Property Value Type Description webpack boolean If true , use webpack compiler . If false or not present, use tsc . In monorepo mode, the default is true (use webpack), in standard mode, the default is false (use tsc ). See below for details. | | tsConfigPath | string | ( monorepo only ) Points at the file containing the tsconfig.json settings that will be used when nest build or nest start is called without a project option (e.g., when the default project is built or started). | | webpackConfigPath | string | Points at a webpack options file. If not specified, Nest looks for the file webpack.config.js . See below for more details. | | deleteOutDir | boolean | If true , whenever the compiler is invoked, it will first remove the compilation output directory (as configured in tsconfig.json , where the default is ./dist ). | | assets | array | Enables automatically distributing non-TypeScript assets whenever a compilation step begins (asset distribution does not happen on incremental compiles in --watch mode). See below for details. | | watchAssets | boolean | If true , run in watch-mode, watching all non-TypeScript assets. (For more fine-grained control of the assets to watch, see Assets section below). |","title":"\u5168\u5c40\u7684\u7f16\u8bd1\u5668\u9009\u9879"},{"location":"cli/workspaces/#_7","text":"These properties specify the default generate options to be used by the nest generate command. Property Name Property Value Type Description spec boolean or object If the value is boolean, a value of true enables spec generation by default and a value of false disables it. A flag passed on the CLI command line overrides this setting, as does a project-specific generateOptions setting (more below). If the value is an object, each key represents a schematic name, and the boolean value determines whether the default spec generation is enabled / disabled for that specific schematic. | The following example uses a boolean value to specify that spec file generation should be disabled by default for all projects: { \"generateOptions\" : { \"spec\" : false }, ... } In the following example, spec file generation is disabled only for service schematics (e.g., nest generate service... ): { \"generateOptions\" : { \"spec\" : { \"service\" : false } }, ... } warning Warning When specifying the spec as an object, the key for the generation schematic does not currently support automatic alias handling. This means that specifying a key as for example service: false and trying to generate a service via the alias s , the spec would still be generated. To make sure both the normal schematic name and the alias work as intended, specify both the normal command name as well as the alias, as seen below. { \"generateOptions\" : { \"spec\" : { \"service\" : false , \"s\" : false } }, ... }","title":"\u5168\u5c40\u751f\u6210\u9009\u9879"},{"location":"cli/workspaces/#_8","text":"In addition to providing global generate options, you may also specify project-specific generate options. The project specific generate options follow the exact same format as the global generate options, but are specified directly on each project. Project-specific generate options override global generate options. { \"projects\" : { \"cats-project\" : { \"generateOptions\" : { \"spec\" : { \"service\" : false } }, ... } }, ... } warning Warning The order of precedence for generate options is as follows. Options specified on the CLI command line take precedence over project-specific options. Project-specific options override global options.","title":"\u5177\u4f53\u9879\u76ee\u751f\u6210\u9009\u9879"},{"location":"cli/workspaces/#_9","text":"The reason for the different default compilers is that for larger projects (e.g., more typical in a monorepo) webpack can have significant advantages in build times and in producing a single file bundling all project components together. If you wish to generate individual files, set \"webpack\" to false , which will cause the build process to use tsc .","title":"\u6307\u5b9a\u7f16\u8bd1\u5668"},{"location":"cli/workspaces/#webpack","text":"The webpack options file can contain standard webpack configuration options . For example, to tell webpack to bundle node_modules (which are excluded by default), add the following to webpack.config.js : module . exports = { externals : [], }; Since the webpack config file is a JavaScript file, you can even expose a function that takes default options and returns a modified object: module . exports = function ( options ) { return { ... options , externals : [], }; };","title":"Webpack \u53ef\u9009\u7684"},{"location":"cli/workspaces/#_10","text":"TypeScript compilation automatically distributes compiler output ( .js and .d.ts files) to the specified output directory. It can also be convenient to distribute non-TypeScript files, such as .graphql files, images , .html files and other assets. This allows you to treat nest build (and any initial compilation step) as a lightweight development build step, where you may be editing non-TypeScript files and iteratively compiling and testing. The assets should be located in the src folder otherwise they will not be copied. The value of the assets key should be an array of elements specifying the files to be distributed. The elements can be simple strings with glob -like file specs, for example: \"assets\" : [ \"**/*.graphql\" ], \"watchAssets\" : true , For finer control, the elements can be objects with the following keys: \"include\" : glob -like file specifications for the assets to be distributed \"exclude\" : glob -like file specifications for assets to be excluded from the include list \"outDir\" : a string specifying the path (relative to the root folder) where the assets should be distributed. Defaults to the same output directory configured for compiler output. \"watchAssets\" : boolean; if true , run in watch mode watching specified assets For example: \"assets\" : [ { \"include\" : \"**/*.graphql\" , \"exclude\" : \"**/omitted.graphql\" , \"watchAssets\" : true }, ] warning Warning Setting watchAssets in a top-level compilerOptions property overrides any watchAssets settings within the assets property.","title":"\u8d44\u4ea7"},{"location":"cli/workspaces/#_11","text":"\u8fd9\u4e2a\u5143\u7d20\u53ea\u5b58\u5728\u4e8e\u5355\u6a21\u7ed3\u6784\u4e2d\u3002 \u4f60\u901a\u5e38\u4e0d\u5e94\u8be5\u7f16\u8f91\u8fd9\u4e9b\u5c5e\u6027\uff0c\u56e0\u4e3a\u5b83\u4eec\u88ab Nest \u7528\u6765\u5728 monorepo \u4e2d\u5b9a\u4f4d\u9879\u76ee\u53ca\u5176\u914d\u7f6e\u9009\u9879\u3002","title":"\u9879\u76ee\u5c5e\u6027"},{"location":"discover/who-uses/","text":"Who is using Nest? \u00b6 We are proudly helping various companies building their products at scale. If you are using Nest and would you like to be listed here, see this thread . We are willing to put your logo here! Companies \u00b6 According to our knowledge, all the following companies have built awesome projects on top of our framework:","title":"\u8c01\u5728\u4f7f\u7528Nest?"},{"location":"discover/who-uses/#who-is-using-nest","text":"We are proudly helping various companies building their products at scale. If you are using Nest and would you like to be listed here, see this thread . We are willing to put your logo here!","title":"Who is using Nest?"},{"location":"discover/who-uses/#companies","text":"According to our knowledge, all the following companies have built awesome projects on top of our framework:","title":"Companies"},{"location":"faq/errors/","text":"\u5e38\u89c1\u7684\u9519\u8bef \u00b6 \u5728\u4f7f\u7528 NestJS \u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u80fd\u4f1a\u5728\u5b66\u4e60\u6846\u67b6\u65f6\u9047\u5230\u5404\u79cd\u9519\u8bef\u3002 \"Cannot resolve dependency\" error \u00b6 \u53ef\u80fd\u6700\u5e38\u89c1\u7684\u9519\u8bef\u6d88\u606f\u662f\u5173\u4e8e Nest \u65e0\u6cd5\u89e3\u6790\u63d0\u4f9b\u5668\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 \u9519\u8bef\u4fe1\u606f\u901a\u5e38\u662f\u8fd9\u6837\u7684: Nest can ' t resolve dependencies of the <provider> ( ? ) . Please make sure that the argument <unknown_token> at index [ <index> ] is available in the <module> context. Potential solutions: - If <unknown_token> is a provider, is it part of the current <module>? - If <unknown_token> is exported from a separate @Module, is that module imported within <module>? @Module ({ imports: [ /* the Module containing <unknown_token> */ ] }) \u8fd9\u4e2a\u9519\u8bef\u6700\u5e38\u89c1\u7684\u7f6a\u9b41\u7978\u9996\u662f\u5728\u6a21\u5757\u7684 providers \u6570\u7ec4\u4e2d\u6ca1\u6709\u5305\u542b provider \u3002 \u8bf7\u786e\u4fdd\u8be5\u63d0\u4f9b\u5668\u786e\u5b9e\u5728 providers \u6570\u7ec4\u4e2d\uff0c\u5e76\u9075\u5faa \u6807\u51c6\u7684 NestJS \u63d0\u4f9b\u5668\u5b9e\u8df5 \u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5e38\u89c1\u7684\u9677\u9631\u3002 \u4e00\u79cd\u662f\u5c06\u63d0\u4f9b\u5668\u653e\u5728\u4e00\u4e2a imports \u6570\u7ec4\u4e2d\u3002 \u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8be5\u9519\u8bef\u5c06\u5305\u542b\u63d0\u4f9b\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u800c <module> \u5e94\u8be5\u5305\u542b\u5728\u5176\u4e2d\u3002 \u5982\u679c\u4f60\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u9047\u5230\u8fd9\u4e2a\u9519\u8bef\uff0c\u8bf7\u67e5\u770b\u9519\u8bef\u6d88\u606f\u4e2d\u63d0\u5230\u7684\u6a21\u5757\uff0c\u5e76\u67e5\u770b\u5b83\u7684 provider \u3002 \u5bf9\u4e8e providers \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u63d0\u4f9b\u5668\uff0c\u786e\u4fdd\u6a21\u5757\u80fd\u591f\u8bbf\u95ee\u6240\u6709\u7684\u4f9d\u8d56\u9879\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u201c\u63d0\u4f9b\u5668\u201d\u4f1a\u5728\u201c\u7279\u6027\u6a21\u5757\u201d\u548c\u201c\u6839\u6a21\u5757\u201d\u4e2d\u91cd\u590d\uff0c\u8fd9\u610f\u5473\u7740 Nest \u4f1a\u5c1d\u8bd5\u4e24\u6b21\u5b9e\u4f8b\u5316\u8be5\u63d0\u4f9b\u5668\u3002 \u66f4\u6709\u53ef\u80fd\u7684\u662f\uff0c\u5305\u542b\u88ab\u590d\u5236\u7684 provider \u7684\u6a21\u5757\u5e94\u8be5\u88ab\u6dfb\u52a0\u5230\u201c\u6839\u6a21\u5757\u201d\u7684 imports \u6570\u7ec4\u4e2d\u3002 \u5982\u679c\u4e0a\u9762\u7684 unknown_token \u662f\u5b57\u7b26\u4e32 dependency \uff0c\u4f60\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u5faa\u73af\u6587\u4ef6\u5bfc\u5165\u3002 \u8fd9\u4e0e\u4e0b\u9762\u7684 \u5706\u5f62\u4f9d\u8d56 \u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f\u8ba9\u63d0\u4f9b\u7a0b\u5e8f\u5728\u5b83\u4eec\u7684\u6784\u9020\u51fd\u6570\u4e2d\u76f8\u4e92\u4f9d\u8d56\uff0c\u800c\u662f\u610f\u5473\u7740\u4e24\u4e2a\u6587\u4ef6\u6700\u7ec8\u4f1a\u4e92\u76f8\u5bfc\u5165\u3002 \u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u6a21\u5757\u6587\u4ef6\u58f0\u660e\u4ee4\u724c\u5e76\u5bfc\u5165\u63d0\u4f9b\u5668\uff0c\u63d0\u4f9b\u5668\u4ece\u6a21\u5757\u6587\u4ef6\u5bfc\u5165\u4ee4\u724c\u5e38\u91cf\u3002 \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528 barrel \u6587\u4ef6\uff0c\u8bf7\u786e\u4fdd\u60a8\u7684 barrel \u5bfc\u5165\u4e5f\u4e0d\u4f1a\u6700\u7ec8\u521b\u5efa\u8fd9\u4e9b\u5faa\u73af\u5bfc\u5165\u3002 \"Circular dependency\" error \u00b6 \u5076\u5c14\u4f60\u4f1a\u53d1\u73b0\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5f88\u96be\u907f\u514d circular dependencies \u3002 \u60a8\u9700\u8981\u91c7\u53d6\u4e00\u4e9b\u6b65\u9aa4\u6765\u5e2e\u52a9 Nest \u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u7531\u5faa\u73af\u4f9d\u8d56\u5f15\u8d77\u7684\u9519\u8bef\u5982\u4e0b\u6240\u793a: Nest cannot create the <module> instance. The module at index [ <index> ] of the <module> \"imports\" array is undefined. Potential causes: - A circular dependency between modules. Use forwardRef () to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency - The module at index [ <index> ] is of type \"undefined\" . Check your import statements and the type of the module. Scope [ <module_import_chain> ] # example chain AppModule -> FooModule \u5faa\u73af\u4f9d\u8d56\u53ef\u80fd\u4ea7\u751f\u4e8e\u4e24\u4e2a\u76f8\u4e92\u4f9d\u8d56\u7684\u63d0\u4f9b\u8005\uff0c\u6216\u8005 typescript \u6587\u4ef6\u5f7c\u6b64\u4f9d\u8d56\u4e8e\u5e38\u91cf\uff0c\u6bd4\u5982\u4ece\u6a21\u5757\u6587\u4ef6\u5bfc\u51fa\u5e38\u91cf\uff0c\u7136\u540e\u5bfc\u5165\u5230\u670d\u52a1\u6587\u4ef6\u4e2d\u3002 \u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u4e3a\u5e38\u91cf\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u3002 \u5728\u524d\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u9075\u5faa\u5faa\u73af\u4f9d\u8d56\u7684\u6307\u5357\uff0c\u5e76\u786e\u4fdd\u6a21\u5757 \u548c \u63d0\u4f9b\u5546\u90fd\u88ab\u6807\u8bb0\u4e3a forwardRef \u3002 \u8c03\u8bd5\u4f9d\u8d56\u6027\u9519\u8bef \u00b6 \u9664\u4e86\u624b\u52a8\u9a8c\u8bc1\u4f60\u7684\u4f9d\u8d56\u9879\u662f\u5426\u6b63\u786e\u4e4b\u5916\uff0c\u5728 Nest 8.1.0 \u7248\u672c\u4e2d\uff0c \u4f60\u53ef\u4ee5\u5c06\u73af\u5883\u53d8\u91cf NEST_DEBUG \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u89e3\u6790\u4e3a true \u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u5728 Nest \u89e3\u6790\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u4f9d\u8d56\u9879\u65f6\u83b7\u5f97\u989d\u5916\u7684\u65e5\u5fd7\u4fe1\u606f\u3002 \u5728\u4e0a\u56fe\u4e2d\uff0c\u9ec4\u8272\u7684\u5b57\u7b26\u4e32\u662f\u88ab\u6ce8\u5165\u4f9d\u8d56\u7684\u5bbf\u4e3b\u7c7b\uff0c\u84dd\u8272\u7684\u5b57\u7b26\u4e32\u662f\u88ab\u6ce8\u5165\u4f9d\u8d56\u7684\u540d\u79f0\uff0c\u6216\u8005\u5b83\u7684\u6ce8\u5165\u4ee4\u724c\uff0c\u7d2b\u8272\u7684\u5b57\u7b26\u4e32\u662f\u6b63\u5728\u641c\u7d22\u4f9d\u8d56\u7684\u6a21\u5757\u3002 \u4f7f\u7528\u8fd9\u4e2a\uff0c\u4f60\u901a\u5e38\u53ef\u4ee5\u8ffd\u8e2a\u5230\u4f9d\u8d56\u89e3\u6790\u53d1\u751f\u4e86\u4ec0\u4e48\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u4f60\u4f1a\u9047\u5230\u4f9d\u8d56\u6ce8\u5165\u95ee\u9898\u3002","title":"\u5e38\u89c1\u7684\u9519\u8bef"},{"location":"faq/errors/#_1","text":"\u5728\u4f7f\u7528 NestJS \u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u60a8\u53ef\u80fd\u4f1a\u5728\u5b66\u4e60\u6846\u67b6\u65f6\u9047\u5230\u5404\u79cd\u9519\u8bef\u3002","title":"\u5e38\u89c1\u7684\u9519\u8bef"},{"location":"faq/errors/#cannot-resolve-dependency-error","text":"\u53ef\u80fd\u6700\u5e38\u89c1\u7684\u9519\u8bef\u6d88\u606f\u662f\u5173\u4e8e Nest \u65e0\u6cd5\u89e3\u6790\u63d0\u4f9b\u5668\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 \u9519\u8bef\u4fe1\u606f\u901a\u5e38\u662f\u8fd9\u6837\u7684: Nest can ' t resolve dependencies of the <provider> ( ? ) . Please make sure that the argument <unknown_token> at index [ <index> ] is available in the <module> context. Potential solutions: - If <unknown_token> is a provider, is it part of the current <module>? - If <unknown_token> is exported from a separate @Module, is that module imported within <module>? @Module ({ imports: [ /* the Module containing <unknown_token> */ ] }) \u8fd9\u4e2a\u9519\u8bef\u6700\u5e38\u89c1\u7684\u7f6a\u9b41\u7978\u9996\u662f\u5728\u6a21\u5757\u7684 providers \u6570\u7ec4\u4e2d\u6ca1\u6709\u5305\u542b provider \u3002 \u8bf7\u786e\u4fdd\u8be5\u63d0\u4f9b\u5668\u786e\u5b9e\u5728 providers \u6570\u7ec4\u4e2d\uff0c\u5e76\u9075\u5faa \u6807\u51c6\u7684 NestJS \u63d0\u4f9b\u5668\u5b9e\u8df5 \u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5e38\u89c1\u7684\u9677\u9631\u3002 \u4e00\u79cd\u662f\u5c06\u63d0\u4f9b\u5668\u653e\u5728\u4e00\u4e2a imports \u6570\u7ec4\u4e2d\u3002 \u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8be5\u9519\u8bef\u5c06\u5305\u542b\u63d0\u4f9b\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u800c <module> \u5e94\u8be5\u5305\u542b\u5728\u5176\u4e2d\u3002 \u5982\u679c\u4f60\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u9047\u5230\u8fd9\u4e2a\u9519\u8bef\uff0c\u8bf7\u67e5\u770b\u9519\u8bef\u6d88\u606f\u4e2d\u63d0\u5230\u7684\u6a21\u5757\uff0c\u5e76\u67e5\u770b\u5b83\u7684 provider \u3002 \u5bf9\u4e8e providers \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u63d0\u4f9b\u5668\uff0c\u786e\u4fdd\u6a21\u5757\u80fd\u591f\u8bbf\u95ee\u6240\u6709\u7684\u4f9d\u8d56\u9879\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u201c\u63d0\u4f9b\u5668\u201d\u4f1a\u5728\u201c\u7279\u6027\u6a21\u5757\u201d\u548c\u201c\u6839\u6a21\u5757\u201d\u4e2d\u91cd\u590d\uff0c\u8fd9\u610f\u5473\u7740 Nest \u4f1a\u5c1d\u8bd5\u4e24\u6b21\u5b9e\u4f8b\u5316\u8be5\u63d0\u4f9b\u5668\u3002 \u66f4\u6709\u53ef\u80fd\u7684\u662f\uff0c\u5305\u542b\u88ab\u590d\u5236\u7684 provider \u7684\u6a21\u5757\u5e94\u8be5\u88ab\u6dfb\u52a0\u5230\u201c\u6839\u6a21\u5757\u201d\u7684 imports \u6570\u7ec4\u4e2d\u3002 \u5982\u679c\u4e0a\u9762\u7684 unknown_token \u662f\u5b57\u7b26\u4e32 dependency \uff0c\u4f60\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u5faa\u73af\u6587\u4ef6\u5bfc\u5165\u3002 \u8fd9\u4e0e\u4e0b\u9762\u7684 \u5706\u5f62\u4f9d\u8d56 \u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f\u8ba9\u63d0\u4f9b\u7a0b\u5e8f\u5728\u5b83\u4eec\u7684\u6784\u9020\u51fd\u6570\u4e2d\u76f8\u4e92\u4f9d\u8d56\uff0c\u800c\u662f\u610f\u5473\u7740\u4e24\u4e2a\u6587\u4ef6\u6700\u7ec8\u4f1a\u4e92\u76f8\u5bfc\u5165\u3002 \u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u6a21\u5757\u6587\u4ef6\u58f0\u660e\u4ee4\u724c\u5e76\u5bfc\u5165\u63d0\u4f9b\u5668\uff0c\u63d0\u4f9b\u5668\u4ece\u6a21\u5757\u6587\u4ef6\u5bfc\u5165\u4ee4\u724c\u5e38\u91cf\u3002 \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528 barrel \u6587\u4ef6\uff0c\u8bf7\u786e\u4fdd\u60a8\u7684 barrel \u5bfc\u5165\u4e5f\u4e0d\u4f1a\u6700\u7ec8\u521b\u5efa\u8fd9\u4e9b\u5faa\u73af\u5bfc\u5165\u3002","title":"\"Cannot resolve dependency\" error"},{"location":"faq/errors/#circular-dependency-error","text":"\u5076\u5c14\u4f60\u4f1a\u53d1\u73b0\u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5f88\u96be\u907f\u514d circular dependencies \u3002 \u60a8\u9700\u8981\u91c7\u53d6\u4e00\u4e9b\u6b65\u9aa4\u6765\u5e2e\u52a9 Nest \u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u7531\u5faa\u73af\u4f9d\u8d56\u5f15\u8d77\u7684\u9519\u8bef\u5982\u4e0b\u6240\u793a: Nest cannot create the <module> instance. The module at index [ <index> ] of the <module> \"imports\" array is undefined. Potential causes: - A circular dependency between modules. Use forwardRef () to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency - The module at index [ <index> ] is of type \"undefined\" . Check your import statements and the type of the module. Scope [ <module_import_chain> ] # example chain AppModule -> FooModule \u5faa\u73af\u4f9d\u8d56\u53ef\u80fd\u4ea7\u751f\u4e8e\u4e24\u4e2a\u76f8\u4e92\u4f9d\u8d56\u7684\u63d0\u4f9b\u8005\uff0c\u6216\u8005 typescript \u6587\u4ef6\u5f7c\u6b64\u4f9d\u8d56\u4e8e\u5e38\u91cf\uff0c\u6bd4\u5982\u4ece\u6a21\u5757\u6587\u4ef6\u5bfc\u51fa\u5e38\u91cf\uff0c\u7136\u540e\u5bfc\u5165\u5230\u670d\u52a1\u6587\u4ef6\u4e2d\u3002 \u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u4e3a\u5e38\u91cf\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u3002 \u5728\u524d\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bf7\u9075\u5faa\u5faa\u73af\u4f9d\u8d56\u7684\u6307\u5357\uff0c\u5e76\u786e\u4fdd\u6a21\u5757 \u548c \u63d0\u4f9b\u5546\u90fd\u88ab\u6807\u8bb0\u4e3a forwardRef \u3002","title":"\"Circular dependency\" error"},{"location":"faq/errors/#_2","text":"\u9664\u4e86\u624b\u52a8\u9a8c\u8bc1\u4f60\u7684\u4f9d\u8d56\u9879\u662f\u5426\u6b63\u786e\u4e4b\u5916\uff0c\u5728 Nest 8.1.0 \u7248\u672c\u4e2d\uff0c \u4f60\u53ef\u4ee5\u5c06\u73af\u5883\u53d8\u91cf NEST_DEBUG \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u89e3\u6790\u4e3a true \u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u5728 Nest \u89e3\u6790\u5e94\u7528\u7a0b\u5e8f\u7684\u6240\u6709\u4f9d\u8d56\u9879\u65f6\u83b7\u5f97\u989d\u5916\u7684\u65e5\u5fd7\u4fe1\u606f\u3002 \u5728\u4e0a\u56fe\u4e2d\uff0c\u9ec4\u8272\u7684\u5b57\u7b26\u4e32\u662f\u88ab\u6ce8\u5165\u4f9d\u8d56\u7684\u5bbf\u4e3b\u7c7b\uff0c\u84dd\u8272\u7684\u5b57\u7b26\u4e32\u662f\u88ab\u6ce8\u5165\u4f9d\u8d56\u7684\u540d\u79f0\uff0c\u6216\u8005\u5b83\u7684\u6ce8\u5165\u4ee4\u724c\uff0c\u7d2b\u8272\u7684\u5b57\u7b26\u4e32\u662f\u6b63\u5728\u641c\u7d22\u4f9d\u8d56\u7684\u6a21\u5757\u3002 \u4f7f\u7528\u8fd9\u4e2a\uff0c\u4f60\u901a\u5e38\u53ef\u4ee5\u8ffd\u8e2a\u5230\u4f9d\u8d56\u89e3\u6790\u53d1\u751f\u4e86\u4ec0\u4e48\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u4f60\u4f1a\u9047\u5230\u4f9d\u8d56\u6ce8\u5165\u95ee\u9898\u3002","title":"\u8c03\u8bd5\u4f9d\u8d56\u6027\u9519\u8bef"},{"location":"faq/global-prefix/","text":"\u5168\u5c40\u524d\u7f00 \u00b6 \u4f7f\u7528 INestApplication \u5b9e\u4f8b\u7684 setGlobalPrefix() \u65b9\u6cd5\u4e3a HTTP \u5e94\u7528\u4e2d\u6ce8\u518c\u7684 \u6bcf\u4e2a\u8def\u7531 \u8bbe\u7f6e\u524d\u7f00\u3002 const app = await NestFactory . create ( AppModule ); app . setGlobalPrefix ( 'v1' ); \u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784\u4ece\u5168\u5c40\u524d\u7f00\u4e2d\u6392\u9664\u8def\u7531: app . setGlobalPrefix ( 'v1' , { exclude : [{ path : 'health' , method : RequestMethod.GET }], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u5c06 route \u6307\u5b9a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32(\u5b83\u5c06\u5e94\u7528\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u65b9\u6cd5): app . setGlobalPrefix ( 'v1' , { exclude : [ 'cats' ] });","title":"\u5168\u5c40\u8def\u5f84\u524d\u7f00"},{"location":"faq/global-prefix/#_1","text":"\u4f7f\u7528 INestApplication \u5b9e\u4f8b\u7684 setGlobalPrefix() \u65b9\u6cd5\u4e3a HTTP \u5e94\u7528\u4e2d\u6ce8\u518c\u7684 \u6bcf\u4e2a\u8def\u7531 \u8bbe\u7f6e\u524d\u7f00\u3002 const app = await NestFactory . create ( AppModule ); app . setGlobalPrefix ( 'v1' ); \u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784\u4ece\u5168\u5c40\u524d\u7f00\u4e2d\u6392\u9664\u8def\u7531: app . setGlobalPrefix ( 'v1' , { exclude : [{ path : 'health' , method : RequestMethod.GET }], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u5c06 route \u6307\u5b9a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32(\u5b83\u5c06\u5e94\u7528\u4e8e\u6bcf\u4e2a\u8bf7\u6c42\u65b9\u6cd5): app . setGlobalPrefix ( 'v1' , { exclude : [ 'cats' ] });","title":"\u5168\u5c40\u524d\u7f00"},{"location":"faq/http-adapter/","text":"HTTP adapter \u00b6 \u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5e95\u5c42 HTTP \u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u5728 Nest \u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5916\u90e8\u8bbf\u95ee\u3002 \u6bcf\u4e2a\u672c\u5730(\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684)HTTP \u670d\u52a1\u5668/\u5e93(\u4f8b\u5982 Express \u548c fasttify)\u5b9e\u4f8b\u90fd\u5305\u88c5\u5728\u4e00\u4e2a \u9002\u914d\u5668 \u4e2d\u3002 \u9002\u914d\u5668\u88ab\u6ce8\u518c\u4e3a\u4e00\u4e2a\u5168\u5c40\u53ef\u7528\u7684\u63d0\u4f9b\u8005\uff0c\u53ef\u4ee5\u4ece\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u68c0\u7d22\u5b83\uff0c\u4e5f\u53ef\u4ee5\u6ce8\u5165\u5230\u5176\u4ed6\u63d0\u4f9b\u8005\u4e2d\u3002 \u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u7b56\u7565 \u00b6 \u8981\u4ece\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u5916\u90e8\u83b7\u53d6\u5bf9 HttpAdapter \u7684\u5f15\u7528\uff0c\u8bf7\u8c03\u7528 getHttpAdapter() \u65b9\u6cd5\u3002 @ @filename () const app = await NestFactory . create ( AppModule ); const httpAdapter = app . getHttpAdapter (); \u8bed\u5883\u7b56\u7565 \u00b6 \u8981\u4ece\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u83b7\u53d6\u5bf9 HttpAdapterHost \u7684\u5f15\u7528\uff0c\u4f7f\u7528\u4e0e\u4efb\u4f55\u5176\u4ed6\u73b0\u6709\u63d0\u4f9b\u5546\u76f8\u540c\u7684\u6280\u672f(\u4f8b\u5982\uff0c\u4f7f\u7528\u6784\u9020\u51fd\u6570\u6ce8\u5165)\u6ce8\u5165\u5b83\u3002 @ @filename () export class CatsService { constructor ( private adapterHost : HttpAdapterHost ) {} } @ @switch @Dependencies ( HttpAdapterHost ) export class CatsService { constructor ( adapterHost ) { this . adapterHost = adapterHost ; } } info Hint The HttpAdapterHost is imported from the @nestjs/core package. HttpAdapterHost \u4e0d\u662f\u4e00\u4e2a\u5b9e\u9645\u7684 HttpAdapter \u3002 \u8981\u83b7\u5f97\u5b9e\u9645\u7684 HttpAdapter \u5b9e\u4f8b\uff0c\u53ea\u9700\u8bbf\u95ee HttpAdapter \u5c5e\u6027\u3002 const adapterHost = app . get ( HttpAdapterHost ); const httpAdapter = adapterHost . httpAdapter ; httpAdapter \u662f\u5e95\u5c42\u6846\u67b6\u4f7f\u7528\u7684 HTTP \u9002\u914d\u5668\u7684\u5b9e\u9645\u5b9e\u4f8b\u3002 \u5b83\u662f ExpressAdapter \u6216 FastifyAdapter \u7684\u4e00\u4e2a\u5b9e\u4f8b(\u4e24\u4e2a\u7c7b\u90fd\u6269\u5c55\u4e86 AbstractHttpAdapter )\u3002 \u9002\u914d\u5668\u5bf9\u8c61\u516c\u5f00\u4e86\u51e0\u4e2a\u4e0e HTTP \u670d\u52a1\u5668\u4ea4\u4e92\u7684\u6709\u7528\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u76f4\u63a5\u8bbf\u95ee\u5e93\u5b9e\u4f8b(\u4f8b\u5982 Express \u5b9e\u4f8b)\uff0c\u53ef\u4ee5\u8c03\u7528 getInstance() \u65b9\u6cd5\u3002 const instance = httpAdapter . getInstance ();","title":"HTTP \u9002\u914d\u5668"},{"location":"faq/http-adapter/#http-adapter","text":"\u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5e95\u5c42 HTTP \u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u5728 Nest \u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5916\u90e8\u8bbf\u95ee\u3002 \u6bcf\u4e2a\u672c\u5730(\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684)HTTP \u670d\u52a1\u5668/\u5e93(\u4f8b\u5982 Express \u548c fasttify)\u5b9e\u4f8b\u90fd\u5305\u88c5\u5728\u4e00\u4e2a \u9002\u914d\u5668 \u4e2d\u3002 \u9002\u914d\u5668\u88ab\u6ce8\u518c\u4e3a\u4e00\u4e2a\u5168\u5c40\u53ef\u7528\u7684\u63d0\u4f9b\u8005\uff0c\u53ef\u4ee5\u4ece\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u68c0\u7d22\u5b83\uff0c\u4e5f\u53ef\u4ee5\u6ce8\u5165\u5230\u5176\u4ed6\u63d0\u4f9b\u8005\u4e2d\u3002","title":"HTTP adapter"},{"location":"faq/http-adapter/#_1","text":"\u8981\u4ece\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u5916\u90e8\u83b7\u53d6\u5bf9 HttpAdapter \u7684\u5f15\u7528\uff0c\u8bf7\u8c03\u7528 getHttpAdapter() \u65b9\u6cd5\u3002 @ @filename () const app = await NestFactory . create ( AppModule ); const httpAdapter = app . getHttpAdapter ();","title":"\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u7b56\u7565"},{"location":"faq/http-adapter/#_2","text":"\u8981\u4ece\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u83b7\u53d6\u5bf9 HttpAdapterHost \u7684\u5f15\u7528\uff0c\u4f7f\u7528\u4e0e\u4efb\u4f55\u5176\u4ed6\u73b0\u6709\u63d0\u4f9b\u5546\u76f8\u540c\u7684\u6280\u672f(\u4f8b\u5982\uff0c\u4f7f\u7528\u6784\u9020\u51fd\u6570\u6ce8\u5165)\u6ce8\u5165\u5b83\u3002 @ @filename () export class CatsService { constructor ( private adapterHost : HttpAdapterHost ) {} } @ @switch @Dependencies ( HttpAdapterHost ) export class CatsService { constructor ( adapterHost ) { this . adapterHost = adapterHost ; } } info Hint The HttpAdapterHost is imported from the @nestjs/core package. HttpAdapterHost \u4e0d\u662f\u4e00\u4e2a\u5b9e\u9645\u7684 HttpAdapter \u3002 \u8981\u83b7\u5f97\u5b9e\u9645\u7684 HttpAdapter \u5b9e\u4f8b\uff0c\u53ea\u9700\u8bbf\u95ee HttpAdapter \u5c5e\u6027\u3002 const adapterHost = app . get ( HttpAdapterHost ); const httpAdapter = adapterHost . httpAdapter ; httpAdapter \u662f\u5e95\u5c42\u6846\u67b6\u4f7f\u7528\u7684 HTTP \u9002\u914d\u5668\u7684\u5b9e\u9645\u5b9e\u4f8b\u3002 \u5b83\u662f ExpressAdapter \u6216 FastifyAdapter \u7684\u4e00\u4e2a\u5b9e\u4f8b(\u4e24\u4e2a\u7c7b\u90fd\u6269\u5c55\u4e86 AbstractHttpAdapter )\u3002 \u9002\u914d\u5668\u5bf9\u8c61\u516c\u5f00\u4e86\u51e0\u4e2a\u4e0e HTTP \u670d\u52a1\u5668\u4ea4\u4e92\u7684\u6709\u7528\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u76f4\u63a5\u8bbf\u95ee\u5e93\u5b9e\u4f8b(\u4f8b\u5982 Express \u5b9e\u4f8b)\uff0c\u53ef\u4ee5\u8c03\u7528 getInstance() \u65b9\u6cd5\u3002 const instance = httpAdapter . getInstance ();","title":"\u8bed\u5883\u7b56\u7565"},{"location":"faq/hybrid-application/","text":"\u6df7\u5408\u5e94\u7528\u7a0b\u5e8f \u00b6 \u6df7\u5408\u5e94\u7528\u7a0b\u5e8f\u65e2\u4fa6\u542c HTTP \u8bf7\u6c42\uff0c\u53c8\u5229\u7528\u8fde\u63a5\u7684\u5fae\u670d\u52a1\u3002 INestApplication \u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7 connectMicroservice() \u65b9\u6cd5\u8fde\u63a5\u5230 INestMicroservice \u5b9e\u4f8b\u3002 const app = await NestFactory . create ( AppModule ); const microservice = app . connectMicroservice ({ transport : Transport.TCP , }); await app . startAllMicroservices (); await app . listen ( 3001 ); To connect multiple microservice instances, issue the call to connectMicroservice() for each microservice: const app = await NestFactory . create ( AppModule ); // microservice #1 const microserviceTcp = app . connectMicroservice < MicroserviceOptions > ({ transport : Transport.TCP , options : { port : 3001 , }, }); // microservice #2 const microserviceRedis = app . connectMicroservice < MicroserviceOptions > ({ transport : Transport.REDIS , options : { url : 'redis://localhost:6379' , }, }); await app . startAllMicroservices (); await app . listen ( 3001 ); To bind @MessagePattern() to only one transport strategy (for example, MQTT) in a hybrid application with multiple microservices, we can pass the second argument of type Transport which is an enum with all the built-in transport strategies defined. @ @filename () @MessagePattern ( 'time.us.*' , Transport . NATS ) getDate ( @Payload () data : number [], @Ctx () context : NatsContext ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } @MessagePattern ({ cmd : 'time.us' }, Transport . TCP ) getTCPDate ( @Payload () data : number []) { return new Date (). toLocaleTimeString (...); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'time.us.*' , Transport . NATS ) getDate ( data , context ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } @Bind ( Payload (), Ctx ()) @MessagePattern ({ cmd : 'time.us' }, Transport . TCP ) getTCPDate ( data , context ) { return new Date (). toLocaleTimeString (...); } info Hint @Payload() , @Ctx() , Transport and NatsContext are imported from @nestjs/microservices . Sharing configuration \u00b6 By default a hybrid application will not inherit global pipes, interceptors, guards and filters configured for the main (HTTP-based) application. To inherit these configuration properties from the main application, set the inheritAppConfig property in the second argument (an optional options object) of the connectMicroservice() call, as follow: const microservice = app . connectMicroservice ( { transport : Transport.TCP , }, { inheritAppConfig : true }, );","title":"\u6df7\u5408\u5e94\u7528\u7a0b\u5e8f"},{"location":"faq/hybrid-application/#_1","text":"\u6df7\u5408\u5e94\u7528\u7a0b\u5e8f\u65e2\u4fa6\u542c HTTP \u8bf7\u6c42\uff0c\u53c8\u5229\u7528\u8fde\u63a5\u7684\u5fae\u670d\u52a1\u3002 INestApplication \u5b9e\u4f8b\u53ef\u4ee5\u901a\u8fc7 connectMicroservice() \u65b9\u6cd5\u8fde\u63a5\u5230 INestMicroservice \u5b9e\u4f8b\u3002 const app = await NestFactory . create ( AppModule ); const microservice = app . connectMicroservice ({ transport : Transport.TCP , }); await app . startAllMicroservices (); await app . listen ( 3001 ); To connect multiple microservice instances, issue the call to connectMicroservice() for each microservice: const app = await NestFactory . create ( AppModule ); // microservice #1 const microserviceTcp = app . connectMicroservice < MicroserviceOptions > ({ transport : Transport.TCP , options : { port : 3001 , }, }); // microservice #2 const microserviceRedis = app . connectMicroservice < MicroserviceOptions > ({ transport : Transport.REDIS , options : { url : 'redis://localhost:6379' , }, }); await app . startAllMicroservices (); await app . listen ( 3001 ); To bind @MessagePattern() to only one transport strategy (for example, MQTT) in a hybrid application with multiple microservices, we can pass the second argument of type Transport which is an enum with all the built-in transport strategies defined. @ @filename () @MessagePattern ( 'time.us.*' , Transport . NATS ) getDate ( @Payload () data : number [], @Ctx () context : NatsContext ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } @MessagePattern ({ cmd : 'time.us' }, Transport . TCP ) getTCPDate ( @Payload () data : number []) { return new Date (). toLocaleTimeString (...); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'time.us.*' , Transport . NATS ) getDate ( data , context ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } @Bind ( Payload (), Ctx ()) @MessagePattern ({ cmd : 'time.us' }, Transport . TCP ) getTCPDate ( data , context ) { return new Date (). toLocaleTimeString (...); } info Hint @Payload() , @Ctx() , Transport and NatsContext are imported from @nestjs/microservices .","title":"\u6df7\u5408\u5e94\u7528\u7a0b\u5e8f"},{"location":"faq/hybrid-application/#sharing-configuration","text":"By default a hybrid application will not inherit global pipes, interceptors, guards and filters configured for the main (HTTP-based) application. To inherit these configuration properties from the main application, set the inheritAppConfig property in the second argument (an optional options object) of the connectMicroservice() call, as follow: const microservice = app . connectMicroservice ( { transport : Transport.TCP , }, { inheritAppConfig : true }, );","title":"Sharing configuration"},{"location":"faq/multiple-servers/","text":"HTTPS \u00b6 \u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528 HTTPS \u534f\u8bae\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u4f20\u9012\u7ed9' NestFactory '\u7c7b\u7684' create() '\u65b9\u6cd5\u7684 options \u5bf9\u8c61\u4e2d\u8bbe\u7f6e' httpOptions '\u5c5e\u6027: const httpsOptions = { key : fs.readFileSync ( './secrets/private-key.pem' ), cert : fs.readFileSync ( './secrets/public-certificate.pem' ), }; const app = await NestFactory . create ( AppModule , { httpsOptions , }); await app . listen ( 3000 ); If you use the FastifyAdapter , create the application as follows: const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter ({ https : httpsOptions }), ); \u591a\u4e2a\u540c\u6b65\u670d\u52a1\u5668 \u00b6 \u4e0b\u9762\u7684\u83dc\u8c31\u5c55\u793a\u4e86\u5982\u4f55\u5b9e\u4f8b\u5316\u4e00\u4e2a\u540c\u65f6\u4fa6\u542c\u591a\u4e2a\u7aef\u53e3(\u4f8b\u5982\uff0c\u4fa6\u542c\u975e HTTPS \u7aef\u53e3\u548c HTTPS \u7aef\u53e3)\u7684 Nest \u5e94\u7528\u7a0b\u5e8f\u3002 const httpsOptions = { key : fs.readFileSync ( './secrets/private-key.pem' ), cert : fs.readFileSync ( './secrets/public-certificate.pem' ), }; const server = express (); const app = await NestFactory . create ( AppModule , new ExpressAdapter ( server )); await app . init (); http . createServer ( server ). listen ( 3000 ); https . createServer ( httpsOptions , server ). listen ( 443 ); info Hint The ExpressAdapter is imported from the @nestjs/platform-express package. The http and https packages are native Node.js packages. Warning This recipe does not work with GraphQL Subscriptions .","title":"HTTPS \u591a\u670d\u52a1\u5668"},{"location":"faq/multiple-servers/#https","text":"\u8981\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528 HTTPS \u534f\u8bae\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u4f20\u9012\u7ed9' NestFactory '\u7c7b\u7684' create() '\u65b9\u6cd5\u7684 options \u5bf9\u8c61\u4e2d\u8bbe\u7f6e' httpOptions '\u5c5e\u6027: const httpsOptions = { key : fs.readFileSync ( './secrets/private-key.pem' ), cert : fs.readFileSync ( './secrets/public-certificate.pem' ), }; const app = await NestFactory . create ( AppModule , { httpsOptions , }); await app . listen ( 3000 ); If you use the FastifyAdapter , create the application as follows: const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter ({ https : httpsOptions }), );","title":"HTTPS"},{"location":"faq/multiple-servers/#_1","text":"\u4e0b\u9762\u7684\u83dc\u8c31\u5c55\u793a\u4e86\u5982\u4f55\u5b9e\u4f8b\u5316\u4e00\u4e2a\u540c\u65f6\u4fa6\u542c\u591a\u4e2a\u7aef\u53e3(\u4f8b\u5982\uff0c\u4fa6\u542c\u975e HTTPS \u7aef\u53e3\u548c HTTPS \u7aef\u53e3)\u7684 Nest \u5e94\u7528\u7a0b\u5e8f\u3002 const httpsOptions = { key : fs.readFileSync ( './secrets/private-key.pem' ), cert : fs.readFileSync ( './secrets/public-certificate.pem' ), }; const server = express (); const app = await NestFactory . create ( AppModule , new ExpressAdapter ( server )); await app . init (); http . createServer ( server ). listen ( 3000 ); https . createServer ( httpsOptions , server ). listen ( 443 ); info Hint The ExpressAdapter is imported from the @nestjs/platform-express package. The http and https packages are native Node.js packages. Warning This recipe does not work with GraphQL Subscriptions .","title":"\u591a\u4e2a\u540c\u6b65\u670d\u52a1\u5668"},{"location":"faq/request-lifecycle/","text":"\u8bf7\u6c42\u751f\u547d\u5468\u671f \u00b6 Nest \u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u8bf7\u6c42\u5e76\u6309\u7167\u6211\u4eec\u6240\u8bf4\u7684 \u8bf7\u6c42\u751f\u547d\u5468\u671f \u7684\u987a\u5e8f\u4ea7\u751f\u54cd\u5e94\u3002 \u4f7f\u7528\u4e2d\u95f4\u4ef6\u3001\u7ba1\u9053\u3001\u5b88\u536b\u548c\u62e6\u622a\u5668\uff0c\u5728\u8bf7\u6c42\u751f\u547d\u5468\u671f\u4e2d\u8ffd\u8e2a\u7279\u5b9a\u4ee3\u7801\u7684\u6267\u884c\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\uff0c\u7279\u522b\u662f\u5f53\u5168\u5c40\u3001\u63a7\u5236\u5668\u7ea7\u548c\u8def\u7531\u7ea7\u7ec4\u4ef6\u5f00\u59cb\u53d1\u6325\u4f5c\u7528\u65f6\u3002 \u901a\u5e38\uff0c\u4e00\u4e2a\u8bf7\u6c42\u901a\u8fc7\u4e2d\u95f4\u4ef6\u6d41\u5230\u5b88\u536b\uff0c\u7136\u540e\u5230\u62e6\u622a\u5668\uff0c\u7136\u540e\u5230\u7ba1\u9053\uff0c\u6700\u540e\u8fd4\u56de\u5230\u8fd4\u56de\u8def\u5f84\u4e0a\u7684\u62e6\u622a\u5668(\u5728\u751f\u6210\u54cd\u5e94\u65f6)\u3002 Middleware \u00b6 Middleware is executed in a particular sequence. First, Nest runs globally bound middleware (such as middleware bound with app.use ) and then it runs module bound middleware , which are determined on paths. Middleware are run sequentially in the order they are bound, similar to the way middleware in Express works. In the case of middleware bound across different modules, the middleware bound to the root module will run first, and then middleware will run in the order that the modules are added to the imports array. Guards \u00b6 Guard execution starts with global guards, then proceeds to controller guards, and finally to route guards. As with middleware, guards run in the order in which they are bound. For example: @UseGuards ( Guard1 , Guard2 ) @Controller ( 'cats' ) export class CatsController { constructor ( private catsService : CatsService ) {} @UseGuards ( Guard3 ) @Get () getCats () : Cats [] { return this . catsService . getCats (); } } Guard1 will execute before Guard2 and both will execute before Guard3 . info Hint When speaking about globally bound vs controller or locally bound, the difference is where the guard (or other component is bound). If you are using app.useGlobalGuard() or providing the component via a module, it is globally bound. Otherwise, it is bound to a controller if the decorator precedes a controller class, or to a route if the decorator proceeds a route declaration. Interceptors \u00b6 Interceptors, for the most part, follow the same pattern as guards, with one catch: as interceptors return RxJS Observables , the observables will be resolved in a first in last out manner. So inbound requests will go through the standard global, controller, route level resolution, but the response side of the request (i.e., after returning from the controller method handler) will be resolved from route to controller to global. Also, any errors thrown by pipes, controllers, or services can be read in the catchError operator of an interceptor. Pipes \u00b6 Pipes follow the standard global to controller to route bound sequence, with the same first in first out in regards to the @usePipes() parameters. However, at a route parameter level, if you have multiple pipes running, they will run in the order of the last parameter with a pipe to the first. This also applies to the route level and controller level pipes. For example, if we have the following controller: @UsePipes ( GeneralValidationPipe ) @Controller ( 'cats' ) export class CatsController { constructor ( private catsService : CatsService ) {} @UsePipes ( RouteSpecificPipe ) @Patch ( ':id' ) updateCat ( @Body () body : UpdateCatDTO , @Param () params : UpdateCatParams , @Query () query : UpdateCatQuery , ) { return this . catsService . updateCat ( body , params , query ); } } then the GeneralValidationPipe will run for the query , then the params , and then the body objects before moving on to the RouteSpecificPipe , which follows the same order. If any parameter-specific pipes were in place, they would run (again, from the last to first parameter) after the controller and route level pipes. Filters \u00b6 Filters are the only component that do not resolve global first. Instead, filters resolve from the lowest level possible, meaning execution starts with any route bound filters and proceeding next to controller level, and finally to global filters. Note that exceptions cannot be passed from filter to filter; if a route level filter catches the exception, a controller or global level filter cannot catch the same exception. The only way to achieve an effect like this is to use inheritance between the filters. info Hint Filters are only executed if any uncaught exception occurs during the request process. Caught exceptions, such as those caught with a try/catch will not trigger Exception Filters to fire. As soon as an uncaught exception is encountered, the rest of the lifecycle is ignored and the request skips straight to the filter. \u603b\u7ed3 \u00b6 \u901a\u5e38\uff0c\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u770b\u8d77\u6765\u5982\u4e0b\u6240\u793a: \u4f20\u5165\u8bf7\u6c42 \u5728\u5168\u5c40\u8303\u56f4\u5185\u7ed1\u5b9a\u7684\u4e2d\u95f4\u4ef6 \u6a21\u5757\u7ed1\u5b9a\u4e2d\u95f4\u4ef6 \u5168\u5c40\u8b66\u536b \u63a7\u5236\u5668\u8b66\u536b \u8b66\u536b\u8def\u7531 \u5168\u5c40\u62e6\u622a\u5668(\u96f6\u90e8\u4ef6) \u63a7\u5236\u5668\u62e6\u622a\u5668(\u96f6\u90e8\u4ef6) \u8def\u7531\u62e6\u622a\u5668(\u96f6\u90e8\u4ef6) \u5168\u5c40\u7ba1\u9053 \u63a7\u5236\u5668\u7684\u7ba1\u9053 \u8def\u7531\u7ba1\u9053 \u8def\u7531\u53c2\u6570\u7ba1\u9053 \u63a7\u5236\u5668(\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f) \u670d\u52a1(\u5982\u679c\u5b58\u5728) \u8def\u7531\u62e6\u622a\u5668(post \u8bf7\u6c42) \u63a7\u5236\u5668\u62e6\u622a\u5668(post \u8bf7\u6c42) \u5168\u5c40\u62e6\u622a\u5668(post \u8bf7\u6c42) \u5f02\u5e38\u8fc7\u6ee4\u5668(\u8def\u7531\uff0c\u7136\u540e\u662f\u63a7\u5236\u5668\uff0c\u7136\u540e\u662f\u5168\u5c40) \u670d\u52a1\u5668\u54cd\u5e94","title":"\u8bf7\u6c42\u751f\u547d\u5468\u671f"},{"location":"faq/request-lifecycle/#_1","text":"Nest \u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u8bf7\u6c42\u5e76\u6309\u7167\u6211\u4eec\u6240\u8bf4\u7684 \u8bf7\u6c42\u751f\u547d\u5468\u671f \u7684\u987a\u5e8f\u4ea7\u751f\u54cd\u5e94\u3002 \u4f7f\u7528\u4e2d\u95f4\u4ef6\u3001\u7ba1\u9053\u3001\u5b88\u536b\u548c\u62e6\u622a\u5668\uff0c\u5728\u8bf7\u6c42\u751f\u547d\u5468\u671f\u4e2d\u8ffd\u8e2a\u7279\u5b9a\u4ee3\u7801\u7684\u6267\u884c\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u5f88\u56f0\u96be\uff0c\u7279\u522b\u662f\u5f53\u5168\u5c40\u3001\u63a7\u5236\u5668\u7ea7\u548c\u8def\u7531\u7ea7\u7ec4\u4ef6\u5f00\u59cb\u53d1\u6325\u4f5c\u7528\u65f6\u3002 \u901a\u5e38\uff0c\u4e00\u4e2a\u8bf7\u6c42\u901a\u8fc7\u4e2d\u95f4\u4ef6\u6d41\u5230\u5b88\u536b\uff0c\u7136\u540e\u5230\u62e6\u622a\u5668\uff0c\u7136\u540e\u5230\u7ba1\u9053\uff0c\u6700\u540e\u8fd4\u56de\u5230\u8fd4\u56de\u8def\u5f84\u4e0a\u7684\u62e6\u622a\u5668(\u5728\u751f\u6210\u54cd\u5e94\u65f6)\u3002","title":"\u8bf7\u6c42\u751f\u547d\u5468\u671f"},{"location":"faq/request-lifecycle/#middleware","text":"Middleware is executed in a particular sequence. First, Nest runs globally bound middleware (such as middleware bound with app.use ) and then it runs module bound middleware , which are determined on paths. Middleware are run sequentially in the order they are bound, similar to the way middleware in Express works. In the case of middleware bound across different modules, the middleware bound to the root module will run first, and then middleware will run in the order that the modules are added to the imports array.","title":"Middleware"},{"location":"faq/request-lifecycle/#guards","text":"Guard execution starts with global guards, then proceeds to controller guards, and finally to route guards. As with middleware, guards run in the order in which they are bound. For example: @UseGuards ( Guard1 , Guard2 ) @Controller ( 'cats' ) export class CatsController { constructor ( private catsService : CatsService ) {} @UseGuards ( Guard3 ) @Get () getCats () : Cats [] { return this . catsService . getCats (); } } Guard1 will execute before Guard2 and both will execute before Guard3 . info Hint When speaking about globally bound vs controller or locally bound, the difference is where the guard (or other component is bound). If you are using app.useGlobalGuard() or providing the component via a module, it is globally bound. Otherwise, it is bound to a controller if the decorator precedes a controller class, or to a route if the decorator proceeds a route declaration.","title":"Guards"},{"location":"faq/request-lifecycle/#interceptors","text":"Interceptors, for the most part, follow the same pattern as guards, with one catch: as interceptors return RxJS Observables , the observables will be resolved in a first in last out manner. So inbound requests will go through the standard global, controller, route level resolution, but the response side of the request (i.e., after returning from the controller method handler) will be resolved from route to controller to global. Also, any errors thrown by pipes, controllers, or services can be read in the catchError operator of an interceptor.","title":"Interceptors"},{"location":"faq/request-lifecycle/#pipes","text":"Pipes follow the standard global to controller to route bound sequence, with the same first in first out in regards to the @usePipes() parameters. However, at a route parameter level, if you have multiple pipes running, they will run in the order of the last parameter with a pipe to the first. This also applies to the route level and controller level pipes. For example, if we have the following controller: @UsePipes ( GeneralValidationPipe ) @Controller ( 'cats' ) export class CatsController { constructor ( private catsService : CatsService ) {} @UsePipes ( RouteSpecificPipe ) @Patch ( ':id' ) updateCat ( @Body () body : UpdateCatDTO , @Param () params : UpdateCatParams , @Query () query : UpdateCatQuery , ) { return this . catsService . updateCat ( body , params , query ); } } then the GeneralValidationPipe will run for the query , then the params , and then the body objects before moving on to the RouteSpecificPipe , which follows the same order. If any parameter-specific pipes were in place, they would run (again, from the last to first parameter) after the controller and route level pipes.","title":"Pipes"},{"location":"faq/request-lifecycle/#filters","text":"Filters are the only component that do not resolve global first. Instead, filters resolve from the lowest level possible, meaning execution starts with any route bound filters and proceeding next to controller level, and finally to global filters. Note that exceptions cannot be passed from filter to filter; if a route level filter catches the exception, a controller or global level filter cannot catch the same exception. The only way to achieve an effect like this is to use inheritance between the filters. info Hint Filters are only executed if any uncaught exception occurs during the request process. Caught exceptions, such as those caught with a try/catch will not trigger Exception Filters to fire. As soon as an uncaught exception is encountered, the rest of the lifecycle is ignored and the request skips straight to the filter.","title":"Filters"},{"location":"faq/request-lifecycle/#_2","text":"\u901a\u5e38\uff0c\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u770b\u8d77\u6765\u5982\u4e0b\u6240\u793a: \u4f20\u5165\u8bf7\u6c42 \u5728\u5168\u5c40\u8303\u56f4\u5185\u7ed1\u5b9a\u7684\u4e2d\u95f4\u4ef6 \u6a21\u5757\u7ed1\u5b9a\u4e2d\u95f4\u4ef6 \u5168\u5c40\u8b66\u536b \u63a7\u5236\u5668\u8b66\u536b \u8b66\u536b\u8def\u7531 \u5168\u5c40\u62e6\u622a\u5668(\u96f6\u90e8\u4ef6) \u63a7\u5236\u5668\u62e6\u622a\u5668(\u96f6\u90e8\u4ef6) \u8def\u7531\u62e6\u622a\u5668(\u96f6\u90e8\u4ef6) \u5168\u5c40\u7ba1\u9053 \u63a7\u5236\u5668\u7684\u7ba1\u9053 \u8def\u7531\u7ba1\u9053 \u8def\u7531\u53c2\u6570\u7ba1\u9053 \u63a7\u5236\u5668(\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f) \u670d\u52a1(\u5982\u679c\u5b58\u5728) \u8def\u7531\u62e6\u622a\u5668(post \u8bf7\u6c42) \u63a7\u5236\u5668\u62e6\u622a\u5668(post \u8bf7\u6c42) \u5168\u5c40\u62e6\u622a\u5668(post \u8bf7\u6c42) \u5f02\u5e38\u8fc7\u6ee4\u5668(\u8def\u7531\uff0c\u7136\u540e\u662f\u63a7\u5236\u5668\uff0c\u7136\u540e\u662f\u5168\u5c40) \u670d\u52a1\u5668\u54cd\u5e94","title":"\u603b\u7ed3"},{"location":"faq/serverless/","text":"\u6beb\u670d\u52a1\u5668 \u00b6 \u65e0\u670d\u52a1\u5668\u8ba1\u7b97\u662f\u4e00\u79cd\u4e91\u8ba1\u7b97\u6267\u884c\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u4e91\u63d0\u4f9b\u5546\u6309\u9700\u5206\u914d\u673a\u5668\u8d44\u6e90\uff0c\u4ee3\u8868\u5ba2\u6237\u7ba1\u7406\u670d\u52a1\u5668\u3002 \u5f53\u5e94\u7528\u4e0d\u88ab\u4f7f\u7528\u65f6\uff0c\u8be5\u5e94\u7528\u5c06\u6ca1\u6709\u8ba1\u7b97\u8d44\u6e90\u5206\u914d\u7ed9\u8be5\u5e94\u7528\u3002 \u5b9a\u4ef7\u662f\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5b9e\u9645\u6d88\u8017\u7684\u8d44\u6e90\u6570\u91cf( source )\u3002 \u5728\u4e00\u4e2a \u65e0\u670d\u52a1\u5668\u67b6\u6784 \u4e2d\uff0c\u4f60\u53ea\u5173\u6ce8\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u5355\u4e2a\u51fd\u6570\u3002 AWS Lambda\u3001\u8c37\u6b4c\u4e91\u51fd\u6570\u548c\u5fae\u8f6f Azure \u51fd\u6570\u7b49\u670d\u52a1\u8d1f\u8d23\u6240\u6709\u7269\u7406\u786c\u4ef6\u3001\u865a\u62df\u673a\u64cd\u4f5c\u7cfb\u7edf\u548c web \u670d\u52a1\u5668\u8f6f\u4ef6\u7ba1\u7406\u3002 info Hint \u672c\u7ae0\u4e0d\u8ba8\u8bba\u65e0\u670d\u52a1\u5668\u529f\u80fd\u7684\u4f18\u7f3a\u70b9\uff0c\u4e5f\u4e0d\u6df1\u5165\u8ba8\u8bba\u4efb\u4f55\u4e91\u63d0\u4f9b\u5546\u7684\u7ec6\u8282\u3002 \u51b7\u542f\u52a8 \u00b6 \u51b7\u542f\u52a8\u662f\u4ee3\u7801\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u7b2c\u4e00\u6b21\u6267\u884c\u3002 \u6839\u636e\u60a8\u4f7f\u7528\u7684\u4e91\u63d0\u4f9b\u5546\u7684\u4e0d\u540c\uff0c\u5b83\u53ef\u80fd\u8de8\u8d8a\u51e0\u4e2a\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4ece\u4e0b\u8f7d\u4ee3\u7801\u548c\u5f15\u5bfc\u8fd0\u884c\u65f6\u5230\u6700\u7ec8\u8fd0\u884c\u60a8\u7684\u4ee3\u7801\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u589e\u52a0\u5927\u91cf\u7684\u5ef6\u8fdf\uff0c\u8fd9\u53d6\u51b3\u4e8e\u51e0\u4e2a\u56e0\u7d20\uff0c\u8bed\u8a00\uff0c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7684\u5305\u7684\u6570\u91cf\uff0c\u7b49\u7b49\u3002 \u51b7\u542f\u52a8\u5f88\u91cd\u8981\uff0c\u867d\u7136\u6709\u4e9b\u4e8b\u60c5\u662f\u6211\u4eec\u65e0\u6cd5\u63a7\u5236\u7684\uff0c\u4f46\u6211\u4eec\u4ecd\u6709\u5f88\u591a\u4e8b\u60c5\u53ef\u4ee5\u505a\uff0c\u4ee5\u4f7f\u5b83\u5c3d\u53ef\u80fd\u77ed\u3002 \u867d\u7136\u4f60\u53ef\u4ee5\u5c06 Nest \u89c6\u4e3a\u4e00\u4e2a\u6210\u719f\u7684\u6846\u67b6\uff0c\u4e13\u4e3a\u590d\u6742\u7684\u4f01\u4e1a\u5e94\u7528\u800c\u8bbe\u8ba1\uff0c \u5b83\u4e5f \u9002\u7528\u4e8e\u201c\u66f4\u7b80\u5355\u201d\u7684\u5e94\u7528\u7a0b\u5e8f (\u6216\u811a\u672c)\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 \u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f \u7279\u6027\uff0c\u4f60\u53ef\u4ee5\u5728 simple workers, CRON jobs, CLIs, or serverless functions \u4e2d\u5229\u7528 Nest \u7684 DI \u7cfb\u7edf\u3002 \u57fa\u51c6 \u00b6 \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u5728\u65e0\u670d\u52a1\u5668\u51fd\u6570\u7684\u73af\u5883\u4e2d\u4f7f\u7528 Nest \u6216\u5176\u4ed6\u4f17\u6240\u5468\u77e5\u7684\u5e93(\u5982\u201cexpress\u201d)\u7684\u6210\u672c\uff0c\u8ba9\u6211\u4eec\u6765\u6bd4\u8f83\u4e00\u4e0b Node \u8fd0\u884c\u65f6\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u811a\u672c\u7684\u65f6\u95f4: // #1 Express import * as express from 'express' ; async function bootstrap () { const app = express (); app . get ( '/' , ( req , res ) => res . send ( 'Hello world!' )); await new Promise < void > (( resolve ) => app . listen ( 3000 , resolve )); } bootstrap (); // #2 Nest (with @nestjs/platform-express) import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule , { logger : [ 'error' ] }); await app . listen ( 3000 ); } bootstrap (); // #3 Nest as a Standalone application (no HTTP server) import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; import { AppService } from './app.service' ; async function bootstrap () { const app = await NestFactory . createApplicationContext ( AppModule , { logger : [ 'error' ], }); console . log ( app . get ( AppService ). getHello ()); } bootstrap (); // #4 Raw Node.js script async function bootstrap () { console . log ( 'Hello world!' ); } bootstrap (); For all these scripts, we used the tsc (TypeScript) compiler and so the code remains unbundled ( webpack isn't used). Express 0.0079s (7.9ms) Nest with @nestjs/platform-express 0.1974s (197.4ms) Nest (standalone application) 0.1117s (111.7ms) Raw Node.js script 0.0071s (7.1ms) info Note Machine: MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD. Now, let's repeat all benchmarks but this time, using webpack (if you have Nest CLI installed, you can run nest build --webpack ) to bundle our application into a single executable JavaScript file. However, instead of using the default webpack configuration that Nest CLI ships with, we'll make sure to bundle all dependencies ( node_modules ) together, as follows: module . exports = ( options , webpack ) => { const lazyImports = [ '@nestjs/microservices/microservices-module' , '@nestjs/websockets/socket-module' , ]; return { ... options , externals : [], plugins : [ ... options . plugins , new webpack . IgnorePlugin ({ checkResource ( resource ) { if ( lazyImports . includes ( resource )) { try { require . resolve ( resource ); } catch ( err ) { return true ; } } return false ; }, }), ], }; }; info Hint To instruct Nest CLI to use this configuration, create a new webpack.config.js file in the root directory of your project. With this configuration, we received the following results: Express 0.0068s (6.8ms) Nest with @nestjs/platform-express 0.0815s (81.5ms) Nest (standalone application) 0.0319s (31.9ms) Raw Node.js script 0.0066s (6.6ms) info Note Machine: MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD. info Hint You could optimize it even further by applying additional code minification & optimization techniques (using webpack plugins, etc.). As you can see, the way you compile (and whether you bundle your code) is crucial and has a significant impact on the overall startup time. With webpack , you can get the bootstrap time of a standalone Nest application (starter project with one module, controller, and service) down to ~32ms on average, and down to ~81.5ms for a regular HTTP, express-based NestJS app. For more complicated Nest applications, for example, with 10 resources (generated through $ nest g resource schematic = 10 modules, 10 controllers, 10 services, 20 DTO classes, 50 HTTP endpoints + AppModule ), the overall startup on MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD is approximately 0.1298s (129.8ms). Running a monolithic application as a serverless function typically doesn't make too much sense anyway, so think of this benchmark more as an example of how the bootstrap time may potentially increase as your application grows. \u8fd0\u884c\u65f6\u4f18\u5316 \u00b6 Thus far we covered compile-time optimizations. These are unrelated to the way you define providers and load Nest modules in your application, and that plays an essential role as your application gets bigger. For example, imagine having a database connection defined as an asynchronous provider . Async providers are designed to delay the application start until one or more asynchronous tasks are completed. That means, if your serverless function on average requires 2s to connect to the database (on bootstrap), your endpoint will need at least two extra seconds (because it must wait till the connection is established) to send a response back (when it's a cold start and your application wasn't running already). As you can see, the way you structure your providers is somewhat different in a serverless environment where bootstrap time is important. Another good example is if you use Redis for caching, but only in certain scenarios. Perhaps, in this case, you should not define a Redis connection as an async provider, as it would slow down the bootstrap time, even if it's not required for this specific function invocation. Also, sometimes you could lazy-load entire modules, using the LazyModuleLoader class, as described in this chapter . Caching is a great example here too. Imagine that your application has, let's say, CacheModule which internally connects to Redis and also, exports the CacheService to interact with the Redis storage. If you don't need it for all potential function invocations, you can just load it on-demand, lazily. This way you'll get a faster startup time (when a cold start occurs) for all invocations that don't require caching. if ( request . method === RequestMethod [ RequestMethod . GET ]) { const { CacheModule } = await import ( './cache.module' ); const module Ref = await this . lazyModuleLoader . load (() => CacheModule ); const { CacheService } = await import ( './cache.service' ); const cacheService = module Ref.get ( CacheService ); return cacheService . get ( ENDPOINT_KEY ); } Another great example is a webhook or worker, which depending on some specific conditions (e.g., input arguments), may perform different operations. In such a case, you could specify a condition inside your route handler that lazily loads an appropriate module for the specific function invocation, and just load every other module lazily. if ( workerType === WorkerType . A ) { const { WorkerAModule } = await import ( './worker-a.module' ); const module Ref = await this . lazyModuleLoader . load (() => WorkerAModule ); // ... } else if ( workerType === WorkerType . B ) { const { WorkerBModule } = await import ( './worker-b.module' ); const module Ref = await this . lazyModuleLoader . load (() => WorkerBModule ); // ... } \u793a\u4f8b\u96c6\u6210 \u00b6 The way your application's entry file (typically main.ts file) is supposed to look like depends on several factors and so there's no single template that just works for every scenario. For example, the initialization file required to spin up your serverless function varies by cloud providers (AWS, Azure, GCP, etc.). Also, depending on whether you want to run a typical HTTP application with multiple routes/endpoints or just provide a single route (or execute a specific portion of code), your application's code will look different (for example, for the endpoint-per-function approach you could use the NestFactory.createApplicationContext instead of booting the HTTP server, setting up middleware, etc.). Just for illustration purposes, we'll integrate Nest (using @nestjs/platform-express and so spinning up the whole, fully functional HTTP router) with the Serverless framework (in this case, targetting AWS Lambda). As we've mentioned earlier, your code will differ depending on the cloud provider you choose, and many other factors. First, let's install the required packages: $ npm i @vendia/serverless-express aws-lambda $ npm i @types/aws-lambda serverless-offline info Hint To speed up development cycles, we install the serverless-offline plugin which emulates AWS \u03bb and API Gateway. Once the installation process is complete, let's create the serverless.yml file to configure the Serverless framework: service : name : serverless-example plugins : - serverless-offline provider : name : aws runtime : nodejs12.x functions : main : handler : dist/main.handler events : - http : method : ANY path : / - http : method : ANY path : '{proxy+}' info Hint To learn more about the Serverless framework, visit the official documentation . With this place, we can now navigate to the main.ts file and update our bootstrap code with the required boilerplate: import { NestFactory } from '@nestjs/core' ; import serverlessExpress from '@vendia/serverless-express' ; import { Callback , Context , Handler } from 'aws-lambda' ; import { AppModule } from './app.module' ; let server : Handler ; async function bootstrap () : Promise < Handler > { const app = await NestFactory . create ( AppModule ); await app . init (); const expressApp = app . getHttpAdapter (). getInstance (); return serverlessExpress ({ app : expressApp }); } export const handler : Handler = async ( event : any , context : Context , callback : Callback , ) => { server = server ?? ( await bootstrap ()); return server ( event , context , callback ); }; info Hint For creating multiple serverless functions and sharing common modules between them, we recommend using the CLI Monorepo mode . warning Warning If you use @nestjs/swagger package, there are a few additional steps required to make it work properly in the context of serverless function. Check out this article for more information. Next, open up the tsconfig.json file and make sure to enable the esModuleInterop option to make the @vendia/serverless-express package load properly. { \"compilerOptions\" : { ... \"esModuleInterop\" : true } } Now we can build our application (with nest build or tsc ) and use the serverless CLI to start our lambda function locally: $ npm run build $ npx serverless offline Once the application is running, open your browser and navigate to http://localhost:3000/dev/[ANY_ROUTE] (where [ANY_ROUTE] is any endpoint registered in your application). In the sections above, we've shown that using webpack and bundling your app can have significant impact on the overall bootstrap time. However, to make it work with our example, there's one additional configuration you must add in your webpack.config.js file. Generally, to make sure our handler function will be picked up, we must change the output.libraryTarget property to commonjs2 . return { ... options , externals : [], output : { ... options . output , libraryTarget : 'commonjs2' , }, // ... the rest of the configuration }; With this in place, you can now use $ nest build --webpack to compile your function's code (and then $ npx serverless offline to test it). \u4f7f\u7528\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u7279\u6027 \u00b6 Alternatively, if you want to keep your function very lightweight and you don't need any HTTP-related features (routing, but also guards, interceptors, pipes, etc.), you can just use NestFactory.createApplicationContext (as mentioned earlier) instead of running the entire HTTP server (and express under the hood), as follows: @ @filename ( main ) import { HttpStatus } from '@nestjs/common' ; import { NestFactory } from '@nestjs/core' ; import { Callback , Context , Handler } from 'aws-lambda' ; import { AppModule } from './app.module' ; import { AppService } from './app.service' ; export const handler : Handler = async ( event : any , context : Context , callback : Callback , ) => { const appContext = await NestFactory . createApplicationContext ( AppModule ); const appService = appContext . get ( AppService ); return { body : appService.getHello (), statusCode : HttpStatus.OK , }; }; info Hint Be aware that NestFactory.createApplicationContext does not wrap controller methods with enhancers (guard, interceptors, etc.). For this, you must use the NestFactory.create method. You could also pass the event object down to, let's say, EventsService provider that could process it and return a corresponding value (depending on the input value and your business logic). export const handler : Handler = async ( event : any , context : Context , callback : Callback , ) => { const appContext = await NestFactory . createApplicationContext ( AppModule ); const eventsService = appContext . get ( EventsService ); return eventsService . process ( event ); };","title":"Serverless"},{"location":"faq/serverless/#_1","text":"\u65e0\u670d\u52a1\u5668\u8ba1\u7b97\u662f\u4e00\u79cd\u4e91\u8ba1\u7b97\u6267\u884c\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u4e91\u63d0\u4f9b\u5546\u6309\u9700\u5206\u914d\u673a\u5668\u8d44\u6e90\uff0c\u4ee3\u8868\u5ba2\u6237\u7ba1\u7406\u670d\u52a1\u5668\u3002 \u5f53\u5e94\u7528\u4e0d\u88ab\u4f7f\u7528\u65f6\uff0c\u8be5\u5e94\u7528\u5c06\u6ca1\u6709\u8ba1\u7b97\u8d44\u6e90\u5206\u914d\u7ed9\u8be5\u5e94\u7528\u3002 \u5b9a\u4ef7\u662f\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5b9e\u9645\u6d88\u8017\u7684\u8d44\u6e90\u6570\u91cf( source )\u3002 \u5728\u4e00\u4e2a \u65e0\u670d\u52a1\u5668\u67b6\u6784 \u4e2d\uff0c\u4f60\u53ea\u5173\u6ce8\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u5355\u4e2a\u51fd\u6570\u3002 AWS Lambda\u3001\u8c37\u6b4c\u4e91\u51fd\u6570\u548c\u5fae\u8f6f Azure \u51fd\u6570\u7b49\u670d\u52a1\u8d1f\u8d23\u6240\u6709\u7269\u7406\u786c\u4ef6\u3001\u865a\u62df\u673a\u64cd\u4f5c\u7cfb\u7edf\u548c web \u670d\u52a1\u5668\u8f6f\u4ef6\u7ba1\u7406\u3002 info Hint \u672c\u7ae0\u4e0d\u8ba8\u8bba\u65e0\u670d\u52a1\u5668\u529f\u80fd\u7684\u4f18\u7f3a\u70b9\uff0c\u4e5f\u4e0d\u6df1\u5165\u8ba8\u8bba\u4efb\u4f55\u4e91\u63d0\u4f9b\u5546\u7684\u7ec6\u8282\u3002","title":"\u6beb\u670d\u52a1\u5668"},{"location":"faq/serverless/#_2","text":"\u51b7\u542f\u52a8\u662f\u4ee3\u7801\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u7b2c\u4e00\u6b21\u6267\u884c\u3002 \u6839\u636e\u60a8\u4f7f\u7528\u7684\u4e91\u63d0\u4f9b\u5546\u7684\u4e0d\u540c\uff0c\u5b83\u53ef\u80fd\u8de8\u8d8a\u51e0\u4e2a\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4ece\u4e0b\u8f7d\u4ee3\u7801\u548c\u5f15\u5bfc\u8fd0\u884c\u65f6\u5230\u6700\u7ec8\u8fd0\u884c\u60a8\u7684\u4ee3\u7801\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u589e\u52a0\u5927\u91cf\u7684\u5ef6\u8fdf\uff0c\u8fd9\u53d6\u51b3\u4e8e\u51e0\u4e2a\u56e0\u7d20\uff0c\u8bed\u8a00\uff0c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7684\u5305\u7684\u6570\u91cf\uff0c\u7b49\u7b49\u3002 \u51b7\u542f\u52a8\u5f88\u91cd\u8981\uff0c\u867d\u7136\u6709\u4e9b\u4e8b\u60c5\u662f\u6211\u4eec\u65e0\u6cd5\u63a7\u5236\u7684\uff0c\u4f46\u6211\u4eec\u4ecd\u6709\u5f88\u591a\u4e8b\u60c5\u53ef\u4ee5\u505a\uff0c\u4ee5\u4f7f\u5b83\u5c3d\u53ef\u80fd\u77ed\u3002 \u867d\u7136\u4f60\u53ef\u4ee5\u5c06 Nest \u89c6\u4e3a\u4e00\u4e2a\u6210\u719f\u7684\u6846\u67b6\uff0c\u4e13\u4e3a\u590d\u6742\u7684\u4f01\u4e1a\u5e94\u7528\u800c\u8bbe\u8ba1\uff0c \u5b83\u4e5f \u9002\u7528\u4e8e\u201c\u66f4\u7b80\u5355\u201d\u7684\u5e94\u7528\u7a0b\u5e8f (\u6216\u811a\u672c)\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 \u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f \u7279\u6027\uff0c\u4f60\u53ef\u4ee5\u5728 simple workers, CRON jobs, CLIs, or serverless functions \u4e2d\u5229\u7528 Nest \u7684 DI \u7cfb\u7edf\u3002","title":"\u51b7\u542f\u52a8"},{"location":"faq/serverless/#_3","text":"\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u5728\u65e0\u670d\u52a1\u5668\u51fd\u6570\u7684\u73af\u5883\u4e2d\u4f7f\u7528 Nest \u6216\u5176\u4ed6\u4f17\u6240\u5468\u77e5\u7684\u5e93(\u5982\u201cexpress\u201d)\u7684\u6210\u672c\uff0c\u8ba9\u6211\u4eec\u6765\u6bd4\u8f83\u4e00\u4e0b Node \u8fd0\u884c\u65f6\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u811a\u672c\u7684\u65f6\u95f4: // #1 Express import * as express from 'express' ; async function bootstrap () { const app = express (); app . get ( '/' , ( req , res ) => res . send ( 'Hello world!' )); await new Promise < void > (( resolve ) => app . listen ( 3000 , resolve )); } bootstrap (); // #2 Nest (with @nestjs/platform-express) import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule , { logger : [ 'error' ] }); await app . listen ( 3000 ); } bootstrap (); // #3 Nest as a Standalone application (no HTTP server) import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; import { AppService } from './app.service' ; async function bootstrap () { const app = await NestFactory . createApplicationContext ( AppModule , { logger : [ 'error' ], }); console . log ( app . get ( AppService ). getHello ()); } bootstrap (); // #4 Raw Node.js script async function bootstrap () { console . log ( 'Hello world!' ); } bootstrap (); For all these scripts, we used the tsc (TypeScript) compiler and so the code remains unbundled ( webpack isn't used). Express 0.0079s (7.9ms) Nest with @nestjs/platform-express 0.1974s (197.4ms) Nest (standalone application) 0.1117s (111.7ms) Raw Node.js script 0.0071s (7.1ms) info Note Machine: MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD. Now, let's repeat all benchmarks but this time, using webpack (if you have Nest CLI installed, you can run nest build --webpack ) to bundle our application into a single executable JavaScript file. However, instead of using the default webpack configuration that Nest CLI ships with, we'll make sure to bundle all dependencies ( node_modules ) together, as follows: module . exports = ( options , webpack ) => { const lazyImports = [ '@nestjs/microservices/microservices-module' , '@nestjs/websockets/socket-module' , ]; return { ... options , externals : [], plugins : [ ... options . plugins , new webpack . IgnorePlugin ({ checkResource ( resource ) { if ( lazyImports . includes ( resource )) { try { require . resolve ( resource ); } catch ( err ) { return true ; } } return false ; }, }), ], }; }; info Hint To instruct Nest CLI to use this configuration, create a new webpack.config.js file in the root directory of your project. With this configuration, we received the following results: Express 0.0068s (6.8ms) Nest with @nestjs/platform-express 0.0815s (81.5ms) Nest (standalone application) 0.0319s (31.9ms) Raw Node.js script 0.0066s (6.6ms) info Note Machine: MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD. info Hint You could optimize it even further by applying additional code minification & optimization techniques (using webpack plugins, etc.). As you can see, the way you compile (and whether you bundle your code) is crucial and has a significant impact on the overall startup time. With webpack , you can get the bootstrap time of a standalone Nest application (starter project with one module, controller, and service) down to ~32ms on average, and down to ~81.5ms for a regular HTTP, express-based NestJS app. For more complicated Nest applications, for example, with 10 resources (generated through $ nest g resource schematic = 10 modules, 10 controllers, 10 services, 20 DTO classes, 50 HTTP endpoints + AppModule ), the overall startup on MacBook Pro Mid 2014, 2.5 GHz Quad-Core Intel Core i7, 16 GB 1600 MHz DDR3, SSD is approximately 0.1298s (129.8ms). Running a monolithic application as a serverless function typically doesn't make too much sense anyway, so think of this benchmark more as an example of how the bootstrap time may potentially increase as your application grows.","title":"\u57fa\u51c6"},{"location":"faq/serverless/#_4","text":"Thus far we covered compile-time optimizations. These are unrelated to the way you define providers and load Nest modules in your application, and that plays an essential role as your application gets bigger. For example, imagine having a database connection defined as an asynchronous provider . Async providers are designed to delay the application start until one or more asynchronous tasks are completed. That means, if your serverless function on average requires 2s to connect to the database (on bootstrap), your endpoint will need at least two extra seconds (because it must wait till the connection is established) to send a response back (when it's a cold start and your application wasn't running already). As you can see, the way you structure your providers is somewhat different in a serverless environment where bootstrap time is important. Another good example is if you use Redis for caching, but only in certain scenarios. Perhaps, in this case, you should not define a Redis connection as an async provider, as it would slow down the bootstrap time, even if it's not required for this specific function invocation. Also, sometimes you could lazy-load entire modules, using the LazyModuleLoader class, as described in this chapter . Caching is a great example here too. Imagine that your application has, let's say, CacheModule which internally connects to Redis and also, exports the CacheService to interact with the Redis storage. If you don't need it for all potential function invocations, you can just load it on-demand, lazily. This way you'll get a faster startup time (when a cold start occurs) for all invocations that don't require caching. if ( request . method === RequestMethod [ RequestMethod . GET ]) { const { CacheModule } = await import ( './cache.module' ); const module Ref = await this . lazyModuleLoader . load (() => CacheModule ); const { CacheService } = await import ( './cache.service' ); const cacheService = module Ref.get ( CacheService ); return cacheService . get ( ENDPOINT_KEY ); } Another great example is a webhook or worker, which depending on some specific conditions (e.g., input arguments), may perform different operations. In such a case, you could specify a condition inside your route handler that lazily loads an appropriate module for the specific function invocation, and just load every other module lazily. if ( workerType === WorkerType . A ) { const { WorkerAModule } = await import ( './worker-a.module' ); const module Ref = await this . lazyModuleLoader . load (() => WorkerAModule ); // ... } else if ( workerType === WorkerType . B ) { const { WorkerBModule } = await import ( './worker-b.module' ); const module Ref = await this . lazyModuleLoader . load (() => WorkerBModule ); // ... }","title":"\u8fd0\u884c\u65f6\u4f18\u5316"},{"location":"faq/serverless/#_5","text":"The way your application's entry file (typically main.ts file) is supposed to look like depends on several factors and so there's no single template that just works for every scenario. For example, the initialization file required to spin up your serverless function varies by cloud providers (AWS, Azure, GCP, etc.). Also, depending on whether you want to run a typical HTTP application with multiple routes/endpoints or just provide a single route (or execute a specific portion of code), your application's code will look different (for example, for the endpoint-per-function approach you could use the NestFactory.createApplicationContext instead of booting the HTTP server, setting up middleware, etc.). Just for illustration purposes, we'll integrate Nest (using @nestjs/platform-express and so spinning up the whole, fully functional HTTP router) with the Serverless framework (in this case, targetting AWS Lambda). As we've mentioned earlier, your code will differ depending on the cloud provider you choose, and many other factors. First, let's install the required packages: $ npm i @vendia/serverless-express aws-lambda $ npm i @types/aws-lambda serverless-offline info Hint To speed up development cycles, we install the serverless-offline plugin which emulates AWS \u03bb and API Gateway. Once the installation process is complete, let's create the serverless.yml file to configure the Serverless framework: service : name : serverless-example plugins : - serverless-offline provider : name : aws runtime : nodejs12.x functions : main : handler : dist/main.handler events : - http : method : ANY path : / - http : method : ANY path : '{proxy+}' info Hint To learn more about the Serverless framework, visit the official documentation . With this place, we can now navigate to the main.ts file and update our bootstrap code with the required boilerplate: import { NestFactory } from '@nestjs/core' ; import serverlessExpress from '@vendia/serverless-express' ; import { Callback , Context , Handler } from 'aws-lambda' ; import { AppModule } from './app.module' ; let server : Handler ; async function bootstrap () : Promise < Handler > { const app = await NestFactory . create ( AppModule ); await app . init (); const expressApp = app . getHttpAdapter (). getInstance (); return serverlessExpress ({ app : expressApp }); } export const handler : Handler = async ( event : any , context : Context , callback : Callback , ) => { server = server ?? ( await bootstrap ()); return server ( event , context , callback ); }; info Hint For creating multiple serverless functions and sharing common modules between them, we recommend using the CLI Monorepo mode . warning Warning If you use @nestjs/swagger package, there are a few additional steps required to make it work properly in the context of serverless function. Check out this article for more information. Next, open up the tsconfig.json file and make sure to enable the esModuleInterop option to make the @vendia/serverless-express package load properly. { \"compilerOptions\" : { ... \"esModuleInterop\" : true } } Now we can build our application (with nest build or tsc ) and use the serverless CLI to start our lambda function locally: $ npm run build $ npx serverless offline Once the application is running, open your browser and navigate to http://localhost:3000/dev/[ANY_ROUTE] (where [ANY_ROUTE] is any endpoint registered in your application). In the sections above, we've shown that using webpack and bundling your app can have significant impact on the overall bootstrap time. However, to make it work with our example, there's one additional configuration you must add in your webpack.config.js file. Generally, to make sure our handler function will be picked up, we must change the output.libraryTarget property to commonjs2 . return { ... options , externals : [], output : { ... options . output , libraryTarget : 'commonjs2' , }, // ... the rest of the configuration }; With this in place, you can now use $ nest build --webpack to compile your function's code (and then $ npx serverless offline to test it).","title":"\u793a\u4f8b\u96c6\u6210"},{"location":"faq/serverless/#_6","text":"Alternatively, if you want to keep your function very lightweight and you don't need any HTTP-related features (routing, but also guards, interceptors, pipes, etc.), you can just use NestFactory.createApplicationContext (as mentioned earlier) instead of running the entire HTTP server (and express under the hood), as follows: @ @filename ( main ) import { HttpStatus } from '@nestjs/common' ; import { NestFactory } from '@nestjs/core' ; import { Callback , Context , Handler } from 'aws-lambda' ; import { AppModule } from './app.module' ; import { AppService } from './app.service' ; export const handler : Handler = async ( event : any , context : Context , callback : Callback , ) => { const appContext = await NestFactory . createApplicationContext ( AppModule ); const appService = appContext . get ( AppService ); return { body : appService.getHello (), statusCode : HttpStatus.OK , }; }; info Hint Be aware that NestFactory.createApplicationContext does not wrap controller methods with enhancers (guard, interceptors, etc.). For this, you must use the NestFactory.create method. You could also pass the event object down to, let's say, EventsService provider that could process it and return a corresponding value (depending on the input value and your business logic). export const handler : Handler = async ( event : any , context : Context , callback : Callback , ) => { const appContext = await NestFactory . createApplicationContext ( AppModule ); const eventsService = appContext . get ( EventsService ); return eventsService . process ( event ); };","title":"\u4f7f\u7528\u72ec\u7acb\u5e94\u7528\u7a0b\u5e8f\u7279\u6027"},{"location":"fundamentals/async-components/","text":"\u5f02\u6b65\u670d\u52a1\u63d0\u4f9b\u8005 \u00b6 \u6709\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5ef6\u8fdf\u542f\u52a8\uff0c\u76f4\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u5f02\u6b65\u4efb\u52a1\u5b8c\u6210\u3002 \u4f8b\u5982\uff0c\u5728\u4e0e\u6570\u636e\u5e93\u5efa\u7acb\u8fde\u63a5\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u4e0d\u60f3\u5f00\u59cb\u63a5\u53d7\u8bf7\u6c42\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u63d0\u4f9b\u7a0b\u5e8f\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 The syntax for this is to use async/await with the useFactory syntax. The factory returns a Promise , and the factory function can await asynchronous tasks. Nest will await resolution of the promise before instantiating any class that depends on (injects) such a provider. { provide : 'ASYNC_CONNECTION' , useFactory : async () => { const connection = await createConnection ( options ); return connection ; }, } info Hint Learn more about custom provider syntax here . Injection \u00b6 Asynchronous providers are injected to other components by their tokens, like any other provider. In the example above, you would use the construct @Inject('ASYNC_CONNECTION') . Example \u00b6 The TypeORM recipe has a more substantial example of an asynchronous provider.","title":"\u5f02\u6b65\u670d\u52a1\u63d0\u4f9b\u5668"},{"location":"fundamentals/async-components/#_1","text":"\u6709\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5ef6\u8fdf\u542f\u52a8\uff0c\u76f4\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u5f02\u6b65\u4efb\u52a1\u5b8c\u6210\u3002 \u4f8b\u5982\uff0c\u5728\u4e0e\u6570\u636e\u5e93\u5efa\u7acb\u8fde\u63a5\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u4e0d\u60f3\u5f00\u59cb\u63a5\u53d7\u8bf7\u6c42\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u63d0\u4f9b\u7a0b\u5e8f\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 The syntax for this is to use async/await with the useFactory syntax. The factory returns a Promise , and the factory function can await asynchronous tasks. Nest will await resolution of the promise before instantiating any class that depends on (injects) such a provider. { provide : 'ASYNC_CONNECTION' , useFactory : async () => { const connection = await createConnection ( options ); return connection ; }, } info Hint Learn more about custom provider syntax here .","title":"\u5f02\u6b65\u670d\u52a1\u63d0\u4f9b\u8005"},{"location":"fundamentals/async-components/#injection","text":"Asynchronous providers are injected to other components by their tokens, like any other provider. In the example above, you would use the construct @Inject('ASYNC_CONNECTION') .","title":"Injection"},{"location":"fundamentals/async-components/#example","text":"The TypeORM recipe has a more substantial example of an asynchronous provider.","title":"Example"},{"location":"fundamentals/circular-dependency/","text":"\u5faa\u73af\u4f9d\u8d56 \u00b6 \u5f53\u4e24\u4e2a\u7c7b\u76f8\u4e92\u4f9d\u8d56\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u5faa\u73af\u4f9d\u8d56\u3002 \u4f8b\u5982\uff0cA \u7c7b\u9700\u8981 B \u7c7b\uff0cB \u7c7b\u4e5f\u9700\u8981 A \u7c7b\u3002 \u5728 Nest \u4e2d\uff0c\u6a21\u5757\u4e4b\u95f4\u548c\u63d0\u4f9b\u8005\u4e4b\u95f4\u53ef\u80fd\u4f1a\u51fa\u73b0\u5faa\u73af\u4f9d\u8d56\u3002 \u5c3d\u7ba1\u5e94\u8be5\u5c3d\u53ef\u80fd\u907f\u514d\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u4e0d\u80fd\u603b\u662f\u8fd9\u6837\u505a\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cNest \u652f\u6301\u4ee5\u4e24\u79cd\u65b9\u5f0f\u89e3\u6790\u63d0\u4f9b\u8005\u4e4b\u95f4\u7684\u5faa\u73af\u4f9d\u8d56\u9879\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u4f7f\u7528 \u524d\u5411\u5f15\u7528 \u4f5c\u4e3a\u4e00\u79cd\u6280\u672f\uff0c\u4ee5\u53ca\u4f7f\u7528 ModuleRef \u7c7b\u4ece DI \u5bb9\u5668\u4e2d\u68c0\u7d22\u63d0\u4f9b\u8005\u5b9e\u4f8b\u4f5c\u4e3a\u53e6\u4e00\u79cd\u6280\u672f\u3002 \u6211\u4eec\u8fd8\u63cf\u8ff0\u4e86\u5982\u4f55\u89e3\u6790\u6a21\u5757\u4e4b\u95f4\u7684\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u3002 warning Warning A circular dependency might also be caused when using \"barrel files\"/index.ts files to group imports. Barrel files should be omitted when it comes to module/provider classes. For example, barrel files should not be used when importing files within the same directory as the barrel file, i.e. cats/cats.controller should not import cats to import the cats/cats.service file. For more details please also see this github issue . \u5411\u524d\u5f15\u7528 \u00b6 \u524d\u5411\u5f15\u7528\u5141\u8bb8 Nest \u5f15\u7528\u5c1a\u672a\u4f7f\u7528' forwardRef() '\u5b9e\u7528\u51fd\u6570\u5b9a\u4e49\u7684\u7c7b\u3002 \u4f8b\u5982\uff0c\u5982\u679c' CatsService '\u548c' CommonService '\u76f8\u4e92\u4f9d\u8d56\uff0c\u5173\u7cfb\u7684\u53cc\u65b9\u90fd\u53ef\u4ee5\u4f7f\u7528' @Inject() '\u548c' forwardRef() '\u5de5\u5177\u6765\u89e3\u51b3\u5faa\u73af\u4f9d\u8d56\u3002 \u5426\u5219 Nest \u5c06\u4e0d\u4f1a\u5b9e\u4f8b\u5316\u5b83\u4eec\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u57fa\u672c\u5143\u6570\u636e\u90fd\u5c06\u4e0d\u53ef\u7528\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50: @ @filename ( cats . service ) @Injectable () export class CatsService { constructor ( @Inject ( forwardRef (() => CommonService )) private commonService : CommonService , ) {} } @ @switch @Injectable () @Dependencies ( forwardRef (() => CommonService )) export class CatsService { constructor ( commonService ) { this . commonService = commonService ; } } info Hint The forwardRef() function is imported from the @nestjs/common package. That covers one side of the relationship. Now let's do the same with CommonService : @ @filename ( common . service ) @Injectable () export class CommonService { constructor ( @Inject ( forwardRef (() => CatsService )) private catsService : CatsService , ) {} } @ @switch @Injectable () @Dependencies ( forwardRef (() => CatsService )) export class CommonService { constructor ( catsService ) { this . catsService = catsService ; } } warning Warning The order of instantiation is indeterminate. Make sure your code does not depend on which constructor is called first. ModuleRef \u7c7b\u66ff\u4ee3 \u00b6 \u4f7f\u7528\u201cforwardRef()\u201d\u7684\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u91cd\u6784\u4f60\u7684\u4ee3\u7801\uff0c\u5e76\u4f7f\u7528\u201cModuleRef\u201d\u7c7b\u6765\u68c0\u7d22(\u5426\u5219)\u5faa\u73af\u5173\u7cfb\u7684\u4e00\u8fb9\u7684\u63d0\u4f9b\u8005\u3002 \u4e86\u89e3\u66f4\u591a\u5173\u4e8e' ModuleRef '\u5b9e\u7528\u7a0b\u5e8f\u7c7b\u7684\u4fe1\u606f \u8fd9\u91cc \u3002 \u6a21\u5757\u5411\u524d\u5f15\u7528 \u00b6 \u4e3a\u4e86\u89e3\u51b3\u6a21\u5757\u4e4b\u95f4\u7684\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\uff0c\u5728\u6a21\u5757\u5173\u8054\u7684\u4e24\u8fb9\u90fd\u4f7f\u7528\u76f8\u540c\u7684' forwardRef() '\u5b9e\u7528\u51fd\u6570\u3002 \u4f8b\u5982: @ @filename ( common . module ) @Module ({ imports : [ forwardRef (() => CatsModule )], }) export class CommonModule {}","title":"\u5faa\u73af\u4f9d\u8d56"},{"location":"fundamentals/circular-dependency/#_1","text":"\u5f53\u4e24\u4e2a\u7c7b\u76f8\u4e92\u4f9d\u8d56\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u5faa\u73af\u4f9d\u8d56\u3002 \u4f8b\u5982\uff0cA \u7c7b\u9700\u8981 B \u7c7b\uff0cB \u7c7b\u4e5f\u9700\u8981 A \u7c7b\u3002 \u5728 Nest \u4e2d\uff0c\u6a21\u5757\u4e4b\u95f4\u548c\u63d0\u4f9b\u8005\u4e4b\u95f4\u53ef\u80fd\u4f1a\u51fa\u73b0\u5faa\u73af\u4f9d\u8d56\u3002 \u5c3d\u7ba1\u5e94\u8be5\u5c3d\u53ef\u80fd\u907f\u514d\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u4e0d\u80fd\u603b\u662f\u8fd9\u6837\u505a\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cNest \u652f\u6301\u4ee5\u4e24\u79cd\u65b9\u5f0f\u89e3\u6790\u63d0\u4f9b\u8005\u4e4b\u95f4\u7684\u5faa\u73af\u4f9d\u8d56\u9879\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u4f7f\u7528 \u524d\u5411\u5f15\u7528 \u4f5c\u4e3a\u4e00\u79cd\u6280\u672f\uff0c\u4ee5\u53ca\u4f7f\u7528 ModuleRef \u7c7b\u4ece DI \u5bb9\u5668\u4e2d\u68c0\u7d22\u63d0\u4f9b\u8005\u5b9e\u4f8b\u4f5c\u4e3a\u53e6\u4e00\u79cd\u6280\u672f\u3002 \u6211\u4eec\u8fd8\u63cf\u8ff0\u4e86\u5982\u4f55\u89e3\u6790\u6a21\u5757\u4e4b\u95f4\u7684\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u3002 warning Warning A circular dependency might also be caused when using \"barrel files\"/index.ts files to group imports. Barrel files should be omitted when it comes to module/provider classes. For example, barrel files should not be used when importing files within the same directory as the barrel file, i.e. cats/cats.controller should not import cats to import the cats/cats.service file. For more details please also see this github issue .","title":"\u5faa\u73af\u4f9d\u8d56"},{"location":"fundamentals/circular-dependency/#_2","text":"\u524d\u5411\u5f15\u7528\u5141\u8bb8 Nest \u5f15\u7528\u5c1a\u672a\u4f7f\u7528' forwardRef() '\u5b9e\u7528\u51fd\u6570\u5b9a\u4e49\u7684\u7c7b\u3002 \u4f8b\u5982\uff0c\u5982\u679c' CatsService '\u548c' CommonService '\u76f8\u4e92\u4f9d\u8d56\uff0c\u5173\u7cfb\u7684\u53cc\u65b9\u90fd\u53ef\u4ee5\u4f7f\u7528' @Inject() '\u548c' forwardRef() '\u5de5\u5177\u6765\u89e3\u51b3\u5faa\u73af\u4f9d\u8d56\u3002 \u5426\u5219 Nest \u5c06\u4e0d\u4f1a\u5b9e\u4f8b\u5316\u5b83\u4eec\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u57fa\u672c\u5143\u6570\u636e\u90fd\u5c06\u4e0d\u53ef\u7528\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50: @ @filename ( cats . service ) @Injectable () export class CatsService { constructor ( @Inject ( forwardRef (() => CommonService )) private commonService : CommonService , ) {} } @ @switch @Injectable () @Dependencies ( forwardRef (() => CommonService )) export class CatsService { constructor ( commonService ) { this . commonService = commonService ; } } info Hint The forwardRef() function is imported from the @nestjs/common package. That covers one side of the relationship. Now let's do the same with CommonService : @ @filename ( common . service ) @Injectable () export class CommonService { constructor ( @Inject ( forwardRef (() => CatsService )) private catsService : CatsService , ) {} } @ @switch @Injectable () @Dependencies ( forwardRef (() => CatsService )) export class CommonService { constructor ( catsService ) { this . catsService = catsService ; } } warning Warning The order of instantiation is indeterminate. Make sure your code does not depend on which constructor is called first.","title":"\u5411\u524d\u5f15\u7528"},{"location":"fundamentals/circular-dependency/#moduleref","text":"\u4f7f\u7528\u201cforwardRef()\u201d\u7684\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u91cd\u6784\u4f60\u7684\u4ee3\u7801\uff0c\u5e76\u4f7f\u7528\u201cModuleRef\u201d\u7c7b\u6765\u68c0\u7d22(\u5426\u5219)\u5faa\u73af\u5173\u7cfb\u7684\u4e00\u8fb9\u7684\u63d0\u4f9b\u8005\u3002 \u4e86\u89e3\u66f4\u591a\u5173\u4e8e' ModuleRef '\u5b9e\u7528\u7a0b\u5e8f\u7c7b\u7684\u4fe1\u606f \u8fd9\u91cc \u3002","title":"ModuleRef \u7c7b\u66ff\u4ee3"},{"location":"fundamentals/circular-dependency/#_3","text":"\u4e3a\u4e86\u89e3\u51b3\u6a21\u5757\u4e4b\u95f4\u7684\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\uff0c\u5728\u6a21\u5757\u5173\u8054\u7684\u4e24\u8fb9\u90fd\u4f7f\u7528\u76f8\u540c\u7684' forwardRef() '\u5b9e\u7528\u51fd\u6570\u3002 \u4f8b\u5982: @ @filename ( common . module ) @Module ({ imports : [ forwardRef (() => CatsModule )], }) export class CommonModule {}","title":"\u6a21\u5757\u5411\u524d\u5f15\u7528"},{"location":"fundamentals/dependency-injection/","text":"\u5b9a\u5236\u7684\u63d0\u4f9b\u5668 \u00b6 \u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u8c08\u5230\u4e86 \u4f9d\u8d56\u6ce8\u5165(DI) \u7684\u5404\u4e2a\u65b9\u9762\uff0c\u4ee5\u53ca\u5b83\u5728 Nest \u4e2d\u662f\u5982\u4f55\u4f7f\u7528\u7684\u3002 \u5176\u4e2d\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f \u57fa\u4e8e\u6784\u9020\u51fd\u6570 \u4f9d\u8d56\u6ce8\u5165\uff0c\u5b83\u5c06\u5b9e\u4f8b(\u901a\u5e38\u662f\u670d\u52a1\u63d0\u4f9b\u5668)\u6ce8\u5165\u5230\u7c7b\u4e2d\u3002 \u4f60\u4e0d\u4f1a\u60ca\u8bb6\u4e8e\u4f9d\u8d56\u6ce8\u5165\u4ee5\u4e00\u79cd\u57fa\u672c\u7684\u65b9\u5f0f\u5185\u7f6e\u5230 Nest \u6838\u5fc3\u4e2d\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u7814\u7a76\u4e86\u4e00\u4e2a\u4e3b\u8981\u6a21\u5f0f\u3002 \u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5229\u7528 DI \u7cfb\u7edf\u7684\u5168\u90e8\u7279\u6027\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u7814\u7a76\u5b83\u4eec\u3002 DI \u57fa\u672c\u9762 \u00b6 \u4f9d\u8d56\u6ce8\u5165\u662f\u4e00\u79cd \u63a7\u5236\u53cd\u8f6c(IoC) \u6280\u672f\uff0c\u5728\u8fd9\u79cd\u6280\u672f\u4e2d\uff0c\u4f60\u5c06\u4f9d\u8d56\u7684\u5b9e\u4f8b\u5316\u59d4\u6258\u7ed9 IoC \u5bb9\u5668(\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u662f NestJS \u8fd0\u884c\u65f6\u7cfb\u7edf)\uff0c\u800c\u4e0d\u662f\u5728\u4f60\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u6267\u884c\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b Providers \u7ae0\u8282 \u4e2d\u7684\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u63d0\u4f9b\u5668\u3002 ' @Injectable() '\u88c5\u9970\u5668\u5c06' CatsService '\u7c7b\u6807\u8bb0\u4e3a\u63d0\u4f9b\u5668\u3002 @ @filename ( cats . service ) import { Injectable } from '@nestjs/common' ; import { Cat } from './interfaces/cat.interface' ; @Injectable () export class CatsService { private readonly cats : Cat [] = []; findAll () : Cat [] { return this . cats ; } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class CatsService { constructor () { this . cats = []; } findAll () { return this . cats ; } } \u7136\u540e\u6211\u4eec\u8bf7\u6c42 Nest \u5c06\u8be5\u63d0\u4f9b\u5668\u6ce8\u5165\u5230\u6211\u4eec\u7684\u63a7\u5236\u5668\u7c7b\u4e2d: @ @filename ( cats . controller ) import { Controller , Get } from '@nestjs/common' ; import { CatsService } from './cats.service' ; import { Cat } from './interfaces/cat.interface' ; @Controller ( 'cats' ) export class CatsController { constructor ( private catsService : CatsService ) {} @Get () async findAll () : Promise < Cat [] > { return this . catsService . findAll (); } } @ @switch import { Controller , Get , Bind , Dependencies } from '@nestjs/common' ; import { CatsService } from './cats.service' ; @Controller ( 'cats' ) @Dependencies ( CatsService ) export class CatsController { constructor ( catsService ) { this . catsService = catsService ; } @Get () async findAll () { return this . catsService . findAll (); } } \u6700\u540e\uff0c\u6211\u4eec\u5411 Nest IoC \u5bb9\u5668\u6ce8\u518c\u8be5\u63d0\u4f9b\u5668: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats/cats.controller' ; import { CatsService } from './cats/cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) export class AppModule {} \u5230\u5e95\u662f\u4ec0\u4e48\u8ba9\u8fd9\u4e00\u5207\u53d1\u751f\u7684?\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6709\u4e09\u4e2a\u5173\u952e\u6b65\u9aa4: \u5728\u201ccat.sservice.ts\u201d\u4e2d\uff0c\u201c@Injectable()\u201d\u88c5\u9970\u5668\u5c06\u201cCatsService\u201d\u7c7b\u58f0\u660e\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u88ab Nest IoC \u5bb9\u5668\u7ba1\u7406\u7684\u7c7b\u3002 \u5728' cat.scontroller.ts '\u4e2d\uff0c' CatsController '\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6ce8\u5165\u58f0\u660e\u4e86\u5bf9' CatsService '\u4ee4\u724c\u7684\u4f9d\u8d56: constructor ( private catsService : CatsService ) \u5728\u201capp.module.ts\u201d\u4e2d\uff0c\u6211\u4eec\u5c06\u4ee4\u724c\u201cCatsService\u201d\u4e0e\u201ccat.sservice.ts\u201d\u6587\u4ef6\u4e2d\u7684\u7c7b\u201cCatsService\u201d\u5173\u8054\u8d77\u6765\u3002 \u4e0b\u9762\u6211\u4eec\u5c06\u786e\u5207\u5730 \u770b\u5230 \u8fd9\u4e2a\u5173\u8054(\u4e5f\u79f0\u4e3a registration )\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002 \u5f53 Nest IoC \u5bb9\u5668\u5b9e\u4f8b\u5316\u4e00\u4e2a\u201cCatsController\u201d\u65f6\uff0c\u5b83\u9996\u5148\u67e5\u627e\u4efb\u4f55\u4f9d\u8d56\u9879\u3002 \u5f53\u5b83\u627e\u5230' CatsService '\u4f9d\u8d56\u9879\u65f6\uff0c\u5b83\u5bf9' CatsService '\u4ee4\u724c\u6267\u884c\u67e5\u627e\uff0c\u8be5\u4ee4\u724c\u8fd4\u56de' CatsService '\u7c7b\uff0c\u6bcf\u4e00\u4e2a\u6ce8\u518c\u6b65\u9aa4(\u4e0a\u9762\u7684\u7b2c 3 \u6761)\u3002 \u5047\u8bbe\u4e3a' SINGLETON '\u8303\u56f4(\u9ed8\u8ba4\u884c\u4e3a)\uff0cNest \u5c06\u521b\u5efa\u4e00\u4e2a' CatsService '\u7684\u5b9e\u4f8b\uff0c\u7f13\u5b58\u5b83\uff0c\u7136\u540e\u8fd4\u56de\u5b83\uff0c\u6216\u8005\u5982\u679c\u4e00\u4e2a\u5df2\u7ecf\u88ab\u7f13\u5b58\uff0c\u8fd4\u56de\u73b0\u6709\u7684\u5b9e\u4f8b\u3002 \u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e2a\u89e3\u91ca\u6709\u70b9\u7b80\u5316\u4e86\u3002 \u6211\u4eec\u5ffd\u7565\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\u662f\uff0c\u5206\u6790\u4f9d\u8d56\u5173\u7cfb\u7684\u4ee3\u7801\u7684\u8fc7\u7a0b\u975e\u5e38\u590d\u6742\uff0c\u5e76\u4e14\u53d1\u751f\u5728\u5e94\u7528\u7a0b\u5e8f\u5f15\u5bfc\u671f\u95f4\u3002 \u4e00\u4e2a\u5173\u952e\u7279\u6027\u662f\u4f9d\u8d56\u5173\u7cfb\u5206\u6790(\u6216\u201c\u521b\u5efa\u4f9d\u8d56\u5173\u7cfb\u56fe\u201d)\u662f\u53ef\u4f20\u9012\u7684\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c' CatsService '\u672c\u8eab\u6709\u4f9d\u8d56\u9879\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u4e5f\u4f1a\u88ab\u89e3\u6790\u3002 \u4f9d\u8d56\u5173\u7cfb\u56fe\u786e\u4fdd\u4f9d\u8d56\u5173\u7cfb\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u89e3\u6790\u2014\u2014\u672c\u8d28\u4e0a\u662f\u201c\u81ea\u5e95\u5411\u4e0a\u201d\u3002 \u8fd9\u79cd\u673a\u5236\u4f7f\u5f00\u53d1\u4eba\u5458\u4e0d\u5fc5\u7ba1\u7406\u5982\u6b64\u590d\u6742\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\u3002 \u6807\u51c6\u7684\u63d0\u4f9b\u5668 \u00b6 Let's take a closer look at the @Module() decorator. In app.module , we declare: @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) The providers property takes an array of providers . So far, we've supplied those providers via a list of class names. In fact, the syntax providers: [CatsService] is short-hand for the more complete syntax: providers : [ { provide : CatsService , useClass : CatsService , }, ]; Now that we see this explicit construction, we can understand the registration process. Here, we are clearly associating the token CatsService with the class CatsService . The short-hand notation is merely a convenience to simplify the most common use-case, where the token is used to request an instance of a class by the same name. \u5b9a\u5236\u7684\u63d0\u4f9b\u5668 \u00b6 What happens when your requirements go beyond those offered by Standard providers ? Here are a few examples: You want to create a custom instance instead of having Nest instantiate (or return a cached instance of) a class You want to re-use an existing class in a second dependency You want to override a class with a mock version for testing Nest allows you to define Custom providers to handle these cases. It provides several ways to define custom providers. Let's walk through them. info Hint If you are having problems with dependency resolution you can set the NEST_DEBUG environment variable and get extra dependency resolution logs during startup. \u503c\u63d0\u4f9b\u5668: useValue \u00b6 The useValue syntax is useful for injecting a constant value, putting an external library into the Nest container, or replacing a real implementation with a mock object. Let's say you'd like to force Nest to use a mock CatsService for testing purposes. import { CatsService } from './cats.service' ; const mockCatsService = { /* mock implementation ... */ }; @Module ({ imports : [ CatsModule ], providers : [ { provide : CatsService , useValue : mockCatsService , }, ], }) export class AppModule {} In this example, the CatsService token will resolve to the mockCatsService mock object. useValue requires a value - in this case a literal object that has the same interface as the CatsService class it is replacing. Because of TypeScript's structural typing , you can use any object that has a compatible interface, including a literal object or a class instance instantiated with new . \u975e\u57fa\u4e8e\u7c7b\u7684\u63d0\u4f9b\u5668\u4ee4\u724c \u00b6 So far, we've used class names as our provider tokens (the value of the provide property in a provider listed in the providers array). This is matched by the standard pattern used with constructor based injection , where the token is also a class name. (Refer back to DI Fundamentals for a refresher on tokens if this concept isn't entirely clear). Sometimes, we may want the flexibility to use strings or symbols as the DI token. For example: import { connection } from './connection' ; @Module ({ providers : [ { provide : 'CONNECTION' , useValue : connection , }, ], }) export class AppModule {} In this example, we are associating a string-valued token ( 'CONNECTION' ) with a pre-existing connection object we've imported from an external file. warning Notice In addition to using strings as token values, you can also use JavaScript symbols or TypeScript enums . We've previously seen how to inject a provider using the standard constructor based injection pattern. This pattern requires that the dependency be declared with a class name. The 'CONNECTION' custom provider uses a string-valued token. Let's see how to inject such a provider. To do so, we use the @Inject() decorator. This decorator takes a single argument - the token. @ @filename () @Injectable () export class CatsRepository { constructor ( @Inject ( 'CONNECTION' ) connection : Connection ) {} } @ @switch @Injectable () @Dependencies ( 'CONNECTION' ) export class CatsRepository { constructor ( connection ) {} } info Hint The @Inject() decorator is imported from @nestjs/common package. While we directly use the string 'CONNECTION' in the above examples for illustration purposes, for clean code organization, it's best practice to define tokens in a separate file, such as constants.ts . Treat them much as you would symbols or enums that are defined in their own file and imported where needed. \u7c7b\u63d0\u4f9b\u5668: useClass \u00b6 The useClass syntax allows you to dynamically determine a class that a token should resolve to. For example, suppose we have an abstract (or default) ConfigService class. Depending on the current environment, we want Nest to provide a different implementation of the configuration service. The following code implements such a strategy. const configServiceProvider = { provide : ConfigService , useClass : process.env.NODE_ENV === 'development' ? DevelopmentConfigService : ProductionConfigService , }; @Module ({ providers : [ configServiceProvider ], }) export class AppModule {} Let's look at a couple of details in this code sample. You'll notice that we define configServiceProvider with a literal object first, then pass it in the module decorator's providers property. This is just a bit of code organization, but is functionally equivalent to the examples we've used thus far in this chapter. Also, we have used the ConfigService class name as our token. For any class that depends on ConfigService , Nest will inject an instance of the provided class ( DevelopmentConfigService or ProductionConfigService ) overriding any default implementation that may have been declared elsewhere (e.g., a ConfigService declared with an @Injectable() decorator). \u5de5\u5382\u7684\u63d0\u4f9b\u5668: useFactory \u00b6 The useFactory syntax allows for creating providers dynamically . The actual provider will be supplied by the value returned from a factory function. The factory function can be as simple or complex as needed. A simple factory may not depend on any other providers. A more complex factory can itself inject other providers it needs to compute its result. For the latter case, the factory provider syntax has a pair of related mechanisms: The factory function can accept (optional) arguments. The (optional) inject property accepts an array of providers that Nest will resolve and pass as arguments to the factory function during the instantiation process. The two lists should be correlated: Nest will pass instances from the inject list as arguments to the factory function in the same order. The example below demonstrates this. @ @filename () const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider : OptionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], }) export class AppModule {} @ @switch const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], }) export class AppModule {} \u522b\u540d\u63d0\u4f9b\u5668: useExisting \u00b6 The useExisting syntax allows you to create aliases for existing providers. This creates two ways to access the same provider. In the example below, the (string-based) token 'AliasedLoggerService' is an alias for the (class-based) token LoggerService . Assume we have two different dependencies, one for 'AliasedLoggerService' and one for LoggerService . If both dependencies are specified with SINGLETON scope, they'll both resolve to the same instance. @Injectable () class LoggerService { /* implementation details */ } const loggerAliasProvider = { provide : 'AliasedLoggerService' , useExisting : LoggerService , }; @Module ({ providers : [ LoggerService , loggerAliasProvider ], }) export class AppModule {} \u975e\u670d\u52a1\u63d0\u4f9b\u5668 \u00b6 While providers often supply services, they are not limited to that usage. A provider can supply any value. For example, a provider may supply an array of configuration objects based on the current environment, as shown below: const configFactory = { provide : 'CONFIG' , useFactory : () => { return process . env . NODE_ENV === 'development' ? devConfig : prodConfig ; }, }; @Module ({ providers : [ configFactory ], }) export class AppModule {} \u5bfc\u51fa\u81ea\u5b9a\u4e49\u670d\u52a1\u63d0\u4f9b\u5668\u7a0b\u5e8f \u00b6 Like any provider, a custom provider is scoped to its declaring module. To make it visible to other modules, it must be exported. To export a custom provider, we can either use its token or the full provider object. The following example shows exporting using the token: @ @filename () const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider : OptionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], exports : [ 'CONNECTION' ], }) export class AppModule {} @ @switch const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], exports : [ 'CONNECTION' ], }) export class AppModule {} Alternatively, export with the full provider object: @ @filename () const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider : OptionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], exports : [ connectionFactory ], }) export class AppModule {} @ @switch const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], exports : [ connectionFactory ], }) export class AppModule {}","title":"\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668"},{"location":"fundamentals/dependency-injection/#_1","text":"\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u8c08\u5230\u4e86 \u4f9d\u8d56\u6ce8\u5165(DI) \u7684\u5404\u4e2a\u65b9\u9762\uff0c\u4ee5\u53ca\u5b83\u5728 Nest \u4e2d\u662f\u5982\u4f55\u4f7f\u7528\u7684\u3002 \u5176\u4e2d\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662f \u57fa\u4e8e\u6784\u9020\u51fd\u6570 \u4f9d\u8d56\u6ce8\u5165\uff0c\u5b83\u5c06\u5b9e\u4f8b(\u901a\u5e38\u662f\u670d\u52a1\u63d0\u4f9b\u5668)\u6ce8\u5165\u5230\u7c7b\u4e2d\u3002 \u4f60\u4e0d\u4f1a\u60ca\u8bb6\u4e8e\u4f9d\u8d56\u6ce8\u5165\u4ee5\u4e00\u79cd\u57fa\u672c\u7684\u65b9\u5f0f\u5185\u7f6e\u5230 Nest \u6838\u5fc3\u4e2d\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u7814\u7a76\u4e86\u4e00\u4e2a\u4e3b\u8981\u6a21\u5f0f\u3002 \u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5229\u7528 DI \u7cfb\u7edf\u7684\u5168\u90e8\u7279\u6027\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u7814\u7a76\u5b83\u4eec\u3002","title":"\u5b9a\u5236\u7684\u63d0\u4f9b\u5668"},{"location":"fundamentals/dependency-injection/#di","text":"\u4f9d\u8d56\u6ce8\u5165\u662f\u4e00\u79cd \u63a7\u5236\u53cd\u8f6c(IoC) \u6280\u672f\uff0c\u5728\u8fd9\u79cd\u6280\u672f\u4e2d\uff0c\u4f60\u5c06\u4f9d\u8d56\u7684\u5b9e\u4f8b\u5316\u59d4\u6258\u7ed9 IoC \u5bb9\u5668(\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u662f NestJS \u8fd0\u884c\u65f6\u7cfb\u7edf)\uff0c\u800c\u4e0d\u662f\u5728\u4f60\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u6267\u884c\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u770b Providers \u7ae0\u8282 \u4e2d\u7684\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u63d0\u4f9b\u5668\u3002 ' @Injectable() '\u88c5\u9970\u5668\u5c06' CatsService '\u7c7b\u6807\u8bb0\u4e3a\u63d0\u4f9b\u5668\u3002 @ @filename ( cats . service ) import { Injectable } from '@nestjs/common' ; import { Cat } from './interfaces/cat.interface' ; @Injectable () export class CatsService { private readonly cats : Cat [] = []; findAll () : Cat [] { return this . cats ; } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class CatsService { constructor () { this . cats = []; } findAll () { return this . cats ; } } \u7136\u540e\u6211\u4eec\u8bf7\u6c42 Nest \u5c06\u8be5\u63d0\u4f9b\u5668\u6ce8\u5165\u5230\u6211\u4eec\u7684\u63a7\u5236\u5668\u7c7b\u4e2d: @ @filename ( cats . controller ) import { Controller , Get } from '@nestjs/common' ; import { CatsService } from './cats.service' ; import { Cat } from './interfaces/cat.interface' ; @Controller ( 'cats' ) export class CatsController { constructor ( private catsService : CatsService ) {} @Get () async findAll () : Promise < Cat [] > { return this . catsService . findAll (); } } @ @switch import { Controller , Get , Bind , Dependencies } from '@nestjs/common' ; import { CatsService } from './cats.service' ; @Controller ( 'cats' ) @Dependencies ( CatsService ) export class CatsController { constructor ( catsService ) { this . catsService = catsService ; } @Get () async findAll () { return this . catsService . findAll (); } } \u6700\u540e\uff0c\u6211\u4eec\u5411 Nest IoC \u5bb9\u5668\u6ce8\u518c\u8be5\u63d0\u4f9b\u5668: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats/cats.controller' ; import { CatsService } from './cats/cats.service' ; @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) export class AppModule {} \u5230\u5e95\u662f\u4ec0\u4e48\u8ba9\u8fd9\u4e00\u5207\u53d1\u751f\u7684?\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6709\u4e09\u4e2a\u5173\u952e\u6b65\u9aa4: \u5728\u201ccat.sservice.ts\u201d\u4e2d\uff0c\u201c@Injectable()\u201d\u88c5\u9970\u5668\u5c06\u201cCatsService\u201d\u7c7b\u58f0\u660e\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u88ab Nest IoC \u5bb9\u5668\u7ba1\u7406\u7684\u7c7b\u3002 \u5728' cat.scontroller.ts '\u4e2d\uff0c' CatsController '\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6ce8\u5165\u58f0\u660e\u4e86\u5bf9' CatsService '\u4ee4\u724c\u7684\u4f9d\u8d56: constructor ( private catsService : CatsService ) \u5728\u201capp.module.ts\u201d\u4e2d\uff0c\u6211\u4eec\u5c06\u4ee4\u724c\u201cCatsService\u201d\u4e0e\u201ccat.sservice.ts\u201d\u6587\u4ef6\u4e2d\u7684\u7c7b\u201cCatsService\u201d\u5173\u8054\u8d77\u6765\u3002 \u4e0b\u9762\u6211\u4eec\u5c06\u786e\u5207\u5730 \u770b\u5230 \u8fd9\u4e2a\u5173\u8054(\u4e5f\u79f0\u4e3a registration )\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002 \u5f53 Nest IoC \u5bb9\u5668\u5b9e\u4f8b\u5316\u4e00\u4e2a\u201cCatsController\u201d\u65f6\uff0c\u5b83\u9996\u5148\u67e5\u627e\u4efb\u4f55\u4f9d\u8d56\u9879\u3002 \u5f53\u5b83\u627e\u5230' CatsService '\u4f9d\u8d56\u9879\u65f6\uff0c\u5b83\u5bf9' CatsService '\u4ee4\u724c\u6267\u884c\u67e5\u627e\uff0c\u8be5\u4ee4\u724c\u8fd4\u56de' CatsService '\u7c7b\uff0c\u6bcf\u4e00\u4e2a\u6ce8\u518c\u6b65\u9aa4(\u4e0a\u9762\u7684\u7b2c 3 \u6761)\u3002 \u5047\u8bbe\u4e3a' SINGLETON '\u8303\u56f4(\u9ed8\u8ba4\u884c\u4e3a)\uff0cNest \u5c06\u521b\u5efa\u4e00\u4e2a' CatsService '\u7684\u5b9e\u4f8b\uff0c\u7f13\u5b58\u5b83\uff0c\u7136\u540e\u8fd4\u56de\u5b83\uff0c\u6216\u8005\u5982\u679c\u4e00\u4e2a\u5df2\u7ecf\u88ab\u7f13\u5b58\uff0c\u8fd4\u56de\u73b0\u6709\u7684\u5b9e\u4f8b\u3002 \u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e2a\u89e3\u91ca\u6709\u70b9\u7b80\u5316\u4e86\u3002 \u6211\u4eec\u5ffd\u7565\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\u662f\uff0c\u5206\u6790\u4f9d\u8d56\u5173\u7cfb\u7684\u4ee3\u7801\u7684\u8fc7\u7a0b\u975e\u5e38\u590d\u6742\uff0c\u5e76\u4e14\u53d1\u751f\u5728\u5e94\u7528\u7a0b\u5e8f\u5f15\u5bfc\u671f\u95f4\u3002 \u4e00\u4e2a\u5173\u952e\u7279\u6027\u662f\u4f9d\u8d56\u5173\u7cfb\u5206\u6790(\u6216\u201c\u521b\u5efa\u4f9d\u8d56\u5173\u7cfb\u56fe\u201d)\u662f\u53ef\u4f20\u9012\u7684\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c' CatsService '\u672c\u8eab\u6709\u4f9d\u8d56\u9879\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u4e5f\u4f1a\u88ab\u89e3\u6790\u3002 \u4f9d\u8d56\u5173\u7cfb\u56fe\u786e\u4fdd\u4f9d\u8d56\u5173\u7cfb\u6309\u7167\u6b63\u786e\u7684\u987a\u5e8f\u89e3\u6790\u2014\u2014\u672c\u8d28\u4e0a\u662f\u201c\u81ea\u5e95\u5411\u4e0a\u201d\u3002 \u8fd9\u79cd\u673a\u5236\u4f7f\u5f00\u53d1\u4eba\u5458\u4e0d\u5fc5\u7ba1\u7406\u5982\u6b64\u590d\u6742\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\u3002","title":"DI \u57fa\u672c\u9762"},{"location":"fundamentals/dependency-injection/#_2","text":"Let's take a closer look at the @Module() decorator. In app.module , we declare: @Module ({ controllers : [ CatsController ], providers : [ CatsService ], }) The providers property takes an array of providers . So far, we've supplied those providers via a list of class names. In fact, the syntax providers: [CatsService] is short-hand for the more complete syntax: providers : [ { provide : CatsService , useClass : CatsService , }, ]; Now that we see this explicit construction, we can understand the registration process. Here, we are clearly associating the token CatsService with the class CatsService . The short-hand notation is merely a convenience to simplify the most common use-case, where the token is used to request an instance of a class by the same name.","title":"\u6807\u51c6\u7684\u63d0\u4f9b\u5668"},{"location":"fundamentals/dependency-injection/#_3","text":"What happens when your requirements go beyond those offered by Standard providers ? Here are a few examples: You want to create a custom instance instead of having Nest instantiate (or return a cached instance of) a class You want to re-use an existing class in a second dependency You want to override a class with a mock version for testing Nest allows you to define Custom providers to handle these cases. It provides several ways to define custom providers. Let's walk through them. info Hint If you are having problems with dependency resolution you can set the NEST_DEBUG environment variable and get extra dependency resolution logs during startup.","title":"\u5b9a\u5236\u7684\u63d0\u4f9b\u5668"},{"location":"fundamentals/dependency-injection/#usevalue","text":"The useValue syntax is useful for injecting a constant value, putting an external library into the Nest container, or replacing a real implementation with a mock object. Let's say you'd like to force Nest to use a mock CatsService for testing purposes. import { CatsService } from './cats.service' ; const mockCatsService = { /* mock implementation ... */ }; @Module ({ imports : [ CatsModule ], providers : [ { provide : CatsService , useValue : mockCatsService , }, ], }) export class AppModule {} In this example, the CatsService token will resolve to the mockCatsService mock object. useValue requires a value - in this case a literal object that has the same interface as the CatsService class it is replacing. Because of TypeScript's structural typing , you can use any object that has a compatible interface, including a literal object or a class instance instantiated with new .","title":"\u503c\u63d0\u4f9b\u5668: useValue"},{"location":"fundamentals/dependency-injection/#_4","text":"So far, we've used class names as our provider tokens (the value of the provide property in a provider listed in the providers array). This is matched by the standard pattern used with constructor based injection , where the token is also a class name. (Refer back to DI Fundamentals for a refresher on tokens if this concept isn't entirely clear). Sometimes, we may want the flexibility to use strings or symbols as the DI token. For example: import { connection } from './connection' ; @Module ({ providers : [ { provide : 'CONNECTION' , useValue : connection , }, ], }) export class AppModule {} In this example, we are associating a string-valued token ( 'CONNECTION' ) with a pre-existing connection object we've imported from an external file. warning Notice In addition to using strings as token values, you can also use JavaScript symbols or TypeScript enums . We've previously seen how to inject a provider using the standard constructor based injection pattern. This pattern requires that the dependency be declared with a class name. The 'CONNECTION' custom provider uses a string-valued token. Let's see how to inject such a provider. To do so, we use the @Inject() decorator. This decorator takes a single argument - the token. @ @filename () @Injectable () export class CatsRepository { constructor ( @Inject ( 'CONNECTION' ) connection : Connection ) {} } @ @switch @Injectable () @Dependencies ( 'CONNECTION' ) export class CatsRepository { constructor ( connection ) {} } info Hint The @Inject() decorator is imported from @nestjs/common package. While we directly use the string 'CONNECTION' in the above examples for illustration purposes, for clean code organization, it's best practice to define tokens in a separate file, such as constants.ts . Treat them much as you would symbols or enums that are defined in their own file and imported where needed.","title":"\u975e\u57fa\u4e8e\u7c7b\u7684\u63d0\u4f9b\u5668\u4ee4\u724c"},{"location":"fundamentals/dependency-injection/#useclass","text":"The useClass syntax allows you to dynamically determine a class that a token should resolve to. For example, suppose we have an abstract (or default) ConfigService class. Depending on the current environment, we want Nest to provide a different implementation of the configuration service. The following code implements such a strategy. const configServiceProvider = { provide : ConfigService , useClass : process.env.NODE_ENV === 'development' ? DevelopmentConfigService : ProductionConfigService , }; @Module ({ providers : [ configServiceProvider ], }) export class AppModule {} Let's look at a couple of details in this code sample. You'll notice that we define configServiceProvider with a literal object first, then pass it in the module decorator's providers property. This is just a bit of code organization, but is functionally equivalent to the examples we've used thus far in this chapter. Also, we have used the ConfigService class name as our token. For any class that depends on ConfigService , Nest will inject an instance of the provided class ( DevelopmentConfigService or ProductionConfigService ) overriding any default implementation that may have been declared elsewhere (e.g., a ConfigService declared with an @Injectable() decorator).","title":"\u7c7b\u63d0\u4f9b\u5668: useClass"},{"location":"fundamentals/dependency-injection/#usefactory","text":"The useFactory syntax allows for creating providers dynamically . The actual provider will be supplied by the value returned from a factory function. The factory function can be as simple or complex as needed. A simple factory may not depend on any other providers. A more complex factory can itself inject other providers it needs to compute its result. For the latter case, the factory provider syntax has a pair of related mechanisms: The factory function can accept (optional) arguments. The (optional) inject property accepts an array of providers that Nest will resolve and pass as arguments to the factory function during the instantiation process. The two lists should be correlated: Nest will pass instances from the inject list as arguments to the factory function in the same order. The example below demonstrates this. @ @filename () const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider : OptionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], }) export class AppModule {} @ @switch const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], }) export class AppModule {}","title":"\u5de5\u5382\u7684\u63d0\u4f9b\u5668: useFactory"},{"location":"fundamentals/dependency-injection/#useexisting","text":"The useExisting syntax allows you to create aliases for existing providers. This creates two ways to access the same provider. In the example below, the (string-based) token 'AliasedLoggerService' is an alias for the (class-based) token LoggerService . Assume we have two different dependencies, one for 'AliasedLoggerService' and one for LoggerService . If both dependencies are specified with SINGLETON scope, they'll both resolve to the same instance. @Injectable () class LoggerService { /* implementation details */ } const loggerAliasProvider = { provide : 'AliasedLoggerService' , useExisting : LoggerService , }; @Module ({ providers : [ LoggerService , loggerAliasProvider ], }) export class AppModule {}","title":"\u522b\u540d\u63d0\u4f9b\u5668: useExisting"},{"location":"fundamentals/dependency-injection/#_5","text":"While providers often supply services, they are not limited to that usage. A provider can supply any value. For example, a provider may supply an array of configuration objects based on the current environment, as shown below: const configFactory = { provide : 'CONFIG' , useFactory : () => { return process . env . NODE_ENV === 'development' ? devConfig : prodConfig ; }, }; @Module ({ providers : [ configFactory ], }) export class AppModule {}","title":"\u975e\u670d\u52a1\u63d0\u4f9b\u5668"},{"location":"fundamentals/dependency-injection/#_6","text":"Like any provider, a custom provider is scoped to its declaring module. To make it visible to other modules, it must be exported. To export a custom provider, we can either use its token or the full provider object. The following example shows exporting using the token: @ @filename () const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider : OptionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], exports : [ 'CONNECTION' ], }) export class AppModule {} @ @switch const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], exports : [ 'CONNECTION' ], }) export class AppModule {} Alternatively, export with the full provider object: @ @filename () const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider : OptionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], exports : [ connectionFactory ], }) export class AppModule {} @ @switch const connectionFactory = { provide : 'CONNECTION' , useFactory : ( optionsProvider ) => { const options = optionsProvider . get (); return new DatabaseConnection ( options ); }, inject : [ OptionsProvider ], }; @Module ({ providers : [ connectionFactory ], exports : [ connectionFactory ], }) export class AppModule {}","title":"\u5bfc\u51fa\u81ea\u5b9a\u4e49\u670d\u52a1\u63d0\u4f9b\u5668\u7a0b\u5e8f"},{"location":"fundamentals/dynamic-modules/","text":"\u52a8\u6001\u6a21\u5757 \u00b6 \u6a21\u5757\u7ae0\u8282 \u6db5\u76d6\u4e86 Nest \u6a21\u5757\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5e76\u5305\u542b\u4e86 \u52a8\u6001\u6a21\u5757 \u7684\u7b80\u8981\u4ecb\u7ecd\u3002 \u672c\u7ae0\u6269\u5c55\u4e86\u52a8\u6001\u6a21\u5757\u7684\u4e3b\u9898\u3002 \u5b8c\u6210\u540e\uff0c\u60a8\u5e94\u8be5\u5f88\u597d\u5730\u638c\u63e1\u5b83\u4eec\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5982\u4f55\u548c\u4f55\u65f6\u4f7f\u7528\u5b83\u4eec\u3002 \u4ecb\u7ecd \u00b6 \u6587\u6863\u7684 \u6982\u8ff0 \u90e8\u5206\u4e2d\u7684\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u793a\u4f8b\u4f7f\u7528\u5e38\u89c4\u6216\u9759\u6001\u6a21\u5757\u3002 \u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u7ec4\u7ec4\u4ef6\uff0c\u6bd4\u5982 providers \u548c controllers \uff0c\u5b83\u4eec\u4f5c\u4e3a\u6574\u4f53\u5e94\u7528\u7a0b\u5e8f\u7684\u6a21\u5757\u5316\u90e8\u5206\u7ec4\u5408\u5728\u4e00\u8d77\u3002 \u5b83\u4eec\u4e3a\u8fd9\u4e9b\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u6267\u884c\u4e0a\u4e0b\u6587\u6216\u8303\u56f4\u3002 \u4f8b\u5982\uff0c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u63d0\u4f9b\u7a0b\u5e8f\u5bf9\u6a21\u5757\u7684\u5176\u4ed6\u6210\u5458\u53ef\u89c1\uff0c\u800c\u4e0d\u9700\u8981\u5bfc\u51fa\u5b83\u4eec\u3002 \u5f53\u4e00\u4e2a\u63d0\u4f9b\u8005\u9700\u8981\u5728\u6a21\u5757\u5916\u90e8\u53ef\u89c1\u65f6\uff0c\u5b83\u9996\u5148\u4ece\u5b83\u7684\u5bbf\u4e3b\u6a21\u5757\u5bfc\u51fa\uff0c\u7136\u540e\u5bfc\u5165\u5230\u5b83\u7684\u6d88\u8d39\u6a21\u5757\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u719f\u6089\u7684\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a UsersModule \u6765\u63d0\u4f9b\u548c\u5bfc\u51fa UsersService \u3002 UsersModule \u662f UsersService \u7684\u5bbf\u4e3b\u6a21\u5757\u3002 import { Module } from '@nestjs/common' ; import { UsersService } from './users.service' ; @Module ({ providers : [ UsersService ], exports : [ UsersService ], }) export class UsersModule {} \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a AuthModule \uff0c\u5b83\u5c06\u5bfc\u5165 UsersModule \uff0c\u4f7f UsersModule \u5bfc\u51fa\u7684\u63d0\u4f9b\u5546\u5728 AuthModule \u4e2d\u53ef\u7528: import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; @Module ({ imports : [ UsersModule ], providers : [ AuthService ], exports : [ AuthService ], }) export class AuthModule {} \u8fd9\u4e9b\u7ed3\u6784\u5141\u8bb8\u6211\u4eec\u6ce8\u5165 UsersService \u5230 AuthService \u4e2d\uff0c\u4f8b\u5982\uff0c\u6258\u7ba1\u5728 AuthModule \u4e2d\u7684 AuthService : import { Injectable } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; @Injectable () export class AuthService { constructor ( private usersService : UsersService ) {} /* Implementation that makes use of this.usersService */ } \u6211\u4eec\u5c06\u5176\u79f0\u4e3a \u9759\u6001 \u6a21\u5757\u7ed1\u5b9a\u3002 Nest \u8fde\u63a5\u6a21\u5757\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\u90fd\u5df2\u7ecf\u5728\u5bbf\u4e3b\u6a21\u5757\u548c\u6d88\u8d39\u6a21\u5757\u4e2d\u58f0\u660e\u3002 \u8ba9\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 Nest \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f7f UsersService \u5728 AuthModule \u4e2d\u53ef\u7528: \u5b9e\u4f8b\u5316 UsersModule \uff0c\u5305\u62ec\u4f20\u9012\u6027\u5730\u5bfc\u5165 UsersModule \u672c\u8eab\u4f7f\u7528\u7684\u5176\u4ed6\u6a21\u5757\uff0c\u5e76\u4f20\u9012\u6027\u5730\u89e3\u6790\u4efb\u4f55\u4f9d\u8d56\u5173\u7cfb (\u67e5\u770b \u5b9a\u5236\u63d0\u4f9b\u8005 ). \u5b9e\u4f8b\u5316 AuthModule \uff0c\u5e76\u4f7f UsersModule \u5bfc\u51fa\u7684\u63d0\u4f9b\u5546\u5bf9 AuthModule \u4e2d\u7684\u7ec4\u4ef6\u53ef\u7528(\u5c31\u50cf\u5b83\u4eec\u5df2\u7ecf\u5728 AuthModule \u4e2d\u58f0\u660e\u8fc7\u4e00\u6837). \u5728 AuthService \u4e2d\u6ce8\u5165\u4e00\u4e2a UsersService \u7684\u5b9e\u4f8b\u3002 \u52a8\u6001\u6a21\u5757\u7528\u4f8b \u00b6 \u4f7f\u7528\u9759\u6001\u6a21\u5757\u7ed1\u5b9a\uff0c\u6d88\u8d39\u6a21\u5757\u6ca1\u6709\u673a\u4f1a \u5f71\u54cd \u5982\u4f55\u914d\u7f6e\u6765\u81ea\u5bbf\u4e3b\u6a21\u5757\u7684\u63d0\u4f9b\u5546\u3002 \u4e3a\u4ec0\u4e48\u8fd9\u5f88\u91cd\u8981?\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5:\u6211\u4eec\u6709\u4e00\u4e2a\u901a\u7528\u6a21\u5757\uff0c\u5b83\u9700\u8981\u5728\u4e0d\u540c\u7684\u7528\u4f8b\u4e2d\u8868\u73b0\u4e0d\u540c\u3002 \u8fd9\u7c7b\u4f3c\u4e8e\u8bb8\u591a\u7cfb\u7edf\u4e2d\u7684\u201c\u63d2\u4ef6\u201d\u6982\u5ff5\uff0c\u5728\u8fd9\u4e9b\u7cfb\u7edf\u4e2d\uff0c\u901a\u7528\u529f\u80fd\u5728\u4f9b\u4f7f\u7528\u8005\u4f7f\u7528\u4e4b\u524d\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u914d\u7f6e\u3002 \u4f7f\u7528 Nest \u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662f \u914d\u7f6e\u6a21\u5757 \u3002 \u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\uff0c\u901a\u8fc7\u4f7f\u7528\u914d\u7f6e\u6a21\u5757\u5916\u90e8\u5316\u914d\u7f6e\u7ec6\u8282\u975e\u5e38\u6709\u7528\u3002 \u8fd9\u4f7f\u5f97\u5728\u4e0d\u540c\u7684\u90e8\u7f72\u4e2d\u52a8\u6001\u66f4\u6539\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u53d8\u5f97\u5f88\u5bb9\u6613:\u4f8b\u5982\uff0c\u5f00\u53d1\u4eba\u5458\u7684\u5f00\u53d1\u6570\u636e\u5e93\uff0cstaging/testing \u73af\u5883\u7684 staging \u6570\u636e\u5e93\uff0c\u7b49\u7b49\u3002 \u901a\u8fc7\u5c06\u914d\u7f6e\u53c2\u6570\u7684\u7ba1\u7406\u59d4\u6258\u7ed9\u914d\u7f6e\u6a21\u5757\uff0c\u5e94\u7528\u7a0b\u5e8f\u6e90\u4ee3\u7801\u53ef\u4ee5\u72ec\u7acb\u4e8e\u914d\u7f6e\u53c2\u6570\u3002 \u6311\u6218\u5728\u4e8e\u914d\u7f6e\u6a21\u5757\u672c\u8eab\uff0c\u56e0\u4e3a\u5b83\u662f\u901a\u7528\u7684(\u7c7b\u4f3c\u4e8e\u201c\u63d2\u4ef6\u201d)\uff0c\u9700\u8981\u7531\u5b83\u7684\u6d88\u8d39\u6a21\u5757\u8fdb\u884c\u5b9a\u5236\u3002 \u8fd9\u5c31\u662f \u52a8\u6001\u6a21\u5757 \u53d1\u6325\u4f5c\u7528\u7684\u5730\u65b9\u3002 \u4f7f\u7528\u52a8\u6001\u6a21\u5757\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u914d\u7f6e\u6a21\u5757 \u52a8\u6001 \uff0c\u4ee5\u4fbf\u6d88\u8d39\u6a21\u5757\u53ef\u4ee5\u4f7f\u7528 API \u6765\u63a7\u5236\u5728\u5bfc\u5165\u914d\u7f6e\u6a21\u5757\u65f6\u5982\u4f55\u5b9a\u5236\u914d\u7f6e\u6a21\u5757\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u52a8\u6001\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a API\uff0c\u7528\u4e8e\u5c06\u4e00\u4e2a\u6a21\u5757\u5bfc\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\uff0c\u5e76\u5728\u5bfc\u5165\u65f6\u5b9a\u5236\u8be5\u6a21\u5757\u7684\u5c5e\u6027\u548c\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6211\u4eec\u76ee\u524d\u770b\u5230\u7684\u9759\u6001\u7ed1\u5b9a\u3002 \u914d\u7f6e\u6a21\u5757\u7684\u4f8b\u5b50 \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 \u914d\u7f6e\u7ae0 \u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\u7684\u57fa\u672c\u7248\u672c\u3002 \u672c\u7ae0\u672b\u5c3e\u7684\u5b8c\u6574\u7248\u672c\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 \u793a\u4f8b \u3002 \u6211\u4eec\u7684\u8981\u6c42\u662f\u8ba9 ConfigModule \u63a5\u53d7\u4e00\u4e2a options \u5bf9\u8c61\u6765\u5b9a\u5236\u5b83\u3002 \u8fd9\u662f\u6211\u4eec\u60f3\u8981\u652f\u6301\u7684\u7279\u6027\u3002 \u57fa\u672c\u793a\u4f8b\u5c06 .env \u6587\u4ef6\u7684\u4f4d\u7f6e\u786c\u7f16\u7801\u4e3a\u5728\u9879\u76ee\u6839\u6587\u4ef6\u5939\u4e2d\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u60f3\u8ba9\u5b83\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728\u4f60\u9009\u62e9\u7684\u4efb\u4f55\u6587\u4ef6\u5939\u4e2d\u7ba1\u7406\u4f60\u7684 .env \u6587\u4ef6\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u8981\u5c06\u5404\u79cd .env \u6587\u4ef6\u5b58\u50a8\u5728\u9879\u76ee\u6839\u76ee\u5f55 config \u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d(\u4e5f\u5c31\u662f src \u7684\u540c\u7ea7\u6587\u4ef6\u5939)\u3002 \u5f53\u5728\u4e0d\u540c\u7684\u9879\u76ee\u4e2d\u4f7f\u7528 ConfigModule \u65f6\uff0c\u4f60\u5e0c\u671b\u80fd\u591f\u9009\u62e9\u4e0d\u540c\u7684\u6587\u4ef6\u5939\u3002 \u52a8\u6001\u6a21\u5757\u4f7f\u6211\u4eec\u80fd\u591f\u5411\u88ab\u5bfc\u5165\u7684\u6a21\u5757\u4f20\u9012\u53c2\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u66f4\u6539\u5b83\u7684\u884c\u4e3a\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5982\u679c\u6211\u4eec\u4ece\u6700\u7ec8\u76ee\u6807(\u4ece\u6d88\u8d39\u6a21\u5757\u7684\u89d2\u5ea6\u770b\u8fd9\u53ef\u80fd\u662f\u4ec0\u4e48\u6837\u5b50)\u5f00\u59cb\uff0c\u7136\u540e\u5f80\u56de\u770b\uff0c\u8fd9\u662f\u5f88\u6709\u5e2e\u52a9\u7684\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u56de\u987e\u4e00\u4e0b \u9759\u6001 \u5bfc\u5165 ConfigModule \u7684\u4f8b\u5b50(\u5373\uff0c\u4e00\u79cd\u65e0\u6cd5\u5f71\u54cd\u88ab\u5bfc\u5165\u6a21\u5757\u884c\u4e3a\u7684\u65b9\u6cd5)\u3002 \u8bf7\u5bc6\u5207\u5173\u6ce8 @Module() \u88c5\u9970\u5668\u4e2d\u7684 imports \u6570\u7ec4: import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { ConfigModule } from './config/config.module' ; @Module ({ imports : [ ConfigModule ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} \u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b \u52a8\u6001\u6a21\u5757 \u5bfc\u5165\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff0c\u5176\u4e2d\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a\u914d\u7f6e\u5bf9\u8c61\u3002 \u6bd4\u8f83\u8fd9\u4e24\u4e2a\u4f8b\u5b50\u4e2d\u7684 imports \u6570\u7ec4\u7684\u533a\u522b: import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { ConfigModule } from './config/config.module' ; @Module ({ imports : [ ConfigModule . register ({ folder : ' . / config `})], controllers: [AppController], providers: [AppService], }) export class AppModule {} \u8ba9\u6211\u4eec\u770b\u770b\u5728\u4e0a\u9762\u7684\u52a8\u6001\u4f8b\u5b50\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 \u4ec0\u4e48\u662f\u6d3b\u52a8\u90e8\u4ef6? ConfigModule \u662f\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\u5b83\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a register() \u7684\u9759\u6001\u65b9\u6cd5\u3002 \u6211\u4eec\u77e5\u9053\u5b83\u662f\u9759\u6001\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5728 ConfigModule \u7c7b\u4e0a\u8c03\u7528\u5b83\uff0c\u800c\u4e0d\u662f\u5728\u7c7b\u7684 \u5b9e\u4f8b \u4e0a\u3002 \u6ce8\u610f:\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u521b\u5efa\uff0c\u53ef\u4ee5\u6709\u4efb\u610f\u7684\u540d\u5b57\uff0c\u4f46\u662f\u6309\u7167\u60ef\u4f8b\u6211\u4eec\u5e94\u8be5\u53eb\u5b83 forRoot() \u6216\u8005 register() \u3002 register() \u65b9\u6cd5\u662f\u7531\u6211\u4eec\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u6211\u4eec\u559c\u6b22\u7684\u8f93\u5165\u53c2\u6570\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u63a5\u53d7\u4e00\u4e2a\u5177\u6709\u5408\u9002\u5c5e\u6027\u7684\u7b80\u5355 options \u5bf9\u8c61\uff0c\u8fd9\u662f\u5178\u578b\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u53ef\u4ee5\u63a8\u65ad register() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u7c7b\u4f3c\u4e8e module \u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u5b83\u7684\u8fd4\u56de\u503c\u51fa\u73b0\u5728\u6211\u4eec\u719f\u6089\u7684 imports \u5217\u8868\u4e2d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5b83\u5305\u542b\u4e86\u4e00\u4e2a\u6a21\u5757\u5217\u8868\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u7684 register() \u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a DynamicModule \u3002 \u52a8\u6001\u6a21\u5757\u53ea\u4e0d\u8fc7\u662f\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u7684\u6a21\u5757\uff0c\u5177\u6709\u4e0e\u9759\u6001\u6a21\u5757\u5b8c\u5168\u76f8\u540c\u7684\u5c5e\u6027\uff0c\u5916\u52a0\u4e00\u4e2a\u540d\u4e3a module \u7684\u989d\u5916\u5c5e\u6027\u3002 \u8ba9\u6211\u4eec\u5feb\u901f\u6d4f\u89c8\u4e00\u4e2a\u9759\u6001\u6a21\u5757\u58f0\u660e\u793a\u4f8b\uff0c\u5bc6\u5207\u5173\u6ce8\u4f20\u9012\u7ed9\u88c5\u9970\u5668\u7684\u6a21\u5757\u9009\u9879: @Module ({ imports : [ DogsModule ], controllers : [ CatsController ], providers : [ CatsService ], exports : [ CatsService ] }) \u52a8\u6001\u6a21\u5757\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5177\u6709\u5b8c\u5168\u76f8\u540c\u63a5\u53e3\u7684\u5bf9\u8c61\uff0c\u5916\u52a0\u4e00\u4e2a\u540d\u4e3a module \u7684\u9644\u52a0\u5c5e\u6027\u3002 module \u5c5e\u6027\u7528\u4f5c\u6a21\u5757\u7684\u540d\u79f0\uff0c\u5e76\u4e14\u5e94\u8be5\u4e0e\u6a21\u5757\u7684\u7c7b\u540d\u76f8\u540c\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u6240\u793a\u3002 info Hint \u5bf9\u4e8e\u4e00\u4e2a\u52a8\u6001\u6a21\u5757\uff0c\u6a21\u5757\u9009\u9879\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027\u90fd\u662f\u53ef\u9009\u7684 \u9664\u4e86 module \u3002 \u90a3\u4e48\u9759\u6001\u7684 register() \u65b9\u6cd5\u5462? \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u770b\u5230\u5b83\u7684\u5de5\u4f5c\u662f\u8fd4\u56de\u4e00\u4e2a\u5177\u6709 DynamicModule \u63a5\u53e3\u7684\u5bf9\u8c61\u3002 \u5f53\u6211\u4eec\u8c03\u7528\u5b83\u65f6\uff0c\u6211\u4eec\u6709\u6548\u5730\u5411 imports \u5217\u8868\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6a21\u5757\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728\u9759\u6001\u60c5\u51b5\u4e0b\u901a\u8fc7\u5217\u51fa\u6a21\u5757\u7c7b\u540d\u6765\u5b9e\u73b0\u7684\u65b9\u5f0f\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u52a8\u6001\u6a21\u5757 API \u53ea\u662f\u8fd4\u56de\u4e00\u4e2a\u6a21\u5757\uff0c\u4f46\u6211\u4eec\u6ca1\u6709\u5728 @Module \u88c5\u9970\u5668\u4e2d\u4fee\u590d\u5c5e\u6027\uff0c\u800c\u662f\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u6307\u5b9a\u5b83\u4eec\u3002 \u4e3a\u4e86\u4f7f\u56fe\u7247\u66f4\u5b8c\u6574\uff0c\u8fd8\u9700\u8981\u6d89\u53ca\u4e00\u4e9b\u7ec6\u8282: \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u58f0\u660e @Module() \u88c5\u9970\u5668\u7684 imports \u5c5e\u6027\u4e0d\u4ec5\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u6a21\u5757\u7c7b\u540d(\u4f8b\u5982 imports:[UsersModule] )\uff0c\u8fd8\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570 \u8fd4\u56de \u4e00\u4e2a\u52a8\u6001\u6a21\u5757(\u4f8b\u5982 imports:[ConfigModule.register(\u2026)] )\u3002 \u52a8\u6001\u6a21\u5757\u672c\u8eab\u53ef\u4ee5\u5bfc\u5165\u5176\u4ed6\u6a21\u5757\u3002 \u672c\u4f8b\u4e2d\u6211\u4eec\u4e0d\u4f1a\u8fd9\u6837\u505a\uff0c\u4f46\u5982\u679c\u52a8\u6001\u6a21\u5757\u4f9d\u8d56\u4e8e\u5176\u4ed6\u6a21\u5757\u7684\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53ef\u9009\u7684 imports \u5c5e\u6027\u6765\u5bfc\u5165\u5b83\u4eec\u3002 \u540c\u6837\uff0c\u8fd9\u4e0e\u4f7f\u7528 @Module() \u88c5\u9970\u5668\u4e3a\u9759\u6001\u6a21\u5757\u58f0\u660e\u5143\u6570\u636e\u7684\u65b9\u5f0f\u5b8c\u5168\u76f8\u4f3c\u3002 \u6709\u4e86\u8fd9\u6837\u7684\u7406\u89e3\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u770b\u770b\u6211\u4eec\u7684\u52a8\u6001 ConfigModule \u58f0\u660e\u5fc5\u987b\u662f\u4ec0\u4e48\u6837\u7684\u3002 \u8ba9\u6211\u4eec\u8bd5\u4e00\u8bd5\u3002 import { DynamicModule , Module } from '@nestjs/common' ; import { ConfigService } from './config.service' ; @Module ({}) export class ConfigModule { static register () : DynamicModule { return { module : ConfigModule , providers : [ ConfigService ], exports : [ ConfigService ], }; } } \u73b0\u5728\u5e94\u8be5\u5f88\u6e05\u695a\u5404\u4e2a\u90e8\u5206\u662f\u5982\u4f55\u8054\u7cfb\u5728\u4e00\u8d77\u7684\u3002 \u8c03\u7528 ConfigModule.register(\u2026)'\u5c06\u8fd4\u56de\u4e00\u4e2a DynamicModule \u5bf9\u8c61\uff0c\u5176\u5c5e\u6027\u4e0e\u6211\u4eec\u901a\u8fc7 @Module()`\u88c5\u9970\u5668\u63d0\u4f9b\u7684\u5143\u6570\u636e\u672c\u8d28\u4e0a\u76f8\u540c\u3002 info Hint \u4ece @nestjs/common \u5bfc\u5165 DynamicModule \u3002 \u6211\u4eec\u7684\u52a8\u6001\u6a21\u5757\u8fd8\u4e0d\u662f\u5f88\u6709\u8da3\uff0c\u4f46\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u5f15\u5165\u4efb\u4f55\u529f\u80fd\u6765 \u914d\u7f6e \u5b83\uff0c\u5c31\u50cf\u6211\u4eec\u8bf4\u8fc7\u7684\u90a3\u6837\u3002 \u8ba9\u6211\u4eec\u63a5\u4e0b\u6765\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002 \u6a21\u5757\u914d\u7f6e \u00b6 \u5b9a\u5236 ConfigModule \u884c\u4e3a\u7684\u660e\u663e\u89e3\u51b3\u65b9\u6848\u662f\u5728\u9759\u6001 register() \u65b9\u6cd5\u4e2d\u5411\u5b83\u4f20\u9012\u4e00\u4e2a options \u5bf9\u8c61\uff0c\u6b63\u5982\u6211\u4eec\u4e0a\u9762\u6240\u731c\u6d4b\u7684\u90a3\u6837\u3002 \u8ba9\u6211\u4eec\u518d\u6765\u770b\u770b\u6211\u4eec\u6d88\u8d39\u6a21\u5757\u7684 imports \u5c5e\u6027: import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { ConfigModule } from './config/config.module' ; @Module ({ imports : [ ConfigModule . register ({ folder : './config' })], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} \u8fd9\u6837\u5c31\u5f88\u597d\u5730\u5904\u7406\u4e86\u5411\u52a8\u6001\u6a21\u5757\u4f20\u9012 options \u5bf9\u8c61\u7684\u95ee\u9898\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4f7f\u7528 ConfigModule \u4e2d\u7684 options \u5bf9\u8c61\u5462?\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u3002 \u6211\u4eec\u77e5\u9053\u6211\u4eec\u7684 ConfigModule \u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u5bbf\u4e3b\uff0c\u7528\u4e8e\u63d0\u4f9b\u548c\u5bfc\u51fa\u4e00\u4e2a\u53ef\u6ce8\u5165\u7684\u670d\u52a1 - ConfigService - \u4f9b\u5176\u4ed6\u63d0\u4f9b\u5546\u4f7f\u7528\u3002 \u5b9e\u9645\u4e0a\u6211\u4eec\u7684 ConfigService \u9700\u8981\u8bfb\u53d6 options \u5bf9\u8c61\u6765\u5b9a\u5236\u5176\u884c\u4e3a\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4ece register() \u65b9\u6cd5\u4e2d\u83b7\u53d6 options \u5230 ConfigService \u3002 \u6709\u4e86\u8fd9\u4e2a\u5047\u8bbe\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u670d\u52a1\u505a\u4e00\u4e9b\u66f4\u6539\uff0c\u6839\u636e options \u5bf9\u8c61\u7684\u5c5e\u6027\u5b9a\u5236\u5176\u884c\u4e3a\u3002 ( Note : \u76ee\u524d\uff0c\u7531\u4e8e\u6211\u4eec\u8fd8 \u6ca1\u6709 \u786e\u5b9a\u5982\u4f55\u4f20\u9012\u5b83\uff0c\u6211\u4eec\u5c06\u53ea\u786c\u7f16\u7801 options \u3002\u6211\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898). import { Injectable } from '@nestjs/common' ; import * as dotenv from 'dotenv' ; import * as fs from 'fs' ; import { EnvConfig } from './interfaces' ; @Injectable () export class ConfigService { private readonly envConfig : EnvConfig ; constructor () { const options = { folder : './config' }; const filePath = ` ${ process . env . NODE_ENV || 'development' } .env` ; const envFile = path . resolve ( __dirname , '../../' , options . folder , filePath ); this . envConfig = dotenv . parse ( fs . readFileSync ( envFile )); } get ( key : string ) : string { return this . envConfig [ key ]; } } \u73b0\u5728\u6211\u4eec\u7684 ConfigService \u77e5\u9053\u5982\u4f55\u5728 options \u4e2d\u6307\u5b9a\u7684\u6587\u4ef6\u5939\u4e2d\u627e\u5230 .env \u6587\u4ef6\u3002 \u6211\u4eec\u5269\u4e0b\u7684\u4efb\u52a1\u662f\u5c06 register() \u6b65\u9aa4\u4e2d\u7684 options \u5bf9\u8c61\u6ce8\u5165\u5230 ConfigService \u4e2d\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 \u4f9d\u8d56\u6ce8\u5165 \u6765\u5b9e\u73b0\u5b83\u3002 \u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u6240\u4ee5\u786e\u4fdd\u4f60\u7406\u89e3\u5b83\u3002 \u6211\u4eec\u7684 ConfigModule \u63d0\u4f9b\u4e86 ConfigService \u3002 ConfigService \u53cd\u8fc7\u6765\u4f9d\u8d56\u4e8e options \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ea\u5728\u8fd0\u884c\u65f6\u63d0\u4f9b\u3002 \u56e0\u6b64\uff0c\u5728\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u5c06 options \u5bf9\u8c61\u7ed1\u5b9a\u5230 Nest IoC \u5bb9\u5668\uff0c\u7136\u540e\u8ba9 Nest \u5c06\u5176\u6ce8\u5165\u5230\u6211\u4eec\u7684 ConfigService \u4e2d\u3002 \u8bb0\u4f4f\uff0c\u5728 \u5b9a\u5236\u7684\u4f9b\u5e94\u5546 \u4e00\u7ae0\u4e2d\uff0cproviders \u53ef\u4ee5 \u5305\u62ec\u4efb\u4f55\u503c \uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u670d\u52a1\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u5904\u7406\u4e00\u4e2a\u7b80\u5355\u7684 options \u5bf9\u8c61\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u5904\u7406\u5c06\u9009\u9879\u5bf9\u8c61\u7ed1\u5b9a\u5230 IoC \u5bb9\u5668\u7684\u95ee\u9898\u3002 \u6211\u4eec\u5728\u9759\u6001\u7684 register() \u65b9\u6cd5\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u6b63\u5728\u52a8\u6001\u5730\u6784\u5efa\u4e00\u4e2a\u6a21\u5757\uff0c\u6a21\u5757\u7684\u5c5e\u6027\u4e4b\u4e00\u662f\u5b83\u7684\u63d0\u4f9b\u7a0b\u5e8f\u5217\u8868\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u5c06\u9009\u9879\u5bf9\u8c61\u5b9a\u4e49\u4e3a\u63d0\u4f9b\u7a0b\u5e8f\u3002 \u8fd9\u5c06\u4f7f\u5b83\u53ef\u6ce8\u5165\u5230 ConfigService \u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u6b65\u4e2d\u5229\u7528\u8fd9\u4e00\u70b9\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6ce8\u610f providers \u6570\u7ec4: import { DynamicModule , Module } from '@nestjs/common' ; import { ConfigService } from './config.service' ; @Module ({}) export class ConfigModule { static register ( options ) : DynamicModule { return { module : ConfigModule , providers : [ { provide : 'CONFIG_OPTIONS' , useValue : options , }, ConfigService , ], exports : [ ConfigService ], }; } } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06 CONFIG_OPTIONS \u63d0\u4f9b\u5546\u6ce8\u5165\u5230 ConfigService \u4e2d\u6765\u5b8c\u6210\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u56de\u60f3\u4e00\u4e0b\uff0c\u5f53\u6211\u4eec\u4f7f\u7528\u975e\u7c7b\u4ee4\u724c\u5b9a\u4e49\u63d0\u4f9b\u8005\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 @Inject() \u88c5\u9970\u5668 \u5982\u6b64\u5904\u6240\u8ff0 \u3002 import * as dotenv from 'dotenv' ; import * as fs from 'fs' ; import { Injectable , Inject } from '@nestjs/common' ; import { EnvConfig } from './interfaces' ; @Injectable () export class ConfigService { private readonly envConfig : EnvConfig ; constructor ( @Inject ( 'CONFIG_OPTIONS' ) private options ) { const filePath = ` ${ process . env . NODE_ENV || 'development' } .env` ; const envFile = path . resolve ( __dirname , '../../' , options . folder , filePath ); this . envConfig = dotenv . parse ( fs . readFileSync ( envFile )); } get ( key : string ) : string { return this . envConfig [ key ]; } } \u6700\u540e\u4e00\u70b9\u6ce8\u610f:\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e0a\u9762\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u6ce8\u5165\u4ee4\u724c( CONFIG_OPTIONS )\uff0c\u4f46\u6700\u4f73\u5b9e\u8df5\u662f\u5728\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u5c06\u5176\u5b9a\u4e49\u4e3a\u5e38\u91cf(\u6216 Symbol )\uff0c\u7136\u540e\u5bfc\u5165\u8be5\u6587\u4ef6\u3002 \u4f8b\u5982: export const CONFIG_OPTIONS = 'CONFIG_OPTIONS' ; \u4f8b\u5b50 \u00b6 \u672c\u7ae0\u4e2d\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\u53ef\u4ee5\u5728 \u6b64\u5904 \u627e\u5230.","title":"\u52a8\u6001\u6a21\u5757"},{"location":"fundamentals/dynamic-modules/#_1","text":"\u6a21\u5757\u7ae0\u8282 \u6db5\u76d6\u4e86 Nest \u6a21\u5757\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5e76\u5305\u542b\u4e86 \u52a8\u6001\u6a21\u5757 \u7684\u7b80\u8981\u4ecb\u7ecd\u3002 \u672c\u7ae0\u6269\u5c55\u4e86\u52a8\u6001\u6a21\u5757\u7684\u4e3b\u9898\u3002 \u5b8c\u6210\u540e\uff0c\u60a8\u5e94\u8be5\u5f88\u597d\u5730\u638c\u63e1\u5b83\u4eec\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5982\u4f55\u548c\u4f55\u65f6\u4f7f\u7528\u5b83\u4eec\u3002","title":"\u52a8\u6001\u6a21\u5757"},{"location":"fundamentals/dynamic-modules/#_2","text":"\u6587\u6863\u7684 \u6982\u8ff0 \u90e8\u5206\u4e2d\u7684\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u793a\u4f8b\u4f7f\u7528\u5e38\u89c4\u6216\u9759\u6001\u6a21\u5757\u3002 \u6a21\u5757\u5b9a\u4e49\u4e86\u4e00\u7ec4\u7ec4\u4ef6\uff0c\u6bd4\u5982 providers \u548c controllers \uff0c\u5b83\u4eec\u4f5c\u4e3a\u6574\u4f53\u5e94\u7528\u7a0b\u5e8f\u7684\u6a21\u5757\u5316\u90e8\u5206\u7ec4\u5408\u5728\u4e00\u8d77\u3002 \u5b83\u4eec\u4e3a\u8fd9\u4e9b\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u6267\u884c\u4e0a\u4e0b\u6587\u6216\u8303\u56f4\u3002 \u4f8b\u5982\uff0c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u63d0\u4f9b\u7a0b\u5e8f\u5bf9\u6a21\u5757\u7684\u5176\u4ed6\u6210\u5458\u53ef\u89c1\uff0c\u800c\u4e0d\u9700\u8981\u5bfc\u51fa\u5b83\u4eec\u3002 \u5f53\u4e00\u4e2a\u63d0\u4f9b\u8005\u9700\u8981\u5728\u6a21\u5757\u5916\u90e8\u53ef\u89c1\u65f6\uff0c\u5b83\u9996\u5148\u4ece\u5b83\u7684\u5bbf\u4e3b\u6a21\u5757\u5bfc\u51fa\uff0c\u7136\u540e\u5bfc\u5165\u5230\u5b83\u7684\u6d88\u8d39\u6a21\u5757\u3002 \u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u719f\u6089\u7684\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a UsersModule \u6765\u63d0\u4f9b\u548c\u5bfc\u51fa UsersService \u3002 UsersModule \u662f UsersService \u7684\u5bbf\u4e3b\u6a21\u5757\u3002 import { Module } from '@nestjs/common' ; import { UsersService } from './users.service' ; @Module ({ providers : [ UsersService ], exports : [ UsersService ], }) export class UsersModule {} \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a AuthModule \uff0c\u5b83\u5c06\u5bfc\u5165 UsersModule \uff0c\u4f7f UsersModule \u5bfc\u51fa\u7684\u63d0\u4f9b\u5546\u5728 AuthModule \u4e2d\u53ef\u7528: import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; @Module ({ imports : [ UsersModule ], providers : [ AuthService ], exports : [ AuthService ], }) export class AuthModule {} \u8fd9\u4e9b\u7ed3\u6784\u5141\u8bb8\u6211\u4eec\u6ce8\u5165 UsersService \u5230 AuthService \u4e2d\uff0c\u4f8b\u5982\uff0c\u6258\u7ba1\u5728 AuthModule \u4e2d\u7684 AuthService : import { Injectable } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; @Injectable () export class AuthService { constructor ( private usersService : UsersService ) {} /* Implementation that makes use of this.usersService */ } \u6211\u4eec\u5c06\u5176\u79f0\u4e3a \u9759\u6001 \u6a21\u5757\u7ed1\u5b9a\u3002 Nest \u8fde\u63a5\u6a21\u5757\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\u90fd\u5df2\u7ecf\u5728\u5bbf\u4e3b\u6a21\u5757\u548c\u6d88\u8d39\u6a21\u5757\u4e2d\u58f0\u660e\u3002 \u8ba9\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 Nest \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4f7f UsersService \u5728 AuthModule \u4e2d\u53ef\u7528: \u5b9e\u4f8b\u5316 UsersModule \uff0c\u5305\u62ec\u4f20\u9012\u6027\u5730\u5bfc\u5165 UsersModule \u672c\u8eab\u4f7f\u7528\u7684\u5176\u4ed6\u6a21\u5757\uff0c\u5e76\u4f20\u9012\u6027\u5730\u89e3\u6790\u4efb\u4f55\u4f9d\u8d56\u5173\u7cfb (\u67e5\u770b \u5b9a\u5236\u63d0\u4f9b\u8005 ). \u5b9e\u4f8b\u5316 AuthModule \uff0c\u5e76\u4f7f UsersModule \u5bfc\u51fa\u7684\u63d0\u4f9b\u5546\u5bf9 AuthModule \u4e2d\u7684\u7ec4\u4ef6\u53ef\u7528(\u5c31\u50cf\u5b83\u4eec\u5df2\u7ecf\u5728 AuthModule \u4e2d\u58f0\u660e\u8fc7\u4e00\u6837). \u5728 AuthService \u4e2d\u6ce8\u5165\u4e00\u4e2a UsersService \u7684\u5b9e\u4f8b\u3002","title":"\u4ecb\u7ecd"},{"location":"fundamentals/dynamic-modules/#_3","text":"\u4f7f\u7528\u9759\u6001\u6a21\u5757\u7ed1\u5b9a\uff0c\u6d88\u8d39\u6a21\u5757\u6ca1\u6709\u673a\u4f1a \u5f71\u54cd \u5982\u4f55\u914d\u7f6e\u6765\u81ea\u5bbf\u4e3b\u6a21\u5757\u7684\u63d0\u4f9b\u5546\u3002 \u4e3a\u4ec0\u4e48\u8fd9\u5f88\u91cd\u8981?\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5:\u6211\u4eec\u6709\u4e00\u4e2a\u901a\u7528\u6a21\u5757\uff0c\u5b83\u9700\u8981\u5728\u4e0d\u540c\u7684\u7528\u4f8b\u4e2d\u8868\u73b0\u4e0d\u540c\u3002 \u8fd9\u7c7b\u4f3c\u4e8e\u8bb8\u591a\u7cfb\u7edf\u4e2d\u7684\u201c\u63d2\u4ef6\u201d\u6982\u5ff5\uff0c\u5728\u8fd9\u4e9b\u7cfb\u7edf\u4e2d\uff0c\u901a\u7528\u529f\u80fd\u5728\u4f9b\u4f7f\u7528\u8005\u4f7f\u7528\u4e4b\u524d\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u914d\u7f6e\u3002 \u4f7f\u7528 Nest \u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662f \u914d\u7f6e\u6a21\u5757 \u3002 \u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u53d1\u73b0\uff0c\u901a\u8fc7\u4f7f\u7528\u914d\u7f6e\u6a21\u5757\u5916\u90e8\u5316\u914d\u7f6e\u7ec6\u8282\u975e\u5e38\u6709\u7528\u3002 \u8fd9\u4f7f\u5f97\u5728\u4e0d\u540c\u7684\u90e8\u7f72\u4e2d\u52a8\u6001\u66f4\u6539\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u53d8\u5f97\u5f88\u5bb9\u6613:\u4f8b\u5982\uff0c\u5f00\u53d1\u4eba\u5458\u7684\u5f00\u53d1\u6570\u636e\u5e93\uff0cstaging/testing \u73af\u5883\u7684 staging \u6570\u636e\u5e93\uff0c\u7b49\u7b49\u3002 \u901a\u8fc7\u5c06\u914d\u7f6e\u53c2\u6570\u7684\u7ba1\u7406\u59d4\u6258\u7ed9\u914d\u7f6e\u6a21\u5757\uff0c\u5e94\u7528\u7a0b\u5e8f\u6e90\u4ee3\u7801\u53ef\u4ee5\u72ec\u7acb\u4e8e\u914d\u7f6e\u53c2\u6570\u3002 \u6311\u6218\u5728\u4e8e\u914d\u7f6e\u6a21\u5757\u672c\u8eab\uff0c\u56e0\u4e3a\u5b83\u662f\u901a\u7528\u7684(\u7c7b\u4f3c\u4e8e\u201c\u63d2\u4ef6\u201d)\uff0c\u9700\u8981\u7531\u5b83\u7684\u6d88\u8d39\u6a21\u5757\u8fdb\u884c\u5b9a\u5236\u3002 \u8fd9\u5c31\u662f \u52a8\u6001\u6a21\u5757 \u53d1\u6325\u4f5c\u7528\u7684\u5730\u65b9\u3002 \u4f7f\u7528\u52a8\u6001\u6a21\u5757\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u914d\u7f6e\u6a21\u5757 \u52a8\u6001 \uff0c\u4ee5\u4fbf\u6d88\u8d39\u6a21\u5757\u53ef\u4ee5\u4f7f\u7528 API \u6765\u63a7\u5236\u5728\u5bfc\u5165\u914d\u7f6e\u6a21\u5757\u65f6\u5982\u4f55\u5b9a\u5236\u914d\u7f6e\u6a21\u5757\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u52a8\u6001\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a API\uff0c\u7528\u4e8e\u5c06\u4e00\u4e2a\u6a21\u5757\u5bfc\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\uff0c\u5e76\u5728\u5bfc\u5165\u65f6\u5b9a\u5236\u8be5\u6a21\u5757\u7684\u5c5e\u6027\u548c\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6211\u4eec\u76ee\u524d\u770b\u5230\u7684\u9759\u6001\u7ed1\u5b9a\u3002","title":"\u52a8\u6001\u6a21\u5757\u7528\u4f8b"},{"location":"fundamentals/dynamic-modules/#_4","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 \u914d\u7f6e\u7ae0 \u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\u7684\u57fa\u672c\u7248\u672c\u3002 \u672c\u7ae0\u672b\u5c3e\u7684\u5b8c\u6574\u7248\u672c\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 \u793a\u4f8b \u3002 \u6211\u4eec\u7684\u8981\u6c42\u662f\u8ba9 ConfigModule \u63a5\u53d7\u4e00\u4e2a options \u5bf9\u8c61\u6765\u5b9a\u5236\u5b83\u3002 \u8fd9\u662f\u6211\u4eec\u60f3\u8981\u652f\u6301\u7684\u7279\u6027\u3002 \u57fa\u672c\u793a\u4f8b\u5c06 .env \u6587\u4ef6\u7684\u4f4d\u7f6e\u786c\u7f16\u7801\u4e3a\u5728\u9879\u76ee\u6839\u6587\u4ef6\u5939\u4e2d\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u60f3\u8ba9\u5b83\u662f\u53ef\u914d\u7f6e\u7684\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728\u4f60\u9009\u62e9\u7684\u4efb\u4f55\u6587\u4ef6\u5939\u4e2d\u7ba1\u7406\u4f60\u7684 .env \u6587\u4ef6\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u8981\u5c06\u5404\u79cd .env \u6587\u4ef6\u5b58\u50a8\u5728\u9879\u76ee\u6839\u76ee\u5f55 config \u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d(\u4e5f\u5c31\u662f src \u7684\u540c\u7ea7\u6587\u4ef6\u5939)\u3002 \u5f53\u5728\u4e0d\u540c\u7684\u9879\u76ee\u4e2d\u4f7f\u7528 ConfigModule \u65f6\uff0c\u4f60\u5e0c\u671b\u80fd\u591f\u9009\u62e9\u4e0d\u540c\u7684\u6587\u4ef6\u5939\u3002 \u52a8\u6001\u6a21\u5757\u4f7f\u6211\u4eec\u80fd\u591f\u5411\u88ab\u5bfc\u5165\u7684\u6a21\u5757\u4f20\u9012\u53c2\u6570\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u66f4\u6539\u5b83\u7684\u884c\u4e3a\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5982\u679c\u6211\u4eec\u4ece\u6700\u7ec8\u76ee\u6807(\u4ece\u6d88\u8d39\u6a21\u5757\u7684\u89d2\u5ea6\u770b\u8fd9\u53ef\u80fd\u662f\u4ec0\u4e48\u6837\u5b50)\u5f00\u59cb\uff0c\u7136\u540e\u5f80\u56de\u770b\uff0c\u8fd9\u662f\u5f88\u6709\u5e2e\u52a9\u7684\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5feb\u901f\u56de\u987e\u4e00\u4e0b \u9759\u6001 \u5bfc\u5165 ConfigModule \u7684\u4f8b\u5b50(\u5373\uff0c\u4e00\u79cd\u65e0\u6cd5\u5f71\u54cd\u88ab\u5bfc\u5165\u6a21\u5757\u884c\u4e3a\u7684\u65b9\u6cd5)\u3002 \u8bf7\u5bc6\u5207\u5173\u6ce8 @Module() \u88c5\u9970\u5668\u4e2d\u7684 imports \u6570\u7ec4: import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { ConfigModule } from './config/config.module' ; @Module ({ imports : [ ConfigModule ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} \u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b \u52a8\u6001\u6a21\u5757 \u5bfc\u5165\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff0c\u5176\u4e2d\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a\u914d\u7f6e\u5bf9\u8c61\u3002 \u6bd4\u8f83\u8fd9\u4e24\u4e2a\u4f8b\u5b50\u4e2d\u7684 imports \u6570\u7ec4\u7684\u533a\u522b: import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { ConfigModule } from './config/config.module' ; @Module ({ imports : [ ConfigModule . register ({ folder : ' . / config `})], controllers: [AppController], providers: [AppService], }) export class AppModule {} \u8ba9\u6211\u4eec\u770b\u770b\u5728\u4e0a\u9762\u7684\u52a8\u6001\u4f8b\u5b50\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 \u4ec0\u4e48\u662f\u6d3b\u52a8\u90e8\u4ef6? ConfigModule \u662f\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\u5b83\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a register() \u7684\u9759\u6001\u65b9\u6cd5\u3002 \u6211\u4eec\u77e5\u9053\u5b83\u662f\u9759\u6001\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5728 ConfigModule \u7c7b\u4e0a\u8c03\u7528\u5b83\uff0c\u800c\u4e0d\u662f\u5728\u7c7b\u7684 \u5b9e\u4f8b \u4e0a\u3002 \u6ce8\u610f:\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u521b\u5efa\uff0c\u53ef\u4ee5\u6709\u4efb\u610f\u7684\u540d\u5b57\uff0c\u4f46\u662f\u6309\u7167\u60ef\u4f8b\u6211\u4eec\u5e94\u8be5\u53eb\u5b83 forRoot() \u6216\u8005 register() \u3002 register() \u65b9\u6cd5\u662f\u7531\u6211\u4eec\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u6211\u4eec\u559c\u6b22\u7684\u8f93\u5165\u53c2\u6570\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u63a5\u53d7\u4e00\u4e2a\u5177\u6709\u5408\u9002\u5c5e\u6027\u7684\u7b80\u5355 options \u5bf9\u8c61\uff0c\u8fd9\u662f\u5178\u578b\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u53ef\u4ee5\u63a8\u65ad register() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u7c7b\u4f3c\u4e8e module \u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u5b83\u7684\u8fd4\u56de\u503c\u51fa\u73b0\u5728\u6211\u4eec\u719f\u6089\u7684 imports \u5217\u8868\u4e2d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5b83\u5305\u542b\u4e86\u4e00\u4e2a\u6a21\u5757\u5217\u8868\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u7684 register() \u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a DynamicModule \u3002 \u52a8\u6001\u6a21\u5757\u53ea\u4e0d\u8fc7\u662f\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u7684\u6a21\u5757\uff0c\u5177\u6709\u4e0e\u9759\u6001\u6a21\u5757\u5b8c\u5168\u76f8\u540c\u7684\u5c5e\u6027\uff0c\u5916\u52a0\u4e00\u4e2a\u540d\u4e3a module \u7684\u989d\u5916\u5c5e\u6027\u3002 \u8ba9\u6211\u4eec\u5feb\u901f\u6d4f\u89c8\u4e00\u4e2a\u9759\u6001\u6a21\u5757\u58f0\u660e\u793a\u4f8b\uff0c\u5bc6\u5207\u5173\u6ce8\u4f20\u9012\u7ed9\u88c5\u9970\u5668\u7684\u6a21\u5757\u9009\u9879: @Module ({ imports : [ DogsModule ], controllers : [ CatsController ], providers : [ CatsService ], exports : [ CatsService ] }) \u52a8\u6001\u6a21\u5757\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5177\u6709\u5b8c\u5168\u76f8\u540c\u63a5\u53e3\u7684\u5bf9\u8c61\uff0c\u5916\u52a0\u4e00\u4e2a\u540d\u4e3a module \u7684\u9644\u52a0\u5c5e\u6027\u3002 module \u5c5e\u6027\u7528\u4f5c\u6a21\u5757\u7684\u540d\u79f0\uff0c\u5e76\u4e14\u5e94\u8be5\u4e0e\u6a21\u5757\u7684\u7c7b\u540d\u76f8\u540c\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u6240\u793a\u3002 info Hint \u5bf9\u4e8e\u4e00\u4e2a\u52a8\u6001\u6a21\u5757\uff0c\u6a21\u5757\u9009\u9879\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027\u90fd\u662f\u53ef\u9009\u7684 \u9664\u4e86 module \u3002 \u90a3\u4e48\u9759\u6001\u7684 register() \u65b9\u6cd5\u5462? \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u770b\u5230\u5b83\u7684\u5de5\u4f5c\u662f\u8fd4\u56de\u4e00\u4e2a\u5177\u6709 DynamicModule \u63a5\u53e3\u7684\u5bf9\u8c61\u3002 \u5f53\u6211\u4eec\u8c03\u7528\u5b83\u65f6\uff0c\u6211\u4eec\u6709\u6548\u5730\u5411 imports \u5217\u8868\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6a21\u5757\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728\u9759\u6001\u60c5\u51b5\u4e0b\u901a\u8fc7\u5217\u51fa\u6a21\u5757\u7c7b\u540d\u6765\u5b9e\u73b0\u7684\u65b9\u5f0f\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u52a8\u6001\u6a21\u5757 API \u53ea\u662f\u8fd4\u56de\u4e00\u4e2a\u6a21\u5757\uff0c\u4f46\u6211\u4eec\u6ca1\u6709\u5728 @Module \u88c5\u9970\u5668\u4e2d\u4fee\u590d\u5c5e\u6027\uff0c\u800c\u662f\u901a\u8fc7\u7f16\u7a0b\u65b9\u5f0f\u6307\u5b9a\u5b83\u4eec\u3002 \u4e3a\u4e86\u4f7f\u56fe\u7247\u66f4\u5b8c\u6574\uff0c\u8fd8\u9700\u8981\u6d89\u53ca\u4e00\u4e9b\u7ec6\u8282: \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u58f0\u660e @Module() \u88c5\u9970\u5668\u7684 imports \u5c5e\u6027\u4e0d\u4ec5\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u6a21\u5757\u7c7b\u540d(\u4f8b\u5982 imports:[UsersModule] )\uff0c\u8fd8\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570 \u8fd4\u56de \u4e00\u4e2a\u52a8\u6001\u6a21\u5757(\u4f8b\u5982 imports:[ConfigModule.register(\u2026)] )\u3002 \u52a8\u6001\u6a21\u5757\u672c\u8eab\u53ef\u4ee5\u5bfc\u5165\u5176\u4ed6\u6a21\u5757\u3002 \u672c\u4f8b\u4e2d\u6211\u4eec\u4e0d\u4f1a\u8fd9\u6837\u505a\uff0c\u4f46\u5982\u679c\u52a8\u6001\u6a21\u5757\u4f9d\u8d56\u4e8e\u5176\u4ed6\u6a21\u5757\u7684\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53ef\u9009\u7684 imports \u5c5e\u6027\u6765\u5bfc\u5165\u5b83\u4eec\u3002 \u540c\u6837\uff0c\u8fd9\u4e0e\u4f7f\u7528 @Module() \u88c5\u9970\u5668\u4e3a\u9759\u6001\u6a21\u5757\u58f0\u660e\u5143\u6570\u636e\u7684\u65b9\u5f0f\u5b8c\u5168\u76f8\u4f3c\u3002 \u6709\u4e86\u8fd9\u6837\u7684\u7406\u89e3\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u770b\u770b\u6211\u4eec\u7684\u52a8\u6001 ConfigModule \u58f0\u660e\u5fc5\u987b\u662f\u4ec0\u4e48\u6837\u7684\u3002 \u8ba9\u6211\u4eec\u8bd5\u4e00\u8bd5\u3002 import { DynamicModule , Module } from '@nestjs/common' ; import { ConfigService } from './config.service' ; @Module ({}) export class ConfigModule { static register () : DynamicModule { return { module : ConfigModule , providers : [ ConfigService ], exports : [ ConfigService ], }; } } \u73b0\u5728\u5e94\u8be5\u5f88\u6e05\u695a\u5404\u4e2a\u90e8\u5206\u662f\u5982\u4f55\u8054\u7cfb\u5728\u4e00\u8d77\u7684\u3002 \u8c03\u7528 ConfigModule.register(\u2026)'\u5c06\u8fd4\u56de\u4e00\u4e2a DynamicModule \u5bf9\u8c61\uff0c\u5176\u5c5e\u6027\u4e0e\u6211\u4eec\u901a\u8fc7 @Module()`\u88c5\u9970\u5668\u63d0\u4f9b\u7684\u5143\u6570\u636e\u672c\u8d28\u4e0a\u76f8\u540c\u3002 info Hint \u4ece @nestjs/common \u5bfc\u5165 DynamicModule \u3002 \u6211\u4eec\u7684\u52a8\u6001\u6a21\u5757\u8fd8\u4e0d\u662f\u5f88\u6709\u8da3\uff0c\u4f46\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u5f15\u5165\u4efb\u4f55\u529f\u80fd\u6765 \u914d\u7f6e \u5b83\uff0c\u5c31\u50cf\u6211\u4eec\u8bf4\u8fc7\u7684\u90a3\u6837\u3002 \u8ba9\u6211\u4eec\u63a5\u4e0b\u6765\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u914d\u7f6e\u6a21\u5757\u7684\u4f8b\u5b50"},{"location":"fundamentals/dynamic-modules/#_5","text":"\u5b9a\u5236 ConfigModule \u884c\u4e3a\u7684\u660e\u663e\u89e3\u51b3\u65b9\u6848\u662f\u5728\u9759\u6001 register() \u65b9\u6cd5\u4e2d\u5411\u5b83\u4f20\u9012\u4e00\u4e2a options \u5bf9\u8c61\uff0c\u6b63\u5982\u6211\u4eec\u4e0a\u9762\u6240\u731c\u6d4b\u7684\u90a3\u6837\u3002 \u8ba9\u6211\u4eec\u518d\u6765\u770b\u770b\u6211\u4eec\u6d88\u8d39\u6a21\u5757\u7684 imports \u5c5e\u6027: import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { ConfigModule } from './config/config.module' ; @Module ({ imports : [ ConfigModule . register ({ folder : './config' })], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} \u8fd9\u6837\u5c31\u5f88\u597d\u5730\u5904\u7406\u4e86\u5411\u52a8\u6001\u6a21\u5757\u4f20\u9012 options \u5bf9\u8c61\u7684\u95ee\u9898\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4f7f\u7528 ConfigModule \u4e2d\u7684 options \u5bf9\u8c61\u5462?\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u3002 \u6211\u4eec\u77e5\u9053\u6211\u4eec\u7684 ConfigModule \u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u5bbf\u4e3b\uff0c\u7528\u4e8e\u63d0\u4f9b\u548c\u5bfc\u51fa\u4e00\u4e2a\u53ef\u6ce8\u5165\u7684\u670d\u52a1 - ConfigService - \u4f9b\u5176\u4ed6\u63d0\u4f9b\u5546\u4f7f\u7528\u3002 \u5b9e\u9645\u4e0a\u6211\u4eec\u7684 ConfigService \u9700\u8981\u8bfb\u53d6 options \u5bf9\u8c61\u6765\u5b9a\u5236\u5176\u884c\u4e3a\u3002 \u8ba9\u6211\u4eec\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4ece register() \u65b9\u6cd5\u4e2d\u83b7\u53d6 options \u5230 ConfigService \u3002 \u6709\u4e86\u8fd9\u4e2a\u5047\u8bbe\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u670d\u52a1\u505a\u4e00\u4e9b\u66f4\u6539\uff0c\u6839\u636e options \u5bf9\u8c61\u7684\u5c5e\u6027\u5b9a\u5236\u5176\u884c\u4e3a\u3002 ( Note : \u76ee\u524d\uff0c\u7531\u4e8e\u6211\u4eec\u8fd8 \u6ca1\u6709 \u786e\u5b9a\u5982\u4f55\u4f20\u9012\u5b83\uff0c\u6211\u4eec\u5c06\u53ea\u786c\u7f16\u7801 options \u3002\u6211\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898). import { Injectable } from '@nestjs/common' ; import * as dotenv from 'dotenv' ; import * as fs from 'fs' ; import { EnvConfig } from './interfaces' ; @Injectable () export class ConfigService { private readonly envConfig : EnvConfig ; constructor () { const options = { folder : './config' }; const filePath = ` ${ process . env . NODE_ENV || 'development' } .env` ; const envFile = path . resolve ( __dirname , '../../' , options . folder , filePath ); this . envConfig = dotenv . parse ( fs . readFileSync ( envFile )); } get ( key : string ) : string { return this . envConfig [ key ]; } } \u73b0\u5728\u6211\u4eec\u7684 ConfigService \u77e5\u9053\u5982\u4f55\u5728 options \u4e2d\u6307\u5b9a\u7684\u6587\u4ef6\u5939\u4e2d\u627e\u5230 .env \u6587\u4ef6\u3002 \u6211\u4eec\u5269\u4e0b\u7684\u4efb\u52a1\u662f\u5c06 register() \u6b65\u9aa4\u4e2d\u7684 options \u5bf9\u8c61\u6ce8\u5165\u5230 ConfigService \u4e2d\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 \u4f9d\u8d56\u6ce8\u5165 \u6765\u5b9e\u73b0\u5b83\u3002 \u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u6240\u4ee5\u786e\u4fdd\u4f60\u7406\u89e3\u5b83\u3002 \u6211\u4eec\u7684 ConfigModule \u63d0\u4f9b\u4e86 ConfigService \u3002 ConfigService \u53cd\u8fc7\u6765\u4f9d\u8d56\u4e8e options \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ea\u5728\u8fd0\u884c\u65f6\u63d0\u4f9b\u3002 \u56e0\u6b64\uff0c\u5728\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u5c06 options \u5bf9\u8c61\u7ed1\u5b9a\u5230 Nest IoC \u5bb9\u5668\uff0c\u7136\u540e\u8ba9 Nest \u5c06\u5176\u6ce8\u5165\u5230\u6211\u4eec\u7684 ConfigService \u4e2d\u3002 \u8bb0\u4f4f\uff0c\u5728 \u5b9a\u5236\u7684\u4f9b\u5e94\u5546 \u4e00\u7ae0\u4e2d\uff0cproviders \u53ef\u4ee5 \u5305\u62ec\u4efb\u4f55\u503c \uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u670d\u52a1\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u6765\u5904\u7406\u4e00\u4e2a\u7b80\u5355\u7684 options \u5bf9\u8c61\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u5904\u7406\u5c06\u9009\u9879\u5bf9\u8c61\u7ed1\u5b9a\u5230 IoC \u5bb9\u5668\u7684\u95ee\u9898\u3002 \u6211\u4eec\u5728\u9759\u6001\u7684 register() \u65b9\u6cd5\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u6b63\u5728\u52a8\u6001\u5730\u6784\u5efa\u4e00\u4e2a\u6a21\u5757\uff0c\u6a21\u5757\u7684\u5c5e\u6027\u4e4b\u4e00\u662f\u5b83\u7684\u63d0\u4f9b\u7a0b\u5e8f\u5217\u8868\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u5c06\u9009\u9879\u5bf9\u8c61\u5b9a\u4e49\u4e3a\u63d0\u4f9b\u7a0b\u5e8f\u3002 \u8fd9\u5c06\u4f7f\u5b83\u53ef\u6ce8\u5165\u5230 ConfigService \u4e2d\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u6b65\u4e2d\u5229\u7528\u8fd9\u4e00\u70b9\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6ce8\u610f providers \u6570\u7ec4: import { DynamicModule , Module } from '@nestjs/common' ; import { ConfigService } from './config.service' ; @Module ({}) export class ConfigModule { static register ( options ) : DynamicModule { return { module : ConfigModule , providers : [ { provide : 'CONFIG_OPTIONS' , useValue : options , }, ConfigService , ], exports : [ ConfigService ], }; } } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06 CONFIG_OPTIONS \u63d0\u4f9b\u5546\u6ce8\u5165\u5230 ConfigService \u4e2d\u6765\u5b8c\u6210\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u56de\u60f3\u4e00\u4e0b\uff0c\u5f53\u6211\u4eec\u4f7f\u7528\u975e\u7c7b\u4ee4\u724c\u5b9a\u4e49\u63d0\u4f9b\u8005\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 @Inject() \u88c5\u9970\u5668 \u5982\u6b64\u5904\u6240\u8ff0 \u3002 import * as dotenv from 'dotenv' ; import * as fs from 'fs' ; import { Injectable , Inject } from '@nestjs/common' ; import { EnvConfig } from './interfaces' ; @Injectable () export class ConfigService { private readonly envConfig : EnvConfig ; constructor ( @Inject ( 'CONFIG_OPTIONS' ) private options ) { const filePath = ` ${ process . env . NODE_ENV || 'development' } .env` ; const envFile = path . resolve ( __dirname , '../../' , options . folder , filePath ); this . envConfig = dotenv . parse ( fs . readFileSync ( envFile )); } get ( key : string ) : string { return this . envConfig [ key ]; } } \u6700\u540e\u4e00\u70b9\u6ce8\u610f:\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e0a\u9762\u57fa\u4e8e\u5b57\u7b26\u4e32\u7684\u6ce8\u5165\u4ee4\u724c( CONFIG_OPTIONS )\uff0c\u4f46\u6700\u4f73\u5b9e\u8df5\u662f\u5728\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u5c06\u5176\u5b9a\u4e49\u4e3a\u5e38\u91cf(\u6216 Symbol )\uff0c\u7136\u540e\u5bfc\u5165\u8be5\u6587\u4ef6\u3002 \u4f8b\u5982: export const CONFIG_OPTIONS = 'CONFIG_OPTIONS' ;","title":"\u6a21\u5757\u914d\u7f6e"},{"location":"fundamentals/dynamic-modules/#_6","text":"\u672c\u7ae0\u4e2d\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\u53ef\u4ee5\u5728 \u6b64\u5904 \u627e\u5230.","title":"\u4f8b\u5b50"},{"location":"fundamentals/execution-context/","text":"\u6267\u884c\u4e0a\u4e0b\u6587 \u00b6 Nest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u5b9e\u7528\u7a0b\u5e8f\u7c7b\uff0c\u5e2e\u52a9\u7f16\u5199\u8de8\u591a\u4e2a\u5e94\u7528\u4e0a\u4e0b\u6587\u7684\u5e94\u7528\u7a0b\u5e8f(\u4f8b\u5982\uff0cNest \u57fa\u4e8e HTTP \u670d\u52a1\u5668\u3001\u5fae\u670d\u52a1\u548c WebSockets \u5e94\u7528\u4e0a\u4e0b\u6587)\u3002 \u8fd9\u4e9b\u5b9e\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6709\u5173\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\u7684\u4fe1\u606f\uff0c\u53ef\u7528\u4e8e\u6784\u5efa\u901a\u7528\u7684 guards \u3001 filters \u548c interceptors \uff0c\u5b83\u4eec\u53ef\u4ee5\u8de8\u5e7f\u6cdb\u7684\u63a7\u5236\u5668\u3001\u65b9\u6cd5\u548c\u6267\u884c\u4e0a\u4e0b\u6587\u5de5\u4f5c\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u4ecb\u7ecd\u4e24\u4e2a\u8fd9\u6837\u7684\u7c7b: ArgumentsHost \u548c ExecutionContext \u3002 ArgumentsHost \u7c7b \u00b6 ArgumentsHost \u7c7b\u63d0\u4f9b\u4e86\u68c0\u7d22\u4f20\u9012\u7ed9\u5904\u7406\u7a0b\u5e8f\u7684\u53c2\u6570\u7684\u65b9\u6cd5\u3002 \u5b83\u5141\u8bb8\u9009\u62e9\u9002\u5f53\u7684\u4e0a\u4e0b\u6587(\u4f8b\u5982\uff0cHTTP\u3001RPC(\u5fae\u670d\u52a1)\u6216 WebSockets)\u6765\u68c0\u7d22\u53c2\u6570\u3002 \u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u4e2a ArgumentsHost \u7684\u5b9e\u4f8b\uff0c\u901a\u5e38\u4f5c\u4e3a host \u53c2\u6570\u5f15\u7528\uff0c\u5728\u4f60\u60f3\u8981\u8bbf\u95ee\u5b83\u7684\u5730\u65b9\u3002 \u4f8b\u5982\uff0c \u5f02\u5e38\u8fc7\u6ee4\u5668 \u7684 catch() \u65b9\u6cd5\u662f\u7528 ArgumentsHost \u5b9e\u4f8b\u8c03\u7528\u7684\u3002 ArgumentsHost \u53ea\u662f\u4f5c\u4e3a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570\u7684\u62bd\u8c61\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e HTTP \u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f(\u5f53\u4f7f\u7528 @nestjs/platform-express \u65f6)\uff0c host \u5bf9\u8c61\u5c01\u88c5\u4e86 Express \u7684 [request, response, next] \u6570\u7ec4\uff0c\u5176\u4e2d request \u662f\u8bf7\u6c42\u5bf9\u8c61\uff0c response \u662f\u54cd\u5e94\u5bf9\u8c61\uff0c\u800c next \u662f\u4e00\u4e2a\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\u7684\u51fd\u6570\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e GraphQL \u5e94\u7528\u7a0b\u5e8f\uff0c host \u5bf9\u8c61\u5305\u542b [root, args, context, info] \u6570\u7ec4\u3002 \u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587 \u00b6 \u5f53\u6784\u5efa\u6cdb\u578b\u7684 guards \u3001 filters \u548c interceptors \u8981\u5728\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u786e\u5b9a\u6211\u4eec\u7684\u65b9\u6cd5\u5f53\u524d\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\u3002 \u4f7f\u7528 ArgumentsHost \u7684 getType() \u65b9\u6cd5\u5b8c\u6210: if ( host . getType () === 'http' ) { // do something that is only important in the context of regular HTTP requests (REST) } else if ( host . getType () === 'rpc' ) { // do something that is only important in the context of Microservice requests } else if ( host . getType < GqlContextType > () === 'graphql' ) { // do something that is only important in the context of GraphQL requests } info Hint GqlContextType \u662f\u4ece @nestjs/graphql \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u6709\u4e86\u53ef\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u66f4\u901a\u7528\u7684\u7ec4\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u4e3b\u673a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570 \u00b6 \u8981\u68c0\u7d22\u4f20\u9012\u7ed9\u5904\u7406\u5668\u7684\u53c2\u6570\u6570\u7ec4\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u4e3b\u673a\u5bf9\u8c61\u7684 getArgs() \u65b9\u6cd5\u3002 const [ req , res , next ] = host . getArgs (); \u4f60\u53ef\u4ee5\u4f7f\u7528' getArgByIndex() '\u65b9\u6cd5\u901a\u8fc7\u7d22\u5f15\u63d0\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u53c2\u6570: const request = host . getArgByIndex ( 0 ); const response = host . getArgByIndex ( 1 ); \u5728\u8fd9\u4e9b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7d22\u5f15\u68c0\u7d22\u8bf7\u6c42\u548c\u54cd\u5e94\u5bf9\u8c61\uff0c\u8fd9\u901a\u5e38\u4e0d\u63a8\u8350\uff0c\u56e0\u4e3a\u5b83\u5c06\u5e94\u7528\u7a0b\u5e8f\u8026\u5408\u5230\u7279\u5b9a\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u3002 \u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 host \u5bf9\u8c61\u7684\u4e00\u4e2a\u5b9e\u7528\u65b9\u6cd5\u5207\u6362\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u9002\u5f53\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff0c\u4ece\u800c\u4f7f\u60a8\u7684\u4ee3\u7801\u66f4\u52a0\u5065\u58ee\u548c\u53ef\u91cd\u7528\u3002 \u4e0a\u4e0b\u6587\u5207\u6362\u5b9e\u7528\u7a0b\u5e8f\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\u3002 /** * Switch context to RPC. */ switchToRpc () : RpcArgumentsHost ; /** * Switch context to HTTP. */ switchToHttp () : HttpArgumentsHost ; /** * Switch context to WebSockets. */ switchToWs () : WsArgumentsHost ; \u8ba9\u6211\u4eec\u4f7f\u7528 switchToHttp() \u65b9\u6cd5\u91cd\u5199\u524d\u9762\u7684\u793a\u4f8b\u3002 host.switchToHttp() helper \u8c03\u7528\u8fd4\u56de\u4e00\u4e2a\u9002\u5408\u4e8e HTTP \u5e94\u7528\u4e0a\u4e0b\u6587\u7684 HttpArgumentsHost \u5bf9\u8c61\u3002 HttpArgumentsHost \u5bf9\u8c61\u6709\u4e24\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6765\u63d0\u53d6\u6240\u9700\u7684\u5bf9\u8c61\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528 Express \u7c7b\u578b\u65ad\u8a00\u6765\u8fd4\u56de\u539f\u751f\u7684 Express \u7c7b\u578b\u5bf9\u8c61: const ctx = host . switchToHttp (); const request = ctx . getRequest < Request > (); const response = ctx . getResponse < Response > (); \u7c7b\u4f3c\u5730\uff0c WsArgumentsHost \u548c RpcArgumentsHost \u6709\u65b9\u6cd5\u5728\u5fae\u670d\u52a1\u548c WebSockets \u4e0a\u4e0b\u6587\u4e2d\u8fd4\u56de\u9002\u5f53\u7684\u5bf9\u8c61\u3002 \u4e0b\u9762\u662f WsArgumentsHost \u7684\u65b9\u6cd5: export interface WsArgumentsHost { /** * Returns the data object. */ getData < T > () : T ; /** * Returns the client object. */ getClient < T > () : T ; } \u4ee5\u4e0b\u662f RpcArgumentsHost \u7684\u65b9\u6cd5: export interface RpcArgumentsHost { /** * Returns the data object. */ getData < T > () : T ; /** * Returns the context object. */ getContext < T > () : T ; } ExecutionContext \u7c7b \u00b6 ExecutionContext \u6269\u5c55 ArgumentsHost \uff0c\u63d0\u4f9b\u5173\u4e8e\u5f53\u524d\u6267\u884c\u8fc7\u7a0b\u7684\u989d\u5916\u7ec6\u8282\u3002 \u4e0e ArgumentsHost \u4e00\u6837\uff0cNest \u5728\u4f60\u53ef\u80fd\u9700\u8981\u5b83\u7684\u5730\u65b9\u63d0\u4f9b\u4e86\u4e00\u4e2a ExecutionContext \u5b9e\u4f8b\uff0c\u6bd4\u5982\u5728 \u5b88\u536b \u7684 canActivate() \u65b9\u6cd5\u548c \u62e6\u622a\u5668 \u7684 intercept() \u65b9\u6cd5\u4e2d\u3002 \u63d0\u4f9b\u5982\u4e0b\u65b9\u6cd5: export interface ExecutionContext extends ArgumentsHost { /** * \u8fd4\u56de\u5f53\u524d\u5904\u7406\u5668\u6240\u5c5e\u7684\u63a7\u5236\u5668\u7c7b\u7684\u7c7b\u578b\u3002 */ getClass < T > () : Type < T > ; /** * \u8fd4\u56de\u5bf9\u63a5\u4e0b\u6765\u5c06\u5728\u8bf7\u6c42\u7ba1\u9053\u4e2d\u8c03\u7528\u7684\u5904\u7406\u7a0b\u5e8f(\u65b9\u6cd5)\u7684\u5f15\u7528\u3002 */ getHandler () : Function ; } getHandler() \u65b9\u6cd5\u8fd4\u56de\u5bf9\u5373\u5c06\u88ab\u8c03\u7528\u7684\u5904\u7406\u7a0b\u5e8f\u7684\u5f15\u7528\u3002 getClass() \u65b9\u6cd5\u8fd4\u56de\u6b64\u7279\u5b9a\u5904\u7406\u7a0b\u5e8f\u6240\u5c5e\u7684 Controller \u7c7b\u7684\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5728 HTTP \u4e0a\u4e0b\u6587\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u5904\u7406\u7684\u8bf7\u6c42\u662f\u4e00\u4e2a POST \u8bf7\u6c42\uff0c\u7ed1\u5b9a\u5230 CatsController \u4e0a\u7684 create() \u65b9\u6cd5\uff0c getHandler() \u8fd4\u56de\u4e00\u4e2a\u5bf9 create() \u65b9\u6cd5\u7684\u5f15\u7528\uff0c getClass() \u8fd4\u56de CatsController \u7c7b\u578b (\u4e0d\u662f\u5b9e\u4f8b)\u3002 const methodKey = ctx . getHandler (). name ; // \"create\" const className = ctx . getClass (). name ; // \"CatsController\" \u8bbf\u95ee\u5f53\u524d\u7c7b\u548c\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u7684\u5f15\u7528\u7684\u80fd\u529b\u63d0\u4f9b\u4e86\u6781\u5927\u7684\u7075\u6d3b\u6027\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u8ba9\u6211\u4eec\u6709\u673a\u4f1a\u901a\u8fc7 @SetMetadata() \u88c5\u9970\u5668\u4ece\u5b88\u536b\u6216\u62e6\u622a\u5668\u4e2d\u8bbf\u95ee\u5143\u6570\u636e\u96c6\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u8ba8\u8bba\u8fd9\u4e2a\u7528\u4f8b\u3002 \u53cd\u5c04\u548c\u5143\u6570\u636e \u00b6 Nest \u63d0\u4f9b\u4e86\u901a\u8fc7 @SetMetadata() \u88c5\u9970\u5668\u5c06 \u5b9a\u5236\u5143\u6570\u636e \u8fde\u63a5\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7684\u80fd\u529b\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u7c7b\u4e2d\u8bbf\u95ee\u8fd9\u4e9b\u5143\u6570\u636e\u6765\u505a\u51fa\u67d0\u4e9b\u51b3\u5b9a\u3002 @ @filename ( cats . controller ) @Post () @SetMetadata ( 'roles' , [ 'admin' ]) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @SetMetadata ( 'roles' , [ 'admin' ]) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } info Hint @SetMetadata() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u4e0a\u9762\u7684\u6784\u9020\u4e2d\uff0c\u6211\u4eec\u5c06 roles \u5143\u6570\u636e( roles \u662f\u4e00\u4e2a\u5143\u6570\u636e\u952e\uff0c ['admin'] \u662f\u5173\u8054\u503c)\u9644\u52a0\u5230 create() \u65b9\u6cd5\u4e2d\u3002 \u867d\u7136\u8fd9\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u5728\u4f60\u7684\u8def\u7531\u4e2d\u76f4\u63a5\u4f7f\u7528 @SetMetadata() \u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002 \u76f8\u53cd\uff0c\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( roles . decorator ) import { SetMetadata } from '@nestjs/common' ; export const Roles = ( ...roles : string []) => SetMetadata ( 'roles' , roles ); @ @switch import { SetMetadata } from '@nestjs/common' ; export const Roles = (... roles ) => SetMetadata ( 'roles' , roles ); \u8fd9\u79cd\u65b9\u6cd5\u66f4\u6e05\u6670\uff0c\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u5e76\u4e14\u662f\u5f3a\u7c7b\u578b\u7684\u3002 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 @Roles() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u88c5\u9970 create() \u65b9\u6cd5\u3002 @ @filename ( cats . controller ) @Post () @Roles ( 'admin' ) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @Roles ( 'admin' ) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } \u4e3a\u4e86\u8bbf\u95ee\u8def\u7531\u7684\u89d2\u8272(\u81ea\u5b9a\u4e49\u5143\u6570\u636e)\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Reflector helper \u7c7b\uff0c\u5b83\u662f\u7531\u6846\u67b6\u63d0\u4f9b\u7684\uff0c\u5e76\u4ece @nestjs/core \u5305\u4e2d\u516c\u5f00\u3002 Reflector \u53ef\u4ee5\u901a\u8fc7\u6b63\u5e38\u7684\u65b9\u5f0f\u6ce8\u5165\u5230\u7c7b\u4e2d: @ @filename ( roles . guard ) @Injectable () export class RolesGuard { constructor ( private reflector : Reflector ) {} } @ @switch @Injectable () @Dependencies ( Reflector ) export class CatsService { constructor ( reflector ) { this . reflector = reflector ; } } info Hint Reflector \u7c7b\u662f\u4ece @nestjs/core \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u73b0\u5728\uff0c\u8981\u8bfb\u53d6\u5904\u7406\u5668\u5143\u6570\u636e\uff0c\u8bf7\u4f7f\u7528 get() \u65b9\u6cd5\u3002 const roles = this . reflector . get < string [] > ( 'roles' , context . getHandler ()); ' Reflector#get '\u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u6765\u8f7b\u677e\u8bbf\u95ee\u5143\u6570\u636e:\u4e00\u4e2a\u5143\u6570\u636e key \u548c\u4e00\u4e2a context (\u88c5\u9970\u5668\u76ee\u6807)\u6765\u68c0\u7d22\u5143\u6570\u636e\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6307\u5b9a\u7684 key \u662f roles (\u8bf7\u53c2\u9605\u4e0a\u9762\u7684 roles.decorator.ts \u6587\u4ef6\u548c\u90a3\u91cc\u7684 SetMetadata() \u8c03\u7528)\u3002 \u4e0a\u4e0b\u6587\u662f\u901a\u8fc7\u8c03\u7528 context.gethandler() \u6765\u63d0\u4f9b\u7684\uff0c\u5b83\u4f1a\u4e3a\u5f53\u524d\u5904\u7406\u7684\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u63d0\u53d6\u5143\u6570\u636e\u3002 \u8bb0\u4f4f\uff0c getHandler() \u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u8def\u7531\u5904\u7406\u51fd\u6570\u7684**\u5f15\u7528\u3002 \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u63a7\u5236\u5668\u7ea7\u522b\u5e94\u7528\u5143\u6570\u636e\u6765\u7ec4\u7ec7\u6211\u4eec\u7684\u63a7\u5236\u5668\uff0c\u5e94\u7528\u5230\u63a7\u5236\u5668\u7c7b\u4e2d\u7684\u6240\u6709\u8def\u7531\u3002 @ @filename ( cats . controller ) @Roles ( 'admin' ) @Controller ( 'cats' ) export class CatsController {} @ @switch @Roles ( 'admin' ) @Controller ( 'cats' ) export class CatsController {} \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8981\u63d0\u53d6\u63a7\u5236\u5668\u5143\u6570\u636e\uff0c\u6211\u4eec\u4f20\u9012 context.getclass() \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570(\u4ee5\u63d0\u4f9b\u63a7\u5236\u5668\u7c7b\u4f5c\u4e3a\u5143\u6570\u636e\u63d0\u53d6\u7684\u4e0a\u4e0b\u6587)\uff0c\u800c\u4e0d\u662f context.gethandler () : @ @filename ( roles . guard ) const roles = this . reflector . get < string [] > ( 'roles' , context . getClass ()); @ @switch const roles = this . reflector . get ( 'roles' , context . getClass ()); \u7531\u4e8e\u80fd\u591f\u5728\u591a\u4e2a\u7ea7\u522b\u63d0\u4f9b\u5143\u6570\u636e\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4ece\u591a\u4e2a\u4e0a\u4e0b\u6587\u63d0\u53d6\u548c\u5408\u5e76\u5143\u6570\u636e\u3002 Reflector \u7c7b\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5b9e\u7528\u5de5\u5177\u65b9\u6cd5\u6765\u5e2e\u52a9\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u540c\u65f6\u63d0\u53d6\u63a7\u5236\u5668\u548c\u65b9\u6cd5\u5143\u6570\u636e\uff0c\u5e76\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u7ec4\u5408\u5b83\u4eec\u3002 \u8003\u8651\u4ee5\u4e0b\u573a\u666f\uff0c\u60a8\u5728\u4e24\u4e2a\u7ea7\u522b\u4e0a\u90fd\u63d0\u4f9b\u4e86\u201c\u89d2\u8272\u201d\u5143\u6570\u636e\u3002 @ @filename ( cats . controller ) @Roles ( 'user' ) @Controller ( 'cats' ) export class CatsController { @Post () @Roles ( 'admin' ) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } } @ @switch @Roles ( 'user' ) @Controller ( 'cats' ) export class CatsController {} @Post () @Roles ( 'admin' ) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } } \u5982\u679c\u60a8\u7684\u610f\u56fe\u662f\u6307\u5b9a user \u4f5c\u4e3a\u9ed8\u8ba4\u89d2\u8272\uff0c\u5e76\u6709\u9009\u62e9\u5730\u4e3a\u67d0\u4e9b\u65b9\u6cd5\u8986\u76d6\u5b83\uff0c\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528 getAllAndOverride() \u65b9\u6cd5\u3002 const roles = this . reflector . getAllAndOverride < string [] > ( 'roles' , [ context . getHandler (), context . getClass (), ]); \u5e26\u6709\u6b64\u4ee3\u7801\u7684\u5b88\u536b\uff0c\u8fd0\u884c\u5728 create() \u65b9\u6cd5\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5e26\u6709\u4e0a\u8ff0\u5143\u6570\u636e\uff0c\u5c06\u5bfc\u81f4 role \u5305\u542b ['admin'] \u3002 \u8981\u83b7\u53d6\u4e24\u8005\u7684\u5143\u6570\u636e\u5e76\u5408\u5e76\u5b83(\u8be5\u65b9\u6cd5\u5c06\u6570\u7ec4\u548c\u5bf9\u8c61\u5408\u5e76)\uff0c\u4f7f\u7528 getAllAndMerge() \u65b9\u6cd5: const roles = this . reflector . getAllAndMerge < string [] > ( 'roles' , [ context . getHandler (), context . getClass (), ]); \u8fd9\u5c06\u5bfc\u81f4 role \u5305\u542b ['user'\uff0c 'admin'] \u3002 \u5bf9\u4e8e\u8fd9\u4e24\u4e2a merge \u65b9\u6cd5\uff0c\u4f60\u4f20\u9012\u5143\u6570\u636e\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4f20\u9012\u5143\u6570\u636e\u76ee\u6807\u4e0a\u4e0b\u6587\u6570\u7ec4(\u4f8b\u5982\uff0c\u8c03\u7528 getHandler() \u548c/\u6216 getClass() \u65b9\u6cd5))\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002","title":"\u6267\u884c\u4e0a\u4e0b\u6587"},{"location":"fundamentals/execution-context/#_1","text":"Nest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u5b9e\u7528\u7a0b\u5e8f\u7c7b\uff0c\u5e2e\u52a9\u7f16\u5199\u8de8\u591a\u4e2a\u5e94\u7528\u4e0a\u4e0b\u6587\u7684\u5e94\u7528\u7a0b\u5e8f(\u4f8b\u5982\uff0cNest \u57fa\u4e8e HTTP \u670d\u52a1\u5668\u3001\u5fae\u670d\u52a1\u548c WebSockets \u5e94\u7528\u4e0a\u4e0b\u6587)\u3002 \u8fd9\u4e9b\u5b9e\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6709\u5173\u5f53\u524d\u6267\u884c\u4e0a\u4e0b\u6587\u7684\u4fe1\u606f\uff0c\u53ef\u7528\u4e8e\u6784\u5efa\u901a\u7528\u7684 guards \u3001 filters \u548c interceptors \uff0c\u5b83\u4eec\u53ef\u4ee5\u8de8\u5e7f\u6cdb\u7684\u63a7\u5236\u5668\u3001\u65b9\u6cd5\u548c\u6267\u884c\u4e0a\u4e0b\u6587\u5de5\u4f5c\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u4ecb\u7ecd\u4e24\u4e2a\u8fd9\u6837\u7684\u7c7b: ArgumentsHost \u548c ExecutionContext \u3002","title":"\u6267\u884c\u4e0a\u4e0b\u6587"},{"location":"fundamentals/execution-context/#argumentshost","text":"ArgumentsHost \u7c7b\u63d0\u4f9b\u4e86\u68c0\u7d22\u4f20\u9012\u7ed9\u5904\u7406\u7a0b\u5e8f\u7684\u53c2\u6570\u7684\u65b9\u6cd5\u3002 \u5b83\u5141\u8bb8\u9009\u62e9\u9002\u5f53\u7684\u4e0a\u4e0b\u6587(\u4f8b\u5982\uff0cHTTP\u3001RPC(\u5fae\u670d\u52a1)\u6216 WebSockets)\u6765\u68c0\u7d22\u53c2\u6570\u3002 \u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u4e2a ArgumentsHost \u7684\u5b9e\u4f8b\uff0c\u901a\u5e38\u4f5c\u4e3a host \u53c2\u6570\u5f15\u7528\uff0c\u5728\u4f60\u60f3\u8981\u8bbf\u95ee\u5b83\u7684\u5730\u65b9\u3002 \u4f8b\u5982\uff0c \u5f02\u5e38\u8fc7\u6ee4\u5668 \u7684 catch() \u65b9\u6cd5\u662f\u7528 ArgumentsHost \u5b9e\u4f8b\u8c03\u7528\u7684\u3002 ArgumentsHost \u53ea\u662f\u4f5c\u4e3a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570\u7684\u62bd\u8c61\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e HTTP \u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f(\u5f53\u4f7f\u7528 @nestjs/platform-express \u65f6)\uff0c host \u5bf9\u8c61\u5c01\u88c5\u4e86 Express \u7684 [request, response, next] \u6570\u7ec4\uff0c\u5176\u4e2d request \u662f\u8bf7\u6c42\u5bf9\u8c61\uff0c response \u662f\u54cd\u5e94\u5bf9\u8c61\uff0c\u800c next \u662f\u4e00\u4e2a\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42-\u54cd\u5e94\u5468\u671f\u7684\u51fd\u6570\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e GraphQL \u5e94\u7528\u7a0b\u5e8f\uff0c host \u5bf9\u8c61\u5305\u542b [root, args, context, info] \u6570\u7ec4\u3002","title":"ArgumentsHost \u7c7b"},{"location":"fundamentals/execution-context/#_2","text":"\u5f53\u6784\u5efa\u6cdb\u578b\u7684 guards \u3001 filters \u548c interceptors \u8981\u5728\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u786e\u5b9a\u6211\u4eec\u7684\u65b9\u6cd5\u5f53\u524d\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\u3002 \u4f7f\u7528 ArgumentsHost \u7684 getType() \u65b9\u6cd5\u5b8c\u6210: if ( host . getType () === 'http' ) { // do something that is only important in the context of regular HTTP requests (REST) } else if ( host . getType () === 'rpc' ) { // do something that is only important in the context of Microservice requests } else if ( host . getType < GqlContextType > () === 'graphql' ) { // do something that is only important in the context of GraphQL requests } info Hint GqlContextType \u662f\u4ece @nestjs/graphql \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u6709\u4e86\u53ef\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u66f4\u901a\u7528\u7684\u7ec4\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\u3002","title":"\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587"},{"location":"fundamentals/execution-context/#_3","text":"\u8981\u68c0\u7d22\u4f20\u9012\u7ed9\u5904\u7406\u5668\u7684\u53c2\u6570\u6570\u7ec4\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u4e3b\u673a\u5bf9\u8c61\u7684 getArgs() \u65b9\u6cd5\u3002 const [ req , res , next ] = host . getArgs (); \u4f60\u53ef\u4ee5\u4f7f\u7528' getArgByIndex() '\u65b9\u6cd5\u901a\u8fc7\u7d22\u5f15\u63d0\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u53c2\u6570: const request = host . getArgByIndex ( 0 ); const response = host . getArgByIndex ( 1 ); \u5728\u8fd9\u4e9b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7d22\u5f15\u68c0\u7d22\u8bf7\u6c42\u548c\u54cd\u5e94\u5bf9\u8c61\uff0c\u8fd9\u901a\u5e38\u4e0d\u63a8\u8350\uff0c\u56e0\u4e3a\u5b83\u5c06\u5e94\u7528\u7a0b\u5e8f\u8026\u5408\u5230\u7279\u5b9a\u7684\u6267\u884c\u4e0a\u4e0b\u6587\u3002 \u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 host \u5bf9\u8c61\u7684\u4e00\u4e2a\u5b9e\u7528\u65b9\u6cd5\u5207\u6362\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u9002\u5f53\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u4e0b\u6587\uff0c\u4ece\u800c\u4f7f\u60a8\u7684\u4ee3\u7801\u66f4\u52a0\u5065\u58ee\u548c\u53ef\u91cd\u7528\u3002 \u4e0a\u4e0b\u6587\u5207\u6362\u5b9e\u7528\u7a0b\u5e8f\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\u3002 /** * Switch context to RPC. */ switchToRpc () : RpcArgumentsHost ; /** * Switch context to HTTP. */ switchToHttp () : HttpArgumentsHost ; /** * Switch context to WebSockets. */ switchToWs () : WsArgumentsHost ; \u8ba9\u6211\u4eec\u4f7f\u7528 switchToHttp() \u65b9\u6cd5\u91cd\u5199\u524d\u9762\u7684\u793a\u4f8b\u3002 host.switchToHttp() helper \u8c03\u7528\u8fd4\u56de\u4e00\u4e2a\u9002\u5408\u4e8e HTTP \u5e94\u7528\u4e0a\u4e0b\u6587\u7684 HttpArgumentsHost \u5bf9\u8c61\u3002 HttpArgumentsHost \u5bf9\u8c61\u6709\u4e24\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6765\u63d0\u53d6\u6240\u9700\u7684\u5bf9\u8c61\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528 Express \u7c7b\u578b\u65ad\u8a00\u6765\u8fd4\u56de\u539f\u751f\u7684 Express \u7c7b\u578b\u5bf9\u8c61: const ctx = host . switchToHttp (); const request = ctx . getRequest < Request > (); const response = ctx . getResponse < Response > (); \u7c7b\u4f3c\u5730\uff0c WsArgumentsHost \u548c RpcArgumentsHost \u6709\u65b9\u6cd5\u5728\u5fae\u670d\u52a1\u548c WebSockets \u4e0a\u4e0b\u6587\u4e2d\u8fd4\u56de\u9002\u5f53\u7684\u5bf9\u8c61\u3002 \u4e0b\u9762\u662f WsArgumentsHost \u7684\u65b9\u6cd5: export interface WsArgumentsHost { /** * Returns the data object. */ getData < T > () : T ; /** * Returns the client object. */ getClient < T > () : T ; } \u4ee5\u4e0b\u662f RpcArgumentsHost \u7684\u65b9\u6cd5: export interface RpcArgumentsHost { /** * Returns the data object. */ getData < T > () : T ; /** * Returns the context object. */ getContext < T > () : T ; }","title":"\u4e3b\u673a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570"},{"location":"fundamentals/execution-context/#executioncontext","text":"ExecutionContext \u6269\u5c55 ArgumentsHost \uff0c\u63d0\u4f9b\u5173\u4e8e\u5f53\u524d\u6267\u884c\u8fc7\u7a0b\u7684\u989d\u5916\u7ec6\u8282\u3002 \u4e0e ArgumentsHost \u4e00\u6837\uff0cNest \u5728\u4f60\u53ef\u80fd\u9700\u8981\u5b83\u7684\u5730\u65b9\u63d0\u4f9b\u4e86\u4e00\u4e2a ExecutionContext \u5b9e\u4f8b\uff0c\u6bd4\u5982\u5728 \u5b88\u536b \u7684 canActivate() \u65b9\u6cd5\u548c \u62e6\u622a\u5668 \u7684 intercept() \u65b9\u6cd5\u4e2d\u3002 \u63d0\u4f9b\u5982\u4e0b\u65b9\u6cd5: export interface ExecutionContext extends ArgumentsHost { /** * \u8fd4\u56de\u5f53\u524d\u5904\u7406\u5668\u6240\u5c5e\u7684\u63a7\u5236\u5668\u7c7b\u7684\u7c7b\u578b\u3002 */ getClass < T > () : Type < T > ; /** * \u8fd4\u56de\u5bf9\u63a5\u4e0b\u6765\u5c06\u5728\u8bf7\u6c42\u7ba1\u9053\u4e2d\u8c03\u7528\u7684\u5904\u7406\u7a0b\u5e8f(\u65b9\u6cd5)\u7684\u5f15\u7528\u3002 */ getHandler () : Function ; } getHandler() \u65b9\u6cd5\u8fd4\u56de\u5bf9\u5373\u5c06\u88ab\u8c03\u7528\u7684\u5904\u7406\u7a0b\u5e8f\u7684\u5f15\u7528\u3002 getClass() \u65b9\u6cd5\u8fd4\u56de\u6b64\u7279\u5b9a\u5904\u7406\u7a0b\u5e8f\u6240\u5c5e\u7684 Controller \u7c7b\u7684\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5728 HTTP \u4e0a\u4e0b\u6587\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u5904\u7406\u7684\u8bf7\u6c42\u662f\u4e00\u4e2a POST \u8bf7\u6c42\uff0c\u7ed1\u5b9a\u5230 CatsController \u4e0a\u7684 create() \u65b9\u6cd5\uff0c getHandler() \u8fd4\u56de\u4e00\u4e2a\u5bf9 create() \u65b9\u6cd5\u7684\u5f15\u7528\uff0c getClass() \u8fd4\u56de CatsController \u7c7b\u578b (\u4e0d\u662f\u5b9e\u4f8b)\u3002 const methodKey = ctx . getHandler (). name ; // \"create\" const className = ctx . getClass (). name ; // \"CatsController\" \u8bbf\u95ee\u5f53\u524d\u7c7b\u548c\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u7684\u5f15\u7528\u7684\u80fd\u529b\u63d0\u4f9b\u4e86\u6781\u5927\u7684\u7075\u6d3b\u6027\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u8ba9\u6211\u4eec\u6709\u673a\u4f1a\u901a\u8fc7 @SetMetadata() \u88c5\u9970\u5668\u4ece\u5b88\u536b\u6216\u62e6\u622a\u5668\u4e2d\u8bbf\u95ee\u5143\u6570\u636e\u96c6\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u8ba8\u8bba\u8fd9\u4e2a\u7528\u4f8b\u3002","title":"ExecutionContext \u7c7b"},{"location":"fundamentals/execution-context/#_4","text":"Nest \u63d0\u4f9b\u4e86\u901a\u8fc7 @SetMetadata() \u88c5\u9970\u5668\u5c06 \u5b9a\u5236\u5143\u6570\u636e \u8fde\u63a5\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7684\u80fd\u529b\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u7c7b\u4e2d\u8bbf\u95ee\u8fd9\u4e9b\u5143\u6570\u636e\u6765\u505a\u51fa\u67d0\u4e9b\u51b3\u5b9a\u3002 @ @filename ( cats . controller ) @Post () @SetMetadata ( 'roles' , [ 'admin' ]) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @SetMetadata ( 'roles' , [ 'admin' ]) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } info Hint @SetMetadata() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u4e0a\u9762\u7684\u6784\u9020\u4e2d\uff0c\u6211\u4eec\u5c06 roles \u5143\u6570\u636e( roles \u662f\u4e00\u4e2a\u5143\u6570\u636e\u952e\uff0c ['admin'] \u662f\u5173\u8054\u503c)\u9644\u52a0\u5230 create() \u65b9\u6cd5\u4e2d\u3002 \u867d\u7136\u8fd9\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u5728\u4f60\u7684\u8def\u7531\u4e2d\u76f4\u63a5\u4f7f\u7528 @SetMetadata() \u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002 \u76f8\u53cd\uff0c\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( roles . decorator ) import { SetMetadata } from '@nestjs/common' ; export const Roles = ( ...roles : string []) => SetMetadata ( 'roles' , roles ); @ @switch import { SetMetadata } from '@nestjs/common' ; export const Roles = (... roles ) => SetMetadata ( 'roles' , roles ); \u8fd9\u79cd\u65b9\u6cd5\u66f4\u6e05\u6670\uff0c\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u5e76\u4e14\u662f\u5f3a\u7c7b\u578b\u7684\u3002 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 @Roles() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u88c5\u9970 create() \u65b9\u6cd5\u3002 @ @filename ( cats . controller ) @Post () @Roles ( 'admin' ) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @Roles ( 'admin' ) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } \u4e3a\u4e86\u8bbf\u95ee\u8def\u7531\u7684\u89d2\u8272(\u81ea\u5b9a\u4e49\u5143\u6570\u636e)\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Reflector helper \u7c7b\uff0c\u5b83\u662f\u7531\u6846\u67b6\u63d0\u4f9b\u7684\uff0c\u5e76\u4ece @nestjs/core \u5305\u4e2d\u516c\u5f00\u3002 Reflector \u53ef\u4ee5\u901a\u8fc7\u6b63\u5e38\u7684\u65b9\u5f0f\u6ce8\u5165\u5230\u7c7b\u4e2d: @ @filename ( roles . guard ) @Injectable () export class RolesGuard { constructor ( private reflector : Reflector ) {} } @ @switch @Injectable () @Dependencies ( Reflector ) export class CatsService { constructor ( reflector ) { this . reflector = reflector ; } } info Hint Reflector \u7c7b\u662f\u4ece @nestjs/core \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u73b0\u5728\uff0c\u8981\u8bfb\u53d6\u5904\u7406\u5668\u5143\u6570\u636e\uff0c\u8bf7\u4f7f\u7528 get() \u65b9\u6cd5\u3002 const roles = this . reflector . get < string [] > ( 'roles' , context . getHandler ()); ' Reflector#get '\u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u6765\u8f7b\u677e\u8bbf\u95ee\u5143\u6570\u636e:\u4e00\u4e2a\u5143\u6570\u636e key \u548c\u4e00\u4e2a context (\u88c5\u9970\u5668\u76ee\u6807)\u6765\u68c0\u7d22\u5143\u6570\u636e\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6307\u5b9a\u7684 key \u662f roles (\u8bf7\u53c2\u9605\u4e0a\u9762\u7684 roles.decorator.ts \u6587\u4ef6\u548c\u90a3\u91cc\u7684 SetMetadata() \u8c03\u7528)\u3002 \u4e0a\u4e0b\u6587\u662f\u901a\u8fc7\u8c03\u7528 context.gethandler() \u6765\u63d0\u4f9b\u7684\uff0c\u5b83\u4f1a\u4e3a\u5f53\u524d\u5904\u7406\u7684\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u63d0\u53d6\u5143\u6570\u636e\u3002 \u8bb0\u4f4f\uff0c getHandler() \u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u8def\u7531\u5904\u7406\u51fd\u6570\u7684**\u5f15\u7528\u3002 \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u63a7\u5236\u5668\u7ea7\u522b\u5e94\u7528\u5143\u6570\u636e\u6765\u7ec4\u7ec7\u6211\u4eec\u7684\u63a7\u5236\u5668\uff0c\u5e94\u7528\u5230\u63a7\u5236\u5668\u7c7b\u4e2d\u7684\u6240\u6709\u8def\u7531\u3002 @ @filename ( cats . controller ) @Roles ( 'admin' ) @Controller ( 'cats' ) export class CatsController {} @ @switch @Roles ( 'admin' ) @Controller ( 'cats' ) export class CatsController {} \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8981\u63d0\u53d6\u63a7\u5236\u5668\u5143\u6570\u636e\uff0c\u6211\u4eec\u4f20\u9012 context.getclass() \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570(\u4ee5\u63d0\u4f9b\u63a7\u5236\u5668\u7c7b\u4f5c\u4e3a\u5143\u6570\u636e\u63d0\u53d6\u7684\u4e0a\u4e0b\u6587)\uff0c\u800c\u4e0d\u662f context.gethandler () : @ @filename ( roles . guard ) const roles = this . reflector . get < string [] > ( 'roles' , context . getClass ()); @ @switch const roles = this . reflector . get ( 'roles' , context . getClass ()); \u7531\u4e8e\u80fd\u591f\u5728\u591a\u4e2a\u7ea7\u522b\u63d0\u4f9b\u5143\u6570\u636e\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4ece\u591a\u4e2a\u4e0a\u4e0b\u6587\u63d0\u53d6\u548c\u5408\u5e76\u5143\u6570\u636e\u3002 Reflector \u7c7b\u63d0\u4f9b\u4e86\u4e24\u4e2a\u5b9e\u7528\u5de5\u5177\u65b9\u6cd5\u6765\u5e2e\u52a9\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u540c\u65f6\u63d0\u53d6\u63a7\u5236\u5668\u548c\u65b9\u6cd5\u5143\u6570\u636e\uff0c\u5e76\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u7ec4\u5408\u5b83\u4eec\u3002 \u8003\u8651\u4ee5\u4e0b\u573a\u666f\uff0c\u60a8\u5728\u4e24\u4e2a\u7ea7\u522b\u4e0a\u90fd\u63d0\u4f9b\u4e86\u201c\u89d2\u8272\u201d\u5143\u6570\u636e\u3002 @ @filename ( cats . controller ) @Roles ( 'user' ) @Controller ( 'cats' ) export class CatsController { @Post () @Roles ( 'admin' ) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } } @ @switch @Roles ( 'user' ) @Controller ( 'cats' ) export class CatsController {} @Post () @Roles ( 'admin' ) @Bind ( Body ()) async create ( createCatDto ) { this . catsService . create ( createCatDto ); } } \u5982\u679c\u60a8\u7684\u610f\u56fe\u662f\u6307\u5b9a user \u4f5c\u4e3a\u9ed8\u8ba4\u89d2\u8272\uff0c\u5e76\u6709\u9009\u62e9\u5730\u4e3a\u67d0\u4e9b\u65b9\u6cd5\u8986\u76d6\u5b83\uff0c\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528 getAllAndOverride() \u65b9\u6cd5\u3002 const roles = this . reflector . getAllAndOverride < string [] > ( 'roles' , [ context . getHandler (), context . getClass (), ]); \u5e26\u6709\u6b64\u4ee3\u7801\u7684\u5b88\u536b\uff0c\u8fd0\u884c\u5728 create() \u65b9\u6cd5\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5e26\u6709\u4e0a\u8ff0\u5143\u6570\u636e\uff0c\u5c06\u5bfc\u81f4 role \u5305\u542b ['admin'] \u3002 \u8981\u83b7\u53d6\u4e24\u8005\u7684\u5143\u6570\u636e\u5e76\u5408\u5e76\u5b83(\u8be5\u65b9\u6cd5\u5c06\u6570\u7ec4\u548c\u5bf9\u8c61\u5408\u5e76)\uff0c\u4f7f\u7528 getAllAndMerge() \u65b9\u6cd5: const roles = this . reflector . getAllAndMerge < string [] > ( 'roles' , [ context . getHandler (), context . getClass (), ]); \u8fd9\u5c06\u5bfc\u81f4 role \u5305\u542b ['user'\uff0c 'admin'] \u3002 \u5bf9\u4e8e\u8fd9\u4e24\u4e2a merge \u65b9\u6cd5\uff0c\u4f60\u4f20\u9012\u5143\u6570\u636e\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4f20\u9012\u5143\u6570\u636e\u76ee\u6807\u4e0a\u4e0b\u6587\u6570\u7ec4(\u4f8b\u5982\uff0c\u8c03\u7528 getHandler() \u548c/\u6216 getClass() \u65b9\u6cd5))\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002","title":"\u53cd\u5c04\u548c\u5143\u6570\u636e"},{"location":"fundamentals/lazy-loading-modules/","text":"\u5ef6\u8fdf\u52a0\u8f7d\u6a21\u5757 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5757\u662f\u4e3b\u52a8\u52a0\u8f7d\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ea\u8981\u5e94\u7528\u7a0b\u5e8f\u52a0\u8f7d\uff0c\u6240\u6709\u6a21\u5757\u4e5f\u90fd\u52a0\u8f7d\uff0c\u4e0d\u7ba1\u5b83\u4eec\u662f\u5426\u7acb\u5373\u9700\u8981\u3002 \u867d\u7136\u8fd9\u5bf9\u5927\u591a\u6570\u5e94\u7528\u6765\u8bf4\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5b83\u53ef\u80fd\u6210\u4e3a\u5728 \u65e0\u670d\u52a1\u5668\u73af\u5883 \u4e2d\u8fd0\u884c\u7684\u5e94\u7528/\u5de5\u4f5c\u8005\u7684\u74f6\u9888\uff0c\u5728\u90a3\u91cc\u542f\u52a8\u5ef6\u8fdf(\u201c\u51b7\u542f\u52a8\u201d)\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002 Lazy loading can help decrease bootstrap time by loading only modules required by the specific serverless function invocation. In addition, you could also load other modules asynchronously once the serverless function is \"warm\" to speed-up the bootstrap time for subsequent calls even further (deferred modules registration). info Hint If you're familiar with the Angular framework, you might have seen the \"lazy-loading modules\" term before. Be aware that this technique is functionally different in Nest and so think about this as an entirely different feature that shares similar naming conventions. Getting started \u00b6 To load modules on-demand, Nest provides the LazyModuleLoader class that can be injected into a class in the normal way: @ @filename ( cats . service ) @Injectable () export class CatsService { constructor ( private lazyModuleLoader : LazyModuleLoader ) {} } @ @switch @Injectable () @Dependencies ( LazyModuleLoader ) export class CatsService { constructor ( lazyModuleLoader ) { this . lazyModuleLoader = lazyModuleLoader ; } } info Hint The LazyModuleLoader class is imported from the @nestjs/core package. Alternatively, you can obtain a reference to the LazyModuleLoader provider from within your application bootstrap file ( main.ts ), as follows: // \"app\" represents a Nest application instance const lazyModuleLoader = app . get ( LazyModuleLoader ); With this in place, you can now load any module using the following construction: const { LazyModule } = await import ( './lazy.module' ); const module Ref = await this . lazyModuleLoader . load (() => LazyModule ); info Hint \"Lazy-loaded\" modules are cached upon the first LazyModuleLoader#load method invocation. That means, each consecutive attempt to load LazyModule will be very fast and will return a cached instance, instead of loading the module again. Load \"LazyModule\" attempt: 1 time: 2 .379ms Load \"LazyModule\" attempt: 2 time: 0 .294ms Load \"LazyModule\" attempt: 3 time: 0 .303ms Also, \"lazy-loaded\" modules share the same modules graph as those eagerly loaded on the application bootstrap as well as any other lazy modules registered later in your app. Where lazy.module.ts is a TypeScript file that exports a regular Nest module (no extra changes are required). The LazyModuleLoader#load method returns the module reference (of LazyModule ) that lets you navigate the internal list of providers and obtain a reference to any provider using its injection token as a lookup key. For example, let's say we have a LazyModule with the following definition: @Module ({ providers : [ LazyService ], exports : [ LazyService ], }) export class LazyModule {} info Hint Lazy-loaded modules cannot be registered as global modules as it simply makes no sense (since they are registered lazily, on-demand when all the statically registered modules have been already instantiated). Likewise, registered global enhancers (guards/interceptors/etc.) will not work properly either. With this, we could obtain a reference to the LazyService provider, as follows: const { LazyModule } = await import ( './lazy.module' ); const module Ref = await this . lazyModuleLoader . load (() => LazyModule ); const { LazyService } = await import ( './lazy.service' ); const lazyService = module Ref.get ( LazyService ); warning Warning If you use Webpack , make sure to update your tsconfig.json file - setting compilerOptions.module to \"esnext\" and adding compilerOptions.moduleResolution property with \"node\" as a value: { \"compilerOptions\" : { \"module\" : \"esnext\" , \"moduleResolution\" : \"node\" , ... } } With these options set up, you'll be able to leverage the code splitting feature. Lazy-loading controllers, gateways, and resolvers \u00b6 Since controllers (or resolvers in GraphQL applications) in Nest represent sets of routes/paths/topics (or queries/mutations), you cannot lazy load them using the LazyModuleLoader class. error Warning Controllers, resolvers , and gateways registered inside lazy-loaded modules will not behave as expected. Similarly, you cannot register middleware functions (by implementing the MiddlewareConsumer interface) on-demand. For example, let's say you're building a REST API (HTTP application) with a Fastify driver under the hood (using the @nestjs/platform-fastify package). Fastify does not let you register routes after the application is ready/successfully listening to messages. That means even if we analyzed route mappings registered in the module's controllers, all lazy-loaded routes wouldn't be accessible since there is no way to register them at runtime. Likewise, some transport strategies we provide as part of the @nestjs/microservices package (including Kafka, gRPC, or RabbitMQ) require to subscribe/listen to specific topics/channels before the connection is established. Once your application starts listening to messages, the framework would not be able to subscribe/listen to new topics. Lastly, the @nestjs/graphql package with the code first approach enabled automatically generates the GraphQL schema on-the-fly based on the metadata. That means, it requires all classes to be loaded beforehand. Otherwise, it would not be doable to create the appropriate, valid schema. Common use-cases \u00b6 Most commonly, you will see lazy loaded modules in situations when your worker/cron job/lambda & serverless function/webhook must trigger different services (different logic) based on the input arguments (route path/date/query parameters, etc.). On the other hand, lazy-loading modules may not make too much sense for monolithic applications, where the startup time is rather irrelevant.","title":"\u5ef6\u8fdf\u52a0\u8f7d\u6a21\u5757"},{"location":"fundamentals/lazy-loading-modules/#_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5757\u662f\u4e3b\u52a8\u52a0\u8f7d\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ea\u8981\u5e94\u7528\u7a0b\u5e8f\u52a0\u8f7d\uff0c\u6240\u6709\u6a21\u5757\u4e5f\u90fd\u52a0\u8f7d\uff0c\u4e0d\u7ba1\u5b83\u4eec\u662f\u5426\u7acb\u5373\u9700\u8981\u3002 \u867d\u7136\u8fd9\u5bf9\u5927\u591a\u6570\u5e94\u7528\u6765\u8bf4\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5b83\u53ef\u80fd\u6210\u4e3a\u5728 \u65e0\u670d\u52a1\u5668\u73af\u5883 \u4e2d\u8fd0\u884c\u7684\u5e94\u7528/\u5de5\u4f5c\u8005\u7684\u74f6\u9888\uff0c\u5728\u90a3\u91cc\u542f\u52a8\u5ef6\u8fdf(\u201c\u51b7\u542f\u52a8\u201d)\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002 Lazy loading can help decrease bootstrap time by loading only modules required by the specific serverless function invocation. In addition, you could also load other modules asynchronously once the serverless function is \"warm\" to speed-up the bootstrap time for subsequent calls even further (deferred modules registration). info Hint If you're familiar with the Angular framework, you might have seen the \"lazy-loading modules\" term before. Be aware that this technique is functionally different in Nest and so think about this as an entirely different feature that shares similar naming conventions.","title":"\u5ef6\u8fdf\u52a0\u8f7d\u6a21\u5757"},{"location":"fundamentals/lazy-loading-modules/#getting-started","text":"To load modules on-demand, Nest provides the LazyModuleLoader class that can be injected into a class in the normal way: @ @filename ( cats . service ) @Injectable () export class CatsService { constructor ( private lazyModuleLoader : LazyModuleLoader ) {} } @ @switch @Injectable () @Dependencies ( LazyModuleLoader ) export class CatsService { constructor ( lazyModuleLoader ) { this . lazyModuleLoader = lazyModuleLoader ; } } info Hint The LazyModuleLoader class is imported from the @nestjs/core package. Alternatively, you can obtain a reference to the LazyModuleLoader provider from within your application bootstrap file ( main.ts ), as follows: // \"app\" represents a Nest application instance const lazyModuleLoader = app . get ( LazyModuleLoader ); With this in place, you can now load any module using the following construction: const { LazyModule } = await import ( './lazy.module' ); const module Ref = await this . lazyModuleLoader . load (() => LazyModule ); info Hint \"Lazy-loaded\" modules are cached upon the first LazyModuleLoader#load method invocation. That means, each consecutive attempt to load LazyModule will be very fast and will return a cached instance, instead of loading the module again. Load \"LazyModule\" attempt: 1 time: 2 .379ms Load \"LazyModule\" attempt: 2 time: 0 .294ms Load \"LazyModule\" attempt: 3 time: 0 .303ms Also, \"lazy-loaded\" modules share the same modules graph as those eagerly loaded on the application bootstrap as well as any other lazy modules registered later in your app. Where lazy.module.ts is a TypeScript file that exports a regular Nest module (no extra changes are required). The LazyModuleLoader#load method returns the module reference (of LazyModule ) that lets you navigate the internal list of providers and obtain a reference to any provider using its injection token as a lookup key. For example, let's say we have a LazyModule with the following definition: @Module ({ providers : [ LazyService ], exports : [ LazyService ], }) export class LazyModule {} info Hint Lazy-loaded modules cannot be registered as global modules as it simply makes no sense (since they are registered lazily, on-demand when all the statically registered modules have been already instantiated). Likewise, registered global enhancers (guards/interceptors/etc.) will not work properly either. With this, we could obtain a reference to the LazyService provider, as follows: const { LazyModule } = await import ( './lazy.module' ); const module Ref = await this . lazyModuleLoader . load (() => LazyModule ); const { LazyService } = await import ( './lazy.service' ); const lazyService = module Ref.get ( LazyService ); warning Warning If you use Webpack , make sure to update your tsconfig.json file - setting compilerOptions.module to \"esnext\" and adding compilerOptions.moduleResolution property with \"node\" as a value: { \"compilerOptions\" : { \"module\" : \"esnext\" , \"moduleResolution\" : \"node\" , ... } } With these options set up, you'll be able to leverage the code splitting feature.","title":"Getting started"},{"location":"fundamentals/lazy-loading-modules/#lazy-loading-controllers-gateways-and-resolvers","text":"Since controllers (or resolvers in GraphQL applications) in Nest represent sets of routes/paths/topics (or queries/mutations), you cannot lazy load them using the LazyModuleLoader class. error Warning Controllers, resolvers , and gateways registered inside lazy-loaded modules will not behave as expected. Similarly, you cannot register middleware functions (by implementing the MiddlewareConsumer interface) on-demand. For example, let's say you're building a REST API (HTTP application) with a Fastify driver under the hood (using the @nestjs/platform-fastify package). Fastify does not let you register routes after the application is ready/successfully listening to messages. That means even if we analyzed route mappings registered in the module's controllers, all lazy-loaded routes wouldn't be accessible since there is no way to register them at runtime. Likewise, some transport strategies we provide as part of the @nestjs/microservices package (including Kafka, gRPC, or RabbitMQ) require to subscribe/listen to specific topics/channels before the connection is established. Once your application starts listening to messages, the framework would not be able to subscribe/listen to new topics. Lastly, the @nestjs/graphql package with the code first approach enabled automatically generates the GraphQL schema on-the-fly based on the metadata. That means, it requires all classes to be loaded beforehand. Otherwise, it would not be doable to create the appropriate, valid schema.","title":"Lazy-loading controllers, gateways, and resolvers"},{"location":"fundamentals/lazy-loading-modules/#common-use-cases","text":"Most commonly, you will see lazy loaded modules in situations when your worker/cron job/lambda & serverless function/webhook must trigger different services (different logic) based on the input arguments (route path/date/query parameters, etc.). On the other hand, lazy-loading modules may not make too much sense for monolithic applications, where the startup time is rather irrelevant.","title":"Common use-cases"},{"location":"fundamentals/lifecycle-events/","text":"\u751f\u547d\u5468\u671f\u4e8b\u4ef6 \u00b6 Nest \u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u7531 Nest \u7ba1\u7406\u7684\u751f\u547d\u5468\u671f\u3002 Nest \u63d0\u4f9b\u4e86 \u751f\u547d\u5468\u671f\u94a9\u5b50 \uff0c\u53ef\u4ee5\u770b\u5230\u5173\u952e\u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6\uff0c\u5e76\u80fd\u591f\u5728\u4e8b\u4ef6\u53d1\u751f\u65f6\u91c7\u53d6\u884c\u52a8(\u5728\u4f60\u7684\u201c\u6a21\u5757\u201d\u3001\u201c\u53ef\u6ce8\u5165\u201d\u6216\u201c\u63a7\u5236\u5668\u201d\u4e0a\u8fd0\u884c\u6ce8\u518c\u7684\u4ee3\u7801)\u3002 Lifecycle sequence \u00b6 The following diagram depicts the sequence of key application lifecycle events, from the time the application is bootstrapped until the node process exits. We can divide the overall lifecycle into three phases: initializing , running and terminating . Using this lifecycle, you can plan for appropriate initialization of modules and services, manage active connections, and gracefully shutdown your application when it receives a termination signal. Lifecycle events \u00b6 Lifecycle events happen during application bootstrapping and shutdown. Nest calls registered lifecycle hook methods on modules , injectables and controllers at each of the following lifecycle events ( shutdown hooks need to be enabled first, as described below ). As shown in the diagram above, Nest also calls the appropriate underlying methods to begin listening for connections, and to stop listening for connections. In the following table, onModuleDestroy , beforeApplicationShutdown and onApplicationShutdown are only triggered if you explicitly call app.close() or if the process receives a special system signal (such as SIGTERM) and you have correctly called enableShutdownHooks at application bootstrap (see below Application shutdown part). Lifecycle hook method Lifecycle event triggering the hook method call onModuleInit() Called once the host module's dependencies have been resolved. onApplicationBootstrap() Called once all modules have been initialized, but before listening for connections. onModuleDestroy() * Called after a termination signal (e.g., SIGTERM ) has been received. beforeApplicationShutdown() * Called after all onModuleDestroy() handlers have completed (Promises resolved or rejected); once complete (Promises resolved or rejected), all existing connections will be closed ( app.close() called). onApplicationShutdown() * Called after connections close ( app.close() resolves). * For these events, if you're not calling app.close() explicitly, you must opt-in to make them work with system signals such as SIGTERM . See Application shutdown below. warning Warning The lifecycle hooks listed above are not triggered for request-scoped classes. Request-scoped classes are not tied to the application lifecycle and their lifespan is unpredictable. They are exclusively created for each request and automatically garbage-collected after the response is sent. Usage \u00b6 Each lifecycle hook is represented by an interface. Interfaces are technically optional because they do not exist after TypeScript compilation. Nonetheless, it's good practice to use them in order to benefit from strong typing and editor tooling. To register a lifecycle hook, implement the appropriate interface. For example, to register a method to be called during module initialization on a particular class (e.g., Controller, Provider or Module), implement the OnModuleInit interface by supplying an onModuleInit() method, as shown below: @ @filename () import { Injectable , OnModuleInit } from '@nestjs/common' ; @Injectable () export class UsersService implements OnModuleInit { onModuleInit () { console . log ( `The module has been initialized.` ); } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class UsersService { onModuleInit () { console . log ( `The module has been initialized.` ); } } Asynchronous initialization \u00b6 Both the OnModuleInit and OnApplicationBootstrap hooks allow you to defer the application initialization process (return a Promise or mark the method as async and await an asynchronous method completion in the method body). @ @filename () async onModuleInit () : Promise < void > { await this . fetch (); } @ @switch async onModuleInit () { await this . fetch (); } Application shutdown \u00b6 The onModuleDestroy() , beforeApplicationShutdown() and onApplicationShutdown() hooks are called in the terminating phase (in response to an explicit call to app.close() or upon receipt of system signals such as SIGTERM if opted-in). This feature is often used with Kubernetes to manage containers' lifecycles, by Heroku for dynos or similar services. Shutdown hook listeners consume system resources, so they are disabled by default. To use shutdown hooks, you must enable listeners by calling enableShutdownHooks() : import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); // Starts listening for shutdown hooks app . enableShutdownHooks (); await app . listen ( 3000 ); } bootstrap (); warning warning Due to inherent platform limitations, NestJS has limited support for application shutdown hooks on Windows. You can expect SIGINT to work, as well as SIGBREAK and to some extent SIGHUP - read more . However SIGTERM will never work on Windows because killing a process in the task manager is unconditional, \"i.e., there's no way for an application to detect or prevent it\". Here's some relevant documentation from libuv to learn more about how SIGINT , SIGBREAK and others are handled on Windows. Also, see Node.js documentation of Process Signal Events info Info enableShutdownHooks consumes memory by starting listeners. In cases where you are running multiple Nest apps in a single Node process (e.g., when running parallel tests with Jest), Node may complain about excessive listener processes. For this reason, enableShutdownHooks is not enabled by default. Be aware of this condition when you are running multiple instances in a single Node process. When the application receives a termination signal it will call any registered onModuleDestroy() , beforeApplicationShutdown() , then onApplicationShutdown() methods (in the sequence described above) with the corresponding signal as the first parameter. If a registered function awaits an asynchronous call (returns a promise), Nest will not continue in the sequence until the promise is resolved or rejected. @ @filename () @Injectable () class UsersService implements OnApplicationShutdown { onApplicationShutdown ( signal : string ) { console . log ( signal ); // e.g. \"SIGINT\" } } @ @switch @Injectable () class UsersService implements OnApplicationShutdown { onApplicationShutdown ( signal ) { console . log ( signal ); // e.g. \"SIGINT\" } } info Info Calling app.close() doesn't terminate the Node process but only triggers the onModuleDestroy() and onApplicationShutdown() hooks, so if there are some intervals, long-running background tasks, etc. the process won't be automatically terminated.","title":"\u751f\u547d\u5468\u671f\u4e8b\u4ef6"},{"location":"fundamentals/lifecycle-events/#_1","text":"Nest \u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\u7531 Nest \u7ba1\u7406\u7684\u751f\u547d\u5468\u671f\u3002 Nest \u63d0\u4f9b\u4e86 \u751f\u547d\u5468\u671f\u94a9\u5b50 \uff0c\u53ef\u4ee5\u770b\u5230\u5173\u952e\u7684\u751f\u547d\u5468\u671f\u4e8b\u4ef6\uff0c\u5e76\u80fd\u591f\u5728\u4e8b\u4ef6\u53d1\u751f\u65f6\u91c7\u53d6\u884c\u52a8(\u5728\u4f60\u7684\u201c\u6a21\u5757\u201d\u3001\u201c\u53ef\u6ce8\u5165\u201d\u6216\u201c\u63a7\u5236\u5668\u201d\u4e0a\u8fd0\u884c\u6ce8\u518c\u7684\u4ee3\u7801)\u3002","title":"\u751f\u547d\u5468\u671f\u4e8b\u4ef6"},{"location":"fundamentals/lifecycle-events/#lifecycle-sequence","text":"The following diagram depicts the sequence of key application lifecycle events, from the time the application is bootstrapped until the node process exits. We can divide the overall lifecycle into three phases: initializing , running and terminating . Using this lifecycle, you can plan for appropriate initialization of modules and services, manage active connections, and gracefully shutdown your application when it receives a termination signal.","title":"Lifecycle sequence"},{"location":"fundamentals/lifecycle-events/#lifecycle-events","text":"Lifecycle events happen during application bootstrapping and shutdown. Nest calls registered lifecycle hook methods on modules , injectables and controllers at each of the following lifecycle events ( shutdown hooks need to be enabled first, as described below ). As shown in the diagram above, Nest also calls the appropriate underlying methods to begin listening for connections, and to stop listening for connections. In the following table, onModuleDestroy , beforeApplicationShutdown and onApplicationShutdown are only triggered if you explicitly call app.close() or if the process receives a special system signal (such as SIGTERM) and you have correctly called enableShutdownHooks at application bootstrap (see below Application shutdown part). Lifecycle hook method Lifecycle event triggering the hook method call onModuleInit() Called once the host module's dependencies have been resolved. onApplicationBootstrap() Called once all modules have been initialized, but before listening for connections. onModuleDestroy() * Called after a termination signal (e.g., SIGTERM ) has been received. beforeApplicationShutdown() * Called after all onModuleDestroy() handlers have completed (Promises resolved or rejected); once complete (Promises resolved or rejected), all existing connections will be closed ( app.close() called). onApplicationShutdown() * Called after connections close ( app.close() resolves). * For these events, if you're not calling app.close() explicitly, you must opt-in to make them work with system signals such as SIGTERM . See Application shutdown below. warning Warning The lifecycle hooks listed above are not triggered for request-scoped classes. Request-scoped classes are not tied to the application lifecycle and their lifespan is unpredictable. They are exclusively created for each request and automatically garbage-collected after the response is sent.","title":"Lifecycle events"},{"location":"fundamentals/lifecycle-events/#usage","text":"Each lifecycle hook is represented by an interface. Interfaces are technically optional because they do not exist after TypeScript compilation. Nonetheless, it's good practice to use them in order to benefit from strong typing and editor tooling. To register a lifecycle hook, implement the appropriate interface. For example, to register a method to be called during module initialization on a particular class (e.g., Controller, Provider or Module), implement the OnModuleInit interface by supplying an onModuleInit() method, as shown below: @ @filename () import { Injectable , OnModuleInit } from '@nestjs/common' ; @Injectable () export class UsersService implements OnModuleInit { onModuleInit () { console . log ( `The module has been initialized.` ); } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class UsersService { onModuleInit () { console . log ( `The module has been initialized.` ); } }","title":"Usage"},{"location":"fundamentals/lifecycle-events/#asynchronous-initialization","text":"Both the OnModuleInit and OnApplicationBootstrap hooks allow you to defer the application initialization process (return a Promise or mark the method as async and await an asynchronous method completion in the method body). @ @filename () async onModuleInit () : Promise < void > { await this . fetch (); } @ @switch async onModuleInit () { await this . fetch (); }","title":"Asynchronous initialization"},{"location":"fundamentals/lifecycle-events/#application-shutdown","text":"The onModuleDestroy() , beforeApplicationShutdown() and onApplicationShutdown() hooks are called in the terminating phase (in response to an explicit call to app.close() or upon receipt of system signals such as SIGTERM if opted-in). This feature is often used with Kubernetes to manage containers' lifecycles, by Heroku for dynos or similar services. Shutdown hook listeners consume system resources, so they are disabled by default. To use shutdown hooks, you must enable listeners by calling enableShutdownHooks() : import { NestFactory } from '@nestjs/core' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); // Starts listening for shutdown hooks app . enableShutdownHooks (); await app . listen ( 3000 ); } bootstrap (); warning warning Due to inherent platform limitations, NestJS has limited support for application shutdown hooks on Windows. You can expect SIGINT to work, as well as SIGBREAK and to some extent SIGHUP - read more . However SIGTERM will never work on Windows because killing a process in the task manager is unconditional, \"i.e., there's no way for an application to detect or prevent it\". Here's some relevant documentation from libuv to learn more about how SIGINT , SIGBREAK and others are handled on Windows. Also, see Node.js documentation of Process Signal Events info Info enableShutdownHooks consumes memory by starting listeners. In cases where you are running multiple Nest apps in a single Node process (e.g., when running parallel tests with Jest), Node may complain about excessive listener processes. For this reason, enableShutdownHooks is not enabled by default. Be aware of this condition when you are running multiple instances in a single Node process. When the application receives a termination signal it will call any registered onModuleDestroy() , beforeApplicationShutdown() , then onApplicationShutdown() methods (in the sequence described above) with the corresponding signal as the first parameter. If a registered function awaits an asynchronous call (returns a promise), Nest will not continue in the sequence until the promise is resolved or rejected. @ @filename () @Injectable () class UsersService implements OnApplicationShutdown { onApplicationShutdown ( signal : string ) { console . log ( signal ); // e.g. \"SIGINT\" } } @ @switch @Injectable () class UsersService implements OnApplicationShutdown { onApplicationShutdown ( signal ) { console . log ( signal ); // e.g. \"SIGINT\" } } info Info Calling app.close() doesn't terminate the Node process but only triggers the onModuleDestroy() and onApplicationShutdown() hooks, so if there are some intervals, long-running background tasks, etc. the process won't be automatically terminated.","title":"Application shutdown"},{"location":"fundamentals/module-reference/","text":"\u6a21\u5757\u5f15\u7528 \u00b6 Nest \u63d0\u4f9b\u4e86 ModuleRef \u7c7b\u6765\u5bfc\u822a\u63d0\u4f9b\u5668\u7684\u5185\u90e8\u5217\u8868\uff0c\u5e76\u4f7f\u7528\u5176\u6ce8\u5165\u4ee4\u724c\u4f5c\u4e3a\u67e5\u627e\u952e\u6765\u83b7\u53d6\u5bf9\u4efb\u4f55\u63d0\u4f9b\u5668\u7684\u5f15\u7528\u3002 ModuleRef \u7c7b\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u52a8\u6001\u5b9e\u4f8b\u5316\u9759\u6001\u548c\u9650\u5b9a\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u3002 ModuleRef \u53ef\u4ee5\u901a\u8fc7\u6b63\u5e38\u7684\u65b9\u5f0f\u6ce8\u5165\u5230\u7c7b\u4e2d: @ @filename ( cats . service ) @Injectable () export class CatsService { constructor ( private module Ref : ModuleRef ) {} } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } } info Hint ModuleRef \u7c7b\u662f\u4ece @nestjs/core \u5305\u5bfc\u5165\u7684\u3002 \u68c0\u7d22\u5b9e\u4f8b \u00b6 ModuleRef \u5b9e\u4f8b(\u4ee5\u540e\u6211\u4eec\u5c06\u628a\u5b83\u79f0\u4e3a \u6a21\u5757\u5f15\u7528 )\u6709\u4e00\u4e2a get() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u4f7f\u7528\u6ce8\u5165\u4ee4\u724c/\u7c7b\u540d\u6765\u83b7\u53d6\u5b58\u5728\u4e8e current \u6a21\u5757\u4e2d(\u5df2\u88ab\u5b9e\u4f8b\u5316)\u7684\u63d0\u4f9b\u5668\u3001\u63a7\u5236\u5668\u6216\u53ef\u6ce8\u5165\u5bf9\u8c61(\u4f8b\u5982\uff0c\u5b88\u536b\u3001\u62e6\u622a\u5668\u7b49)\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { private service : Service ; constructor ( private module Ref : ModuleRef ) {} onModuleInit () { this . service = this . module Ref.get ( Service ); } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } onModuleInit () { this . service = this . module Ref.get ( Service ); } } warning Warning get() \u65b9\u6cd5\u4e0d\u80fd\u68c0\u7d22\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668(\u77ac\u6001\u6216\u8bf7\u6c42\u4f5c\u7528\u57df)\u3002 \u76f8\u53cd\uff0c\u4f7f\u7528 \u4e0b\u9762 \u63cf\u8ff0\u7684\u6280\u672f\u3002 \u6b64\u5904 \u5b66\u4e60\u5982\u4f55\u63a7\u5236\u4f5c\u7528\u57df. \u8981\u4ece\u5168\u5c40\u4e0a\u4e0b\u6587\u4e2d\u68c0\u7d22\u63d0\u4f9b\u5668(\u4f8b\u5982\uff0c\u5982\u679c\u63d0\u4f9b\u5668\u5df2\u88ab\u6ce8\u5165\u5230\u4e0d\u540c\u7684\u6a21\u5757\u4e2d)\uff0c\u5c06 {{ '{' }} strict: false {{ '}' }} \u9009\u9879\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 get() \u3002 this . module Ref.get ( Service , { strict : false }); \u89e3\u51b3\u4f5c\u7528\u57df\u5185\u7684\u63d0\u4f9b\u5668 \u00b6 \u8981\u52a8\u6001\u89e3\u6790\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668(\u77ac\u6001\u6216\u8bf7\u6c42\u4f5c\u7528\u57df)\uff0c\u8bf7\u4f7f\u7528 resolve() \u65b9\u6cd5\uff0c\u5e76\u5c06\u63d0\u4f9b\u5668\u7684\u6ce8\u5165\u4ee4\u724c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { private transientService : TransientService ; constructor ( private module Ref : ModuleRef ) {} async onModuleInit () { this . transientService = await this . module Ref.resolve ( TransientService ); } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } async onModuleInit () { this . transientService = await this . module Ref.resolve ( TransientService ); } } resolve() \u65b9\u6cd5\u4ece\u5b83\u81ea\u5df1\u7684 DI \u5bb9\u5668\u5b50\u6811 \u4e2d\u8fd4\u56de\u63d0\u4f9b\u5668\u7684\u552f\u4e00\u5b9e\u4f8b\u3002 \u6bcf\u4e2a\u5b50\u6811\u90fd\u6709\u4e00\u4e2a\u60df\u4e00\u7684\u4e0a\u4e0b\u6587\u6807 \u8bc6\u7b26 \u3002 \u56e0\u6b64\uff0c\u5982\u679c\u591a\u6b21\u8c03\u7528\u8be5\u65b9\u6cd5\u5e76\u6bd4\u8f83\u5b9e\u4f8b\u5f15\u7528\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u4eec\u662f\u4e0d\u76f8\u7b49\u7684\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { constructor ( private module Ref : ModuleRef ) {} async onModuleInit () { const transientServices = await Promise . all ([ this . module Ref.resolve ( TransientService ), this . module Ref.resolve ( TransientService ), ]); console . log ( transientServices [ 0 ] === transientServices [ 1 ]); // false } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } async onModuleInit () { const transientServices = await Promise . all ([ this . module Ref.resolve ( TransientService ), this . module Ref.resolve ( TransientService ), ]); console . log ( transientServices [ 0 ] === transientServices [ 1 ]); // false } } \u8981\u8de8\u591a\u4e2a resolve() \u8c03\u7528\u751f\u6210\u5355\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u786e\u4fdd\u5b83\u4eec\u5171\u4eab\u751f\u6210\u7684 DI \u5bb9\u5668\u5b50\u6811\uff0c\u53ef\u4ee5\u5c06\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\u4f20\u9012\u7ed9 resolve() \u65b9\u6cd5\u3002 \u4f7f\u7528 contextfactory \u7c7b\u6765\u751f\u6210\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\u3002 \u8be5\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2a create() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7684\u60df\u4e00\u6807\u8bc6\u7b26\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { constructor ( private module Ref : ModuleRef ) {} async onModuleInit () { const contextId = ContextIdFactory . create (); const transientServices = await Promise . all ([ this . module Ref.resolve ( TransientService , contextId ), this . module Ref.resolve ( TransientService , contextId ), ]); console . log ( transientServices [ 0 ] === transientServices [ 1 ]); // true } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } async onModuleInit () { const contextId = ContextIdFactory . create (); const transientServices = await Promise . all ([ this . module Ref.resolve ( TransientService , contextId ), this . module Ref.resolve ( TransientService , contextId ), ]); console . log ( transientServices [ 0 ] === transientServices [ 1 ]); // true } } info Hint contextfactory \u7c7b\u662f\u4ece @nestjs/core \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u6ce8\u518c\u8bf7\u6c42\u7684\u63d0\u4f9b\u5668 \u00b6 \u624b\u52a8\u751f\u6210\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26(\u4f7f\u7528 contextfactory.create() )\u8868\u793a DI \u5b50\u6811\uff0c\u5176\u4e2d REQUEST \u63d0\u4f9b\u5668\u662f undefined \uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u88ab Nest \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u5b9e\u4f8b\u5316\u548c\u7ba1\u7406\u3002 \u8981\u4e3a\u624b\u52a8\u521b\u5efa\u7684 DI \u5b50\u6811\u6ce8\u518c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 REQUEST \u5bf9\u8c61\uff0c\u8bf7\u4f7f\u7528 ModuleRef#registerRequestByContextId() \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: const contextId = ContextIdFactory . create (); this . module Ref.registerRequestByContextId ( /* YOUR_REQUEST_OBJECT */ , contextId ); \u83b7\u5f97\u5f53\u524d\u5b50\u6811 \u00b6 \u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5728 \u8bf7\u6c42 \u4e0a\u4e0b\u6587\u4e2d\u89e3\u6790\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u7684\u5b9e\u4f8b\u3002 \u5047\u8bbe CatsService \u662f\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\uff0c\u60a8\u5e0c\u671b\u89e3\u6790 CatsRepository \u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u4e5f\u88ab\u6807\u8bb0\u4e3a\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u3002 \u4e3a\u4e86\u5171\u4eab\u76f8\u540c\u7684 DI \u5bb9\u5668\u5b50\u6811\uff0c\u4f60\u5fc5\u987b\u83b7\u53d6\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\uff0c\u800c\u4e0d\u662f\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26(\u4f8b\u5982\uff0c\u4f7f\u7528 contextfactory.create() \u51fd\u6570\uff0c\u5982\u4e0a\u6240\u793a)\u3002 \u8981\u83b7\u5f97\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\uff0c\u9996\u5148\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u6ce8\u5165\u8bf7\u6c42\u5bf9\u8c61\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService { constructor ( @Inject ( REQUEST ) private request : Record < string , unknown > , ) {} } @ @switch @Injectable () @Dependencies ( REQUEST ) export class CatsService { constructor ( request ) { this . request = request ; } } info Hint \u4e86\u89e3\u5173\u4e8e\u8bf7\u6c42\u63d0\u4f9b\u5668\u7684\u66f4\u591a\u4fe1\u606f \u6b64\u5904 . \u73b0\u5728\uff0c\u4f7f\u7528 contextfactory \u7c7b\u7684 getByRequest() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\u8bf7\u6c42\u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587 id\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 resolve() \u8c03\u7528: const contextId = ContextIdFactory . getByRequest ( this . request ); const catsRepository = await this . module Ref.resolve ( CatsRepository , contextId ); \u52a8\u6001\u5b9e\u4f8b\u5316\u81ea\u5b9a\u4e49\u7c7b \u00b6 \u8981\u52a8\u6001\u5b9e\u4f8b\u5316\u4e00\u4e2a\u4e4b\u524d\u6ca1\u6709\u6ce8\u518c\u4e3a\u63d0\u4f9b\u5668\u7684\u7c7b\uff0c\u8bf7\u4f7f\u7528\u6a21\u5757\u5f15\u7528\u7684 create() \u65b9\u6cd5\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { private catsFactory : CatsFactory ; constructor ( private module Ref : ModuleRef ) {} async onModuleInit () { this . catsFactory = await this . module Ref.create ( CatsFactory ); } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } async onModuleInit () { this . catsFactory = await this . module Ref.create ( CatsFactory ); } } \u8fd9\u79cd\u6280\u672f\u4f7f\u60a8\u80fd\u591f\u5728\u6846\u67b6\u5bb9\u5668\u4e4b\u5916\u6709\u6761\u4ef6\u5730\u5b9e\u4f8b\u5316\u4e0d\u540c\u7684\u7c7b\u3002","title":"\u6a21\u5757\u5f15\u7528"},{"location":"fundamentals/module-reference/#_1","text":"Nest \u63d0\u4f9b\u4e86 ModuleRef \u7c7b\u6765\u5bfc\u822a\u63d0\u4f9b\u5668\u7684\u5185\u90e8\u5217\u8868\uff0c\u5e76\u4f7f\u7528\u5176\u6ce8\u5165\u4ee4\u724c\u4f5c\u4e3a\u67e5\u627e\u952e\u6765\u83b7\u53d6\u5bf9\u4efb\u4f55\u63d0\u4f9b\u5668\u7684\u5f15\u7528\u3002 ModuleRef \u7c7b\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u52a8\u6001\u5b9e\u4f8b\u5316\u9759\u6001\u548c\u9650\u5b9a\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u3002 ModuleRef \u53ef\u4ee5\u901a\u8fc7\u6b63\u5e38\u7684\u65b9\u5f0f\u6ce8\u5165\u5230\u7c7b\u4e2d: @ @filename ( cats . service ) @Injectable () export class CatsService { constructor ( private module Ref : ModuleRef ) {} } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } } info Hint ModuleRef \u7c7b\u662f\u4ece @nestjs/core \u5305\u5bfc\u5165\u7684\u3002","title":"\u6a21\u5757\u5f15\u7528"},{"location":"fundamentals/module-reference/#_2","text":"ModuleRef \u5b9e\u4f8b(\u4ee5\u540e\u6211\u4eec\u5c06\u628a\u5b83\u79f0\u4e3a \u6a21\u5757\u5f15\u7528 )\u6709\u4e00\u4e2a get() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u4f7f\u7528\u6ce8\u5165\u4ee4\u724c/\u7c7b\u540d\u6765\u83b7\u53d6\u5b58\u5728\u4e8e current \u6a21\u5757\u4e2d(\u5df2\u88ab\u5b9e\u4f8b\u5316)\u7684\u63d0\u4f9b\u5668\u3001\u63a7\u5236\u5668\u6216\u53ef\u6ce8\u5165\u5bf9\u8c61(\u4f8b\u5982\uff0c\u5b88\u536b\u3001\u62e6\u622a\u5668\u7b49)\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { private service : Service ; constructor ( private module Ref : ModuleRef ) {} onModuleInit () { this . service = this . module Ref.get ( Service ); } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } onModuleInit () { this . service = this . module Ref.get ( Service ); } } warning Warning get() \u65b9\u6cd5\u4e0d\u80fd\u68c0\u7d22\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668(\u77ac\u6001\u6216\u8bf7\u6c42\u4f5c\u7528\u57df)\u3002 \u76f8\u53cd\uff0c\u4f7f\u7528 \u4e0b\u9762 \u63cf\u8ff0\u7684\u6280\u672f\u3002 \u6b64\u5904 \u5b66\u4e60\u5982\u4f55\u63a7\u5236\u4f5c\u7528\u57df. \u8981\u4ece\u5168\u5c40\u4e0a\u4e0b\u6587\u4e2d\u68c0\u7d22\u63d0\u4f9b\u5668(\u4f8b\u5982\uff0c\u5982\u679c\u63d0\u4f9b\u5668\u5df2\u88ab\u6ce8\u5165\u5230\u4e0d\u540c\u7684\u6a21\u5757\u4e2d)\uff0c\u5c06 {{ '{' }} strict: false {{ '}' }} \u9009\u9879\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 get() \u3002 this . module Ref.get ( Service , { strict : false });","title":"\u68c0\u7d22\u5b9e\u4f8b"},{"location":"fundamentals/module-reference/#_3","text":"\u8981\u52a8\u6001\u89e3\u6790\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668(\u77ac\u6001\u6216\u8bf7\u6c42\u4f5c\u7528\u57df)\uff0c\u8bf7\u4f7f\u7528 resolve() \u65b9\u6cd5\uff0c\u5e76\u5c06\u63d0\u4f9b\u5668\u7684\u6ce8\u5165\u4ee4\u724c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { private transientService : TransientService ; constructor ( private module Ref : ModuleRef ) {} async onModuleInit () { this . transientService = await this . module Ref.resolve ( TransientService ); } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } async onModuleInit () { this . transientService = await this . module Ref.resolve ( TransientService ); } } resolve() \u65b9\u6cd5\u4ece\u5b83\u81ea\u5df1\u7684 DI \u5bb9\u5668\u5b50\u6811 \u4e2d\u8fd4\u56de\u63d0\u4f9b\u5668\u7684\u552f\u4e00\u5b9e\u4f8b\u3002 \u6bcf\u4e2a\u5b50\u6811\u90fd\u6709\u4e00\u4e2a\u60df\u4e00\u7684\u4e0a\u4e0b\u6587\u6807 \u8bc6\u7b26 \u3002 \u56e0\u6b64\uff0c\u5982\u679c\u591a\u6b21\u8c03\u7528\u8be5\u65b9\u6cd5\u5e76\u6bd4\u8f83\u5b9e\u4f8b\u5f15\u7528\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u4eec\u662f\u4e0d\u76f8\u7b49\u7684\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { constructor ( private module Ref : ModuleRef ) {} async onModuleInit () { const transientServices = await Promise . all ([ this . module Ref.resolve ( TransientService ), this . module Ref.resolve ( TransientService ), ]); console . log ( transientServices [ 0 ] === transientServices [ 1 ]); // false } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } async onModuleInit () { const transientServices = await Promise . all ([ this . module Ref.resolve ( TransientService ), this . module Ref.resolve ( TransientService ), ]); console . log ( transientServices [ 0 ] === transientServices [ 1 ]); // false } } \u8981\u8de8\u591a\u4e2a resolve() \u8c03\u7528\u751f\u6210\u5355\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u786e\u4fdd\u5b83\u4eec\u5171\u4eab\u751f\u6210\u7684 DI \u5bb9\u5668\u5b50\u6811\uff0c\u53ef\u4ee5\u5c06\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\u4f20\u9012\u7ed9 resolve() \u65b9\u6cd5\u3002 \u4f7f\u7528 contextfactory \u7c7b\u6765\u751f\u6210\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\u3002 \u8be5\u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2a create() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7684\u60df\u4e00\u6807\u8bc6\u7b26\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { constructor ( private module Ref : ModuleRef ) {} async onModuleInit () { const contextId = ContextIdFactory . create (); const transientServices = await Promise . all ([ this . module Ref.resolve ( TransientService , contextId ), this . module Ref.resolve ( TransientService , contextId ), ]); console . log ( transientServices [ 0 ] === transientServices [ 1 ]); // true } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } async onModuleInit () { const contextId = ContextIdFactory . create (); const transientServices = await Promise . all ([ this . module Ref.resolve ( TransientService , contextId ), this . module Ref.resolve ( TransientService , contextId ), ]); console . log ( transientServices [ 0 ] === transientServices [ 1 ]); // true } } info Hint contextfactory \u7c7b\u662f\u4ece @nestjs/core \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u89e3\u51b3\u4f5c\u7528\u57df\u5185\u7684\u63d0\u4f9b\u5668"},{"location":"fundamentals/module-reference/#_4","text":"\u624b\u52a8\u751f\u6210\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26(\u4f7f\u7528 contextfactory.create() )\u8868\u793a DI \u5b50\u6811\uff0c\u5176\u4e2d REQUEST \u63d0\u4f9b\u5668\u662f undefined \uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u88ab Nest \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u5b9e\u4f8b\u5316\u548c\u7ba1\u7406\u3002 \u8981\u4e3a\u624b\u52a8\u521b\u5efa\u7684 DI \u5b50\u6811\u6ce8\u518c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 REQUEST \u5bf9\u8c61\uff0c\u8bf7\u4f7f\u7528 ModuleRef#registerRequestByContextId() \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: const contextId = ContextIdFactory . create (); this . module Ref.registerRequestByContextId ( /* YOUR_REQUEST_OBJECT */ , contextId );","title":"\u6ce8\u518c\u8bf7\u6c42\u7684\u63d0\u4f9b\u5668"},{"location":"fundamentals/module-reference/#_5","text":"\u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5728 \u8bf7\u6c42 \u4e0a\u4e0b\u6587\u4e2d\u89e3\u6790\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u7684\u5b9e\u4f8b\u3002 \u5047\u8bbe CatsService \u662f\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\uff0c\u60a8\u5e0c\u671b\u89e3\u6790 CatsRepository \u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u4e5f\u88ab\u6807\u8bb0\u4e3a\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u3002 \u4e3a\u4e86\u5171\u4eab\u76f8\u540c\u7684 DI \u5bb9\u5668\u5b50\u6811\uff0c\u4f60\u5fc5\u987b\u83b7\u53d6\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\uff0c\u800c\u4e0d\u662f\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26(\u4f8b\u5982\uff0c\u4f7f\u7528 contextfactory.create() \u51fd\u6570\uff0c\u5982\u4e0a\u6240\u793a)\u3002 \u8981\u83b7\u5f97\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\uff0c\u9996\u5148\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u6ce8\u5165\u8bf7\u6c42\u5bf9\u8c61\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService { constructor ( @Inject ( REQUEST ) private request : Record < string , unknown > , ) {} } @ @switch @Injectable () @Dependencies ( REQUEST ) export class CatsService { constructor ( request ) { this . request = request ; } } info Hint \u4e86\u89e3\u5173\u4e8e\u8bf7\u6c42\u63d0\u4f9b\u5668\u7684\u66f4\u591a\u4fe1\u606f \u6b64\u5904 . \u73b0\u5728\uff0c\u4f7f\u7528 contextfactory \u7c7b\u7684 getByRequest() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\u8bf7\u6c42\u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587 id\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 resolve() \u8c03\u7528: const contextId = ContextIdFactory . getByRequest ( this . request ); const catsRepository = await this . module Ref.resolve ( CatsRepository , contextId );","title":"\u83b7\u5f97\u5f53\u524d\u5b50\u6811"},{"location":"fundamentals/module-reference/#_6","text":"\u8981\u52a8\u6001\u5b9e\u4f8b\u5316\u4e00\u4e2a\u4e4b\u524d\u6ca1\u6709\u6ce8\u518c\u4e3a\u63d0\u4f9b\u5668\u7684\u7c7b\uff0c\u8bf7\u4f7f\u7528\u6a21\u5757\u5f15\u7528\u7684 create() \u65b9\u6cd5\u3002 @ @filename ( cats . service ) @Injectable () export class CatsService implements OnModuleInit { private catsFactory : CatsFactory ; constructor ( private module Ref : ModuleRef ) {} async onModuleInit () { this . catsFactory = await this . module Ref.create ( CatsFactory ); } } @ @switch @Injectable () @Dependencies ( ModuleRef ) export class CatsService { constructor ( module Ref ) { this . module Ref = module Ref ; } async onModuleInit () { this . catsFactory = await this . module Ref.create ( CatsFactory ); } } \u8fd9\u79cd\u6280\u672f\u4f7f\u60a8\u80fd\u591f\u5728\u6846\u67b6\u5bb9\u5668\u4e4b\u5916\u6709\u6761\u4ef6\u5730\u5b9e\u4f8b\u5316\u4e0d\u540c\u7684\u7c7b\u3002","title":"\u52a8\u6001\u5b9e\u4f8b\u5316\u81ea\u5b9a\u4e49\u7c7b"},{"location":"fundamentals/platform-agnosticism/","text":"\u5e73\u53f0\u65e0\u5173\u6027 \u00b6 Nest \u662f\u4e00\u4e2a\u5e73\u53f0\u65e0\u5173\u7684\u6846\u67b6\u3002 \u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5f00\u53d1\u53ef\u4ee5\u8de8\u4e0d\u540c\u7c7b\u578b\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u53ef\u91cd\u7528\u903b\u8f91\u90e8\u5206\u3002 \u4f8b\u5982\uff0c\u5927\u591a\u6570\u7ec4\u4ef6\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\u8de8\u4e0d\u540c\u7684\u5e95\u5c42 HTTP \u670d\u52a1\u5668\u6846\u67b6(\u5982 Express \u548c Fastify)\u91cd\u7528\uff0c\u751a\u81f3\u8de8\u4e0d\u540c\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f(\u5982 HTTP \u670d\u52a1\u5668\u6846\u67b6\u3001\u5177\u6709\u4e0d\u540c\u4f20\u8f93\u5c42\u7684\u5fae\u670d\u52a1\u548c Web Sockets)\u91cd\u7528\u3002 \u4e00\u6b21\u6027\u6784\u5efa\uff0c\u968f\u5904\u4f7f\u7528 \u00b6 \u6587\u6863\u7684 \u6982\u8ff0 \u90e8\u5206\u4e3b\u8981\u5c55\u793a\u4e86\u4f7f\u7528 HTTP \u670d\u52a1\u5668\u6846\u67b6\u7684\u7f16\u7801\u6280\u672f(\u4f8b\u5982\uff0c\u63d0\u4f9b REST API \u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u63d0\u4f9b mvc \u98ce\u683c\u7684\u670d\u52a1\u5668\u7aef\u6e32\u67d3\u5e94\u7528\u7a0b\u5e8f)\u3002 \u7136\u800c\uff0c\u6240\u6709\u8fd9\u4e9b\u6784\u5efa\u5757\u90fd\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u4f20\u8f93\u5c42( microservices \u6216 websockets \u4e4b\u4e0a\u4f7f\u7528\u3002 \u6b64\u5916\uff0cNest \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e13\u95e8\u7684 GraphQL \u6a21\u5757\u3002 \u60a8\u53ef\u4ee5\u5c06 GraphQL \u4f5c\u4e3a API \u5c42\u4e0e\u63d0\u4f9b REST API \u4ea4\u6362\u4f7f\u7528\u3002 \u6b64\u5916\uff0c application context \u7279\u6027\u6709\u52a9\u4e8e\u5728 Nest \u4e4b\u4e0a\u521b\u5efa\u4efb\u4f55\u7c7b\u578b\u7684 Node.js \u5e94\u7528\uff0c\u5305\u62ec CRON \u4f5c\u4e1a\u548c CLI \u5e94\u7528\u3002 Nest \u5e0c\u671b\u6210\u4e3a\u4e00\u4e2a\u6210\u719f\u7684 Node.js \u5e94\u7528\u5e73\u53f0\uff0c\u4e3a\u4f60\u7684\u5e94\u7528\u5e26\u6765\u66f4\u9ad8\u5c42\u6b21\u7684\u6a21\u5757\u5316\u548c\u53ef\u91cd\u7528\u6027\u3002 \u4e00\u6b21\u6784\u5efa\uff0c\u968f\u5904\u4f7f\u7528!","title":"\u5e73\u53f0\u65e0\u5173\u6027"},{"location":"fundamentals/platform-agnosticism/#_1","text":"Nest \u662f\u4e00\u4e2a\u5e73\u53f0\u65e0\u5173\u7684\u6846\u67b6\u3002 \u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5f00\u53d1\u53ef\u4ee5\u8de8\u4e0d\u540c\u7c7b\u578b\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u53ef\u91cd\u7528\u903b\u8f91\u90e8\u5206\u3002 \u4f8b\u5982\uff0c\u5927\u591a\u6570\u7ec4\u4ef6\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\u8de8\u4e0d\u540c\u7684\u5e95\u5c42 HTTP \u670d\u52a1\u5668\u6846\u67b6(\u5982 Express \u548c Fastify)\u91cd\u7528\uff0c\u751a\u81f3\u8de8\u4e0d\u540c\u7c7b\u578b\u7684\u5e94\u7528\u7a0b\u5e8f(\u5982 HTTP \u670d\u52a1\u5668\u6846\u67b6\u3001\u5177\u6709\u4e0d\u540c\u4f20\u8f93\u5c42\u7684\u5fae\u670d\u52a1\u548c Web Sockets)\u91cd\u7528\u3002","title":"\u5e73\u53f0\u65e0\u5173\u6027"},{"location":"fundamentals/platform-agnosticism/#_2","text":"\u6587\u6863\u7684 \u6982\u8ff0 \u90e8\u5206\u4e3b\u8981\u5c55\u793a\u4e86\u4f7f\u7528 HTTP \u670d\u52a1\u5668\u6846\u67b6\u7684\u7f16\u7801\u6280\u672f(\u4f8b\u5982\uff0c\u63d0\u4f9b REST API \u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u63d0\u4f9b mvc \u98ce\u683c\u7684\u670d\u52a1\u5668\u7aef\u6e32\u67d3\u5e94\u7528\u7a0b\u5e8f)\u3002 \u7136\u800c\uff0c\u6240\u6709\u8fd9\u4e9b\u6784\u5efa\u5757\u90fd\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u4f20\u8f93\u5c42( microservices \u6216 websockets \u4e4b\u4e0a\u4f7f\u7528\u3002 \u6b64\u5916\uff0cNest \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e13\u95e8\u7684 GraphQL \u6a21\u5757\u3002 \u60a8\u53ef\u4ee5\u5c06 GraphQL \u4f5c\u4e3a API \u5c42\u4e0e\u63d0\u4f9b REST API \u4ea4\u6362\u4f7f\u7528\u3002 \u6b64\u5916\uff0c application context \u7279\u6027\u6709\u52a9\u4e8e\u5728 Nest \u4e4b\u4e0a\u521b\u5efa\u4efb\u4f55\u7c7b\u578b\u7684 Node.js \u5e94\u7528\uff0c\u5305\u62ec CRON \u4f5c\u4e1a\u548c CLI \u5e94\u7528\u3002 Nest \u5e0c\u671b\u6210\u4e3a\u4e00\u4e2a\u6210\u719f\u7684 Node.js \u5e94\u7528\u5e73\u53f0\uff0c\u4e3a\u4f60\u7684\u5e94\u7528\u5e26\u6765\u66f4\u9ad8\u5c42\u6b21\u7684\u6a21\u5757\u5316\u548c\u53ef\u91cd\u7528\u6027\u3002 \u4e00\u6b21\u6784\u5efa\uff0c\u968f\u5904\u4f7f\u7528!","title":"\u4e00\u6b21\u6027\u6784\u5efa\uff0c\u968f\u5904\u4f7f\u7528"},{"location":"fundamentals/provider-scopes/","text":"\u6ce8\u5165\u4f5c\u7528\u57df \u00b6 \u5bf9\u4e8e\u6765\u81ea\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u53d1\u73b0\uff0c\u5728 Nest \u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u5728\u4f20\u5165\u8bf7\u6c42\u4e4b\u95f4\u5171\u4eab\u7684\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u5230\u6570\u636e\u5e93\u7684\u8fde\u63a5\u6c60\uff0c\u5e26\u6709\u5168\u5c40\u72b6\u6001\u7684\u5355\u4f8b\u670d\u52a1\uff0c\u7b49\u7b49\u3002 \u8bb0\u4f4f\uff0cNode.js \u5e76\u4e0d\u9075\u5faa\u8bf7\u6c42/\u54cd\u5e94\u591a\u7ebf\u7a0b\u65e0\u72b6\u6001\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u7531\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u5904\u7406\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u4f7f\u7528\u5355\u4f8b\u5b9e\u4f8b\u662f\u5b8c\u5168 \u5b89\u5168 \u7684\u3002 \u7136\u800c\uff0c\u5728\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u53ef\u80fd\u662f\u7406\u60f3\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u5728 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\u6309\u8bf7\u6c42\u7f13\u5b58\u3001\u8bf7\u6c42\u8ddf\u8e2a\u548c\u591a\u79df\u6237\u3002 \u6ce8\u5165\u4f5c\u7528\u57df\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u6765\u83b7\u5f97\u6240\u9700\u7684\u63d0\u4f9b\u5668\u751f\u5b58\u671f\u884c\u4e3a\u3002 \u63d0\u4f9b\u5668\u4f5c\u7528\u57df \u00b6 \u63d0\u4f9b\u5668\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4efb\u4f55\u4e00\u4e2a\u4f5c\u7528\u57df: DEFAULT \u63d0\u4f9b\u5668\u7684\u5355\u4e2a\u5b9e\u4f8b\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5171\u4eab\u3002 \u5b9e\u4f8b\u751f\u547d\u5468\u671f\u76f4\u63a5\u7ed1\u5b9a\u5230\u5e94\u7528\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u3002 \u4e00\u65e6\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\uff0c\u6240\u6709\u7684\u5355\u4f8b\u63d0\u4f9b\u5668\u90fd\u5df2\u5b9e\u4f8b\u5316\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u5355\u4f8b\u4f5c\u7528\u57df\u3002 REQUEST \u4e3a\u6bcf\u4e2a\u4f20\u5165\u7684 \u8bf7\u6c42 \u521b\u5efa\u63d0\u4f9b\u5668\u7684\u65b0\u5b9e\u4f8b\u3002 \u5728\u8bf7\u6c42\u5b8c\u6210\u5904\u7406\u540e\uff0c\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002 TRANSIENT \u77ac\u6001\u63d0\u4f9b\u5668\u4e0d\u4f1a\u5728\u6d88\u8d39\u8005\u4e4b\u95f4\u5171\u4eab\u3002 \u6bcf\u4e2a\u6ce8\u5165\u4e34\u65f6\u63d0\u4f9b\u5668\u7684\u6d88\u8d39\u8005\u5c06\u6536\u5230\u4e00\u4e2a\u65b0\u7684\u4e13\u7528\u5b9e\u4f8b\u3002 info Hint \u5bf9\u4e8e\u5927\u591a\u6570\u7528\u4f8b\uff0c \u63a8\u8350 \u4f7f\u7528\u5355\u4f8b\u4f5c\u7528\u57df\u3002 \u8de8\u4f7f\u7528\u8005\u548c\u8de8\u8bf7\u6c42\u5171\u4eab\u63d0\u4f9b\u5668\u610f\u5473\u7740\u53ef\u4ee5\u7f13\u5b58\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5b83\u7684\u521d\u59cb\u5316\u53ea\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u671f\u95f4\u53d1\u751f\u4e00\u6b21\u3002 \u4f7f\u7528 \u00b6 \u901a\u8fc7\u5c06 scope \u5c5e\u6027\u4f20\u9012\u7ed9 @Injectable() \u88c5\u9970\u5668\u9009\u9879\u5bf9\u8c61\u6765\u6307\u5b9a\u6ce8\u5165\u8303\u56f4: import { Injectable , Scope } from '@nestjs/common' ; @Injectable ({ scope : Scope.REQUEST }) export class CatsService {} \u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e \u5b9a\u5236\u7684\u4f9b\u5e94\u5668 \uff0c\u5728\u63d0\u4f9b\u5668\u6ce8\u518c\u7684\u957f\u624b\u8868\u5355\u4e2d\u8bbe\u7f6e scope \u5c5e\u6027: { provide : 'CACHE_MANAGER' , useClass : CacheManager , scope : Scope.TRANSIENT , } info Hint \u4ece @nestjs/common \u4e2d\u5bfc\u5165 Scope enum warning Notice \u7f51\u5173\u4e0d\u5e94\u8be5\u4f7f\u7528\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u5fc5\u987b\u5145\u5f53\u5355\u4f8b\u3002 \u6bcf\u4e2a\u7f51\u5173\u5c01\u88c5\u4e00\u4e2a\u771f\u6b63\u7684\u5957\u63a5\u5b57\uff0c\u4e0d\u80fd\u591a\u6b21\u5b9e\u4f8b\u5316\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u5355\u4f8b\u4f5c\u7528\u57df\uff0c\u4e0d\u9700\u8981\u58f0\u660e\u3002 \u5982\u679c\u4f60\u786e\u5b9e\u60f3\u58f0\u660e\u4e00\u4e2a\u63d0\u4f9b\u5668\u4e3a\u5355\u4f8b\u4f5c\u7528\u57df\uff0c\u4f7f\u7528 scope \u5c5e\u6027\u7684 Scope.DEFAULT \u503c\u3002 \u63a7\u5236\u5668\u4f5c\u7528\u57df \u00b6 \u63a7\u5236\u5668\u4e5f\u53ef\u4ee5\u6709\u4f5c\u7528\u57df\uff0c\u5b83\u9002\u7528\u4e8e\u63a7\u5236\u5668\u4e2d\u58f0\u660e\u7684\u6240\u6709\u8bf7\u6c42\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u4e0e\u63d0\u4f9b\u5668\u4f5c\u7528\u57df\u4e00\u6837\uff0c\u63a7\u5236\u5668\u7684\u4f5c\u7528\u57df\u58f0\u660e\u4e86\u5b83\u7684\u751f\u5b58\u671f\u3002 \u5bf9\u4e8e\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63a7\u5236\u5668\uff0c\u5c06\u4e3a\u6bcf\u4e2a\u5165\u7ad9\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u5e76\u5728\u8bf7\u6c42\u5b8c\u6210\u5904\u7406\u540e\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002 \u4f7f\u7528 ControllerOptions \u5bf9\u8c61\u7684 scope \u5c5e\u6027\u58f0\u660e\u63a7\u5236\u5668\u4f5c\u7528\u57df: @Controller ({ path : 'cats' , scope : Scope.REQUEST , }) export class CatsController {} \u4f5c\u7528\u57df\u5c42\u6b21\u7ed3\u6784 \u00b6 \u4f5c\u7528\u57df\u5728\u6ce8\u5165\u94fe\u4e0a\u5192\u6ce1\u3002 \u4f9d\u8d56\u4e8e\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u7684\u63a7\u5236\u5668\u672c\u8eab\u4e5f\u5c06\u662f\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u3002 \u60f3\u8c61\u4e00\u4e0b\u4e0b\u9762\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe: CatsController <- CatsService <- CatsRepository \u3002 \u5982\u679c CatsService \u662f\u8bf7\u6c42\u4f5c\u7528\u57df(\u5176\u4ed6\u7684\u662f\u9ed8\u8ba4\u7684\u5355\u4f8b)\uff0c CatsController \u5c06\u6210\u4e3a\u8bf7\u6c42\u4f5c\u7528\u57df\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u6ce8\u5165\u7684\u670d\u52a1\u3002 CatsRepository \u662f\u4e0d\u4f9d\u8d56\u7684\uff0c\u5b83\u5c06\u4fdd\u6301\u5355\u4f8b\u4f5c\u7528\u57df\u3002 \u8bf7\u6c42\u63d0\u4f9b\u5668 \u00b6 \u5728\u4e00\u4e2a\u57fa\u4e8e HTTP \u670d\u52a1\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d(\u4f8b\u5982\uff0c\u4f7f\u7528 @nestjs/platform-express \u6216 @nestjs/platform-fastify )\uff0c\u5f53\u4f7f\u7528\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u65f6\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u8bbf\u95ee\u539f\u59cb\u8bf7\u6c42\u5bf9\u8c61\u7684\u5f15\u7528\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6ce8\u5165 REQUEST \u5bf9\u8c61\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 import { Injectable , Scope , Inject } from '@nestjs/common' ; import { REQUEST } from '@nestjs/core' ; import { Request } from 'express' ; @Injectable ({ scope : Scope.REQUEST }) export class CatsService { constructor ( @Inject ( REQUEST ) private request : Request ) {} } \u7531\u4e8e\u5e95\u5c42\u5e73\u53f0/\u534f\u8bae\u7684\u5dee\u5f02\uff0c Microservice \u6216 GraphQL \u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u5165\u7ad9\u8bf7\u6c42\u7684\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002 \u5728 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f60\u6ce8\u5165 CONTEXT \u800c\u4e0d\u662f REQUEST : import { Injectable , Scope , Inject } from '@nestjs/common' ; import { CONTEXT } from '@nestjs/graphql' ; @Injectable ({ scope : Scope.REQUEST }) export class CatsService { constructor ( @Inject ( CONTEXT ) private context ) {} } \u7136\u540e\u914d\u7f6e context \u503c(\u5728 GraphQLModule \u4e2d)\uff0c\u4f7f\u5176\u5305\u542b request \u4f5c\u4e3a\u5c5e\u6027\u3002 \u6027\u80fd \u00b6 \u4f7f\u7528\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u5c06\u5bf9\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u4ea7\u751f\u5f71\u54cd\u3002 \u867d\u7136 Nest \u8bd5\u56fe\u7f13\u5b58\u5c3d\u53ef\u80fd\u591a\u7684\u5143\u6570\u636e\uff0c\u4f46\u5b83\u4ecd\u7136\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002 \u56e0\u6b64\uff0c\u5b83\u4f1a\u964d\u4f4e\u60a8\u7684\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u548c\u6574\u4f53\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u3002 \u9664\u975e\u63d0\u4f9b\u5668\u5fc5\u987b\u662f\u8bf7\u6c42\u4f5c\u7528\u57df\uff0c\u5426\u5219\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528\u9ed8\u8ba4\u7684\u5355\u4f8b\u4f5c\u7528\u57df\u3002","title":"\u6ce8\u5165\u4f5c\u7528\u57df"},{"location":"fundamentals/provider-scopes/#_1","text":"\u5bf9\u4e8e\u6765\u81ea\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u53d1\u73b0\uff0c\u5728 Nest \u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u5728\u4f20\u5165\u8bf7\u6c42\u4e4b\u95f4\u5171\u4eab\u7684\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u5230\u6570\u636e\u5e93\u7684\u8fde\u63a5\u6c60\uff0c\u5e26\u6709\u5168\u5c40\u72b6\u6001\u7684\u5355\u4f8b\u670d\u52a1\uff0c\u7b49\u7b49\u3002 \u8bb0\u4f4f\uff0cNode.js \u5e76\u4e0d\u9075\u5faa\u8bf7\u6c42/\u54cd\u5e94\u591a\u7ebf\u7a0b\u65e0\u72b6\u6001\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u7531\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u5904\u7406\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u4f7f\u7528\u5355\u4f8b\u5b9e\u4f8b\u662f\u5b8c\u5168 \u5b89\u5168 \u7684\u3002 \u7136\u800c\uff0c\u5728\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u8bf7\u6c42\u7684\u751f\u547d\u5468\u671f\u53ef\u80fd\u662f\u7406\u60f3\u7684\u884c\u4e3a\uff0c\u4f8b\u5982\u5728 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\u6309\u8bf7\u6c42\u7f13\u5b58\u3001\u8bf7\u6c42\u8ddf\u8e2a\u548c\u591a\u79df\u6237\u3002 \u6ce8\u5165\u4f5c\u7528\u57df\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u6765\u83b7\u5f97\u6240\u9700\u7684\u63d0\u4f9b\u5668\u751f\u5b58\u671f\u884c\u4e3a\u3002","title":"\u6ce8\u5165\u4f5c\u7528\u57df"},{"location":"fundamentals/provider-scopes/#_2","text":"\u63d0\u4f9b\u5668\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4efb\u4f55\u4e00\u4e2a\u4f5c\u7528\u57df: DEFAULT \u63d0\u4f9b\u5668\u7684\u5355\u4e2a\u5b9e\u4f8b\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5171\u4eab\u3002 \u5b9e\u4f8b\u751f\u547d\u5468\u671f\u76f4\u63a5\u7ed1\u5b9a\u5230\u5e94\u7528\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u3002 \u4e00\u65e6\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\uff0c\u6240\u6709\u7684\u5355\u4f8b\u63d0\u4f9b\u5668\u90fd\u5df2\u5b9e\u4f8b\u5316\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u5355\u4f8b\u4f5c\u7528\u57df\u3002 REQUEST \u4e3a\u6bcf\u4e2a\u4f20\u5165\u7684 \u8bf7\u6c42 \u521b\u5efa\u63d0\u4f9b\u5668\u7684\u65b0\u5b9e\u4f8b\u3002 \u5728\u8bf7\u6c42\u5b8c\u6210\u5904\u7406\u540e\uff0c\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002 TRANSIENT \u77ac\u6001\u63d0\u4f9b\u5668\u4e0d\u4f1a\u5728\u6d88\u8d39\u8005\u4e4b\u95f4\u5171\u4eab\u3002 \u6bcf\u4e2a\u6ce8\u5165\u4e34\u65f6\u63d0\u4f9b\u5668\u7684\u6d88\u8d39\u8005\u5c06\u6536\u5230\u4e00\u4e2a\u65b0\u7684\u4e13\u7528\u5b9e\u4f8b\u3002 info Hint \u5bf9\u4e8e\u5927\u591a\u6570\u7528\u4f8b\uff0c \u63a8\u8350 \u4f7f\u7528\u5355\u4f8b\u4f5c\u7528\u57df\u3002 \u8de8\u4f7f\u7528\u8005\u548c\u8de8\u8bf7\u6c42\u5171\u4eab\u63d0\u4f9b\u5668\u610f\u5473\u7740\u53ef\u4ee5\u7f13\u5b58\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5b83\u7684\u521d\u59cb\u5316\u53ea\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u671f\u95f4\u53d1\u751f\u4e00\u6b21\u3002","title":"\u63d0\u4f9b\u5668\u4f5c\u7528\u57df"},{"location":"fundamentals/provider-scopes/#_3","text":"\u901a\u8fc7\u5c06 scope \u5c5e\u6027\u4f20\u9012\u7ed9 @Injectable() \u88c5\u9970\u5668\u9009\u9879\u5bf9\u8c61\u6765\u6307\u5b9a\u6ce8\u5165\u8303\u56f4: import { Injectable , Scope } from '@nestjs/common' ; @Injectable ({ scope : Scope.REQUEST }) export class CatsService {} \u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e \u5b9a\u5236\u7684\u4f9b\u5e94\u5668 \uff0c\u5728\u63d0\u4f9b\u5668\u6ce8\u518c\u7684\u957f\u624b\u8868\u5355\u4e2d\u8bbe\u7f6e scope \u5c5e\u6027: { provide : 'CACHE_MANAGER' , useClass : CacheManager , scope : Scope.TRANSIENT , } info Hint \u4ece @nestjs/common \u4e2d\u5bfc\u5165 Scope enum warning Notice \u7f51\u5173\u4e0d\u5e94\u8be5\u4f7f\u7528\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\uff0c\u56e0\u4e3a\u5b83\u4eec\u5fc5\u987b\u5145\u5f53\u5355\u4f8b\u3002 \u6bcf\u4e2a\u7f51\u5173\u5c01\u88c5\u4e00\u4e2a\u771f\u6b63\u7684\u5957\u63a5\u5b57\uff0c\u4e0d\u80fd\u591a\u6b21\u5b9e\u4f8b\u5316\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\u5355\u4f8b\u4f5c\u7528\u57df\uff0c\u4e0d\u9700\u8981\u58f0\u660e\u3002 \u5982\u679c\u4f60\u786e\u5b9e\u60f3\u58f0\u660e\u4e00\u4e2a\u63d0\u4f9b\u5668\u4e3a\u5355\u4f8b\u4f5c\u7528\u57df\uff0c\u4f7f\u7528 scope \u5c5e\u6027\u7684 Scope.DEFAULT \u503c\u3002","title":"\u4f7f\u7528"},{"location":"fundamentals/provider-scopes/#_4","text":"\u63a7\u5236\u5668\u4e5f\u53ef\u4ee5\u6709\u4f5c\u7528\u57df\uff0c\u5b83\u9002\u7528\u4e8e\u63a7\u5236\u5668\u4e2d\u58f0\u660e\u7684\u6240\u6709\u8bf7\u6c42\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u3002 \u4e0e\u63d0\u4f9b\u5668\u4f5c\u7528\u57df\u4e00\u6837\uff0c\u63a7\u5236\u5668\u7684\u4f5c\u7528\u57df\u58f0\u660e\u4e86\u5b83\u7684\u751f\u5b58\u671f\u3002 \u5bf9\u4e8e\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63a7\u5236\u5668\uff0c\u5c06\u4e3a\u6bcf\u4e2a\u5165\u7ad9\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u5e76\u5728\u8bf7\u6c42\u5b8c\u6210\u5904\u7406\u540e\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002 \u4f7f\u7528 ControllerOptions \u5bf9\u8c61\u7684 scope \u5c5e\u6027\u58f0\u660e\u63a7\u5236\u5668\u4f5c\u7528\u57df: @Controller ({ path : 'cats' , scope : Scope.REQUEST , }) export class CatsController {}","title":"\u63a7\u5236\u5668\u4f5c\u7528\u57df"},{"location":"fundamentals/provider-scopes/#_5","text":"\u4f5c\u7528\u57df\u5728\u6ce8\u5165\u94fe\u4e0a\u5192\u6ce1\u3002 \u4f9d\u8d56\u4e8e\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u7684\u63a7\u5236\u5668\u672c\u8eab\u4e5f\u5c06\u662f\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u3002 \u60f3\u8c61\u4e00\u4e0b\u4e0b\u9762\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe: CatsController <- CatsService <- CatsRepository \u3002 \u5982\u679c CatsService \u662f\u8bf7\u6c42\u4f5c\u7528\u57df(\u5176\u4ed6\u7684\u662f\u9ed8\u8ba4\u7684\u5355\u4f8b)\uff0c CatsController \u5c06\u6210\u4e3a\u8bf7\u6c42\u4f5c\u7528\u57df\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u6ce8\u5165\u7684\u670d\u52a1\u3002 CatsRepository \u662f\u4e0d\u4f9d\u8d56\u7684\uff0c\u5b83\u5c06\u4fdd\u6301\u5355\u4f8b\u4f5c\u7528\u57df\u3002","title":"\u4f5c\u7528\u57df\u5c42\u6b21\u7ed3\u6784"},{"location":"fundamentals/provider-scopes/#_6","text":"\u5728\u4e00\u4e2a\u57fa\u4e8e HTTP \u670d\u52a1\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d(\u4f8b\u5982\uff0c\u4f7f\u7528 @nestjs/platform-express \u6216 @nestjs/platform-fastify )\uff0c\u5f53\u4f7f\u7528\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u65f6\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u8bbf\u95ee\u539f\u59cb\u8bf7\u6c42\u5bf9\u8c61\u7684\u5f15\u7528\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u6ce8\u5165 REQUEST \u5bf9\u8c61\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 import { Injectable , Scope , Inject } from '@nestjs/common' ; import { REQUEST } from '@nestjs/core' ; import { Request } from 'express' ; @Injectable ({ scope : Scope.REQUEST }) export class CatsService { constructor ( @Inject ( REQUEST ) private request : Request ) {} } \u7531\u4e8e\u5e95\u5c42\u5e73\u53f0/\u534f\u8bae\u7684\u5dee\u5f02\uff0c Microservice \u6216 GraphQL \u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u5165\u7ad9\u8bf7\u6c42\u7684\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002 \u5728 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f60\u6ce8\u5165 CONTEXT \u800c\u4e0d\u662f REQUEST : import { Injectable , Scope , Inject } from '@nestjs/common' ; import { CONTEXT } from '@nestjs/graphql' ; @Injectable ({ scope : Scope.REQUEST }) export class CatsService { constructor ( @Inject ( CONTEXT ) private context ) {} } \u7136\u540e\u914d\u7f6e context \u503c(\u5728 GraphQLModule \u4e2d)\uff0c\u4f7f\u5176\u5305\u542b request \u4f5c\u4e3a\u5c5e\u6027\u3002","title":"\u8bf7\u6c42\u63d0\u4f9b\u5668"},{"location":"fundamentals/provider-scopes/#_7","text":"\u4f7f\u7528\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u63d0\u4f9b\u5668\u5c06\u5bf9\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u4ea7\u751f\u5f71\u54cd\u3002 \u867d\u7136 Nest \u8bd5\u56fe\u7f13\u5b58\u5c3d\u53ef\u80fd\u591a\u7684\u5143\u6570\u636e\uff0c\u4f46\u5b83\u4ecd\u7136\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002 \u56e0\u6b64\uff0c\u5b83\u4f1a\u964d\u4f4e\u60a8\u7684\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u548c\u6574\u4f53\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u3002 \u9664\u975e\u63d0\u4f9b\u5668\u5fc5\u987b\u662f\u8bf7\u6c42\u4f5c\u7528\u57df\uff0c\u5426\u5219\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528\u9ed8\u8ba4\u7684\u5355\u4f8b\u4f5c\u7528\u57df\u3002","title":"\u6027\u80fd"},{"location":"fundamentals/unit-testing/","text":"\u6d4b\u8bd5 \u00b6 \u81ea\u52a8\u5316\u6d4b\u8bd5\u88ab\u8ba4\u4e3a\u662f\u4efb\u4f55\u4e25\u8083\u7684\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002 \u81ea\u52a8\u5316\u4f7f\u5f97\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8f7b\u677e\u5feb\u901f\u5730\u91cd\u590d\u5355\u4e2a\u6d4b\u8bd5\u6216\u6d4b\u8bd5\u5957\u4ef6\u3002 \u8fd9\u6709\u52a9\u4e8e\u786e\u4fdd\u53d1\u5e03\u6ee1\u8db3\u8d28\u91cf\u548c\u6027\u80fd\u76ee\u6807\u3002 \u81ea\u52a8\u5316\u6709\u52a9\u4e8e\u589e\u52a0\u8986\u76d6\u7387\uff0c\u5e76\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u66f4\u5feb\u7684\u53cd\u9988\u5faa\u73af\u3002 \u81ea\u52a8\u5316\u65e2\u63d0\u9ad8\u4e86\u72ec\u7acb\u5f00\u53d1\u4eba\u5458\u7684\u751f\u4ea7\u529b\uff0c\u53c8\u786e\u4fdd\u4e86\u6d4b\u8bd5\u5728\u5173\u952e\u7684\u5f00\u53d1\u751f\u547d\u5468\u671f\u8282\u70b9\u4e0a\u8fd0\u884c\uff0c\u6bd4\u5982\u6e90\u4ee3\u7801\u63a7\u5236\u7b7e\u5165\u3001\u7279\u6027\u96c6\u6210\u548c\u7248\u672c\u53d1\u5e03\u3002 \u8fd9\u6837\u7684\u6d4b\u8bd5\u901a\u5e38\u8de8\u8d8a\u5404\u79cd\u7c7b\u578b\uff0c\u5305\u62ec\u5355\u5143\u6d4b\u8bd5\u3001\u7aef\u5230\u7aef(e2e)\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u7b49\u7b49\u3002 \u867d\u7136\u8fd9\u4e9b\u597d\u5904\u662f\u6bcb\u5eb8\u7f6e\u7591\u7684\uff0c\u4f46\u8bbe\u7f6e\u8d77\u6765\u53ef\u80fd\u5f88\u7e41\u7410\u3002 Nest \u81f4\u529b\u4e8e\u63a8\u5e7f\u5f00\u53d1\u6700\u4f73\u5b9e\u8df5\uff0c\u5305\u62ec\u6709\u6548\u7684\u6d4b\u8bd5\uff0c\u56e0\u6b64\u5b83\u5305\u62ec\u4ee5\u4e0b\u529f\u80fd\uff0c\u4ee5\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u548c\u56e2\u961f\u6784\u5efa\u548c\u81ea\u52a8\u5316\u6d4b\u8bd5\u3002 Nest: \u81ea\u52a8\u642d\u5efa\u7ec4\u4ef6\u7684\u9ed8\u8ba4\u5355\u5143\u6d4b\u8bd5\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u7aef\u5230\u7aef\u6d4b\u8bd5 \u63d0\u4f9b\u9ed8\u8ba4\u5de5\u5177(\u4f8b\u5982\u6784\u5efa\u9694\u79bb\u6a21\u5757/\u5e94\u7528\u7a0b\u5e8f\u52a0\u8f7d\u5668\u7684\u6d4b\u8bd5\u8fd0\u884c\u5668) \u63d0\u4f9b\u4e86\u4e0e Jest \u548c Supertest \u7684\u5f00\u7bb1\u5373\u7528\u7684\u96c6\u6210\uff0c\u540c\u65f6\u4fdd\u6301\u4e0e\u6d4b\u8bd5\u5de5\u5177\u65e0\u5173 \u4f7f\u5f97 Nest \u4f9d\u8d56\u9879\u6ce8\u5165\u7cfb\u7edf\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u53ef\u7528\uff0c\u53ef\u4ee5\u8f7b\u677e\u6a21\u62df\u7ec4\u4ef6 \u5982\u524d\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u60a8\u559c\u6b22\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u56e0\u4e3a Nest \u4e0d\u5f3a\u5236\u4f7f\u7528\u4efb\u4f55\u7279\u5b9a\u7684\u5de5\u5177\u3002 \u53ea\u9700\u66ff\u6362\u6240\u9700\u7684\u5143\u7d20(\u6bd4\u5982\u6d4b\u8bd5\u8fd0\u884c\u5668)\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u4eab\u53d7\u5230 Nest \u73b0\u6210\u6d4b\u8bd5\u5de5\u5177\u7684\u597d\u5904\u3002 \u5b89\u88c5 \u00b6 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i --save-dev @nestjs/testing \u5355\u5143\u6d4b\u8bd5 \u00b6 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6d4b\u8bd5\u4e86\u4e24\u4e2a\u7c7b: CatsController \u548c CatsService \u3002 \u5982\u524d\u6240\u8ff0\uff0c Jest \u662f\u4f5c\u4e3a\u9ed8\u8ba4\u6d4b\u8bd5\u6846\u67b6\u63d0\u4f9b\u7684\u3002 \u5b83\u5145\u5f53\u6d4b\u8bd5\u8fd0\u884c\u5668\uff0c\u8fd8\u63d0\u4f9b\u65ad\u8a00\u51fd\u6570\u548c test-double \u5b9e\u7528\u7a0b\u5e8f\uff0c\u4ee5\u5e2e\u52a9\u6a21\u62df\u3001\u76d1\u89c6\u7b49\u3002 \u5728\u63a5\u4e0b\u6765\u7684\u57fa\u672c\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u624b\u52a8\u5b9e\u4f8b\u5316\u8fd9\u4e9b\u7c7b\uff0c\u5e76\u786e\u4fdd\u63a7\u5236\u5668\u548c\u670d\u52a1\u5c65\u884c\u5b83\u4eec\u7684 API \u5951\u7ea6\u3002 @ @filename ( cats . controller . spec ) import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; describe ( 'CatsController' , () => { let catsController : CatsController ; let catsService : CatsService ; beforeEach (() => { catsService = new CatsService (); catsController = new CatsController ( catsService ); }); describe ( 'findAll' , () => { it ( 'should return an array of cats' , async () => { const result = [ 'test' ]; jest . spyOn ( catsService , 'findAll' ). mockImplementation (() => result ); expect ( await catsController . findAll ()). toBe ( result ); }); }); }); @ @switch import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; describe ( 'CatsController' , () => { let catsController ; let catsService ; beforeEach (() => { catsService = new CatsService (); catsController = new CatsController ( catsService ); }); describe ( 'findAll' , () => { it ( 'should return an array of cats' , async () => { const result = [ 'test' ]; jest . spyOn ( catsService , 'findAll' ). mockImplementation (() => result ); expect ( await catsController . findAll ()). toBe ( result ); }); }); }); info Hint Keep your test files located near the classes they test. Testing files should have a .spec or .test suffix. \u56e0\u4e3a\u4e0a\u9762\u7684\u793a\u4f8b\u5f88\u7b80\u5355\uff0c\u6240\u4ee5\u6211\u4eec\u5e76\u6ca1\u6709\u771f\u6b63\u6d4b\u8bd5\u4efb\u4f55\u7279\u5b9a\u4e8e nest \u7684\u4e1c\u897f\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u751a\u81f3\u6ca1\u6709\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165(\u6ce8\u610f\uff0c\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a CatsService \u7684\u5b9e\u4f8b\u7ed9 catsController )\u3002 \u8fd9\u79cd\u5f62\u5f0f\u7684\u6d4b\u8bd5\u2014\u2014\u6211\u4eec\u624b\u52a8\u5b9e\u4f8b\u5316\u88ab\u6d4b\u8bd5\u7684\u7c7b\u2014\u2014\u901a\u5e38\u88ab\u79f0\u4e3a \u9694\u79bb\u6d4b\u8bd5 \uff0c\u56e0\u4e3a\u5b83\u72ec\u7acb\u4e8e\u6846\u67b6\u3002 \u8ba9\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u5b83\u4eec\u53ef\u4ee5\u5e2e\u52a9\u60a8\u6d4b\u8bd5\u66f4\u5e7f\u6cdb\u4f7f\u7528 Nest \u7279\u6027\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u6d4b\u8bd5\u5de5\u5177 \u00b6 @nestjs/testing \u5305\u63d0\u4f9b\u4e86\u4e00\u7ec4\u5b9e\u7528\u7a0b\u5e8f\uff0c\u652f\u6301\u66f4\u5065\u58ee\u7684\u6d4b\u8bd5\u8fc7\u7a0b\u3002 \u8ba9\u6211\u4eec\u7528\u5185\u7f6e\u7684 Test \u7c7b\u91cd\u5199\u524d\u9762\u7684\u4f8b\u5b50: @ @filename ( cats . controller . spec ) import { Test } from '@nestjs/testing' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; describe ( 'CatsController' , () => { let catsController : CatsController ; let catsService : CatsService ; beforeEach ( async () => { const module Ref = await Test . createTestingModule ({ controllers : [ CatsController ], providers : [ CatsService ], }). compile (); catsService = module Ref.get < CatsService > ( CatsService ); catsController = module Ref.get < CatsController > ( CatsController ); }); describe ( 'findAll' , () => { it ( 'should return an array of cats' , async () => { const result = [ 'test' ]; jest . spyOn ( catsService , 'findAll' ). mockImplementation (() => result ); expect ( await catsController . findAll ()). toBe ( result ); }); }); }); @ @switch import { Test } from '@nestjs/testing' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; describe ( 'CatsController' , () => { let catsController ; let catsService ; beforeEach ( async () => { const module Ref = await Test . createTestingModule ({ controllers : [ CatsController ], providers : [ CatsService ], }). compile (); catsService = module Ref.get ( CatsService ); catsController = module Ref.get ( CatsController ); }); describe ( 'findAll' , () => { it ( 'should return an array of cats' , async () => { const result = [ 'test' ]; jest . spyOn ( catsService , 'findAll' ). mockImplementation (() => result ); expect ( await catsController . findAll ()). toBe ( result ); }); }); }); \u201cTest\u201d\u7c7b\u5728\u63d0\u4f9b\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u4e0a\u4e0b\u6587\u65f6\u975e\u5e38\u6709\u7528\uff0c\u8be5\u4e0a\u4e0b\u6587\u5b9e\u9645\u4e0a\u6a21\u62df\u4e86\u5b8c\u6574\u7684 Nest \u8fd0\u884c\u65f6\uff0c\u4f46\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u94a9\u5b50\uff0c\u4f7f\u7ba1\u7406\u7c7b\u5b9e\u4f8b\u53d8\u5f97\u5bb9\u6613\uff0c\u5305\u62ec\u6a21\u62df\u548c\u8986\u76d6\u3002 Test \u7c7b\u6709\u4e00\u4e2a createTestingModule() \u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6a21\u5757\u5143\u6570\u636e\u5bf9\u8c61\u4f5c\u4e3a\u5b83\u7684\u53c2\u6570(\u4e0e\u4f60\u4f20\u9012\u7ed9 @Module() \u88c5\u9970\u5668\u7684\u5bf9\u8c61\u76f8\u540c)\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a TestingModule \u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u53c8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u3002 \u5bf9\u4e8e\u5355\u5143\u6d4b\u8bd5\uff0c\u91cd\u8981\u7684\u662f compile() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u5f15\u5bfc\u4e00\u4e2a\u6a21\u5757\u53ca\u5176\u4f9d\u8d56\u9879(\u7c7b\u4f3c\u4e8e\u4f20\u7edf\u7684 main \u5f15\u5bfc\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\u3002\u4f7f\u7528 NestFactory.create() )\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5df2\u51c6\u5907\u597d\u6d4b\u8bd5\u7684\u6a21\u5757\u3002 info Hint The compile() method is asynchronous and therefore has to be awaited. Once the module is compiled you can retrieve any static instance it declares (controllers and providers) using the get() method. TestingModule inherits from the module reference class, and therefore its ability to dynamically resolve scoped providers (transient or request-scoped). Do this with the resolve() method (the get() method can only retrieve static instances). const module Ref = await Test . createTestingModule ({ controllers : [ CatsController ], providers : [ CatsService ], }). compile (); catsService = await module Ref.resolve ( CatsService ); warning Warning The resolve() method returns a unique instance of the provider, from its own DI container sub-tree . Each sub-tree has a unique context identifier. Thus, if you call this method more than once and compare instance references, you will see that they are not equal. info Hint Learn more about the module reference features here . Instead of using the production version of any provider, you can override it with a custom provider for testing purposes. For example, you can mock a database service instead of connecting to a live database. We'll cover overrides in the next section, but they're available for unit tests as well. Auto mocking \u00b6 Nest \u8fd8\u5141\u8bb8\u60a8\u5b9a\u4e49\u4e00\u4e2a\u6a21\u62df\u5de5\u5382\uff0c\u4ee5\u5e94\u7528\u4e8e\u6240\u6709\u4e22\u5931\u7684\u4f9d\u8d56\u9879\u3002 \u8fd9\u5bf9\u4e8e\u5728\u4e00\u4e2a\u7c7b\u4e2d\u6709\u5927\u91cf\u4f9d\u8d56\u9879\uff0c\u5e76\u4e14\u6a21\u62df\u6240\u6709\u4f9d\u8d56\u9879\u5c06\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\u548c\u5927\u91cf\u8bbe\u7f6e\u7684\u60c5\u51b5\u5f88\u6709\u7528\u3002 \u8981\u5229\u7528\u8fd9\u4e2a\u7279\u6027\uff0c createTestingModule() \u9700\u8981\u4e0e useMocker() \u65b9\u6cd5\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u4f9d\u8d56\u9879\u6a21\u62df\u4f20\u9012\u4e00\u4e2a\u5de5\u5382\u3002 \u8fd9\u4e2a\u5de5\u5382\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u4ee4\u724c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b9e\u4f8b\u4ee4\u724c\uff0c\u4efb\u4f55\u5bf9 Nest \u63d0\u4f9b\u7a0b\u5e8f\u6709\u6548\u7684\u4ee4\u724c\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6a21\u62df\u5b9e\u73b0\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 ' jest-mock ' \u521b\u5efa\u901a\u7528 mock \u548c\u4f7f\u7528' jest.fn() '\u4e3a' CatsService '\u521b\u5efa\u7279\u5b9a mock \u7684\u793a\u4f8b\u3002 const module Mocker = new ModuleMocker ( global ); describe ( 'CatsController' , () => { let controller : CatsController ; beforeEach ( async () => { const module Ref = await Test . createTestingModule ({ controllers : [ CatsController ], }) . useMocker (( token ) => { if ( token === CatsService ) { return { findAll : jest.fn (). mockResolveValue ( results ) }; } if ( typeof token === 'function' ) { const mockMetadata = module Mocker.getMetadata ( token , ) as MockFunctionMetadata < any , any > ; const Mock = module Mocker.generateFromMetadata ( mockMetadata ); return new Mock (); } }) . compile (); controller = module Ref.get ( CatsController ); }); }); info Hint A general mock factory, like createMock from @golevelup/ts-jest can also be passed directly. You can also retrieve these mocks out of the testing container as you normally would custom providers, moduleRef.get(CatsService) . \u7aef\u5230\u7aef\u6d4b\u8bd5 \u00b6 \u4e0e\u5355\u5143\u6d4b\u8bd5(\u4fa7\u91cd\u4e8e\u5355\u4e2a\u6a21\u5757\u548c\u7c7b)\u4e0d\u540c\uff0c\u7aef\u5230\u7aef(e2e)\u6d4b\u8bd5\u5728\u66f4\u805a\u5408\u7684\u5c42\u6b21\u4e0a\u8986\u76d6\u4e86\u7c7b\u548c\u6a21\u5757\u7684\u4ea4\u4e92\u2014\u2014\u66f4\u63a5\u8fd1\u4e8e\u7ec8\u7aef\u7528\u6237\u4e0e\u751f\u4ea7\u7cfb\u7edf\u7684\u4ea4\u4e92\u3002 \u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u7684\u589e\u957f\uff0c\u624b\u52a8\u6d4b\u8bd5\u6bcf\u4e2a API \u7aef\u70b9\u7684\u7aef\u5230\u7aef\u884c\u4e3a\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\u3002 \u81ea\u52a8\u5316\u7684\u7aef\u5230\u7aef\u6d4b\u8bd5\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u7cfb\u7edf\u7684\u6574\u4f53\u884c\u4e3a\u662f\u6b63\u786e\u7684\uff0c\u5e76\u6ee1\u8db3\u9879\u76ee\u9700\u6c42\u3002 \u4e3a\u4e86\u6267\u884c\u7aef\u5230\u7aef\u6d4b\u8bd5\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e0e\u521a\u521a\u5728 \u5355\u5143\u6d4b\u8bd5 \u4e2d\u4ecb\u7ecd\u7684\u914d\u7f6e\u7c7b\u4f3c\u7684\u914d\u7f6e\u3002 \u6b64\u5916\uff0cNest \u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528 Supertest \u5e93\u6765\u6a21\u62df HTTP \u8bf7\u6c42\u3002 @ @filename ( cats . e2e - spec ) import * as request from 'supertest' ; import { Test } from '@nestjs/testing' ; import { CatsModule } from '../../src/cats/cats.module' ; import { CatsService } from '../../src/cats/cats.service' ; import { INestApplication } from '@nestjs/common' ; describe ( 'Cats' , () => { let app : INestApplication ; let catsService = { findAll : () => [ 'test' ] }; beforeAll ( async () => { const module Ref = await Test . createTestingModule ({ imports : [ CatsModule ], }) . overrideProvider ( CatsService ) . useValue ( catsService ) . compile (); app = module Ref.createNestApplication (); await app . init (); }); it ( `/GET cats` , () => { return request ( app . getHttpServer ()) . get ( '/cats' ) . expect ( 200 ) . expect ({ data : catsService.findAll (), }); }); afterAll ( async () => { await app . close (); }); }); @ @switch import * as request from 'supertest' ; import { Test } from '@nestjs/testing' ; import { CatsModule } from '../../src/cats/cats.module' ; import { CatsService } from '../../src/cats/cats.service' ; import { INestApplication } from '@nestjs/common' ; describe ( 'Cats' , () => { let app : INestApplication ; let catsService = { findAll : () => [ 'test' ] }; beforeAll ( async () => { const module Ref = await Test . createTestingModule ({ imports : [ CatsModule ], }) . overrideProvider ( CatsService ) . useValue ( catsService ) . compile (); app = module Ref.createNestApplication (); await app . init (); }); it ( `/GET cats` , () => { return request ( app . getHttpServer ()) . get ( '/cats' ) . expect ( 200 ) . expect ({ data : catsService.findAll (), }); }); afterAll ( async () => { await app . close (); }); }); info Hint If you're using Fastify as your HTTP adapter, it requires a slightly different configuration, and has built-in testing capabilities: let app : NestFastifyApplication ; beforeAll ( async () => { app = module Ref.createNestApplication < NestFastifyApplication > ( new FastifyAdapter (), ); await app . init (); await app . getHttpAdapter (). getInstance (). ready (); }); it ( `/GET cats` , () => { return app . inject ({ method : 'GET' , url : '/cats' , }) . then (( result ) => { expect ( result . statusCode ). toEqual ( 200 ); expect ( result . payload ). toEqual ( /* expectedPayload */ ); }); }); afterAll ( async () => { await app . close (); }); In this example, we build on some of the concepts described earlier. In addition to the compile() method we used earlier, we now use the createNestApplication() method to instantiate a full Nest runtime environment. We save a reference to the running app in our app variable so we can use it to simulate HTTP requests. We simulate HTTP tests using the request() function from Supertest. We want these HTTP requests to route to our running Nest app, so we pass the request() function a reference to the HTTP listener that underlies Nest (which, in turn, may be provided by the Express platform). Hence the construction request(app.getHttpServer()) . The call to request() hands us a wrapped HTTP Server, now connected to the Nest app, which exposes methods to simulate an actual HTTP request. For example, using request(...).get('/cats') will initiate a request to the Nest app that is identical to an actual HTTP request like get '/cats' coming in over the network. In this example, we also provide an alternate (test-double) implementation of the CatsService which simply returns a hard-coded value that we can test for. Use overrideProvider() to provide such an alternate implementation. Similarly, Nest provides methods to override guards, interceptors, filters and pipes with the overrideGuard() , overrideInterceptor() , overrideFilter() , and overridePipe() methods respectively. Each of the override methods returns an object with 3 different methods that mirror those described for custom providers : useClass : you supply a class that will be instantiated to provide the instance to override the object (provider, guard, etc.). useValue : you supply an instance that will override the object. useFactory : you supply a function that returns an instance that will override the object. Each of the override method types, in turn, returns the TestingModule instance, and can thus be chained with other methods in the fluent style . You should use compile() at the end of such a chain to cause Nest to instantiate and initialize the module. Also, sometimes you may want to provide a custom logger e.g. when the tests are run (for example, on a CI server). Use the setLogger() method and pass an object that fulfills the LoggerService interface to instruct the TestModuleBuilder how to log during tests (by default, only \"error\" logs will be logged to the console). The compiled module has several useful methods, as described in the following table: createNestApplication() Creates and returns a Nest application ( INestApplication instance) based on the given module. Note that you must manually initialize the application using the init() method. createNestMicroservice() Creates and returns a Nest microservice ( INestMicroservice instance) based on the given module. get() Retrieves a static instance of a controller or provider (including guards, filters, etc.) available in the application context. Inherited from the module reference class. resolve() Retrieves a dynamically created scoped instance (request or transient) of a controller or provider (including guards, filters, etc.) available in the application context. Inherited from the module reference class. select() Navigates through the module's dependency graph; can be used to retrieve a specific instance from the selected module (used along with strict mode ( strict: true ) in get() method). info Hint Keep your e2e test files inside the test directory. The testing files should have a .e2e-spec suffix. \u91cd\u5199\u5168\u5c40\u6ce8\u518c\u7684\u589e\u5f3a\u5b50 \u00b6 \u5982\u679c\u60a8\u6709\u4e00\u4e2a\u5168\u5c40\u6ce8\u518c\u7684\u5b88\u536b(\u6216\u7ba1\u9053\u3001\u62e6\u622a\u5668\u6216\u8fc7\u6ee4\u5668)\uff0c\u60a8\u9700\u8981\u91c7\u53d6\u66f4\u591a\u7684\u6b65\u9aa4\u6765\u8986\u76d6\u8be5\u589e\u5f3a\u7a0b\u5e8f\u3002 \u56de\u987e\u4e00\u4e0b\u6700\u521d\u7684\u6ce8\u518c\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837: providers : [ { provide : APP_GUARD , useClass : JwtAuthGuard , }, ], This is registering the guard as a \"multi\"-provider through the APP_* token. To be able to replace the JwtAuthGuard here, the registration needs to use an existing provider in this slot: providers : [ { provide : APP_GUARD , useExisting : JwtAuthGuard , // ^^^^^^^^ notice the use of 'useExisting' instead of 'useClass' }, JwtAuthGuard , ], info Hint Change the useClass to useExisting to reference a registered provider instead of having Nest instantiate it behind the token. Now the JwtAuthGuard is visible to Nest as a regular provider that can be overridden when creating the TestingModule : const module Ref = await Test . createTestingModule ({ imports : [ AppModule ], }) . overrideProvider ( JwtAuthGuard ) . useClass ( MockAuthGuard ) . compile (); Now all your tests will use the MockAuthGuard on every request. \u8bf7\u6c42\u8303\u56f4\u5185\u6d4b\u8bd5\u5b9e\u4f8b \u00b6 request -scoped \u63d0\u4f9b\u7a0b\u5e8f\u662f\u4e3a\u6bcf\u4e2a\u4f20\u5165\u7684 \u8bf7\u6c42 \u521b\u5efa\u7684\u3002 \u5728\u8bf7\u6c42\u5b8c\u6210\u5904\u7406\u540e\uff0c\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002 \u8fd9\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u8bbf\u95ee\u4e13\u95e8\u4e3a\u6d4b\u8bd5\u8bf7\u6c42\u751f\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u5b50\u6811\u3002 \u6211\u4eec\u77e5\u9053(\u57fa\u4e8e\u4e0a\u9762\u7684\u90e8\u5206) resolve() \u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u68c0\u7d22\u52a8\u6001\u5b9e\u4f8b\u5316\u7684\u7c7b\u3002 \u6b64\u5916\uff0c\u6b63\u5982 \u5728\u8fd9\u91cc \uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u60df\u4e00\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\u6765\u63a7\u5236 DI \u5bb9\u5668\u5b50\u6811\u7684\u751f\u547d\u5468\u671f\u3002 \u6211\u4eec\u5982\u4f55\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u5229\u7528\u8fd9\u4e00\u70b9? \u7b56\u7565\u662f\u9884\u5148\u751f\u6210\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\uff0c\u5e76\u5f3a\u5236 Nest \u4f7f\u7528\u8fd9\u4e2a\u7279\u5b9a\u7684 ID \u4e3a\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u521b\u5efa\u5b50\u6811\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u68c0\u7d22\u4e3a\u6d4b\u8bd5\u8bf7\u6c42\u521b\u5efa\u7684\u5b9e\u4f8b\u3002 \u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5728 contextfactory \u4e0a\u4f7f\u7528 jest.spyOn() : const contextId = ContextIdFactory . create (); jest . spyOn ( ContextIdFactory , 'getByRequest' ) . mockImplementation (() => contextId ); Now we can use the contextId to access a single generated DI container sub-tree for any subsequent request. catsService = await module Ref.resolve ( CatsService , contextId );","title":"\u6d4b\u8bd5"},{"location":"fundamentals/unit-testing/#_1","text":"\u81ea\u52a8\u5316\u6d4b\u8bd5\u88ab\u8ba4\u4e3a\u662f\u4efb\u4f55\u4e25\u8083\u7684\u8f6f\u4ef6\u5f00\u53d1\u5de5\u4f5c\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002 \u81ea\u52a8\u5316\u4f7f\u5f97\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8f7b\u677e\u5feb\u901f\u5730\u91cd\u590d\u5355\u4e2a\u6d4b\u8bd5\u6216\u6d4b\u8bd5\u5957\u4ef6\u3002 \u8fd9\u6709\u52a9\u4e8e\u786e\u4fdd\u53d1\u5e03\u6ee1\u8db3\u8d28\u91cf\u548c\u6027\u80fd\u76ee\u6807\u3002 \u81ea\u52a8\u5316\u6709\u52a9\u4e8e\u589e\u52a0\u8986\u76d6\u7387\uff0c\u5e76\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u66f4\u5feb\u7684\u53cd\u9988\u5faa\u73af\u3002 \u81ea\u52a8\u5316\u65e2\u63d0\u9ad8\u4e86\u72ec\u7acb\u5f00\u53d1\u4eba\u5458\u7684\u751f\u4ea7\u529b\uff0c\u53c8\u786e\u4fdd\u4e86\u6d4b\u8bd5\u5728\u5173\u952e\u7684\u5f00\u53d1\u751f\u547d\u5468\u671f\u8282\u70b9\u4e0a\u8fd0\u884c\uff0c\u6bd4\u5982\u6e90\u4ee3\u7801\u63a7\u5236\u7b7e\u5165\u3001\u7279\u6027\u96c6\u6210\u548c\u7248\u672c\u53d1\u5e03\u3002 \u8fd9\u6837\u7684\u6d4b\u8bd5\u901a\u5e38\u8de8\u8d8a\u5404\u79cd\u7c7b\u578b\uff0c\u5305\u62ec\u5355\u5143\u6d4b\u8bd5\u3001\u7aef\u5230\u7aef(e2e)\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\u7b49\u7b49\u3002 \u867d\u7136\u8fd9\u4e9b\u597d\u5904\u662f\u6bcb\u5eb8\u7f6e\u7591\u7684\uff0c\u4f46\u8bbe\u7f6e\u8d77\u6765\u53ef\u80fd\u5f88\u7e41\u7410\u3002 Nest \u81f4\u529b\u4e8e\u63a8\u5e7f\u5f00\u53d1\u6700\u4f73\u5b9e\u8df5\uff0c\u5305\u62ec\u6709\u6548\u7684\u6d4b\u8bd5\uff0c\u56e0\u6b64\u5b83\u5305\u62ec\u4ee5\u4e0b\u529f\u80fd\uff0c\u4ee5\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u548c\u56e2\u961f\u6784\u5efa\u548c\u81ea\u52a8\u5316\u6d4b\u8bd5\u3002 Nest: \u81ea\u52a8\u642d\u5efa\u7ec4\u4ef6\u7684\u9ed8\u8ba4\u5355\u5143\u6d4b\u8bd5\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u7aef\u5230\u7aef\u6d4b\u8bd5 \u63d0\u4f9b\u9ed8\u8ba4\u5de5\u5177(\u4f8b\u5982\u6784\u5efa\u9694\u79bb\u6a21\u5757/\u5e94\u7528\u7a0b\u5e8f\u52a0\u8f7d\u5668\u7684\u6d4b\u8bd5\u8fd0\u884c\u5668) \u63d0\u4f9b\u4e86\u4e0e Jest \u548c Supertest \u7684\u5f00\u7bb1\u5373\u7528\u7684\u96c6\u6210\uff0c\u540c\u65f6\u4fdd\u6301\u4e0e\u6d4b\u8bd5\u5de5\u5177\u65e0\u5173 \u4f7f\u5f97 Nest \u4f9d\u8d56\u9879\u6ce8\u5165\u7cfb\u7edf\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u53ef\u7528\uff0c\u53ef\u4ee5\u8f7b\u677e\u6a21\u62df\u7ec4\u4ef6 \u5982\u524d\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u60a8\u559c\u6b22\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u56e0\u4e3a Nest \u4e0d\u5f3a\u5236\u4f7f\u7528\u4efb\u4f55\u7279\u5b9a\u7684\u5de5\u5177\u3002 \u53ea\u9700\u66ff\u6362\u6240\u9700\u7684\u5143\u7d20(\u6bd4\u5982\u6d4b\u8bd5\u8fd0\u884c\u5668)\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u4eab\u53d7\u5230 Nest \u73b0\u6210\u6d4b\u8bd5\u5de5\u5177\u7684\u597d\u5904\u3002","title":"\u6d4b\u8bd5"},{"location":"fundamentals/unit-testing/#_2","text":"\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i --save-dev @nestjs/testing","title":"\u5b89\u88c5"},{"location":"fundamentals/unit-testing/#_3","text":"\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6d4b\u8bd5\u4e86\u4e24\u4e2a\u7c7b: CatsController \u548c CatsService \u3002 \u5982\u524d\u6240\u8ff0\uff0c Jest \u662f\u4f5c\u4e3a\u9ed8\u8ba4\u6d4b\u8bd5\u6846\u67b6\u63d0\u4f9b\u7684\u3002 \u5b83\u5145\u5f53\u6d4b\u8bd5\u8fd0\u884c\u5668\uff0c\u8fd8\u63d0\u4f9b\u65ad\u8a00\u51fd\u6570\u548c test-double \u5b9e\u7528\u7a0b\u5e8f\uff0c\u4ee5\u5e2e\u52a9\u6a21\u62df\u3001\u76d1\u89c6\u7b49\u3002 \u5728\u63a5\u4e0b\u6765\u7684\u57fa\u672c\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u624b\u52a8\u5b9e\u4f8b\u5316\u8fd9\u4e9b\u7c7b\uff0c\u5e76\u786e\u4fdd\u63a7\u5236\u5668\u548c\u670d\u52a1\u5c65\u884c\u5b83\u4eec\u7684 API \u5951\u7ea6\u3002 @ @filename ( cats . controller . spec ) import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; describe ( 'CatsController' , () => { let catsController : CatsController ; let catsService : CatsService ; beforeEach (() => { catsService = new CatsService (); catsController = new CatsController ( catsService ); }); describe ( 'findAll' , () => { it ( 'should return an array of cats' , async () => { const result = [ 'test' ]; jest . spyOn ( catsService , 'findAll' ). mockImplementation (() => result ); expect ( await catsController . findAll ()). toBe ( result ); }); }); }); @ @switch import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; describe ( 'CatsController' , () => { let catsController ; let catsService ; beforeEach (() => { catsService = new CatsService (); catsController = new CatsController ( catsService ); }); describe ( 'findAll' , () => { it ( 'should return an array of cats' , async () => { const result = [ 'test' ]; jest . spyOn ( catsService , 'findAll' ). mockImplementation (() => result ); expect ( await catsController . findAll ()). toBe ( result ); }); }); }); info Hint Keep your test files located near the classes they test. Testing files should have a .spec or .test suffix. \u56e0\u4e3a\u4e0a\u9762\u7684\u793a\u4f8b\u5f88\u7b80\u5355\uff0c\u6240\u4ee5\u6211\u4eec\u5e76\u6ca1\u6709\u771f\u6b63\u6d4b\u8bd5\u4efb\u4f55\u7279\u5b9a\u4e8e nest \u7684\u4e1c\u897f\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u751a\u81f3\u6ca1\u6709\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165(\u6ce8\u610f\uff0c\u6211\u4eec\u4f20\u9012\u4e86\u4e00\u4e2a CatsService \u7684\u5b9e\u4f8b\u7ed9 catsController )\u3002 \u8fd9\u79cd\u5f62\u5f0f\u7684\u6d4b\u8bd5\u2014\u2014\u6211\u4eec\u624b\u52a8\u5b9e\u4f8b\u5316\u88ab\u6d4b\u8bd5\u7684\u7c7b\u2014\u2014\u901a\u5e38\u88ab\u79f0\u4e3a \u9694\u79bb\u6d4b\u8bd5 \uff0c\u56e0\u4e3a\u5b83\u72ec\u7acb\u4e8e\u6846\u67b6\u3002 \u8ba9\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u5b83\u4eec\u53ef\u4ee5\u5e2e\u52a9\u60a8\u6d4b\u8bd5\u66f4\u5e7f\u6cdb\u4f7f\u7528 Nest \u7279\u6027\u7684\u5e94\u7528\u7a0b\u5e8f\u3002","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"fundamentals/unit-testing/#_4","text":"@nestjs/testing \u5305\u63d0\u4f9b\u4e86\u4e00\u7ec4\u5b9e\u7528\u7a0b\u5e8f\uff0c\u652f\u6301\u66f4\u5065\u58ee\u7684\u6d4b\u8bd5\u8fc7\u7a0b\u3002 \u8ba9\u6211\u4eec\u7528\u5185\u7f6e\u7684 Test \u7c7b\u91cd\u5199\u524d\u9762\u7684\u4f8b\u5b50: @ @filename ( cats . controller . spec ) import { Test } from '@nestjs/testing' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; describe ( 'CatsController' , () => { let catsController : CatsController ; let catsService : CatsService ; beforeEach ( async () => { const module Ref = await Test . createTestingModule ({ controllers : [ CatsController ], providers : [ CatsService ], }). compile (); catsService = module Ref.get < CatsService > ( CatsService ); catsController = module Ref.get < CatsController > ( CatsController ); }); describe ( 'findAll' , () => { it ( 'should return an array of cats' , async () => { const result = [ 'test' ]; jest . spyOn ( catsService , 'findAll' ). mockImplementation (() => result ); expect ( await catsController . findAll ()). toBe ( result ); }); }); }); @ @switch import { Test } from '@nestjs/testing' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; describe ( 'CatsController' , () => { let catsController ; let catsService ; beforeEach ( async () => { const module Ref = await Test . createTestingModule ({ controllers : [ CatsController ], providers : [ CatsService ], }). compile (); catsService = module Ref.get ( CatsService ); catsController = module Ref.get ( CatsController ); }); describe ( 'findAll' , () => { it ( 'should return an array of cats' , async () => { const result = [ 'test' ]; jest . spyOn ( catsService , 'findAll' ). mockImplementation (() => result ); expect ( await catsController . findAll ()). toBe ( result ); }); }); }); \u201cTest\u201d\u7c7b\u5728\u63d0\u4f9b\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u4e0a\u4e0b\u6587\u65f6\u975e\u5e38\u6709\u7528\uff0c\u8be5\u4e0a\u4e0b\u6587\u5b9e\u9645\u4e0a\u6a21\u62df\u4e86\u5b8c\u6574\u7684 Nest \u8fd0\u884c\u65f6\uff0c\u4f46\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u94a9\u5b50\uff0c\u4f7f\u7ba1\u7406\u7c7b\u5b9e\u4f8b\u53d8\u5f97\u5bb9\u6613\uff0c\u5305\u62ec\u6a21\u62df\u548c\u8986\u76d6\u3002 Test \u7c7b\u6709\u4e00\u4e2a createTestingModule() \u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6a21\u5757\u5143\u6570\u636e\u5bf9\u8c61\u4f5c\u4e3a\u5b83\u7684\u53c2\u6570(\u4e0e\u4f60\u4f20\u9012\u7ed9 @Module() \u88c5\u9970\u5668\u7684\u5bf9\u8c61\u76f8\u540c)\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a TestingModule \u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u53c8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u3002 \u5bf9\u4e8e\u5355\u5143\u6d4b\u8bd5\uff0c\u91cd\u8981\u7684\u662f compile() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u5f15\u5bfc\u4e00\u4e2a\u6a21\u5757\u53ca\u5176\u4f9d\u8d56\u9879(\u7c7b\u4f3c\u4e8e\u4f20\u7edf\u7684 main \u5f15\u5bfc\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5f0f\u3002\u4f7f\u7528 NestFactory.create() )\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5df2\u51c6\u5907\u597d\u6d4b\u8bd5\u7684\u6a21\u5757\u3002 info Hint The compile() method is asynchronous and therefore has to be awaited. Once the module is compiled you can retrieve any static instance it declares (controllers and providers) using the get() method. TestingModule inherits from the module reference class, and therefore its ability to dynamically resolve scoped providers (transient or request-scoped). Do this with the resolve() method (the get() method can only retrieve static instances). const module Ref = await Test . createTestingModule ({ controllers : [ CatsController ], providers : [ CatsService ], }). compile (); catsService = await module Ref.resolve ( CatsService ); warning Warning The resolve() method returns a unique instance of the provider, from its own DI container sub-tree . Each sub-tree has a unique context identifier. Thus, if you call this method more than once and compare instance references, you will see that they are not equal. info Hint Learn more about the module reference features here . Instead of using the production version of any provider, you can override it with a custom provider for testing purposes. For example, you can mock a database service instead of connecting to a live database. We'll cover overrides in the next section, but they're available for unit tests as well.","title":"\u6d4b\u8bd5\u5de5\u5177"},{"location":"fundamentals/unit-testing/#auto-mocking","text":"Nest \u8fd8\u5141\u8bb8\u60a8\u5b9a\u4e49\u4e00\u4e2a\u6a21\u62df\u5de5\u5382\uff0c\u4ee5\u5e94\u7528\u4e8e\u6240\u6709\u4e22\u5931\u7684\u4f9d\u8d56\u9879\u3002 \u8fd9\u5bf9\u4e8e\u5728\u4e00\u4e2a\u7c7b\u4e2d\u6709\u5927\u91cf\u4f9d\u8d56\u9879\uff0c\u5e76\u4e14\u6a21\u62df\u6240\u6709\u4f9d\u8d56\u9879\u5c06\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\u548c\u5927\u91cf\u8bbe\u7f6e\u7684\u60c5\u51b5\u5f88\u6709\u7528\u3002 \u8981\u5229\u7528\u8fd9\u4e2a\u7279\u6027\uff0c createTestingModule() \u9700\u8981\u4e0e useMocker() \u65b9\u6cd5\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u4f9d\u8d56\u9879\u6a21\u62df\u4f20\u9012\u4e00\u4e2a\u5de5\u5382\u3002 \u8fd9\u4e2a\u5de5\u5382\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u4ee4\u724c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b9e\u4f8b\u4ee4\u724c\uff0c\u4efb\u4f55\u5bf9 Nest \u63d0\u4f9b\u7a0b\u5e8f\u6709\u6548\u7684\u4ee4\u724c\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6a21\u62df\u5b9e\u73b0\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 ' jest-mock ' \u521b\u5efa\u901a\u7528 mock \u548c\u4f7f\u7528' jest.fn() '\u4e3a' CatsService '\u521b\u5efa\u7279\u5b9a mock \u7684\u793a\u4f8b\u3002 const module Mocker = new ModuleMocker ( global ); describe ( 'CatsController' , () => { let controller : CatsController ; beforeEach ( async () => { const module Ref = await Test . createTestingModule ({ controllers : [ CatsController ], }) . useMocker (( token ) => { if ( token === CatsService ) { return { findAll : jest.fn (). mockResolveValue ( results ) }; } if ( typeof token === 'function' ) { const mockMetadata = module Mocker.getMetadata ( token , ) as MockFunctionMetadata < any , any > ; const Mock = module Mocker.generateFromMetadata ( mockMetadata ); return new Mock (); } }) . compile (); controller = module Ref.get ( CatsController ); }); }); info Hint A general mock factory, like createMock from @golevelup/ts-jest can also be passed directly. You can also retrieve these mocks out of the testing container as you normally would custom providers, moduleRef.get(CatsService) .","title":"Auto mocking"},{"location":"fundamentals/unit-testing/#_5","text":"\u4e0e\u5355\u5143\u6d4b\u8bd5(\u4fa7\u91cd\u4e8e\u5355\u4e2a\u6a21\u5757\u548c\u7c7b)\u4e0d\u540c\uff0c\u7aef\u5230\u7aef(e2e)\u6d4b\u8bd5\u5728\u66f4\u805a\u5408\u7684\u5c42\u6b21\u4e0a\u8986\u76d6\u4e86\u7c7b\u548c\u6a21\u5757\u7684\u4ea4\u4e92\u2014\u2014\u66f4\u63a5\u8fd1\u4e8e\u7ec8\u7aef\u7528\u6237\u4e0e\u751f\u4ea7\u7cfb\u7edf\u7684\u4ea4\u4e92\u3002 \u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u7684\u589e\u957f\uff0c\u624b\u52a8\u6d4b\u8bd5\u6bcf\u4e2a API \u7aef\u70b9\u7684\u7aef\u5230\u7aef\u884c\u4e3a\u53d8\u5f97\u8d8a\u6765\u8d8a\u56f0\u96be\u3002 \u81ea\u52a8\u5316\u7684\u7aef\u5230\u7aef\u6d4b\u8bd5\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u7cfb\u7edf\u7684\u6574\u4f53\u884c\u4e3a\u662f\u6b63\u786e\u7684\uff0c\u5e76\u6ee1\u8db3\u9879\u76ee\u9700\u6c42\u3002 \u4e3a\u4e86\u6267\u884c\u7aef\u5230\u7aef\u6d4b\u8bd5\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e0e\u521a\u521a\u5728 \u5355\u5143\u6d4b\u8bd5 \u4e2d\u4ecb\u7ecd\u7684\u914d\u7f6e\u7c7b\u4f3c\u7684\u914d\u7f6e\u3002 \u6b64\u5916\uff0cNest \u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528 Supertest \u5e93\u6765\u6a21\u62df HTTP \u8bf7\u6c42\u3002 @ @filename ( cats . e2e - spec ) import * as request from 'supertest' ; import { Test } from '@nestjs/testing' ; import { CatsModule } from '../../src/cats/cats.module' ; import { CatsService } from '../../src/cats/cats.service' ; import { INestApplication } from '@nestjs/common' ; describe ( 'Cats' , () => { let app : INestApplication ; let catsService = { findAll : () => [ 'test' ] }; beforeAll ( async () => { const module Ref = await Test . createTestingModule ({ imports : [ CatsModule ], }) . overrideProvider ( CatsService ) . useValue ( catsService ) . compile (); app = module Ref.createNestApplication (); await app . init (); }); it ( `/GET cats` , () => { return request ( app . getHttpServer ()) . get ( '/cats' ) . expect ( 200 ) . expect ({ data : catsService.findAll (), }); }); afterAll ( async () => { await app . close (); }); }); @ @switch import * as request from 'supertest' ; import { Test } from '@nestjs/testing' ; import { CatsModule } from '../../src/cats/cats.module' ; import { CatsService } from '../../src/cats/cats.service' ; import { INestApplication } from '@nestjs/common' ; describe ( 'Cats' , () => { let app : INestApplication ; let catsService = { findAll : () => [ 'test' ] }; beforeAll ( async () => { const module Ref = await Test . createTestingModule ({ imports : [ CatsModule ], }) . overrideProvider ( CatsService ) . useValue ( catsService ) . compile (); app = module Ref.createNestApplication (); await app . init (); }); it ( `/GET cats` , () => { return request ( app . getHttpServer ()) . get ( '/cats' ) . expect ( 200 ) . expect ({ data : catsService.findAll (), }); }); afterAll ( async () => { await app . close (); }); }); info Hint If you're using Fastify as your HTTP adapter, it requires a slightly different configuration, and has built-in testing capabilities: let app : NestFastifyApplication ; beforeAll ( async () => { app = module Ref.createNestApplication < NestFastifyApplication > ( new FastifyAdapter (), ); await app . init (); await app . getHttpAdapter (). getInstance (). ready (); }); it ( `/GET cats` , () => { return app . inject ({ method : 'GET' , url : '/cats' , }) . then (( result ) => { expect ( result . statusCode ). toEqual ( 200 ); expect ( result . payload ). toEqual ( /* expectedPayload */ ); }); }); afterAll ( async () => { await app . close (); }); In this example, we build on some of the concepts described earlier. In addition to the compile() method we used earlier, we now use the createNestApplication() method to instantiate a full Nest runtime environment. We save a reference to the running app in our app variable so we can use it to simulate HTTP requests. We simulate HTTP tests using the request() function from Supertest. We want these HTTP requests to route to our running Nest app, so we pass the request() function a reference to the HTTP listener that underlies Nest (which, in turn, may be provided by the Express platform). Hence the construction request(app.getHttpServer()) . The call to request() hands us a wrapped HTTP Server, now connected to the Nest app, which exposes methods to simulate an actual HTTP request. For example, using request(...).get('/cats') will initiate a request to the Nest app that is identical to an actual HTTP request like get '/cats' coming in over the network. In this example, we also provide an alternate (test-double) implementation of the CatsService which simply returns a hard-coded value that we can test for. Use overrideProvider() to provide such an alternate implementation. Similarly, Nest provides methods to override guards, interceptors, filters and pipes with the overrideGuard() , overrideInterceptor() , overrideFilter() , and overridePipe() methods respectively. Each of the override methods returns an object with 3 different methods that mirror those described for custom providers : useClass : you supply a class that will be instantiated to provide the instance to override the object (provider, guard, etc.). useValue : you supply an instance that will override the object. useFactory : you supply a function that returns an instance that will override the object. Each of the override method types, in turn, returns the TestingModule instance, and can thus be chained with other methods in the fluent style . You should use compile() at the end of such a chain to cause Nest to instantiate and initialize the module. Also, sometimes you may want to provide a custom logger e.g. when the tests are run (for example, on a CI server). Use the setLogger() method and pass an object that fulfills the LoggerService interface to instruct the TestModuleBuilder how to log during tests (by default, only \"error\" logs will be logged to the console). The compiled module has several useful methods, as described in the following table: createNestApplication() Creates and returns a Nest application ( INestApplication instance) based on the given module. Note that you must manually initialize the application using the init() method. createNestMicroservice() Creates and returns a Nest microservice ( INestMicroservice instance) based on the given module. get() Retrieves a static instance of a controller or provider (including guards, filters, etc.) available in the application context. Inherited from the module reference class. resolve() Retrieves a dynamically created scoped instance (request or transient) of a controller or provider (including guards, filters, etc.) available in the application context. Inherited from the module reference class. select() Navigates through the module's dependency graph; can be used to retrieve a specific instance from the selected module (used along with strict mode ( strict: true ) in get() method). info Hint Keep your e2e test files inside the test directory. The testing files should have a .e2e-spec suffix.","title":"\u7aef\u5230\u7aef\u6d4b\u8bd5"},{"location":"fundamentals/unit-testing/#_6","text":"\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u5168\u5c40\u6ce8\u518c\u7684\u5b88\u536b(\u6216\u7ba1\u9053\u3001\u62e6\u622a\u5668\u6216\u8fc7\u6ee4\u5668)\uff0c\u60a8\u9700\u8981\u91c7\u53d6\u66f4\u591a\u7684\u6b65\u9aa4\u6765\u8986\u76d6\u8be5\u589e\u5f3a\u7a0b\u5e8f\u3002 \u56de\u987e\u4e00\u4e0b\u6700\u521d\u7684\u6ce8\u518c\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837: providers : [ { provide : APP_GUARD , useClass : JwtAuthGuard , }, ], This is registering the guard as a \"multi\"-provider through the APP_* token. To be able to replace the JwtAuthGuard here, the registration needs to use an existing provider in this slot: providers : [ { provide : APP_GUARD , useExisting : JwtAuthGuard , // ^^^^^^^^ notice the use of 'useExisting' instead of 'useClass' }, JwtAuthGuard , ], info Hint Change the useClass to useExisting to reference a registered provider instead of having Nest instantiate it behind the token. Now the JwtAuthGuard is visible to Nest as a regular provider that can be overridden when creating the TestingModule : const module Ref = await Test . createTestingModule ({ imports : [ AppModule ], }) . overrideProvider ( JwtAuthGuard ) . useClass ( MockAuthGuard ) . compile (); Now all your tests will use the MockAuthGuard on every request.","title":"\u91cd\u5199\u5168\u5c40\u6ce8\u518c\u7684\u589e\u5f3a\u5b50"},{"location":"fundamentals/unit-testing/#_7","text":"request -scoped \u63d0\u4f9b\u7a0b\u5e8f\u662f\u4e3a\u6bcf\u4e2a\u4f20\u5165\u7684 \u8bf7\u6c42 \u521b\u5efa\u7684\u3002 \u5728\u8bf7\u6c42\u5b8c\u6210\u5904\u7406\u540e\uff0c\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002 \u8fd9\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u8bbf\u95ee\u4e13\u95e8\u4e3a\u6d4b\u8bd5\u8bf7\u6c42\u751f\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u5b50\u6811\u3002 \u6211\u4eec\u77e5\u9053(\u57fa\u4e8e\u4e0a\u9762\u7684\u90e8\u5206) resolve() \u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u68c0\u7d22\u52a8\u6001\u5b9e\u4f8b\u5316\u7684\u7c7b\u3002 \u6b64\u5916\uff0c\u6b63\u5982 \u5728\u8fd9\u91cc \uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u60df\u4e00\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\u6765\u63a7\u5236 DI \u5bb9\u5668\u5b50\u6811\u7684\u751f\u547d\u5468\u671f\u3002 \u6211\u4eec\u5982\u4f55\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u5229\u7528\u8fd9\u4e00\u70b9? \u7b56\u7565\u662f\u9884\u5148\u751f\u6210\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\uff0c\u5e76\u5f3a\u5236 Nest \u4f7f\u7528\u8fd9\u4e2a\u7279\u5b9a\u7684 ID \u4e3a\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u521b\u5efa\u5b50\u6811\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u68c0\u7d22\u4e3a\u6d4b\u8bd5\u8bf7\u6c42\u521b\u5efa\u7684\u5b9e\u4f8b\u3002 \u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5728 contextfactory \u4e0a\u4f7f\u7528 jest.spyOn() : const contextId = ContextIdFactory . create (); jest . spyOn ( ContextIdFactory , 'getByRequest' ) . mockImplementation (() => contextId ); Now we can use the contextId to access a single generated DI container sub-tree for any subsequent request. catsService = await module Ref.resolve ( CatsService , contextId );","title":"\u8bf7\u6c42\u8303\u56f4\u5185\u6d4b\u8bd5\u5b9e\u4f8b"},{"location":"graphql/cli-plugin/","text":"CLI Plugin \u00b6 warning Warning This chapter applies only to the code first approach. TypeScript's metadata reflection system has several limitations which make it impossible to, for instance, determine what properties a class consists of or recognize whether a given property is optional or required. However, some of these constraints can be addressed at compilation time. Nest provides a plugin that enhances the TypeScript compilation process to reduce the amount of boilerplate code required. info Hint This plugin is opt-in . If you prefer, you can declare all decorators manually, or only specific decorators where you need them. Overview \u00b6 The GraphQL plugin will automatically: annotate all input object, object type and args classes properties with @Field unless @HideField is used set the nullable property depending on the question mark (e.g. name?: string will set nullable: true ) set the type property depending on the type (supports arrays as well) generate descriptions for properties based on comments (if introspectComments set to true ) Please, note that your filenames must have one of the following suffixes in order to be analyzed by the plugin: ['.input.ts', '.args.ts', '.entity.ts', '.model.ts'] (e.g., author.entity.ts ). If you are using a different suffix, you can adjust the plugin's behavior by specifying the typeFileNameSuffix option (see below). With what we've learned so far, you have to duplicate a lot of code to let the package know how your type should be declared in GraphQL. For example, you could define a simple Author class as follows: @ @filename ( authors / models / author . model ) @ObjectType () export class Author { @Field ( type => ID ) id : number ; @Field ({ nullable : true }) firstName? : string ; @Field ({ nullable : true }) lastName? : string ; @Field ( type => [ Post ]) posts : Post []; } While not a significant issue with medium-sized projects, it becomes verbose & hard to maintain once you have a large set of classes. By enabling the GraphQL plugin, the above class definition can be declared simply: @ @filename ( authors / models / author . model ) @ObjectType () export class Author { @Field ( type => ID ) id : number ; firstName? : string ; lastName? : string ; posts : Post []; } The plugin adds appropriate decorators on-the-fly based on the Abstract Syntax Tree . Thus, you won't have to struggle with @Field decorators scattered throughout the code. info Hint The plugin will automatically generate any missing GraphQL properties, but if you need to override them, simply set them explicitly via @Field() . Comments introspection \u00b6 With the comments introspection feature enabled, CLI plugin will generate descriptions for fields based on comments. For example, given an example roles property: /** * A list of user's roles */ @Field (() => [ String ], { description : `A list of user's roles` }) roles : string []; You must duplicate description values. With introspectComments enabled, the CLI plugin can extract these comments and automatically provide descriptions for properties. Now, the above field can be declared simply as follows: /** * A list of user's roles */ roles : string []; Using the CLI plugin \u00b6 To enable the plugin, open nest-cli.json (if you use Nest CLI ) and add the following plugins configuration: { \"collection\" : \"@nestjs/schematics\" , \"sourceRoot\" : \"src\" , \"compilerOptions\" : { \"plugins\" : [ \"@nestjs/graphql\" ] } } You can use the options property to customize the behavior of the plugin. \"plugins\" : [ { \"name\" : \"@nestjs/graphql\" , \"options\" : { \"typeFileNameSuffix\" : [ \".input.ts\" , \".args.ts\" ], \"introspectComments\" : true } } ] The options property has to fulfill the following interface: export interface PluginOptions { typeFileNameSuffix? : string []; introspectComments? : boolean ; } Option Default Description typeFileNameSuffix ['.input.ts', '.args.ts', '.entity.ts', '.model.ts'] GraphQL types files suffix introspectComments false If set to true, plugin will generate descriptions for properties based on comments If you don't use the CLI but instead have a custom webpack configuration, you can use this plugin in combination with ts-loader : getCustomTransformers : ( program : any ) => ({ before : [ require ( '@nestjs/graphql/plugin' ). before ({}, program )] }), Integration with ts-jest (e2e tests) \u00b6 When running e2e tests with this plugin enabled, you may run into issues with compiling schema. For example, one of the most common errors is: Objec t t ype < na me> mus t de f i ne o ne or more f ields. This happens because jest configuration does not import @nestjs/graphql/plugin plugin anywhere. To fix this, create the following file in your e2e tests directory: const transformer = require ( '@nestjs/graphql/plugin' ); module . exports . name = 'nestjs-graphql-transformer' ; // you should change the version number anytime you change the configuration below - otherwise, jest will not detect changes module . exports . version = 1 ; module . exports . factory = ( cs ) => { return transformer . before ( { // @nestjs/graphql/plugin options (can be empty) }, cs . program , // \"cs.tsCompiler.program\" for older versions of Jest (<= v27) ); }; With this in place, import AST transformer within your jest configuration file. By default (in the starter application), e2e tests configuration file is located under the test folder and is named jest-e2e.json . { ... // other configuration \"globals\" : { \"ts-jest\" : { \"astTransformers\" : { \"before\" : [ \"<path to the file created above>\" ], } } } }","title":"CLI \u63d2\u4ef6"},{"location":"graphql/cli-plugin/#cli-plugin","text":"warning Warning This chapter applies only to the code first approach. TypeScript's metadata reflection system has several limitations which make it impossible to, for instance, determine what properties a class consists of or recognize whether a given property is optional or required. However, some of these constraints can be addressed at compilation time. Nest provides a plugin that enhances the TypeScript compilation process to reduce the amount of boilerplate code required. info Hint This plugin is opt-in . If you prefer, you can declare all decorators manually, or only specific decorators where you need them.","title":"CLI Plugin"},{"location":"graphql/cli-plugin/#overview","text":"The GraphQL plugin will automatically: annotate all input object, object type and args classes properties with @Field unless @HideField is used set the nullable property depending on the question mark (e.g. name?: string will set nullable: true ) set the type property depending on the type (supports arrays as well) generate descriptions for properties based on comments (if introspectComments set to true ) Please, note that your filenames must have one of the following suffixes in order to be analyzed by the plugin: ['.input.ts', '.args.ts', '.entity.ts', '.model.ts'] (e.g., author.entity.ts ). If you are using a different suffix, you can adjust the plugin's behavior by specifying the typeFileNameSuffix option (see below). With what we've learned so far, you have to duplicate a lot of code to let the package know how your type should be declared in GraphQL. For example, you could define a simple Author class as follows: @ @filename ( authors / models / author . model ) @ObjectType () export class Author { @Field ( type => ID ) id : number ; @Field ({ nullable : true }) firstName? : string ; @Field ({ nullable : true }) lastName? : string ; @Field ( type => [ Post ]) posts : Post []; } While not a significant issue with medium-sized projects, it becomes verbose & hard to maintain once you have a large set of classes. By enabling the GraphQL plugin, the above class definition can be declared simply: @ @filename ( authors / models / author . model ) @ObjectType () export class Author { @Field ( type => ID ) id : number ; firstName? : string ; lastName? : string ; posts : Post []; } The plugin adds appropriate decorators on-the-fly based on the Abstract Syntax Tree . Thus, you won't have to struggle with @Field decorators scattered throughout the code. info Hint The plugin will automatically generate any missing GraphQL properties, but if you need to override them, simply set them explicitly via @Field() .","title":"Overview"},{"location":"graphql/cli-plugin/#comments-introspection","text":"With the comments introspection feature enabled, CLI plugin will generate descriptions for fields based on comments. For example, given an example roles property: /** * A list of user's roles */ @Field (() => [ String ], { description : `A list of user's roles` }) roles : string []; You must duplicate description values. With introspectComments enabled, the CLI plugin can extract these comments and automatically provide descriptions for properties. Now, the above field can be declared simply as follows: /** * A list of user's roles */ roles : string [];","title":"Comments introspection"},{"location":"graphql/cli-plugin/#using-the-cli-plugin","text":"To enable the plugin, open nest-cli.json (if you use Nest CLI ) and add the following plugins configuration: { \"collection\" : \"@nestjs/schematics\" , \"sourceRoot\" : \"src\" , \"compilerOptions\" : { \"plugins\" : [ \"@nestjs/graphql\" ] } } You can use the options property to customize the behavior of the plugin. \"plugins\" : [ { \"name\" : \"@nestjs/graphql\" , \"options\" : { \"typeFileNameSuffix\" : [ \".input.ts\" , \".args.ts\" ], \"introspectComments\" : true } } ] The options property has to fulfill the following interface: export interface PluginOptions { typeFileNameSuffix? : string []; introspectComments? : boolean ; } Option Default Description typeFileNameSuffix ['.input.ts', '.args.ts', '.entity.ts', '.model.ts'] GraphQL types files suffix introspectComments false If set to true, plugin will generate descriptions for properties based on comments If you don't use the CLI but instead have a custom webpack configuration, you can use this plugin in combination with ts-loader : getCustomTransformers : ( program : any ) => ({ before : [ require ( '@nestjs/graphql/plugin' ). before ({}, program )] }),","title":"Using the CLI plugin"},{"location":"graphql/cli-plugin/#integration-with-ts-jest-e2e-tests","text":"When running e2e tests with this plugin enabled, you may run into issues with compiling schema. For example, one of the most common errors is: Objec t t ype < na me> mus t de f i ne o ne or more f ields. This happens because jest configuration does not import @nestjs/graphql/plugin plugin anywhere. To fix this, create the following file in your e2e tests directory: const transformer = require ( '@nestjs/graphql/plugin' ); module . exports . name = 'nestjs-graphql-transformer' ; // you should change the version number anytime you change the configuration below - otherwise, jest will not detect changes module . exports . version = 1 ; module . exports . factory = ( cs ) => { return transformer . before ( { // @nestjs/graphql/plugin options (can be empty) }, cs . program , // \"cs.tsCompiler.program\" for older versions of Jest (<= v27) ); }; With this in place, import AST transformer within your jest configuration file. By default (in the starter application), e2e tests configuration file is located under the test folder and is named jest-e2e.json . { ... // other configuration \"globals\" : { \"ts-jest\" : { \"astTransformers\" : { \"before\" : [ \"<path to the file created above>\" ], } } } }","title":"Integration with ts-jest (e2e tests)"},{"location":"graphql/complexity/","text":"Complexity \u00b6 warning Warning This chapter applies only to the code first approach. Query complexity allows you to define how complex certain fields are, and to restrict queries with a maximum complexity . The idea is to define how complex each field is by using a simple number. A common default is to give each field a complexity of 1 . In addition, the complexity calculation of a GraphQL query can be customized with so-called complexity estimators. A complexity estimator is a simple function that calculates the complexity for a field. You can add any number of complexity estimators to the rule, which are then executed one after another. The first estimator that returns a numeric complexity value determines the complexity for that field. The @nestjs/graphql package integrates very well with tools like graphql-query-complexity that provides a cost analysis-based solution. With this library, you can reject queries to your GraphQL server that are deemed too costly to execute. Installation \u00b6 To begin using it, we first install the required dependency. $ npm install --save graphql-query-complexity Getting started \u00b6 Once the installation process is complete, we can define the ComplexityPlugin class: import { GraphQLSchemaHost , Plugin } from '@nestjs/graphql' ; import { ApolloServerPlugin , GraphQLRequestListener , } from 'apollo-server-plugin-base' ; import { GraphQLError } from 'graphql' ; import { fieldExtensionsEstimator , getComplexity , simpleEstimator , } from 'graphql-query-complexity' ; @Plugin () export class ComplexityPlugin implements ApolloServerPlugin { constructor ( private gqlSchemaHost : GraphQLSchemaHost ) {} async requestDidStart () : Promise < GraphQLRequestListener > { const maxComplexity = 20 ; const { schema } = this . gqlSchemaHost ; return { async didResolveOperation ({ request , document }) { const complexity = getComplexity ({ schema , operationName : request.operationName , query : document , variables : request.variables , estimators : [ fieldExtensionsEstimator (), simpleEstimator ({ defaultComplexity : 1 }), ], }); if ( complexity > maxComplexity ) { throw new GraphQLError ( `Query is too complex: ${ complexity } . Maximum allowed complexity: ${ maxComplexity } ` , ); } console . log ( 'Query Complexity:' , complexity ); }, }; } } For demonstration purposes, we specified the maximum allowed complexity as 20 . In the example above, we used 2 estimators, the simpleEstimator and the fieldExtensionsEstimator . simpleEstimator : the simple estimator returns a fixed complexity for each field fieldExtensionsEstimator : the field extensions estimator extracts the complexity value for each field of your schema info Hint Remember to add this class to the providers array in any module. Field-level complexity \u00b6 With this plugin in place, we can now define the complexity for any field by specifying the complexity property in the options object passed into the @Field() decorator, as follows: @Field ({ complexity : 3 }) title : string ; Alternatively, you can define the estimator function: @Field ({ complexity : ( options : ComplexityEstimatorArgs ) => ... }) title : string ; Query/Mutation-level complexity \u00b6 In addition, @Query() and @Mutation() decorators may have a complexity property specified like so: @Query ({ complexity : ( options : ComplexityEstimatorArgs ) => options . args . count * options . childComplexity }) items ( @Args ( 'count' ) count : number ) { return this . itemsService . getItems ({ count }); }","title":"\u590d\u6742\u6027"},{"location":"graphql/complexity/#complexity","text":"warning Warning This chapter applies only to the code first approach. Query complexity allows you to define how complex certain fields are, and to restrict queries with a maximum complexity . The idea is to define how complex each field is by using a simple number. A common default is to give each field a complexity of 1 . In addition, the complexity calculation of a GraphQL query can be customized with so-called complexity estimators. A complexity estimator is a simple function that calculates the complexity for a field. You can add any number of complexity estimators to the rule, which are then executed one after another. The first estimator that returns a numeric complexity value determines the complexity for that field. The @nestjs/graphql package integrates very well with tools like graphql-query-complexity that provides a cost analysis-based solution. With this library, you can reject queries to your GraphQL server that are deemed too costly to execute.","title":"Complexity"},{"location":"graphql/complexity/#installation","text":"To begin using it, we first install the required dependency. $ npm install --save graphql-query-complexity","title":"Installation"},{"location":"graphql/complexity/#getting-started","text":"Once the installation process is complete, we can define the ComplexityPlugin class: import { GraphQLSchemaHost , Plugin } from '@nestjs/graphql' ; import { ApolloServerPlugin , GraphQLRequestListener , } from 'apollo-server-plugin-base' ; import { GraphQLError } from 'graphql' ; import { fieldExtensionsEstimator , getComplexity , simpleEstimator , } from 'graphql-query-complexity' ; @Plugin () export class ComplexityPlugin implements ApolloServerPlugin { constructor ( private gqlSchemaHost : GraphQLSchemaHost ) {} async requestDidStart () : Promise < GraphQLRequestListener > { const maxComplexity = 20 ; const { schema } = this . gqlSchemaHost ; return { async didResolveOperation ({ request , document }) { const complexity = getComplexity ({ schema , operationName : request.operationName , query : document , variables : request.variables , estimators : [ fieldExtensionsEstimator (), simpleEstimator ({ defaultComplexity : 1 }), ], }); if ( complexity > maxComplexity ) { throw new GraphQLError ( `Query is too complex: ${ complexity } . Maximum allowed complexity: ${ maxComplexity } ` , ); } console . log ( 'Query Complexity:' , complexity ); }, }; } } For demonstration purposes, we specified the maximum allowed complexity as 20 . In the example above, we used 2 estimators, the simpleEstimator and the fieldExtensionsEstimator . simpleEstimator : the simple estimator returns a fixed complexity for each field fieldExtensionsEstimator : the field extensions estimator extracts the complexity value for each field of your schema info Hint Remember to add this class to the providers array in any module.","title":"Getting started"},{"location":"graphql/complexity/#field-level-complexity","text":"With this plugin in place, we can now define the complexity for any field by specifying the complexity property in the options object passed into the @Field() decorator, as follows: @Field ({ complexity : 3 }) title : string ; Alternatively, you can define the estimator function: @Field ({ complexity : ( options : ComplexityEstimatorArgs ) => ... }) title : string ;","title":"Field-level complexity"},{"location":"graphql/complexity/#querymutation-level-complexity","text":"In addition, @Query() and @Mutation() decorators may have a complexity property specified like so: @Query ({ complexity : ( options : ComplexityEstimatorArgs ) => options . args . count * options . childComplexity }) items ( @Args ( 'count' ) count : number ) { return this . itemsService . getItems ({ count }); }","title":"Query/Mutation-level complexity"},{"location":"graphql/directives/","text":"Directives \u00b6 A directive can be attached to a field or fragment inclusion, and can affect execution of the query in any way the server desires (read more here ). The GraphQL specification provides several default directives: @include(if: Boolean) - only include this field in the result if the argument is true @skip(if: Boolean) - skip this field if the argument is true @deprecated(reason: String) - marks field as deprecated with message A directive is an identifier preceded by a @ character, optionally followed by a list of named arguments, which can appear after almost any element in the GraphQL query and schema languages. Custom directives \u00b6 To create a custom schema directive, declare a class which extends the SchemaDirectiveVisitor class exported from the @graphql-tools/utils package. import { SchemaDirectiveVisitor } from '@graphql-tools/utils' ; import { defaultFieldResolver , GraphQLField } from 'graphql' ; export class UpperCaseDirective extends SchemaDirectiveVisitor { visitFieldDefinition ( field : GraphQLField < any , any > ) { const { resolve = defaultFieldResolver } = field ; field . resolve = async function (... args ) { const result = await resolve . apply ( this , args ); if ( typeof result === 'string' ) { return result . toUpperCase (); } return result ; }; } } info Hint Note that directives cannot be decorated with the @Injectable() decorator. Thus, they are not able to inject dependencies. warning Warning SchemaDirectiveVisitor is exported from the @graphql-tools/utils package. Note that the 8.x release of graphql-tools removes this export and provides a different and incompatible approach to directives, so make sure to install @graphql-tools/utils@^7 in your project. Now, register the UpperCaseDirective in the GraphQLModule.forRoot() method: GraphQLModule . forRoot ({ // ... schemaDirectives : { upper : UpperCaseDirective , }, }); Once registered, the @upper directive can be used in our schema. However, the way you apply the directive will vary depending on the approach you use (code first or schema first). Code first \u00b6 In the code first approach, use the @Directive() decorator to apply the directive. @Directive ( '@upper' ) @Field () title : string ; info Hint The @Directive() decorator is exported from the @nestjs/graphql package. Directives can be applied on fields, field resolvers, input and object types, as well as queries, mutations, and subscriptions. Here's an example of the directive applied on the query handler level: @Directive ( '@deprecated(reason: \"This query will be removed in the next version\")' ) @Query ( returns => Author , { name : 'author' }) async getAuthor ( @Args ({ name : 'id' , type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } Directives applied through the @Directive() decorator will not be reflected in the generated schema definition file. Schema first \u00b6 In the schema first approach, apply directives directly in SDL. directive @upper on FIELD_DEFINITION type Post { id: Int! title: String! @upper votes: Int }","title":"\u6307\u4ee4"},{"location":"graphql/directives/#directives","text":"A directive can be attached to a field or fragment inclusion, and can affect execution of the query in any way the server desires (read more here ). The GraphQL specification provides several default directives: @include(if: Boolean) - only include this field in the result if the argument is true @skip(if: Boolean) - skip this field if the argument is true @deprecated(reason: String) - marks field as deprecated with message A directive is an identifier preceded by a @ character, optionally followed by a list of named arguments, which can appear after almost any element in the GraphQL query and schema languages.","title":"Directives"},{"location":"graphql/directives/#custom-directives","text":"To create a custom schema directive, declare a class which extends the SchemaDirectiveVisitor class exported from the @graphql-tools/utils package. import { SchemaDirectiveVisitor } from '@graphql-tools/utils' ; import { defaultFieldResolver , GraphQLField } from 'graphql' ; export class UpperCaseDirective extends SchemaDirectiveVisitor { visitFieldDefinition ( field : GraphQLField < any , any > ) { const { resolve = defaultFieldResolver } = field ; field . resolve = async function (... args ) { const result = await resolve . apply ( this , args ); if ( typeof result === 'string' ) { return result . toUpperCase (); } return result ; }; } } info Hint Note that directives cannot be decorated with the @Injectable() decorator. Thus, they are not able to inject dependencies. warning Warning SchemaDirectiveVisitor is exported from the @graphql-tools/utils package. Note that the 8.x release of graphql-tools removes this export and provides a different and incompatible approach to directives, so make sure to install @graphql-tools/utils@^7 in your project. Now, register the UpperCaseDirective in the GraphQLModule.forRoot() method: GraphQLModule . forRoot ({ // ... schemaDirectives : { upper : UpperCaseDirective , }, }); Once registered, the @upper directive can be used in our schema. However, the way you apply the directive will vary depending on the approach you use (code first or schema first).","title":"Custom directives"},{"location":"graphql/directives/#code-first","text":"In the code first approach, use the @Directive() decorator to apply the directive. @Directive ( '@upper' ) @Field () title : string ; info Hint The @Directive() decorator is exported from the @nestjs/graphql package. Directives can be applied on fields, field resolvers, input and object types, as well as queries, mutations, and subscriptions. Here's an example of the directive applied on the query handler level: @Directive ( '@deprecated(reason: \"This query will be removed in the next version\")' ) @Query ( returns => Author , { name : 'author' }) async getAuthor ( @Args ({ name : 'id' , type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } Directives applied through the @Directive() decorator will not be reflected in the generated schema definition file.","title":"Code first"},{"location":"graphql/directives/#schema-first","text":"In the schema first approach, apply directives directly in SDL. directive @upper on FIELD_DEFINITION type Post { id: Int! title: String! @upper votes: Int }","title":"Schema first"},{"location":"graphql/extensions/","text":"Extensions \u00b6 warning Warning This chapter applies only to the code first approach. Extensions is an advanced, low-level feature that lets you define arbitrary data in the types configuration. Attaching custom metadata to certain fields allows you to create more sophisticated, generic solutions. For example, with extensions, you can define field-level roles required to access particular fields. Such roles can be reflected at runtime to determine whether the caller has sufficient permissions to retrieve a specific field. Adding custom metadata \u00b6 To attach custom metadata for a field, use the @Extensions() decorator exported from the @nestjs/graphql package. @Field () @Extensions ({ role : Role.ADMIN }) password : string ; In the example above, we assigned the role metadata property the value of Role.ADMIN . Role is a simple TypeScript enum that groups all the user roles available in our system. Note, in addition to setting metadata on fields, you can use the @Extensions() decorator at the class level and method level (e.g., on the query handler). Using custom metadata \u00b6 Logic that leverages the custom metadata can be as complex as needed. For example, you can create a simple interceptor that stores/logs events per method invocation, or a field middleware that matches roles required to retrieve a field with the caller permissions (field-level permissions system). For illustration purposes, let's define a checkRoleMiddleware that compares a user's role (hardcoded here) with a role required to access a target field: export const checkRoleMiddleware : FieldMiddleware = async ( ctx : MiddlewareContext , next : NextFn , ) => { const { info } = ctx ; const { extensions } = info . parentType . getFields ()[ info . fieldName ]; /** * In a real-world application, the \"userRole\" variable * should represent the caller's (user) role (for example, \"ctx.user.role\"). */ const userRole = Role . USER ; if ( userRole === extensions . role ) { // or just \"return null\" to ignore throw new ForbiddenException ( `User does not have sufficient permissions to access \" ${ info . fieldName } \" field.` , ); } return next (); }; With this in place, we can register a middleware for the password field, as follows: @Field ({ middleware : [ checkRoleMiddleware ] }) @Extensions ({ role : Role.ADMIN }) password : string ;","title":"\u6269\u5c55"},{"location":"graphql/extensions/#extensions","text":"warning Warning This chapter applies only to the code first approach. Extensions is an advanced, low-level feature that lets you define arbitrary data in the types configuration. Attaching custom metadata to certain fields allows you to create more sophisticated, generic solutions. For example, with extensions, you can define field-level roles required to access particular fields. Such roles can be reflected at runtime to determine whether the caller has sufficient permissions to retrieve a specific field.","title":"Extensions"},{"location":"graphql/extensions/#adding-custom-metadata","text":"To attach custom metadata for a field, use the @Extensions() decorator exported from the @nestjs/graphql package. @Field () @Extensions ({ role : Role.ADMIN }) password : string ; In the example above, we assigned the role metadata property the value of Role.ADMIN . Role is a simple TypeScript enum that groups all the user roles available in our system. Note, in addition to setting metadata on fields, you can use the @Extensions() decorator at the class level and method level (e.g., on the query handler).","title":"Adding custom metadata"},{"location":"graphql/extensions/#using-custom-metadata","text":"Logic that leverages the custom metadata can be as complex as needed. For example, you can create a simple interceptor that stores/logs events per method invocation, or a field middleware that matches roles required to retrieve a field with the caller permissions (field-level permissions system). For illustration purposes, let's define a checkRoleMiddleware that compares a user's role (hardcoded here) with a role required to access a target field: export const checkRoleMiddleware : FieldMiddleware = async ( ctx : MiddlewareContext , next : NextFn , ) => { const { info } = ctx ; const { extensions } = info . parentType . getFields ()[ info . fieldName ]; /** * In a real-world application, the \"userRole\" variable * should represent the caller's (user) role (for example, \"ctx.user.role\"). */ const userRole = Role . USER ; if ( userRole === extensions . role ) { // or just \"return null\" to ignore throw new ForbiddenException ( `User does not have sufficient permissions to access \" ${ info . fieldName } \" field.` , ); } return next (); }; With this in place, we can register a middleware for the password field, as follows: @Field ({ middleware : [ checkRoleMiddleware ] }) @Extensions ({ role : Role.ADMIN }) password : string ;","title":"Using custom metadata"},{"location":"graphql/federation/","text":"Federation \u00b6 Apollo Federation offers a means of splitting your monolithic GraphQL server into independent microservices. It consists of two components: a gateway and one or more federated microservices. Each microservice holds part of the schema and the gateway merges the schemas into a single schema that can be consumed by the client. To quote the Apollo docs , Federation is designed with these core principles: Building a graph should be declarative. With federation, you compose a graph declaratively from within your schema instead of writing imperative schema stitching code. Code should be separated by concern , not by types. Often no single team controls every aspect of an important type like a User or Product, so the definition of these types should be distributed across teams and codebases, rather than centralized. The graph should be simple for clients to consume. Together, federated services can form a complete, product-focused graph that accurately reflects how it\u2019s being consumed on the client. It\u2019s just GraphQL , using only spec-compliant features of the language. Any language, not just JavaScript, can implement federation. warning Warning Apollo Federation currently does not support subscriptions. In the next example, we'll set up a demo application with a gateway and two federated endpoints: a Users service and a Posts service. Federated example: Users \u00b6 First, install the optional dependency for federation: $ npm install --save @apollo/federation @apollo/subgraph Schema first \u00b6 The User service has a simple schema. Note the @key directive: it tells the Apollo query planner that a particular instance of User can be fetched if you have its id . Also, note that we extend the Query type. type User @key(fields: \"id\") { id: ID! name: String! } extend type Query { getUser(id: ID!): User } Our resolver has one extra method: resolveReference() . It's called by the Apollo Gateway whenever a related resource requires a User instance. We'll see an example of this in the Posts service later on. Please note the @ResolveReference() decorator. import { Args , Query , Resolver , ResolveReference } from '@nestjs/graphql' ; import { UsersService } from './users.service' ; @Resolver ( 'User' ) export class UsersResolvers { constructor ( private usersService : UsersService ) {} @Query () getUser ( @Args ( 'id' ) id : string ) { return this . usersService . findById ( id ); } @ResolveReference () resolveReference ( reference : { __typename : string ; id : string }) { return this . usersService . findById ( reference . id ); } } Finally, we hook everything up in a module together with a GraphQLFederationModule . This module accepts the same options as the regular GraphQLModule . import { Module } from '@nestjs/common' ; import { GraphQLFederationModule } from '@nestjs/graphql' ; import { UsersResolvers } from './users.resolvers' ; @Module ({ imports : [ GraphQLFederationModule . forRoot ({ typePaths : [ '**/*.graphql' ], }), ], providers : [ UsersResolvers ], }) export class AppModule {} Code first \u00b6 Code first federation is very similar to regular code first GraphQL. We simply add some extra decorators to the User entity. import { Directive , Field , ID , ObjectType } from '@nestjs/graphql' ; @ObjectType () @Directive ( '@key(fields: \"id\")' ) export class User { @Field (( type ) => ID ) id : number ; @Field () name : string ; } Our resolver has one extra method: resolveReference() . It's called by the Apollo Gateway whenever a related resource requires a User instance. We'll see an example of this in the Posts service later on. Please note the @ResolveReference() decorator. import { Args , Query , Resolver , ResolveReference } from '@nestjs/graphql' ; import { User } from './user.entity' ; import { UsersService } from './users.service' ; @Resolver (( of ) => User ) export class UsersResolvers { constructor ( private usersService : UsersService ) {} @Query (( returns ) => User ) getUser ( @Args ( 'id' ) id : number ) : User { return this . usersService . findById ( id ); } @ResolveReference () resolveReference ( reference : { __typename : string ; id : number }) : User { return this . usersService . findById ( reference . id ); } } Finally, we hook everything up in a module together with a GraphQLFederationModule . This module accepts the same options as the regular GraphQLModule . import { Module } from '@nestjs/common' ; import { GraphQLFederationModule } from '@nestjs/graphql' ; import { UsersResolvers } from './users.resolvers' ; import { UsersService } from './users.service' ; // Not included in this example @Module ({ imports : [ GraphQLFederationModule . forRoot ({ autoSchemaFile : true , }), ], providers : [ UsersResolvers , UsersService ], }) export class AppModule {} Federated example: Posts \u00b6 Our Post service serves aggregated posts via a getPosts query, but also extends our User type with user.posts Schema first \u00b6 The Posts service references the User type in its schema by marking it with the extend keyword. It also adds one property to the User type. Note the @key directive used for matching instances of User, and the @external directive indicating that the id field is managed elsewhere. type Post @key(fields: \"id\") { id: ID! title: String! body: String! user: User } extend type User @key(fields: \"id\") { id: ID! @external posts: [Post] } extend type Query { getPosts: [Post] } Our resolver has one method of interest here: getUser() . It returns a reference containing __typename and any additional properties your application needs to resolve the reference, in this case only an id . The __typename is used by the GraphQL Gateway to pinpoint the microservice responsible for the User type and request the instance. The Users service discussed above will be called on the resolveReference() method. import { Query , Resolver , Parent , ResolveField } from '@nestjs/graphql' ; import { PostsService } from './posts.service' ; import { Post } from './posts.interfaces' ; @Resolver ( 'Post' ) export class PostsResolvers { constructor ( private postsService : PostsService ) {} @Query ( 'getPosts' ) getPosts () { return this . postsService . findAll (); } @ResolveField ( 'user' ) getUser ( @Parent () post : Post ) { return { __typename : 'User' , id : post.userId }; } } The Posts service has virtually the same module, but is included below for the sake of completeness: import { Module } from '@nestjs/common' ; import { GraphQLFederationModule } from '@nestjs/graphql' ; import { PostsResolvers } from './posts.resolvers' ; @Module ({ imports : [ GraphQLFederationModule . forRoot ({ typePaths : [ '**/*.graphql' ], }), ], providers : [ PostsResolvers ], }) export class AppModule {} Code first \u00b6 We will need to create a class representing our User entity. Even though it lives in another service, we will be using and extending it. Note the @extends and @external directives. import { Directive , ObjectType , Field , ID } from '@nestjs/graphql' ; import { Post } from './post.entity' ; @ObjectType () @Directive ( '@extends' ) @Directive ( '@key(fields: \"id\")' ) export class User { @Field (( type ) => ID ) @Directive ( '@external' ) id : number ; @Field (( type ) => [ Post ]) posts? : Post []; } We create the resolver for our extension on the User entity as follows: import { Parent , ResolveField , Resolver } from '@nestjs/graphql' ; import { PostsService } from './posts.service' ; import { Post } from './post.entity' ; import { User } from './user.entity' ; @Resolver (( of ) => User ) export class UsersResolvers { constructor ( private readonly postsService : PostsService ) {} @ResolveField (( of ) => [ Post ]) public posts ( @Parent () user : User ) : Post [] { return this . postsService . forAuthor ( user . id ); } } We also need to create our Post entity: import { Directive , Field , ID , Int , ObjectType } from '@nestjs/graphql' ; import { User } from './user.entity' ; @ObjectType () @Directive ( '@key(fields: \"id\")' ) export class Post { @Field (( type ) => ID ) id : number ; @Field () title : string ; @Field (( type ) => Int ) authorId : number ; @Field (( type ) => User ) user? : User ; } And its resolver: import { Query , Args , ResolveField , Resolver , Parent } from '@nestjs/graphql' ; import { PostsService } from './posts.service' ; import { Post } from './post.entity' ; import { User } from './user.entity' ; @Resolver (( of ) => Post ) export class PostsResolvers { constructor ( private readonly postsService : PostsService ) {} @Query (( returns ) => Post ) findPost ( @Args ( 'id' ) id : number ) : Post { return this . postsService . findOne ( id ); } @Query (( returns ) => [ Post ]) getPosts () : Post [] { return this . postsService . all (); } @ResolveField (( of ) => User ) user ( @Parent () post : Post ) : any { return { __typename : 'User' , id : post.authorId }; } } And finally, tie it together in a module. Note the schema build options, where we specify that User is an outside type. import { Module } from '@nestjs/common' ; import { GraphQLFederationModule } from '@nestjs/graphql' ; import { User } from './user.entity' ; import { PostsResolvers } from './posts.resolvers' ; import { UsersResolvers } from './users.resolvers' ; import { PostsService } from './posts.service' ; // Not included in example @Module ({ imports : [ GraphQLFederationModule . forRoot ({ autoSchemaFile : true , buildSchemaOptions : { orphanedTypes : [ User ], }, }), ], providers : [ PostsResolvers , UsersResolvers , PostsService ], }) export class AppModule {} Federated example: Gateway \u00b6 First, install the optional dependency for the gateway: $ npm install --save @apollo/gateway Our gateway only needs a list of endpoints and will auto-discover the schemas from there. Therefore it is the same for code and schema first, and the code for our gateway is very short: import { Module } from '@nestjs/common' ; import { GraphQLGatewayModule } from '@nestjs/graphql' ; @Module ({ imports : [ GraphQLGatewayModule . forRoot ({ server : { // ... Apollo server options cors : true , }, gateway : { serviceList : [ { name : 'users' , url : 'http://user-service/graphql' }, { name : 'posts' , url : 'http://post-service/graphql' }, ], }, }), ], }) export class AppModule {} info Hint Apollo recommends that you don't rely on the service discovery in a production environment but use their Graph Manager instead. Sharing context \u00b6 You can customize the requests between the gateway and federated services using a build service. This allows you to share context about the request. You can easily extend the default RemoteGraphQLDataSource and implement one of the hooks. Please refer to Apollo Docs on RemoteGraphQLDataSource for more information about the possibilities. import { Module } from '@nestjs/common' ; import { GATEWAY_BUILD_SERVICE , GraphQLGatewayModule } from '@nestjs/graphql' ; import { RemoteGraphQLDataSource } from '@apollo/gateway' ; import { decode } from 'jsonwebtoken' ; class AuthenticatedDataSource extends RemoteGraphQLDataSource { async willSendRequest ({ request , context }) { const { userId } = await decode ( context . jwt ); request . http . headers . set ( 'x-user-id' , userId ); } } @Module ({ providers : [ { provide : AuthenticatedDataSource , useValue : AuthenticatedDataSource , }, { provide : GATEWAY_BUILD_SERVICE , useFactory : ( AuthenticatedDataSource ) => { return ({ name , url }) => new AuthenticatedDataSource ({ url }); }, inject : [ AuthenticatedDataSource ], }, ], exports : [ GATEWAY_BUILD_SERVICE ], }) class BuildServiceModule {} @Module ({ imports : [ GraphQLGatewayModule . forRootAsync ({ useFactory : async () => ({ gateway : { serviceList : [ /* services */ ], }, server : { context : ({ req }) => ({ jwt : req.headers.authorization , }), }, }), imports : [ BuildServiceModule ], inject : [ GATEWAY_BUILD_SERVICE ], }), ], }) export class AppModule {} Async configuration \u00b6 Both the Federation and Gateway modules support asynchronous initialization using the same forRootAsync that's documented in Quick start .","title":"\u8054\u5408\u4f1a"},{"location":"graphql/federation/#federation","text":"Apollo Federation offers a means of splitting your monolithic GraphQL server into independent microservices. It consists of two components: a gateway and one or more federated microservices. Each microservice holds part of the schema and the gateway merges the schemas into a single schema that can be consumed by the client. To quote the Apollo docs , Federation is designed with these core principles: Building a graph should be declarative. With federation, you compose a graph declaratively from within your schema instead of writing imperative schema stitching code. Code should be separated by concern , not by types. Often no single team controls every aspect of an important type like a User or Product, so the definition of these types should be distributed across teams and codebases, rather than centralized. The graph should be simple for clients to consume. Together, federated services can form a complete, product-focused graph that accurately reflects how it\u2019s being consumed on the client. It\u2019s just GraphQL , using only spec-compliant features of the language. Any language, not just JavaScript, can implement federation. warning Warning Apollo Federation currently does not support subscriptions. In the next example, we'll set up a demo application with a gateway and two federated endpoints: a Users service and a Posts service.","title":"Federation"},{"location":"graphql/federation/#federated-example-users","text":"First, install the optional dependency for federation: $ npm install --save @apollo/federation @apollo/subgraph","title":"Federated example: Users"},{"location":"graphql/federation/#schema-first","text":"The User service has a simple schema. Note the @key directive: it tells the Apollo query planner that a particular instance of User can be fetched if you have its id . Also, note that we extend the Query type. type User @key(fields: \"id\") { id: ID! name: String! } extend type Query { getUser(id: ID!): User } Our resolver has one extra method: resolveReference() . It's called by the Apollo Gateway whenever a related resource requires a User instance. We'll see an example of this in the Posts service later on. Please note the @ResolveReference() decorator. import { Args , Query , Resolver , ResolveReference } from '@nestjs/graphql' ; import { UsersService } from './users.service' ; @Resolver ( 'User' ) export class UsersResolvers { constructor ( private usersService : UsersService ) {} @Query () getUser ( @Args ( 'id' ) id : string ) { return this . usersService . findById ( id ); } @ResolveReference () resolveReference ( reference : { __typename : string ; id : string }) { return this . usersService . findById ( reference . id ); } } Finally, we hook everything up in a module together with a GraphQLFederationModule . This module accepts the same options as the regular GraphQLModule . import { Module } from '@nestjs/common' ; import { GraphQLFederationModule } from '@nestjs/graphql' ; import { UsersResolvers } from './users.resolvers' ; @Module ({ imports : [ GraphQLFederationModule . forRoot ({ typePaths : [ '**/*.graphql' ], }), ], providers : [ UsersResolvers ], }) export class AppModule {}","title":"Schema first"},{"location":"graphql/federation/#code-first","text":"Code first federation is very similar to regular code first GraphQL. We simply add some extra decorators to the User entity. import { Directive , Field , ID , ObjectType } from '@nestjs/graphql' ; @ObjectType () @Directive ( '@key(fields: \"id\")' ) export class User { @Field (( type ) => ID ) id : number ; @Field () name : string ; } Our resolver has one extra method: resolveReference() . It's called by the Apollo Gateway whenever a related resource requires a User instance. We'll see an example of this in the Posts service later on. Please note the @ResolveReference() decorator. import { Args , Query , Resolver , ResolveReference } from '@nestjs/graphql' ; import { User } from './user.entity' ; import { UsersService } from './users.service' ; @Resolver (( of ) => User ) export class UsersResolvers { constructor ( private usersService : UsersService ) {} @Query (( returns ) => User ) getUser ( @Args ( 'id' ) id : number ) : User { return this . usersService . findById ( id ); } @ResolveReference () resolveReference ( reference : { __typename : string ; id : number }) : User { return this . usersService . findById ( reference . id ); } } Finally, we hook everything up in a module together with a GraphQLFederationModule . This module accepts the same options as the regular GraphQLModule . import { Module } from '@nestjs/common' ; import { GraphQLFederationModule } from '@nestjs/graphql' ; import { UsersResolvers } from './users.resolvers' ; import { UsersService } from './users.service' ; // Not included in this example @Module ({ imports : [ GraphQLFederationModule . forRoot ({ autoSchemaFile : true , }), ], providers : [ UsersResolvers , UsersService ], }) export class AppModule {}","title":"Code first"},{"location":"graphql/federation/#federated-example-posts","text":"Our Post service serves aggregated posts via a getPosts query, but also extends our User type with user.posts","title":"Federated example: Posts"},{"location":"graphql/federation/#schema-first_1","text":"The Posts service references the User type in its schema by marking it with the extend keyword. It also adds one property to the User type. Note the @key directive used for matching instances of User, and the @external directive indicating that the id field is managed elsewhere. type Post @key(fields: \"id\") { id: ID! title: String! body: String! user: User } extend type User @key(fields: \"id\") { id: ID! @external posts: [Post] } extend type Query { getPosts: [Post] } Our resolver has one method of interest here: getUser() . It returns a reference containing __typename and any additional properties your application needs to resolve the reference, in this case only an id . The __typename is used by the GraphQL Gateway to pinpoint the microservice responsible for the User type and request the instance. The Users service discussed above will be called on the resolveReference() method. import { Query , Resolver , Parent , ResolveField } from '@nestjs/graphql' ; import { PostsService } from './posts.service' ; import { Post } from './posts.interfaces' ; @Resolver ( 'Post' ) export class PostsResolvers { constructor ( private postsService : PostsService ) {} @Query ( 'getPosts' ) getPosts () { return this . postsService . findAll (); } @ResolveField ( 'user' ) getUser ( @Parent () post : Post ) { return { __typename : 'User' , id : post.userId }; } } The Posts service has virtually the same module, but is included below for the sake of completeness: import { Module } from '@nestjs/common' ; import { GraphQLFederationModule } from '@nestjs/graphql' ; import { PostsResolvers } from './posts.resolvers' ; @Module ({ imports : [ GraphQLFederationModule . forRoot ({ typePaths : [ '**/*.graphql' ], }), ], providers : [ PostsResolvers ], }) export class AppModule {}","title":"Schema first"},{"location":"graphql/federation/#code-first_1","text":"We will need to create a class representing our User entity. Even though it lives in another service, we will be using and extending it. Note the @extends and @external directives. import { Directive , ObjectType , Field , ID } from '@nestjs/graphql' ; import { Post } from './post.entity' ; @ObjectType () @Directive ( '@extends' ) @Directive ( '@key(fields: \"id\")' ) export class User { @Field (( type ) => ID ) @Directive ( '@external' ) id : number ; @Field (( type ) => [ Post ]) posts? : Post []; } We create the resolver for our extension on the User entity as follows: import { Parent , ResolveField , Resolver } from '@nestjs/graphql' ; import { PostsService } from './posts.service' ; import { Post } from './post.entity' ; import { User } from './user.entity' ; @Resolver (( of ) => User ) export class UsersResolvers { constructor ( private readonly postsService : PostsService ) {} @ResolveField (( of ) => [ Post ]) public posts ( @Parent () user : User ) : Post [] { return this . postsService . forAuthor ( user . id ); } } We also need to create our Post entity: import { Directive , Field , ID , Int , ObjectType } from '@nestjs/graphql' ; import { User } from './user.entity' ; @ObjectType () @Directive ( '@key(fields: \"id\")' ) export class Post { @Field (( type ) => ID ) id : number ; @Field () title : string ; @Field (( type ) => Int ) authorId : number ; @Field (( type ) => User ) user? : User ; } And its resolver: import { Query , Args , ResolveField , Resolver , Parent } from '@nestjs/graphql' ; import { PostsService } from './posts.service' ; import { Post } from './post.entity' ; import { User } from './user.entity' ; @Resolver (( of ) => Post ) export class PostsResolvers { constructor ( private readonly postsService : PostsService ) {} @Query (( returns ) => Post ) findPost ( @Args ( 'id' ) id : number ) : Post { return this . postsService . findOne ( id ); } @Query (( returns ) => [ Post ]) getPosts () : Post [] { return this . postsService . all (); } @ResolveField (( of ) => User ) user ( @Parent () post : Post ) : any { return { __typename : 'User' , id : post.authorId }; } } And finally, tie it together in a module. Note the schema build options, where we specify that User is an outside type. import { Module } from '@nestjs/common' ; import { GraphQLFederationModule } from '@nestjs/graphql' ; import { User } from './user.entity' ; import { PostsResolvers } from './posts.resolvers' ; import { UsersResolvers } from './users.resolvers' ; import { PostsService } from './posts.service' ; // Not included in example @Module ({ imports : [ GraphQLFederationModule . forRoot ({ autoSchemaFile : true , buildSchemaOptions : { orphanedTypes : [ User ], }, }), ], providers : [ PostsResolvers , UsersResolvers , PostsService ], }) export class AppModule {}","title":"Code first"},{"location":"graphql/federation/#federated-example-gateway","text":"First, install the optional dependency for the gateway: $ npm install --save @apollo/gateway Our gateway only needs a list of endpoints and will auto-discover the schemas from there. Therefore it is the same for code and schema first, and the code for our gateway is very short: import { Module } from '@nestjs/common' ; import { GraphQLGatewayModule } from '@nestjs/graphql' ; @Module ({ imports : [ GraphQLGatewayModule . forRoot ({ server : { // ... Apollo server options cors : true , }, gateway : { serviceList : [ { name : 'users' , url : 'http://user-service/graphql' }, { name : 'posts' , url : 'http://post-service/graphql' }, ], }, }), ], }) export class AppModule {} info Hint Apollo recommends that you don't rely on the service discovery in a production environment but use their Graph Manager instead.","title":"Federated example: Gateway"},{"location":"graphql/federation/#sharing-context","text":"You can customize the requests between the gateway and federated services using a build service. This allows you to share context about the request. You can easily extend the default RemoteGraphQLDataSource and implement one of the hooks. Please refer to Apollo Docs on RemoteGraphQLDataSource for more information about the possibilities. import { Module } from '@nestjs/common' ; import { GATEWAY_BUILD_SERVICE , GraphQLGatewayModule } from '@nestjs/graphql' ; import { RemoteGraphQLDataSource } from '@apollo/gateway' ; import { decode } from 'jsonwebtoken' ; class AuthenticatedDataSource extends RemoteGraphQLDataSource { async willSendRequest ({ request , context }) { const { userId } = await decode ( context . jwt ); request . http . headers . set ( 'x-user-id' , userId ); } } @Module ({ providers : [ { provide : AuthenticatedDataSource , useValue : AuthenticatedDataSource , }, { provide : GATEWAY_BUILD_SERVICE , useFactory : ( AuthenticatedDataSource ) => { return ({ name , url }) => new AuthenticatedDataSource ({ url }); }, inject : [ AuthenticatedDataSource ], }, ], exports : [ GATEWAY_BUILD_SERVICE ], }) class BuildServiceModule {} @Module ({ imports : [ GraphQLGatewayModule . forRootAsync ({ useFactory : async () => ({ gateway : { serviceList : [ /* services */ ], }, server : { context : ({ req }) => ({ jwt : req.headers.authorization , }), }, }), imports : [ BuildServiceModule ], inject : [ GATEWAY_BUILD_SERVICE ], }), ], }) export class AppModule {}","title":"Sharing context"},{"location":"graphql/federation/#async-configuration","text":"Both the Federation and Gateway modules support asynchronous initialization using the same forRootAsync that's documented in Quick start .","title":"Async configuration"},{"location":"graphql/field-middleware/","text":"Field middleware \u00b6 warning Warning This chapter applies only to the code first approach. Field Middleware lets you run arbitrary code before or after a field is resolved. A field middleware can be used to convert the result of a field, validate the arguments of a field, or even check field-level roles (for example, required to access a target field for which a middleware function is executed). You can connect multiple middleware functions to a field. In this case, they will be called sequentially along the chain where the previous middleware decides to call the next one. The order of the middleware functions in the middleware array is important. The first resolver is the \"most-outer\" layer, so it gets executed first and last (similarly to the graphql-middleware package). The second resolver is the \"second-outer\" layer, so it gets executed second and second to last. Getting started \u00b6 Let's start off by creating a simple middleware that will log a field value before it's sent back to the client: import { FieldMiddleware , MiddlewareContext , NextFn } from '@nestjs/graphql' ; const loggerMiddleware : FieldMiddleware = async ( ctx : MiddlewareContext , next : NextFn , ) => { const value = await next (); console . log ( value ); return value ; }; info Hint The MiddlewareContext is an object that consist of the same arguments that are normally received by the GraphQL resolver function ( {{ '{' }} source, args, context, info {{ '}' }} ), while NextFn is a function that let you execute the next middleware in the stack (bound to this field) or the actual field resolver. warning Warning Field middleware functions cannot inject dependencies nor access Nest's DI container as they are designed to be very lightweight and shouldn't perform any potentially time-consuming operations (like retrieving data from the database). If you need to call external services/query data from the data source, you should do it in a guard/interceptor bounded to a root query/mutation handler and assign it to context object which you can access from within the field middleware (specifically, from the MiddlewareContext object). Note that field middleware must match the FieldMiddleware interface. In the example above, we first run the next() function (which executes the actual field resolver and returns a field value) and then, we log this value to our terminal. Also, the value returned from the middleware function completely overrides the previous value and since we don't want to perform any changes, we simply return the original value. With this in place, we can register our middleware directly in the @Field() decorator, as follows: @ObjectType () export class Recipe { @Field ({ middleware : [ loggerMiddleware ] }) title : string ; } Now whenever we request the title field of Recipe object type, the original field's value will be logged to the console. info Hint To learn how you can implement a field-level permissions system with the use of extensions feature, check out this section . Also, as mentioned above, we can control the field's value from within the middleware function. For demonstration purposes, let's capitalise a recipe's title (if present): const value = await next (); return value ? . toUpperCase (); In this case, every title will be automatically uppercased, when requested. Likewise, you can bind a field middleware to a custom field resolver (a method annotated with the @ResolveField() decorator), as follows: @ResolveField (() => String , { middleware : [ loggerMiddleware ] }) title () { return 'Placeholder' ; } warning Warning In case enhancers are enabled at the field resolver level ( read more ), field middleware functions will run before any interceptors, guards, etc., bounded to the method (but after the root-level enhancers registered for query or mutation handlers). Global field middleware \u00b6 In addition to binding a middleware directly to a specific field, you can also register one or multiple middleware functions globally. In this case, they will be automatically connected to all fields of your object types. GraphQLModule . forRoot ({ autoSchemaFile : 'schema.gql' , buildSchemaOptions : { fieldMiddleware : [ loggerMiddleware ], }, }), info Hint Globally registered field middleware functions will be executed before locally registered ones (those bound directly to specific fields).","title":"\u5b57\u6bb5\u4e2d\u95f4\u4ef6"},{"location":"graphql/field-middleware/#field-middleware","text":"warning Warning This chapter applies only to the code first approach. Field Middleware lets you run arbitrary code before or after a field is resolved. A field middleware can be used to convert the result of a field, validate the arguments of a field, or even check field-level roles (for example, required to access a target field for which a middleware function is executed). You can connect multiple middleware functions to a field. In this case, they will be called sequentially along the chain where the previous middleware decides to call the next one. The order of the middleware functions in the middleware array is important. The first resolver is the \"most-outer\" layer, so it gets executed first and last (similarly to the graphql-middleware package). The second resolver is the \"second-outer\" layer, so it gets executed second and second to last.","title":"Field middleware"},{"location":"graphql/field-middleware/#getting-started","text":"Let's start off by creating a simple middleware that will log a field value before it's sent back to the client: import { FieldMiddleware , MiddlewareContext , NextFn } from '@nestjs/graphql' ; const loggerMiddleware : FieldMiddleware = async ( ctx : MiddlewareContext , next : NextFn , ) => { const value = await next (); console . log ( value ); return value ; }; info Hint The MiddlewareContext is an object that consist of the same arguments that are normally received by the GraphQL resolver function ( {{ '{' }} source, args, context, info {{ '}' }} ), while NextFn is a function that let you execute the next middleware in the stack (bound to this field) or the actual field resolver. warning Warning Field middleware functions cannot inject dependencies nor access Nest's DI container as they are designed to be very lightweight and shouldn't perform any potentially time-consuming operations (like retrieving data from the database). If you need to call external services/query data from the data source, you should do it in a guard/interceptor bounded to a root query/mutation handler and assign it to context object which you can access from within the field middleware (specifically, from the MiddlewareContext object). Note that field middleware must match the FieldMiddleware interface. In the example above, we first run the next() function (which executes the actual field resolver and returns a field value) and then, we log this value to our terminal. Also, the value returned from the middleware function completely overrides the previous value and since we don't want to perform any changes, we simply return the original value. With this in place, we can register our middleware directly in the @Field() decorator, as follows: @ObjectType () export class Recipe { @Field ({ middleware : [ loggerMiddleware ] }) title : string ; } Now whenever we request the title field of Recipe object type, the original field's value will be logged to the console. info Hint To learn how you can implement a field-level permissions system with the use of extensions feature, check out this section . Also, as mentioned above, we can control the field's value from within the middleware function. For demonstration purposes, let's capitalise a recipe's title (if present): const value = await next (); return value ? . toUpperCase (); In this case, every title will be automatically uppercased, when requested. Likewise, you can bind a field middleware to a custom field resolver (a method annotated with the @ResolveField() decorator), as follows: @ResolveField (() => String , { middleware : [ loggerMiddleware ] }) title () { return 'Placeholder' ; } warning Warning In case enhancers are enabled at the field resolver level ( read more ), field middleware functions will run before any interceptors, guards, etc., bounded to the method (but after the root-level enhancers registered for query or mutation handlers).","title":"Getting started"},{"location":"graphql/field-middleware/#global-field-middleware","text":"In addition to binding a middleware directly to a specific field, you can also register one or multiple middleware functions globally. In this case, they will be automatically connected to all fields of your object types. GraphQLModule . forRoot ({ autoSchemaFile : 'schema.gql' , buildSchemaOptions : { fieldMiddleware : [ loggerMiddleware ], }, }), info Hint Globally registered field middleware functions will be executed before locally registered ones (those bound directly to specific fields).","title":"Global field middleware"},{"location":"graphql/guards-interceptors/","text":"Other features \u00b6 In the GraphQL world, there is a lot of debate about handling issues like authentication , or side-effects of operations. Should we handle things inside the business logic? Should we use a higher-order function to enhance queries and mutations with authorization logic? Or should we use schema directives ? There is no single one-size-fits-all answer to these questions. Nest helps address these issues with its cross-platform features like guards and interceptors . The philosophy is to reduce redundancy and provide tooling that helps create well-structured, readable, and consistent applications. Overview \u00b6 You can use standard guards , interceptors , filters and pipes in the same fashion with GraphQL as with any RESTful application. Additionally, you can easily create your own decorators by leveraging the custom decorators feature. Let's take a look at a sample GraphQL query handler. @Query ( 'author' ) @UseGuards ( AuthGuard ) async getAuthor ( @Args ( 'id' , ParseIntPipe ) id : number ) { return this . authorsService . findOneById ( id ); } As you can see, GraphQL works with both guards and pipes in the same way as HTTP REST handlers. Because of this, you can move your authentication logic to a guard; you can even reuse the same guard class across both a REST and GraphQL API interface. Similarly, interceptors work across both types of applications in the same way: @Mutation () @UseInterceptors ( EventsInterceptor ) async upvotePost ( @Args ( 'postId' ) postId : number ) { return this . postsService . upvoteById ({ id : postId }); } Execution context \u00b6 Since GraphQL receives a different type of data in the incoming request, the execution context received by both guards and interceptors is somewhat different with GraphQL vs. REST. GraphQL resolvers have a distinct set of arguments: root , args , context , and info . Thus guards and interceptors must transform the generic ExecutionContext to a GqlExecutionContext . This is straightforward: import { CanActivate , ExecutionContext , Injectable } from '@nestjs/common' ; import { GqlExecutionContext } from '@nestjs/graphql' ; @Injectable () export class AuthGuard implements CanActivate { canActivate ( context : ExecutionContext ) : boolean { const ctx = GqlExecutionContext . create ( context ); return true ; } } The GraphQL context object returned by GqlExecutionContext.create() exposes a get method for each GraphQL resolver argument (e.g., getArgs() , getContext() , etc). Once transformed, we can easily pick out any GraphQL argument for the current request. Exception filters \u00b6 Nest standard exception filters are compatible with GraphQL applications as well. As with ExecutionContext , GraphQL apps should transform the ArgumentsHost object to a GqlArgumentsHost object. @Catch ( HttpException ) export class HttpExceptionFilter implements GqlExceptionFilter { catch ( exception : HttpException , host : ArgumentsHost ) { const gqlHost = GqlArgumentsHost . create ( host ); return exception ; } } info Hint Both GqlExceptionFilter and GqlArgumentsHost are imported from the @nestjs/graphql package. Note that unlike the REST case, you don't use the native response object to generate a response. Custom decorators \u00b6 As mentioned, the custom decorators feature works as expected with GraphQL resolvers. export const User = createParamDecorator ( ( data : unknown , ctx : ExecutionContext ) => GqlExecutionContext . create ( ctx ). getContext (). user , ); Use the @User() custom decorator as follows: @Mutation () async upvotePost ( @User () user : UserEntity , @Args ( 'postId' ) postId : number , ) {} info Hint In the above example, we have assumed that the user object is assigned to the context of your GraphQL application. Execute enhancers at the field resolver level \u00b6 In the GraphQL context, Nest does not run enhancers (the generic name for interceptors, guards and filters) at the field level see this issue : they only run for the top level @Query() / @Mutation() method. You can tell Nest to execute interceptors, guards or filters for methods annotated with @ResolveField() by setting the fieldResolverEnhancers option in GqlModuleOptions . Pass it a list of 'interceptors' , 'guards' , and/or 'filters' as appropriate: GraphQLModule . forRoot ({ fieldResolverEnhancers : [ 'interceptors' ] }), Warning Enabling enhancers for field resolvers can cause performance issues when you are returning lots of records and your field resolver is executed thousands of times. For this reason, when you enable fieldResolverEnhancers , we advise you to skip execution of enhancers that are not strictly necessary for your field resolvers. You can do this using the following helper function: export function isResolvingGraphQLField ( context : ExecutionContext ) : boolean { if ( context . getType < GqlContextType > () === 'graphql' ) { const gqlContext = GqlExecutionContext . create ( context ); const info = gqlContext . getInfo (); const parentType = info . parentType . name ; return parentType !== 'Query' && parentType !== 'Mutation' ; } return false ; }","title":"\u5176\u4ed6\u529f\u80fd"},{"location":"graphql/guards-interceptors/#other-features","text":"In the GraphQL world, there is a lot of debate about handling issues like authentication , or side-effects of operations. Should we handle things inside the business logic? Should we use a higher-order function to enhance queries and mutations with authorization logic? Or should we use schema directives ? There is no single one-size-fits-all answer to these questions. Nest helps address these issues with its cross-platform features like guards and interceptors . The philosophy is to reduce redundancy and provide tooling that helps create well-structured, readable, and consistent applications.","title":"Other features"},{"location":"graphql/guards-interceptors/#overview","text":"You can use standard guards , interceptors , filters and pipes in the same fashion with GraphQL as with any RESTful application. Additionally, you can easily create your own decorators by leveraging the custom decorators feature. Let's take a look at a sample GraphQL query handler. @Query ( 'author' ) @UseGuards ( AuthGuard ) async getAuthor ( @Args ( 'id' , ParseIntPipe ) id : number ) { return this . authorsService . findOneById ( id ); } As you can see, GraphQL works with both guards and pipes in the same way as HTTP REST handlers. Because of this, you can move your authentication logic to a guard; you can even reuse the same guard class across both a REST and GraphQL API interface. Similarly, interceptors work across both types of applications in the same way: @Mutation () @UseInterceptors ( EventsInterceptor ) async upvotePost ( @Args ( 'postId' ) postId : number ) { return this . postsService . upvoteById ({ id : postId }); }","title":"Overview"},{"location":"graphql/guards-interceptors/#execution-context","text":"Since GraphQL receives a different type of data in the incoming request, the execution context received by both guards and interceptors is somewhat different with GraphQL vs. REST. GraphQL resolvers have a distinct set of arguments: root , args , context , and info . Thus guards and interceptors must transform the generic ExecutionContext to a GqlExecutionContext . This is straightforward: import { CanActivate , ExecutionContext , Injectable } from '@nestjs/common' ; import { GqlExecutionContext } from '@nestjs/graphql' ; @Injectable () export class AuthGuard implements CanActivate { canActivate ( context : ExecutionContext ) : boolean { const ctx = GqlExecutionContext . create ( context ); return true ; } } The GraphQL context object returned by GqlExecutionContext.create() exposes a get method for each GraphQL resolver argument (e.g., getArgs() , getContext() , etc). Once transformed, we can easily pick out any GraphQL argument for the current request.","title":"Execution context"},{"location":"graphql/guards-interceptors/#exception-filters","text":"Nest standard exception filters are compatible with GraphQL applications as well. As with ExecutionContext , GraphQL apps should transform the ArgumentsHost object to a GqlArgumentsHost object. @Catch ( HttpException ) export class HttpExceptionFilter implements GqlExceptionFilter { catch ( exception : HttpException , host : ArgumentsHost ) { const gqlHost = GqlArgumentsHost . create ( host ); return exception ; } } info Hint Both GqlExceptionFilter and GqlArgumentsHost are imported from the @nestjs/graphql package. Note that unlike the REST case, you don't use the native response object to generate a response.","title":"Exception filters"},{"location":"graphql/guards-interceptors/#custom-decorators","text":"As mentioned, the custom decorators feature works as expected with GraphQL resolvers. export const User = createParamDecorator ( ( data : unknown , ctx : ExecutionContext ) => GqlExecutionContext . create ( ctx ). getContext (). user , ); Use the @User() custom decorator as follows: @Mutation () async upvotePost ( @User () user : UserEntity , @Args ( 'postId' ) postId : number , ) {} info Hint In the above example, we have assumed that the user object is assigned to the context of your GraphQL application.","title":"Custom decorators"},{"location":"graphql/guards-interceptors/#execute-enhancers-at-the-field-resolver-level","text":"In the GraphQL context, Nest does not run enhancers (the generic name for interceptors, guards and filters) at the field level see this issue : they only run for the top level @Query() / @Mutation() method. You can tell Nest to execute interceptors, guards or filters for methods annotated with @ResolveField() by setting the fieldResolverEnhancers option in GqlModuleOptions . Pass it a list of 'interceptors' , 'guards' , and/or 'filters' as appropriate: GraphQLModule . forRoot ({ fieldResolverEnhancers : [ 'interceptors' ] }), Warning Enabling enhancers for field resolvers can cause performance issues when you are returning lots of records and your field resolver is executed thousands of times. For this reason, when you enable fieldResolverEnhancers , we advise you to skip execution of enhancers that are not strictly necessary for your field resolvers. You can do this using the following helper function: export function isResolvingGraphQLField ( context : ExecutionContext ) : boolean { if ( context . getType < GqlContextType > () === 'graphql' ) { const gqlContext = GqlExecutionContext . create ( context ); const info = gqlContext . getInfo (); const parentType = info . parentType . name ; return parentType !== 'Query' && parentType !== 'Mutation' ; } return false ; }","title":"Execute enhancers at the field resolver level"},{"location":"graphql/interfaces/","text":"Interfaces \u00b6 Like many type systems, GraphQL supports interfaces. An Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface (read more here ). Code first \u00b6 When using the code first approach, you define a GraphQL interface by creating an abstract class annotated with the @InterfaceType() decorator exported from the @nestjs/graphql . import { Field , ID , InterfaceType } from '@nestjs/graphql' ; @InterfaceType () export abstract class Character { @Field ( type => ID ) id : string ; @Field () name : string ; } warning Warning TypeScript interfaces cannot be used to define GraphQL interfaces. This will result in generating the following part of the GraphQL schema in SDL: interface Character { id: ID! name: String! } Now, to implement the Character interface, use the implements key: @ObjectType ({ implements : () => [ Character ], }) export class Human implements Character { id : string ; name : string ; } info Hint The @ObjectType() decorator is exported from the @nestjs/graphql package. The default resolveType() function generated by the library extracts the type based on the value returned from the resolver method. This means that you must return class instances (you cannot return literal JavaScript objects). To provide a customized resolveType() function, pass the resolveType property to the options object passed into the @InterfaceType() decorator, as follows: @InterfaceType ({ resolveType ( book ) { if ( book . colors ) { return ColoringBook ; } return TextBook ; }, }) export abstract class Book { @Field ( type => ID ) id : string ; @Field () title : string ; } Schema first \u00b6 To define an interface in the schema first approach, simply create a GraphQL interface with SDL. interface Character { id: ID! name: String! } Then, you can use the typings generation feature (as shown in the quick start chapter) to generate corresponding TypeScript definitions: export interface Character { id : string ; name : string ; } Interfaces require an extra __resolveType field in the resolver map to determine which type the interface should resolve to. Let's create a CharactersResolver class and define the __resolveType method: @Resolver ( 'Character' ) export class CharactersResolver { @ResolveField () __resolveType ( value ) { if ( 'age' in value ) { return Person ; } return null ; } } info Hint All decorators are exported from the @nestjs/graphql package.","title":"\u63a5\u53e3"},{"location":"graphql/interfaces/#interfaces","text":"Like many type systems, GraphQL supports interfaces. An Interface is an abstract type that includes a certain set of fields that a type must include to implement the interface (read more here ).","title":"Interfaces"},{"location":"graphql/interfaces/#code-first","text":"When using the code first approach, you define a GraphQL interface by creating an abstract class annotated with the @InterfaceType() decorator exported from the @nestjs/graphql . import { Field , ID , InterfaceType } from '@nestjs/graphql' ; @InterfaceType () export abstract class Character { @Field ( type => ID ) id : string ; @Field () name : string ; } warning Warning TypeScript interfaces cannot be used to define GraphQL interfaces. This will result in generating the following part of the GraphQL schema in SDL: interface Character { id: ID! name: String! } Now, to implement the Character interface, use the implements key: @ObjectType ({ implements : () => [ Character ], }) export class Human implements Character { id : string ; name : string ; } info Hint The @ObjectType() decorator is exported from the @nestjs/graphql package. The default resolveType() function generated by the library extracts the type based on the value returned from the resolver method. This means that you must return class instances (you cannot return literal JavaScript objects). To provide a customized resolveType() function, pass the resolveType property to the options object passed into the @InterfaceType() decorator, as follows: @InterfaceType ({ resolveType ( book ) { if ( book . colors ) { return ColoringBook ; } return TextBook ; }, }) export abstract class Book { @Field ( type => ID ) id : string ; @Field () title : string ; }","title":"Code first"},{"location":"graphql/interfaces/#schema-first","text":"To define an interface in the schema first approach, simply create a GraphQL interface with SDL. interface Character { id: ID! name: String! } Then, you can use the typings generation feature (as shown in the quick start chapter) to generate corresponding TypeScript definitions: export interface Character { id : string ; name : string ; } Interfaces require an extra __resolveType field in the resolver map to determine which type the interface should resolve to. Let's create a CharactersResolver class and define the __resolveType method: @Resolver ( 'Character' ) export class CharactersResolver { @ResolveField () __resolveType ( value ) { if ( 'age' in value ) { return Person ; } return null ; } } info Hint All decorators are exported from the @nestjs/graphql package.","title":"Schema first"},{"location":"graphql/mapped-types/","text":"Mapped types \u00b6 warning Warning This chapter applies only to the code first approach. As you build out features like CRUD (Create/Read/Update/Delete) it's often useful to construct variants on a base entity type. Nest provides several utility functions that perform type transformations to make this task more convenient. Partial \u00b6 When building input validation types (also called DTOs), it's often useful to build create and update variations on the same type. For example, the create variant may require all fields, while the update variant may make all fields optional. Nest provides the PartialType() utility function to make this task easier and minimize boilerplate. The PartialType() function returns a type (class) with all the properties of the input type set to optional. For example, suppose we have a create type as follows: @InputType () class CreateUserInput { @Field () email : string ; @Field () password : string ; @Field () firstName : string ; } By default, all of these fields are required. To create a type with the same fields, but with each one optional, use PartialType() passing the class reference ( CreateUserInput ) as an argument: @InputType () export class UpdateUserInput extends PartialType ( CreateUserInput ) {} info Hint The PartialType() function is imported from the @nestjs/graphql package. The PartialType() function takes an optional second argument that is a reference to a decorator factory. This argument can be used to change the decorator function applied to the resulting (child) class. If not specified, the child class effectively uses the same decorator as the parent class (the class referenced in the first argument). In the example above, we are extending CreateUserInput which is annotated with the @InputType() decorator. Since we want UpdateUserInput to also be treated as if it were decorated with @InputType() , we didn't need to pass InputType as the second argument. If the parent and child types are different, (e.g., the parent is decorated with @ObjectType ), we would pass InputType as the second argument. For example: @InputType () export class UpdateUserInput extends PartialType ( User , InputType ) {} Pick \u00b6 The PickType() function constructs a new type (class) by picking a set of properties from an input type. For example, suppose we start with a type like: @InputType () class CreateUserInput { @Field () email : string ; @Field () password : string ; @Field () firstName : string ; } We can pick a set of properties from this class using the PickType() utility function: @InputType () export class UpdateEmailInput extends PickType ( CreateUserInput , [ 'email' ] as const ) {} info Hint The PickType() function is imported from the @nestjs/graphql package. Omit \u00b6 The OmitType() function constructs a type by picking all properties from an input type and then removing a particular set of keys. For example, suppose we start with a type like: @InputType () class CreateUserInput { @Field () email : string ; @Field () password : string ; @Field () firstName : string ; } We can generate a derived type that has every property except email as shown below. In this construct, the second argument to OmitType is an array of property names. @InputType () export class UpdateUserInput extends OmitType ( CreateUserInput , [ 'email' ] as const ) {} info Hint The OmitType() function is imported from the @nestjs/graphql package. Intersection \u00b6 The IntersectionType() function combines two types into one new type (class). For example, suppose we start with two types like: @InputType () class CreateUserInput { @Field () email : string ; @Field () password : string ; } @ObjectType () export class AdditionalUserInfo { @Field () firstName : string ; @Field () lastName : string ; } We can generate a new type that combines all properties in both types. @InputType () export class UpdateUserInput extends IntersectionType ( CreateUserInput , AdditionalUserInfo ) {} info Hint The IntersectionType() function is imported from the @nestjs/graphql package. Composition \u00b6 The type mapping utility functions are composable. For example, the following will produce a type (class) that has all of the properties of the CreateUserInput type except for email , and those properties will be set to optional: @InputType () export class UpdateUserInput extends PartialType ( OmitType ( CreateUserInput , [ 'email' ] as const ), ) {}","title":"\u6620\u5c04\u7c7b\u578b"},{"location":"graphql/mapped-types/#mapped-types","text":"warning Warning This chapter applies only to the code first approach. As you build out features like CRUD (Create/Read/Update/Delete) it's often useful to construct variants on a base entity type. Nest provides several utility functions that perform type transformations to make this task more convenient.","title":"Mapped types"},{"location":"graphql/mapped-types/#partial","text":"When building input validation types (also called DTOs), it's often useful to build create and update variations on the same type. For example, the create variant may require all fields, while the update variant may make all fields optional. Nest provides the PartialType() utility function to make this task easier and minimize boilerplate. The PartialType() function returns a type (class) with all the properties of the input type set to optional. For example, suppose we have a create type as follows: @InputType () class CreateUserInput { @Field () email : string ; @Field () password : string ; @Field () firstName : string ; } By default, all of these fields are required. To create a type with the same fields, but with each one optional, use PartialType() passing the class reference ( CreateUserInput ) as an argument: @InputType () export class UpdateUserInput extends PartialType ( CreateUserInput ) {} info Hint The PartialType() function is imported from the @nestjs/graphql package. The PartialType() function takes an optional second argument that is a reference to a decorator factory. This argument can be used to change the decorator function applied to the resulting (child) class. If not specified, the child class effectively uses the same decorator as the parent class (the class referenced in the first argument). In the example above, we are extending CreateUserInput which is annotated with the @InputType() decorator. Since we want UpdateUserInput to also be treated as if it were decorated with @InputType() , we didn't need to pass InputType as the second argument. If the parent and child types are different, (e.g., the parent is decorated with @ObjectType ), we would pass InputType as the second argument. For example: @InputType () export class UpdateUserInput extends PartialType ( User , InputType ) {}","title":"Partial"},{"location":"graphql/mapped-types/#pick","text":"The PickType() function constructs a new type (class) by picking a set of properties from an input type. For example, suppose we start with a type like: @InputType () class CreateUserInput { @Field () email : string ; @Field () password : string ; @Field () firstName : string ; } We can pick a set of properties from this class using the PickType() utility function: @InputType () export class UpdateEmailInput extends PickType ( CreateUserInput , [ 'email' ] as const ) {} info Hint The PickType() function is imported from the @nestjs/graphql package.","title":"Pick"},{"location":"graphql/mapped-types/#omit","text":"The OmitType() function constructs a type by picking all properties from an input type and then removing a particular set of keys. For example, suppose we start with a type like: @InputType () class CreateUserInput { @Field () email : string ; @Field () password : string ; @Field () firstName : string ; } We can generate a derived type that has every property except email as shown below. In this construct, the second argument to OmitType is an array of property names. @InputType () export class UpdateUserInput extends OmitType ( CreateUserInput , [ 'email' ] as const ) {} info Hint The OmitType() function is imported from the @nestjs/graphql package.","title":"Omit"},{"location":"graphql/mapped-types/#intersection","text":"The IntersectionType() function combines two types into one new type (class). For example, suppose we start with two types like: @InputType () class CreateUserInput { @Field () email : string ; @Field () password : string ; } @ObjectType () export class AdditionalUserInfo { @Field () firstName : string ; @Field () lastName : string ; } We can generate a new type that combines all properties in both types. @InputType () export class UpdateUserInput extends IntersectionType ( CreateUserInput , AdditionalUserInfo ) {} info Hint The IntersectionType() function is imported from the @nestjs/graphql package.","title":"Intersection"},{"location":"graphql/mapped-types/#composition","text":"The type mapping utility functions are composable. For example, the following will produce a type (class) that has all of the properties of the CreateUserInput type except for email , and those properties will be set to optional: @InputType () export class UpdateUserInput extends PartialType ( OmitType ( CreateUserInput , [ 'email' ] as const ), ) {}","title":"Composition"},{"location":"graphql/mutations/","text":"Mutations \u00b6 Most discussions of GraphQL focus on data fetching, but any complete data platform needs a way to modify server-side data as well. In REST, any request could end up causing side-effects on the server, but best practice suggests we should not modify data in GET requests. GraphQL is similar - technically any query could be implemented to cause a data write. However, like REST, it's recommended to observe the convention that any operations that cause writes should be sent explicitly via a mutation (read more here ). The official Apollo documentation uses an upvotePost() mutation example. This mutation implements a method to increase a post's votes property value. To create an equivalent mutation in Nest, we'll make use of the @Mutation() decorator. Code first \u00b6 Let's add another method to the AuthorResolver used in the previous section (see resolvers ). @Mutation ( returns => Post ) async upvotePost ( @Args ({ name : 'postId' , type : () => Int }) postId : number ) { return this . postsService . upvoteById ({ id : postId }); } info Hint All decorators (e.g., @Resolver , @ResolveField , @Args , etc.) are exported from the @nestjs/graphql package. This will result in generating the following part of the GraphQL schema in SDL: type Mutation { upvotePost(postId: Int!): Post } The upvotePost() method takes postId ( Int ) as an argument and returns an updated Post entity. For the reasons explained in the resolvers section, we have to explicitly set the expected type. If the mutation needs to take an object as an argument, we can create an input type . The input type is a special kind of object type that can be passed in as an argument (read more here ). To declare an input type, use the @InputType() decorator. import { InputType , Field } from '@nestjs/graphql' ; @InputType () export class UpvotePostInput { @Field () postId : number ; } info Hint The @InputType() decorator takes an options object as an argument, so you can, for example, specify the input type's description. Note that, due to TypeScript's metadata reflection system limitations, you must either use the @Field decorator to manually indicate a type, or use a CLI plugin . We can then use this type in the resolver class: @Mutation ( returns => Post ) async upvotePost ( @Args ( 'upvotePostData' ) upvotePostData : UpvotePostInput , ) {} Schema first \u00b6 Let's extend our AuthorResolver used in the previous section (see resolvers ). @Mutation () async upvotePost ( @Args ( 'postId' ) postId : number ) { return this . postsService . upvoteById ({ id : postId }); } Note that we assumed above that the business logic has been moved to the PostsService (querying the post and incrementing its votes property). The logic inside the PostsService class can be as simple or sophisticated as needed. The main point of this example is to show how resolvers can interact with other providers. The last step is to add our mutation to the existing types definition. type Author { id: Int! firstName: String lastName: String posts: [Post] } type Post { id: Int! title: String votes: Int } type Query { author(id: Int!): Author } type Mutation { upvotePost(postId: Int!): Post } The upvotePost(postId: Int!): Post mutation is now available to be called as part of our application's GraphQL API.","title":"\u7a81\u53d8"},{"location":"graphql/mutations/#mutations","text":"Most discussions of GraphQL focus on data fetching, but any complete data platform needs a way to modify server-side data as well. In REST, any request could end up causing side-effects on the server, but best practice suggests we should not modify data in GET requests. GraphQL is similar - technically any query could be implemented to cause a data write. However, like REST, it's recommended to observe the convention that any operations that cause writes should be sent explicitly via a mutation (read more here ). The official Apollo documentation uses an upvotePost() mutation example. This mutation implements a method to increase a post's votes property value. To create an equivalent mutation in Nest, we'll make use of the @Mutation() decorator.","title":"Mutations"},{"location":"graphql/mutations/#code-first","text":"Let's add another method to the AuthorResolver used in the previous section (see resolvers ). @Mutation ( returns => Post ) async upvotePost ( @Args ({ name : 'postId' , type : () => Int }) postId : number ) { return this . postsService . upvoteById ({ id : postId }); } info Hint All decorators (e.g., @Resolver , @ResolveField , @Args , etc.) are exported from the @nestjs/graphql package. This will result in generating the following part of the GraphQL schema in SDL: type Mutation { upvotePost(postId: Int!): Post } The upvotePost() method takes postId ( Int ) as an argument and returns an updated Post entity. For the reasons explained in the resolvers section, we have to explicitly set the expected type. If the mutation needs to take an object as an argument, we can create an input type . The input type is a special kind of object type that can be passed in as an argument (read more here ). To declare an input type, use the @InputType() decorator. import { InputType , Field } from '@nestjs/graphql' ; @InputType () export class UpvotePostInput { @Field () postId : number ; } info Hint The @InputType() decorator takes an options object as an argument, so you can, for example, specify the input type's description. Note that, due to TypeScript's metadata reflection system limitations, you must either use the @Field decorator to manually indicate a type, or use a CLI plugin . We can then use this type in the resolver class: @Mutation ( returns => Post ) async upvotePost ( @Args ( 'upvotePostData' ) upvotePostData : UpvotePostInput , ) {}","title":"Code first"},{"location":"graphql/mutations/#schema-first","text":"Let's extend our AuthorResolver used in the previous section (see resolvers ). @Mutation () async upvotePost ( @Args ( 'postId' ) postId : number ) { return this . postsService . upvoteById ({ id : postId }); } Note that we assumed above that the business logic has been moved to the PostsService (querying the post and incrementing its votes property). The logic inside the PostsService class can be as simple or sophisticated as needed. The main point of this example is to show how resolvers can interact with other providers. The last step is to add our mutation to the existing types definition. type Author { id: Int! firstName: String lastName: String posts: [Post] } type Post { id: Int! title: String votes: Int } type Query { author(id: Int!): Author } type Mutation { upvotePost(postId: Int!): Post } The upvotePost(postId: Int!): Post mutation is now available to be called as part of our application's GraphQL API.","title":"Schema first"},{"location":"graphql/plugins/","text":"Plugins \u00b6 Plugins enable you to extend Apollo Server's core functionality by performing custom operations in response to certain events. Currently, these events correspond to individual phases of the GraphQL request lifecycle, and to the startup of Apollo Server itself (read more here ). For example, a basic logging plugin might log the GraphQL query string associated with each request that's sent to Apollo Server. Custom plugins \u00b6 To create a plugin, declare a class annotated with the @Plugin decorator exported from the @nestjs/graphql package. Also, for better code autocompletion, implement the ApolloServerPlugin interface from the apollo-server-plugin-base package. import { Plugin } from '@nestjs/graphql' ; import { ApolloServerPlugin , GraphQLRequestListener , } from 'apollo-server-plugin-base' ; @Plugin () export class LoggingPlugin implements ApolloServerPlugin { async requestDidStart () : Promise < GraphQLRequestListener > { console . log ( 'Request started' ); return { async willSendResponse () { console . log ( 'Will send response' ); }, }; } } With this in place, we can register the LoggingPlugin as a provider. @Module ({ providers : [ LoggingPlugin ], }) export class CommonModule {} Nest will automatically instantiate a plugin and apply it to the Apollo Server. Using external plugins \u00b6 There are several plugins provided out-of-the-box. To use an existing plugin, simply import it and add it to the plugins array: GraphQLModule . forRoot ({ // ... plugins : [ ApolloServerOperationRegistry ({ /* options */ })] }), info Hint The ApolloServerOperationRegistry plugin is exported from the apollo-server-plugin-operation-registry package.","title":"\u63d2\u4ef6"},{"location":"graphql/plugins/#plugins","text":"Plugins enable you to extend Apollo Server's core functionality by performing custom operations in response to certain events. Currently, these events correspond to individual phases of the GraphQL request lifecycle, and to the startup of Apollo Server itself (read more here ). For example, a basic logging plugin might log the GraphQL query string associated with each request that's sent to Apollo Server.","title":"Plugins"},{"location":"graphql/plugins/#custom-plugins","text":"To create a plugin, declare a class annotated with the @Plugin decorator exported from the @nestjs/graphql package. Also, for better code autocompletion, implement the ApolloServerPlugin interface from the apollo-server-plugin-base package. import { Plugin } from '@nestjs/graphql' ; import { ApolloServerPlugin , GraphQLRequestListener , } from 'apollo-server-plugin-base' ; @Plugin () export class LoggingPlugin implements ApolloServerPlugin { async requestDidStart () : Promise < GraphQLRequestListener > { console . log ( 'Request started' ); return { async willSendResponse () { console . log ( 'Will send response' ); }, }; } } With this in place, we can register the LoggingPlugin as a provider. @Module ({ providers : [ LoggingPlugin ], }) export class CommonModule {} Nest will automatically instantiate a plugin and apply it to the Apollo Server.","title":"Custom plugins"},{"location":"graphql/plugins/#using-external-plugins","text":"There are several plugins provided out-of-the-box. To use an existing plugin, simply import it and add it to the plugins array: GraphQLModule . forRoot ({ // ... plugins : [ ApolloServerOperationRegistry ({ /* options */ })] }), info Hint The ApolloServerOperationRegistry plugin is exported from the apollo-server-plugin-operation-registry package.","title":"Using external plugins"},{"location":"graphql/quick-start/","text":"Harnessing the power of TypeScript & GraphQL \u00b6 GraphQL is a powerful query language for APIs and a runtime for fulfilling those queries with your existing data. It's an elegant approach that solves many problems typically found with REST APIs. For background, we suggest reading this comparison between GraphQL and REST. GraphQL combined with TypeScript helps you develop better type safety with your GraphQL queries, giving you end-to-end typing. In this chapter, we assume a basic understanding of GraphQL, and focus on how to work with the built-in @nestjs/graphql module. The GraphQLModule is a wrapper around the Apollo server. We use this proven GraphQL package to provide a way to use GraphQL with Nest. Installation \u00b6 Start by installing the required packages: $ npm i @nestjs/graphql graphql@^15 apollo-server-express info Hint If using Fastify, instead of installing apollo-server-express , you should install apollo-server-fastify . warning Warning @nestjs/graphql@^9 is compatible with Apollo v3 (check out Apollo Server 3 migration guide for more details), while @nestjs/graphql@^8 only supports Apollo v2 (e.g., apollo-server-express@2.x.x package). Both versions (v9 and v8) are fully compatible with Nest v8 ( @nestjs/common@^8 , @nestjs/core@^8 , etc.). Overview \u00b6 Nest offers two ways of building GraphQL applications, the code first and the schema first methods. You should choose the one that works best for you. Most of the chapters in this GraphQL section are divided into two main parts: one you should follow if you adopt code first , and the other to be used if you adopt schema first . In the code first approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema. This approach is useful if you prefer to work exclusively with TypeScript and avoid context switching between language syntaxes. In the schema first approach, the source of truth is GraphQL SDL (Schema Definition Language) files. SDL is a language-agnostic way to share schema files between different platforms. Nest automatically generates your TypeScript definitions (using either classes or interfaces) based on the GraphQL schemas to reduce the need to write redundant boilerplate code. Getting started with GraphQL & TypeScript \u00b6 Once the packages are installed, we can import the GraphQLModule and configure it with the forRoot() static method. @ @filename () import { Module } from '@nestjs/common' ; import { GraphQLModule } from '@nestjs/graphql' ; @Module ({ imports : [ GraphQLModule . forRoot ({}), ], }) export class AppModule {} The forRoot() method takes an options object as an argument. These options are passed through to the underlying Apollo instance (read more about available settings here ). For example, if you want to disable the playground and turn off debug mode, pass the following options: @ @filename () import { Module } from '@nestjs/common' ; import { GraphQLModule } from '@nestjs/graphql' ; @Module ({ imports : [ GraphQLModule . forRoot ({ debug : false , playground : false , }), ], }) export class AppModule {} As mentioned, these options will be forwarded to the ApolloServer constructor. GraphQL playground \u00b6 The playground is a graphical, interactive, in-browser GraphQL IDE, available by default on the same URL as the GraphQL server itself. To access the playground, you need a basic GraphQL server configured and running. To see it now, you can install and build the working example here . Alternatively, if you're following along with these code samples, once you've completed the steps in the Resolvers chapter , you can access the playground. With that in place, and with your application running in the background, you can then open your web browser and navigate to http://localhost:3000/graphql (host and port may vary depending on your configuration). You will then see the GraphQL playground, as shown below. Multiple endpoints \u00b6 Another useful feature of the @nestjs/graphql module is the ability to serve multiple endpoints at once. This lets you decide which modules should be included in which endpoint. By default, GraphQL searches for resolvers throughout the whole app. To limit this scan to only a subset of modules, use the include property. GraphQLModule . forRoot ({ include : [ CatsModule ], }), warning Warning If you use the apollo-server-fastify package with multiple GraphQL endpoints in a single application, make sure to enable the disableHealthCheck setting in the GraphQLModule configuration. Code first \u00b6 In the code first approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema. To use the code first approach, start by adding the autoSchemaFile property to the options object: GraphQLModule . forRoot ({ autoSchemaFile : join ( process . cwd (), 'src/schema.gql' ), }), The autoSchemaFile property value is the path where your automatically generated schema will be created. Alternatively, the schema can be generated on-the-fly in memory. To enable this, set the autoSchemaFile property to true : GraphQLModule . forRoot ({ autoSchemaFile : true , }), By default, the types in the generated schema will be in the order they are defined in the included modules. To sort the schema lexicographically, set the sortSchema property to true : GraphQLModule . forRoot ({ autoSchemaFile : join ( process . cwd (), 'src/schema.gql' ), sortSchema : true , }), Example \u00b6 A fully working code first sample is available here . Schema first \u00b6 To use the schema first approach, start by adding a typePaths property to the options object. The typePaths property indicates where the GraphQLModule should look for GraphQL SDL schema definition files you'll be writing. These files will be combined in memory; this allows you to split your schemas into several files and locate them near their resolvers. GraphQLModule . forRoot ({ typePaths : [ './**/*.graphql' ], }), You will typically also need to have TypeScript definitions (classes and interfaces) that correspond to the GraphQL SDL types. Creating the corresponding TypeScript definitions by hand is redundant and tedious. It leaves us without a single source of truth -- each change made within SDL forces us to adjust TypeScript definitions as well. To address this, the @nestjs/graphql package can automatically generate TypeScript definitions from the abstract syntax tree ( AST ). To enable this feature, add the definitions options property when configuring the GraphQLModule . GraphQLModule . forRoot ({ typePaths : [ './**/*.graphql' ], definitions : { path : join ( process . cwd (), 'src/graphql.ts' ), }, }), The path property of the definitions object indicates where to save generated TypeScript output. By default, all generated TypeScript types are created as interfaces. To generate classes instead, specify the outputAs property with a value of 'class' . GraphQLModule . forRoot ({ typePaths : [ './**/*.graphql' ], definitions : { path : join ( process . cwd (), 'src/graphql.ts' ), outputAs : 'class' , }, }), The above approach dynamically generates TypeScript definitions each time the application starts. Alternatively, it may be preferable to build a simple script to generate these on demand. For example, assume we create the following script as generate-typings.ts : import { GraphQLDefinitionsFactory } from '@nestjs/graphql' ; import { join } from 'path' ; const definitionsFactory = new GraphQLDefinitionsFactory (); definitionsFactory . generate ({ typePaths : [ './src/**/*.graphql' ], path : join ( process . cwd (), 'src/graphql.ts' ), outputAs : 'class' , }); Now you can run this script on demand: $ ts-node generate-typings info Hint You can compile the script beforehand (e.g., with tsc ) and use node to execute it. To enable watch mode for the script (to automatically generate typings whenever any .graphql file changes), pass the watch option to the generate() method. definitionsFactory . generate ({ typePaths : [ './src/**/*.graphql' ], path : join ( process . cwd (), 'src/graphql.ts' ), outputAs : 'class' , watch : true , }); To automatically generate the additional __typename field for every object type, enable the emitTypenameField option. definitionsFactory . generate ({ // ..., emitTypenameField : true , }); To generate resolvers (queries, mutations, subscriptions) as plain fields without arguments, enable the skipResolverArgs option. definitionsFactory . generate ({ // ..., skipResolverArgs : true , }); Apollo Sandbox \u00b6 To use Apollo Sandbox instead of the graphql-playground as a GraphQL IDE for local development, use the following configuration: import { Module } from '@nestjs/common' ; import { GraphQLModule } from '@nestjs/graphql' ; import { ApolloServerPluginLandingPageLocalDefault } from 'apollo-server-core' ; @Module ({ imports : [ GraphQLModule . forRoot ({ playground : false , plugins : [ ApolloServerPluginLandingPageLocalDefault ()], }), ], }) export class AppModule {} Example \u00b6 A fully working schema first sample is available here . Accessing generated schema \u00b6 In some circumstances (for example end-to-end tests), you may want to get a reference to the generated schema object. In end-to-end tests, you can then run queries using the graphql object without using any HTTP listeners. You can access the generated schema (in either the code first or schema first approach), using the GraphQLSchemaHost class: const { schema } = app . get ( GraphQLSchemaHost ); info Hint You must call the GraphQLSchemaHost#schema getter after the application has been initialized (after the onModuleInit hook has been triggered by either the app.listen() or app.init() method). Async configuration \u00b6 When you need to pass module options asynchronously instead of statically, use the forRootAsync() method. As with most dynamic modules, Nest provides several techniques to deal with async configuration. One technique is to use a factory function: GraphQLModule . forRootAsync ({ useFactory : () => ({ typePaths : [ './**/*.graphql' ], }), }), Like other factory providers, our factory function can be async and can inject dependencies through inject . GraphQLModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ typePaths : configService.getString ( 'GRAPHQL_TYPE_PATHS' ), }), inject : [ ConfigService ], }), Alternatively, you can configure the GraphQLModule using a class instead of a factory, as shown below: GraphQLModule . forRootAsync ({ useClass : GqlConfigService , }), The construction above instantiates GqlConfigService inside GraphQLModule , using it to create options object. Note that in this example, the GqlConfigService has to implement the GqlOptionsFactory interface, as shown below. The GraphQLModule will call the createGqlOptions() method on the instantiated object of the supplied class. @Injectable () class GqlConfigService implements GqlOptionsFactory { createGqlOptions () : GqlModuleOptions { return { typePaths : [ './**/*.graphql' ], }; } } If you want to reuse an existing options provider instead of creating a private copy inside the GraphQLModule , use the useExisting syntax. GraphQLModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }),","title":"\u5feb\u901f\u542f\u52a8"},{"location":"graphql/quick-start/#harnessing-the-power-of-typescript-graphql","text":"GraphQL is a powerful query language for APIs and a runtime for fulfilling those queries with your existing data. It's an elegant approach that solves many problems typically found with REST APIs. For background, we suggest reading this comparison between GraphQL and REST. GraphQL combined with TypeScript helps you develop better type safety with your GraphQL queries, giving you end-to-end typing. In this chapter, we assume a basic understanding of GraphQL, and focus on how to work with the built-in @nestjs/graphql module. The GraphQLModule is a wrapper around the Apollo server. We use this proven GraphQL package to provide a way to use GraphQL with Nest.","title":"Harnessing the power of TypeScript &amp; GraphQL"},{"location":"graphql/quick-start/#installation","text":"Start by installing the required packages: $ npm i @nestjs/graphql graphql@^15 apollo-server-express info Hint If using Fastify, instead of installing apollo-server-express , you should install apollo-server-fastify . warning Warning @nestjs/graphql@^9 is compatible with Apollo v3 (check out Apollo Server 3 migration guide for more details), while @nestjs/graphql@^8 only supports Apollo v2 (e.g., apollo-server-express@2.x.x package). Both versions (v9 and v8) are fully compatible with Nest v8 ( @nestjs/common@^8 , @nestjs/core@^8 , etc.).","title":"Installation"},{"location":"graphql/quick-start/#overview","text":"Nest offers two ways of building GraphQL applications, the code first and the schema first methods. You should choose the one that works best for you. Most of the chapters in this GraphQL section are divided into two main parts: one you should follow if you adopt code first , and the other to be used if you adopt schema first . In the code first approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema. This approach is useful if you prefer to work exclusively with TypeScript and avoid context switching between language syntaxes. In the schema first approach, the source of truth is GraphQL SDL (Schema Definition Language) files. SDL is a language-agnostic way to share schema files between different platforms. Nest automatically generates your TypeScript definitions (using either classes or interfaces) based on the GraphQL schemas to reduce the need to write redundant boilerplate code.","title":"Overview"},{"location":"graphql/quick-start/#getting-started-with-graphql-typescript","text":"Once the packages are installed, we can import the GraphQLModule and configure it with the forRoot() static method. @ @filename () import { Module } from '@nestjs/common' ; import { GraphQLModule } from '@nestjs/graphql' ; @Module ({ imports : [ GraphQLModule . forRoot ({}), ], }) export class AppModule {} The forRoot() method takes an options object as an argument. These options are passed through to the underlying Apollo instance (read more about available settings here ). For example, if you want to disable the playground and turn off debug mode, pass the following options: @ @filename () import { Module } from '@nestjs/common' ; import { GraphQLModule } from '@nestjs/graphql' ; @Module ({ imports : [ GraphQLModule . forRoot ({ debug : false , playground : false , }), ], }) export class AppModule {} As mentioned, these options will be forwarded to the ApolloServer constructor.","title":"Getting started with GraphQL &amp; TypeScript"},{"location":"graphql/quick-start/#graphql-playground","text":"The playground is a graphical, interactive, in-browser GraphQL IDE, available by default on the same URL as the GraphQL server itself. To access the playground, you need a basic GraphQL server configured and running. To see it now, you can install and build the working example here . Alternatively, if you're following along with these code samples, once you've completed the steps in the Resolvers chapter , you can access the playground. With that in place, and with your application running in the background, you can then open your web browser and navigate to http://localhost:3000/graphql (host and port may vary depending on your configuration). You will then see the GraphQL playground, as shown below.","title":"GraphQL playground"},{"location":"graphql/quick-start/#multiple-endpoints","text":"Another useful feature of the @nestjs/graphql module is the ability to serve multiple endpoints at once. This lets you decide which modules should be included in which endpoint. By default, GraphQL searches for resolvers throughout the whole app. To limit this scan to only a subset of modules, use the include property. GraphQLModule . forRoot ({ include : [ CatsModule ], }), warning Warning If you use the apollo-server-fastify package with multiple GraphQL endpoints in a single application, make sure to enable the disableHealthCheck setting in the GraphQLModule configuration.","title":"Multiple endpoints"},{"location":"graphql/quick-start/#code-first","text":"In the code first approach, you use decorators and TypeScript classes to generate the corresponding GraphQL schema. To use the code first approach, start by adding the autoSchemaFile property to the options object: GraphQLModule . forRoot ({ autoSchemaFile : join ( process . cwd (), 'src/schema.gql' ), }), The autoSchemaFile property value is the path where your automatically generated schema will be created. Alternatively, the schema can be generated on-the-fly in memory. To enable this, set the autoSchemaFile property to true : GraphQLModule . forRoot ({ autoSchemaFile : true , }), By default, the types in the generated schema will be in the order they are defined in the included modules. To sort the schema lexicographically, set the sortSchema property to true : GraphQLModule . forRoot ({ autoSchemaFile : join ( process . cwd (), 'src/schema.gql' ), sortSchema : true , }),","title":"Code first"},{"location":"graphql/quick-start/#example","text":"A fully working code first sample is available here .","title":"Example"},{"location":"graphql/quick-start/#schema-first","text":"To use the schema first approach, start by adding a typePaths property to the options object. The typePaths property indicates where the GraphQLModule should look for GraphQL SDL schema definition files you'll be writing. These files will be combined in memory; this allows you to split your schemas into several files and locate them near their resolvers. GraphQLModule . forRoot ({ typePaths : [ './**/*.graphql' ], }), You will typically also need to have TypeScript definitions (classes and interfaces) that correspond to the GraphQL SDL types. Creating the corresponding TypeScript definitions by hand is redundant and tedious. It leaves us without a single source of truth -- each change made within SDL forces us to adjust TypeScript definitions as well. To address this, the @nestjs/graphql package can automatically generate TypeScript definitions from the abstract syntax tree ( AST ). To enable this feature, add the definitions options property when configuring the GraphQLModule . GraphQLModule . forRoot ({ typePaths : [ './**/*.graphql' ], definitions : { path : join ( process . cwd (), 'src/graphql.ts' ), }, }), The path property of the definitions object indicates where to save generated TypeScript output. By default, all generated TypeScript types are created as interfaces. To generate classes instead, specify the outputAs property with a value of 'class' . GraphQLModule . forRoot ({ typePaths : [ './**/*.graphql' ], definitions : { path : join ( process . cwd (), 'src/graphql.ts' ), outputAs : 'class' , }, }), The above approach dynamically generates TypeScript definitions each time the application starts. Alternatively, it may be preferable to build a simple script to generate these on demand. For example, assume we create the following script as generate-typings.ts : import { GraphQLDefinitionsFactory } from '@nestjs/graphql' ; import { join } from 'path' ; const definitionsFactory = new GraphQLDefinitionsFactory (); definitionsFactory . generate ({ typePaths : [ './src/**/*.graphql' ], path : join ( process . cwd (), 'src/graphql.ts' ), outputAs : 'class' , }); Now you can run this script on demand: $ ts-node generate-typings info Hint You can compile the script beforehand (e.g., with tsc ) and use node to execute it. To enable watch mode for the script (to automatically generate typings whenever any .graphql file changes), pass the watch option to the generate() method. definitionsFactory . generate ({ typePaths : [ './src/**/*.graphql' ], path : join ( process . cwd (), 'src/graphql.ts' ), outputAs : 'class' , watch : true , }); To automatically generate the additional __typename field for every object type, enable the emitTypenameField option. definitionsFactory . generate ({ // ..., emitTypenameField : true , }); To generate resolvers (queries, mutations, subscriptions) as plain fields without arguments, enable the skipResolverArgs option. definitionsFactory . generate ({ // ..., skipResolverArgs : true , });","title":"Schema first"},{"location":"graphql/quick-start/#apollo-sandbox","text":"To use Apollo Sandbox instead of the graphql-playground as a GraphQL IDE for local development, use the following configuration: import { Module } from '@nestjs/common' ; import { GraphQLModule } from '@nestjs/graphql' ; import { ApolloServerPluginLandingPageLocalDefault } from 'apollo-server-core' ; @Module ({ imports : [ GraphQLModule . forRoot ({ playground : false , plugins : [ ApolloServerPluginLandingPageLocalDefault ()], }), ], }) export class AppModule {}","title":"Apollo Sandbox"},{"location":"graphql/quick-start/#example_1","text":"A fully working schema first sample is available here .","title":"Example"},{"location":"graphql/quick-start/#accessing-generated-schema","text":"In some circumstances (for example end-to-end tests), you may want to get a reference to the generated schema object. In end-to-end tests, you can then run queries using the graphql object without using any HTTP listeners. You can access the generated schema (in either the code first or schema first approach), using the GraphQLSchemaHost class: const { schema } = app . get ( GraphQLSchemaHost ); info Hint You must call the GraphQLSchemaHost#schema getter after the application has been initialized (after the onModuleInit hook has been triggered by either the app.listen() or app.init() method).","title":"Accessing generated schema"},{"location":"graphql/quick-start/#async-configuration","text":"When you need to pass module options asynchronously instead of statically, use the forRootAsync() method. As with most dynamic modules, Nest provides several techniques to deal with async configuration. One technique is to use a factory function: GraphQLModule . forRootAsync ({ useFactory : () => ({ typePaths : [ './**/*.graphql' ], }), }), Like other factory providers, our factory function can be async and can inject dependencies through inject . GraphQLModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ typePaths : configService.getString ( 'GRAPHQL_TYPE_PATHS' ), }), inject : [ ConfigService ], }), Alternatively, you can configure the GraphQLModule using a class instead of a factory, as shown below: GraphQLModule . forRootAsync ({ useClass : GqlConfigService , }), The construction above instantiates GqlConfigService inside GraphQLModule , using it to create options object. Note that in this example, the GqlConfigService has to implement the GqlOptionsFactory interface, as shown below. The GraphQLModule will call the createGqlOptions() method on the instantiated object of the supplied class. @Injectable () class GqlConfigService implements GqlOptionsFactory { createGqlOptions () : GqlModuleOptions { return { typePaths : [ './**/*.graphql' ], }; } } If you want to reuse an existing options provider instead of creating a private copy inside the GraphQLModule , use the useExisting syntax. GraphQLModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }),","title":"Async configuration"},{"location":"graphql/resolvers-map/","text":"Resolvers \u00b6 Resolvers provide the instructions for turning a GraphQL operation (a query, mutation, or subscription) into data. They return the same shape of data we specify in our schema -- either synchronously or as a promise that resolves to a result of that shape. Typically, you create a resolver map manually. The @nestjs/graphql package, on the other hand, generates a resolver map automatically using the metadata provided by decorators you use to annotate classes. To demonstrate the process of using the package features to create a GraphQL API, we'll create a simple authors API. Code first \u00b6 In the code first approach, we don't follow the typical process of creating our GraphQL schema by writing GraphQL SDL by hand. Instead, we use TypeScript decorators to generate the SDL from TypeScript class definitions. The @nestjs/graphql package reads the metadata defined through the decorators and automatically generates the schema for you. Object types \u00b6 Most of the definitions in a GraphQL schema are object types . Each object type you define should represent a domain object that an application client might need to interact with. For example, our sample API needs to be able to fetch a list of authors and their posts, so we should define the Author type and Post type to support this functionality. If we were using the schema first approach, we'd define such a schema with SDL like this: type Author { id: Int! firstName: String lastName: String posts: [Post!]! } In this case, using the code first approach, we define schemas using TypeScript classes and using TypeScript decorators to annotate the fields of those classes. The equivalent of the above SDL in the code first approach is: @ @filename ( authors / models / author . model ) import { Field , Int , ObjectType } from '@nestjs/graphql' ; import { Post } from './post' ; @ObjectType () export class Author { @Field ( type => Int ) id : number ; @Field ({ nullable : true }) firstName? : string ; @Field ({ nullable : true }) lastName? : string ; @Field ( type => [ Post ]) posts : Post []; } info Hint TypeScript's metadata reflection system has several limitations which make it impossible, for instance, to determine what properties a class consists of or recognize whether a given property is optional or required. Because of these limitations, we must either explicitly use the @Field() decorator in our schema definition classes to provide metadata about each field's GraphQL type and optionality, or use a CLI plugin to generate these for us. The Author object type, like any class, is made of a collection of fields, with each field declaring a type. A field's type corresponds to a GraphQL type . A field's GraphQL type can be either another object type or a scalar type. A GraphQL scalar type is a primitive (like ID , String , Boolean , or Int ) that resolves to a single value. info Hint In addition to GraphQL's built-in scalar types, you can define custom scalar types (read more ). The above Author object type definition will cause Nest to generate the SDL we showed above: type Author { id: Int! firstName: String lastName: String posts: [Post!]! } The @Field() decorator accepts an optional type function (e.g., type => Int ), and optionally an options object. The type function is required when there's the potential for ambiguity between the TypeScript type system and the GraphQL type system. Specifically: it is not required for string and boolean types; it is required for number (which must be mapped to either a GraphQL Int or Float ). The type function should simply return the desired GraphQL type (as shown in various examples in these chapters). The options object can have any of the following key/value pairs: nullable : for specifying whether a field is nullable (in SDL, each field is non-nullable by default); boolean description : for setting a field description; string deprecationReason : for marking a field as deprecated; string For example: @Field ({ description : `Book title` , deprecationReason : 'Not useful in v2 schema' }) title : string ; info Hint You can also add a description to, or deprecate, the whole object type: @ObjectType({{ '{' }} description: 'Author model' {{ '}' }}) . When the field is an array, we must manually indicate the array type in the Field() decorator's type function, as shown below: @Field ( type => [ Post ]) posts : Post []; info Hint Using array bracket notation ( [ ] ), we can indicate the depth of the array. For example, using [[Int]] would represent an integer matrix. To declare that an array's items (not the array itself) are nullable, set the nullable property to 'items' as shown below: @Field ( type => [ Post ], { nullable : 'items' }) posts : Post []; info Hint If both the array and its items are nullable, set nullable to 'itemsAndList' instead. Now that the Author object type is created, let's define the Post object type. @ @filename ( posts / models / post . model ) import { Field , Int , ObjectType } from '@nestjs/graphql' ; @ObjectType () export class Post { @Field ( type => Int ) id : number ; @Field () title : string ; @Field ( type => Int , { nullable : true }) votes? : number ; } The Post object type will result in generating the following part of the GraphQL schema in SDL: type Post { id: Int! title: String! votes: Int } Code first resolver \u00b6 At this point, we've defined the objects (type definitions) that can exist in our data graph, but clients don't yet have a way to interact with those objects. To address that, we need to create a resolver class. In the code first method, a resolver class both defines resolver functions and generates the Query type . This will be clear as we work through the example below: @ @filename ( authors / authors . resolver ) @Resolver ( of => Author ) export class AuthorsResolver { constructor ( private authorsService : AuthorsService , private postsService : PostsService , ) {} @Query ( returns => Author ) async author ( @Args ( 'id' , { type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } @ResolveField () async posts ( @Parent () author : Author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } } info Hint All decorators (e.g., @Resolver , @ResolveField , @Args , etc.) are exported from the @nestjs/graphql package. You can define multiple resolver classes. Nest will combine these at run time. See the module section below for more on code organization. warning Note The logic inside the AuthorsService and PostsService classes can be as simple or sophisticated as needed. The main point of this example is to show how to construct resolvers and how they can interact with other providers. In the example above, we created the AuthorsResolver which defines one query resolver function and one field resolver function. To create a resolver, we create a class with resolver functions as methods, and annotate the class with the @Resolver() decorator. In this example, we defined a query handler to get the author object based on the id sent in the request. To specify that the method is a query handler, use the @Query() decorator. The argument passed to the @Resolver() decorator is optional, but comes into play when our graph becomes non-trivial. It's used to supply a parent object used by field resolver functions as they traverse down through an object graph. In our example, since the class includes a field resolver function (for the posts property of the Author object type), we must supply the @Resolver() decorator with a value to indicate which class is the parent type (i.e., the corresponding ObjectType class name) for all field resolvers defined within this class. As should be clear from the example, when writing a field resolver function, it's necessary to access the parent object (the object the field being resolved is a member of). In this example, we populate an author's posts array with a field resolver that calls a service which takes the author's id as an argument. Hence the need to identify the parent object in the @Resolver() decorator. Note the corresponding use of the @Parent() method parameter decorator to then extract a reference to that parent object in the field resolver. We can define multiple @Query() resolver functions (both within this class, and in any other resolver class), and they will be aggregated into a single Query type definition in the generated SDL along with the appropriate entries in the resolver map. This allows you to define queries close to the models and services that they use, and to keep them well organized in modules. info Hint Nest CLI provides a generator (schematic) that automatically generates all the boilerplate code to help us avoid doing all of this, and make the developer experience much simpler. Read more about this feature here . Query type names \u00b6 In the above examples, the @Query() decorator generates a GraphQL schema query type name based on the method name. For example, consider the following construction from the example above: @Query ( returns => Author ) async author ( @Args ( 'id' , { type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } This generates the following entry for the author query in our schema (the query type uses the same name as the method name): type Query { author(id: Int!): Author } info Hint Learn more about GraphQL queries here . Conventionally, we prefer to decouple these names; for example, we prefer to use a name like getAuthor() for our query handler method, but still use author for our query type name. The same applies to our field resolvers. We can easily do this by passing the mapping names as arguments of the @Query() and @ResolveField() decorators, as shown below: @ @filename ( authors / authors . resolver ) @Resolver ( of => Author ) export class AuthorsResolver { constructor ( private authorsService : AuthorsService , private postsService : PostsService , ) {} @Query ( returns => Author , { name : 'author' }) async getAuthor ( @Args ( 'id' , { type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } @ResolveField ( 'posts' , returns => [ Post ]) async getPosts ( @Parent () author : Author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } } The getAuthor handler method above will result in generating the following part of the GraphQL schema in SDL: type Query { author(id: Int!): Author } Query decorator options \u00b6 The @Query() decorator's options object (where we pass {{ '{' }}name: 'author'{{ '}' }} above) accepts a number of key/value pairs: name : name of the query; a string description : a description that will be used to generate GraphQL schema documentation (e.g., in GraphQL playground); a string deprecationReason : sets query metadata to show the query as deprecated (e.g., in GraphQL playground); a string nullable : whether the query can return a null data response; boolean or 'items' or 'itemsAndList' (see above for details of 'items' and 'itemsAndList' ) Args decorator options \u00b6 Use the @Args() decorator to extract arguments from a request for use in the method handler. This works in a very similar fashion to REST route parameter argument extraction . Usually your @Args() decorator will be simple, and not require an object argument as seen with the getAuthor() method above. For example, if the type of an identifier is string, the following construction is sufficient, and simply plucks the named field from the inbound GraphQL request for use as a method argument. @Args ( 'id' ) id : string In the getAuthor() case, the number type is used, which presents a challenge. The number TypeScript type doesn't give us enough information about the expected GraphQL representation (e.g., Int vs. Float ). Thus we have to explicitly pass the type reference. We do that by passing a second argument to the Args() decorator, containing argument options, as shown below: @Query ( returns => Author , { name : 'author' }) async getAuthor ( @Args ( 'id' , { type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } The options object allows us to specify the following optional key value pairs: type : a function returning the GraphQL type defaultValue : a default value; any description : description metadata; string deprecationReason : to deprecate a field and provide meta data describing why; string nullable : whether the field is nullable Query handler methods can take multiple arguments. Let's imagine that we want to fetch an author based on its firstName and lastName . In this case, we can call @Args twice: getAuthor ( @Args ( 'firstName' , { nullable : true }) firstName? : string , @Args ( 'lastName' , { defaultValue : '' }) lastName? : string , ) {} Dedicated arguments class \u00b6 With inline @Args() calls, code like the example above becomes bloated. Instead, you can create a dedicated GetAuthorArgs arguments class and access it in the handler method as follows: @Args () args : GetAuthorArgs Create the GetAuthorArgs class using @ArgsType() as shown below: @ @filename ( authors / dto / get - author . args ) import { MinLength } from 'class-validator' ; import { Field , ArgsType } from '@nestjs/graphql' ; @ArgsType () class GetAuthorArgs { @Field ({ nullable : true }) firstName? : string ; @Field ({ defaultValue : '' }) @MinLength ( 3 ) lastName : string ; } info Hint Again, due to TypeScript's metadata reflection system limitations, it's required to either use the @Field decorator to manually indicate type and optionality, or use a CLI plugin . This will result in generating the following part of the GraphQL schema in SDL: type Query { author(firstName: String, lastName: String = ''): Author } info Hint Note that arguments classes like GetAuthorArgs play very well with the ValidationPipe (read more ). Class inheritance \u00b6 You can use standard TypeScript class inheritance to create base classes with generic utility type features (fields and field properties, validations, etc.) that can be extended. For example, you may have a set of pagination related arguments that always include the standard offset and limit fields, but also other index fields that are type-specific. You can set up a class hierarchy as shown below. Base @ArgsType() class: @ArgsType () class PaginationArgs { @Field (( type ) => Int ) offset : number = 0 ; @Field (( type ) => Int ) limit : number = 10 ; } Type specific sub-class of the base @ArgsType() class: @ArgsType () class GetAuthorArgs extends PaginationArgs { @Field ({ nullable : true }) firstName? : string ; @Field ({ defaultValue : '' }) @MinLength ( 3 ) lastName : string ; } The same approach can be taken with @ObjectType() objects. Define generic properties on the base class: @ObjectType () class Character { @Field (( type ) => Int ) id : number ; @Field () name : string ; } Add type-specific properties on sub-classes: @ObjectType () class Warrior extends Character { @Field () level : number ; } You can use inheritance with a resolver as well. You can ensure type safety by combining inheritance and TypeScript generics. For example, to create a base class with a generic findAll query, use a construction like this: function BaseResolver < T extends Type < unknown >> ( classRef : T ) : any { @Resolver ({ isAbstract : true }) abstract class BaseResolverHost { @Query (( type ) => [ classRef ], { name : `findAll ${ classRef . name } ` }) async findAll () : Promise < T [] > { return []; } } return BaseResolverHost ; } Note the following: an explicit return type ( any above) is required: otherwise TypeScript complains about the usage of a private class definition. Recommended: define an interface instead of using any . Type is imported from the @nestjs/common package The isAbstract: true property indicates that SDL (Schema Definition Language statements) shouldn't be generated for this class. Note, you can set this property for other types as well to suppress SDL generation. Here's how you could generate a concrete sub-class of the BaseResolver : @Resolver (( of ) => Recipe ) export class RecipesResolver extends BaseResolver ( Recipe ) { constructor ( private recipesService : RecipesService ) { super (); } } This construct would generated the following SDL: type Query { findAllRecipe: [Recipe!]! } Generics \u00b6 We saw one use of generics above. This powerful TypeScript feature can be used to create useful abstractions. For example, here's a sample cursor-based pagination implementation based on this documentation : import { Field , ObjectType , Int } from '@nestjs/graphql' ; import { Type } from '@nestjs/common' ; interface IEdgeType < T > { cursor : string ; node : T ; } export interface IPaginatedType < T > { edges : IEdgeType < T > []; nodes : T []; totalCount : number ; hasNextPage : boolean ; } export function Paginated < T > ( classRef : Type < T > ) : Type < IPaginatedType < T >> { @ObjectType ( ` ${ classRef . name } Edge` ) abstract class EdgeType { @Field (( type ) => String ) cursor : string ; @Field (( type ) => classRef ) node : T ; } @ObjectType ({ isAbstract : true }) abstract class PaginatedType implements IPaginatedType < T > { @Field (( type ) => [ EdgeType ], { nullable : true }) edges : EdgeType []; @Field (( type ) => [ classRef ], { nullable : true }) nodes : T []; @Field (( type ) => Int ) totalCount : number ; @Field () hasNextPage : boolean ; } return PaginatedType as Type < IPaginatedType < T >> ; } With the above base class defined, we can now easily create specialized types that inherit this behavior. For example: @ObjectType () class PaginatedAuthor extends Paginated ( Author ) {} Schema first \u00b6 As mentioned in the previous chapter, in the schema first approach we start by manually defining schema types in SDL (read more ). Consider the following SDL type definitions. info Hint For convenience in this chapter, we've aggregated all of the SDL in one location (e.g., one .graphql file, as shown below). In practice, you may find it appropriate to organize your code in a modular fashion. For example, it can be helpful to create individual SDL files with type definitions representing each domain entity, along with related services, resolver code, and the Nest module definition class, in a dedicated directory for that entity. Nest will aggregate all the individual schema type definitions at run time. type Author { id: Int! firstName: String lastName: String posts: [Post] } type Post { id: Int! title: String! votes: Int } type Query { author(id: Int!): Author } Schema first resolver \u00b6 The schema above exposes a single query - author(id: Int!): Author . info Hint Learn more about GraphQL queries here . Let's now create an AuthorsResolver class that resolves author queries: @ @filename ( authors / authors . resolver ) @Resolver ( 'Author' ) export class AuthorsResolver { constructor ( private authorsService : AuthorsService , private postsService : PostsService , ) {} @Query () async author ( @Args ( 'id' ) id : number ) { return this . authorsService . findOneById ( id ); } @ResolveField () async posts ( @Parent () author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } } info Hint All decorators (e.g., @Resolver , @ResolveField , @Args , etc.) are exported from the @nestjs/graphql package. warning Note The logic inside the AuthorsService and PostsService classes can be as simple or sophisticated as needed. The main point of this example is to show how to construct resolvers and how they can interact with other providers. The @Resolver() decorator is required. It takes an optional string argument with the name of a class. This class name is required whenever the class includes @ResolveField() decorators to inform Nest that the decorated method is associated with a parent type (the Author type in our current example). Alternatively, instead of setting @Resolver() at the top of the class, this can be done for each method: @Resolver ( 'Author' ) @ResolveField () async posts ( @Parent () author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } In this case ( @Resolver() decorator at the method level), if you have multiple @ResolveField() decorators inside a class, you must add @Resolver() to all of them. This is not considered the best practice (as it creates extra overhead). info Hint Any class name argument passed to @Resolver() does not affect queries ( @Query() decorator) or mutations ( @Mutation() decorator). warning Warning Using the @Resolver decorator at the method level is not supported with the code first approach. In the above examples, the @Query() and @ResolveField() decorators are associated with GraphQL schema types based on the method name. For example, consider the following construction from the example above: @Query () async author ( @Args ( 'id' ) id : number ) { return this . authorsService . findOneById ( id ); } This generates the following entry for the author query in our schema (the query type uses the same name as the method name): type Query { author(id: Int!): Author } Conventionally, we would prefer to decouple these, using names like getAuthor() or getPosts() for our resolver methods. We can easily do this by passing the mapping name as an argument to the decorator, as shown below: @ @filename ( authors / authors . resolver ) @Resolver ( 'Author' ) export class AuthorsResolver { constructor ( private authorsService : AuthorsService , private postsService : PostsService , ) {} @Query ( 'author' ) async getAuthor ( @Args ( 'id' ) id : number ) { return this . authorsService . findOneById ( id ); } @ResolveField ( 'posts' ) async getPosts ( @Parent () author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } } info Hint Nest CLI provides a generator (schematic) that automatically generates all the boilerplate code to help us avoid doing all of this, and make the developer experience much simpler. Read more about this feature here . Generating types \u00b6 Assuming that we use the schema first approach and have enabled the typings generation feature (with outputAs: 'class' as shown in the previous chapter), once you run the application it will generate the following file (in the location you specified in the GraphQLModule.forRoot() method). For example, in src/graphql.ts : @ @filename ( graphql ) export class Author { id : number ; firstName? : string ; lastName? : string ; posts? : Post []; } export class Post { id : number ; title : string ; votes? : number ; } export abstract class IQuery { abstract author ( id : number ) : Author | Promise < Author > ; } By generating classes (instead of the default technique of generating interfaces), you can use declarative validation decorators in combination with the schema first approach, which is an extremely useful technique (read more ). For example, you could add class-validator decorators to the generated CreatePostInput class as shown below to enforce minimum and maximum string lengths on the title field: import { MinLength , MaxLength } from 'class-validator' ; export class CreatePostInput { @MinLength ( 3 ) @MaxLength ( 50 ) title : string ; } warning Notice To enable auto-validation of your inputs (and parameters), use ValidationPipe . Read more about validation here and more specifically about pipes here . However, if you add decorators directly to the automatically generated file, they will be overwritten each time the file is generated. Instead, create a separate file and simply extend the generated class. import { MinLength , MaxLength } from 'class-validator' ; import { Post } from '../../graphql.ts' ; export class CreatePostInput extends Post { @MinLength ( 3 ) @MaxLength ( 50 ) title : string ; } GraphQL argument decorators \u00b6 We can access the standard GraphQL resolver arguments using dedicated decorators. Below is a comparison of the Nest decorators and the plain Apollo parameters they represent. @Root() and @Parent() root / parent @Context(param?: string) context / context[param] @Info(param?: string) info / info[param] @Args(param?: string) args / args[param] These arguments have the following meanings: root : an object that contains the result returned from the resolver on the parent field, or, in the case of a top-level Query field, the rootValue passed from the server configuration. context : an object shared by all resolvers in a particular query; typically used to contain per-request state. info : an object that contains information about the execution state of the query. args : an object with the arguments passed into the field in the query. Module \u00b6 Once we're done with the above steps, we have declaratively specified all the information needed by the GraphQLModule to generate a resolver map. The GraphQLModule uses reflection to introspect the meta data provided via the decorators, and transforms classes into the correct resolver map automatically. The only other thing you need to take care of is to provide (i.e., list as a provider in some module) the resolver class(es) ( AuthorsResolver ), and importing the module ( AuthorsModule ) somewhere, so Nest will be able to utilize it. For example, we can do this in an AuthorsModule , which can also provide other services needed in this context. Be sure to import AuthorsModule somewhere (e.g., in the root module, or some other module imported by the root module). @ @filename ( authors / authors . module ) @Module ({ imports : [ PostsModule ], providers : [ AuthorsService , AuthorsResolver ], }) export class AuthorsModule {} info Hint It is helpful to organize your code by your so-called domain model (similar to the way you would organize entry points in a REST API). In this approach, keep your models ( ObjectType classes), resolvers and services together within a Nest module representing the domain model. Keep all of these components in a single folder per module. When you do this, and use the Nest CLI to generate each element, Nest will wire all of these parts together (locating files in appropriate folders, generating entries in provider and imports arrays, etc.) automatically for you.","title":"\u89e3\u6790\u5668"},{"location":"graphql/resolvers-map/#resolvers","text":"Resolvers provide the instructions for turning a GraphQL operation (a query, mutation, or subscription) into data. They return the same shape of data we specify in our schema -- either synchronously or as a promise that resolves to a result of that shape. Typically, you create a resolver map manually. The @nestjs/graphql package, on the other hand, generates a resolver map automatically using the metadata provided by decorators you use to annotate classes. To demonstrate the process of using the package features to create a GraphQL API, we'll create a simple authors API.","title":"Resolvers"},{"location":"graphql/resolvers-map/#code-first","text":"In the code first approach, we don't follow the typical process of creating our GraphQL schema by writing GraphQL SDL by hand. Instead, we use TypeScript decorators to generate the SDL from TypeScript class definitions. The @nestjs/graphql package reads the metadata defined through the decorators and automatically generates the schema for you.","title":"Code first"},{"location":"graphql/resolvers-map/#object-types","text":"Most of the definitions in a GraphQL schema are object types . Each object type you define should represent a domain object that an application client might need to interact with. For example, our sample API needs to be able to fetch a list of authors and their posts, so we should define the Author type and Post type to support this functionality. If we were using the schema first approach, we'd define such a schema with SDL like this: type Author { id: Int! firstName: String lastName: String posts: [Post!]! } In this case, using the code first approach, we define schemas using TypeScript classes and using TypeScript decorators to annotate the fields of those classes. The equivalent of the above SDL in the code first approach is: @ @filename ( authors / models / author . model ) import { Field , Int , ObjectType } from '@nestjs/graphql' ; import { Post } from './post' ; @ObjectType () export class Author { @Field ( type => Int ) id : number ; @Field ({ nullable : true }) firstName? : string ; @Field ({ nullable : true }) lastName? : string ; @Field ( type => [ Post ]) posts : Post []; } info Hint TypeScript's metadata reflection system has several limitations which make it impossible, for instance, to determine what properties a class consists of or recognize whether a given property is optional or required. Because of these limitations, we must either explicitly use the @Field() decorator in our schema definition classes to provide metadata about each field's GraphQL type and optionality, or use a CLI plugin to generate these for us. The Author object type, like any class, is made of a collection of fields, with each field declaring a type. A field's type corresponds to a GraphQL type . A field's GraphQL type can be either another object type or a scalar type. A GraphQL scalar type is a primitive (like ID , String , Boolean , or Int ) that resolves to a single value. info Hint In addition to GraphQL's built-in scalar types, you can define custom scalar types (read more ). The above Author object type definition will cause Nest to generate the SDL we showed above: type Author { id: Int! firstName: String lastName: String posts: [Post!]! } The @Field() decorator accepts an optional type function (e.g., type => Int ), and optionally an options object. The type function is required when there's the potential for ambiguity between the TypeScript type system and the GraphQL type system. Specifically: it is not required for string and boolean types; it is required for number (which must be mapped to either a GraphQL Int or Float ). The type function should simply return the desired GraphQL type (as shown in various examples in these chapters). The options object can have any of the following key/value pairs: nullable : for specifying whether a field is nullable (in SDL, each field is non-nullable by default); boolean description : for setting a field description; string deprecationReason : for marking a field as deprecated; string For example: @Field ({ description : `Book title` , deprecationReason : 'Not useful in v2 schema' }) title : string ; info Hint You can also add a description to, or deprecate, the whole object type: @ObjectType({{ '{' }} description: 'Author model' {{ '}' }}) . When the field is an array, we must manually indicate the array type in the Field() decorator's type function, as shown below: @Field ( type => [ Post ]) posts : Post []; info Hint Using array bracket notation ( [ ] ), we can indicate the depth of the array. For example, using [[Int]] would represent an integer matrix. To declare that an array's items (not the array itself) are nullable, set the nullable property to 'items' as shown below: @Field ( type => [ Post ], { nullable : 'items' }) posts : Post []; info Hint If both the array and its items are nullable, set nullable to 'itemsAndList' instead. Now that the Author object type is created, let's define the Post object type. @ @filename ( posts / models / post . model ) import { Field , Int , ObjectType } from '@nestjs/graphql' ; @ObjectType () export class Post { @Field ( type => Int ) id : number ; @Field () title : string ; @Field ( type => Int , { nullable : true }) votes? : number ; } The Post object type will result in generating the following part of the GraphQL schema in SDL: type Post { id: Int! title: String! votes: Int }","title":"Object types"},{"location":"graphql/resolvers-map/#code-first-resolver","text":"At this point, we've defined the objects (type definitions) that can exist in our data graph, but clients don't yet have a way to interact with those objects. To address that, we need to create a resolver class. In the code first method, a resolver class both defines resolver functions and generates the Query type . This will be clear as we work through the example below: @ @filename ( authors / authors . resolver ) @Resolver ( of => Author ) export class AuthorsResolver { constructor ( private authorsService : AuthorsService , private postsService : PostsService , ) {} @Query ( returns => Author ) async author ( @Args ( 'id' , { type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } @ResolveField () async posts ( @Parent () author : Author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } } info Hint All decorators (e.g., @Resolver , @ResolveField , @Args , etc.) are exported from the @nestjs/graphql package. You can define multiple resolver classes. Nest will combine these at run time. See the module section below for more on code organization. warning Note The logic inside the AuthorsService and PostsService classes can be as simple or sophisticated as needed. The main point of this example is to show how to construct resolvers and how they can interact with other providers. In the example above, we created the AuthorsResolver which defines one query resolver function and one field resolver function. To create a resolver, we create a class with resolver functions as methods, and annotate the class with the @Resolver() decorator. In this example, we defined a query handler to get the author object based on the id sent in the request. To specify that the method is a query handler, use the @Query() decorator. The argument passed to the @Resolver() decorator is optional, but comes into play when our graph becomes non-trivial. It's used to supply a parent object used by field resolver functions as they traverse down through an object graph. In our example, since the class includes a field resolver function (for the posts property of the Author object type), we must supply the @Resolver() decorator with a value to indicate which class is the parent type (i.e., the corresponding ObjectType class name) for all field resolvers defined within this class. As should be clear from the example, when writing a field resolver function, it's necessary to access the parent object (the object the field being resolved is a member of). In this example, we populate an author's posts array with a field resolver that calls a service which takes the author's id as an argument. Hence the need to identify the parent object in the @Resolver() decorator. Note the corresponding use of the @Parent() method parameter decorator to then extract a reference to that parent object in the field resolver. We can define multiple @Query() resolver functions (both within this class, and in any other resolver class), and they will be aggregated into a single Query type definition in the generated SDL along with the appropriate entries in the resolver map. This allows you to define queries close to the models and services that they use, and to keep them well organized in modules. info Hint Nest CLI provides a generator (schematic) that automatically generates all the boilerplate code to help us avoid doing all of this, and make the developer experience much simpler. Read more about this feature here .","title":"Code first resolver"},{"location":"graphql/resolvers-map/#query-type-names","text":"In the above examples, the @Query() decorator generates a GraphQL schema query type name based on the method name. For example, consider the following construction from the example above: @Query ( returns => Author ) async author ( @Args ( 'id' , { type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } This generates the following entry for the author query in our schema (the query type uses the same name as the method name): type Query { author(id: Int!): Author } info Hint Learn more about GraphQL queries here . Conventionally, we prefer to decouple these names; for example, we prefer to use a name like getAuthor() for our query handler method, but still use author for our query type name. The same applies to our field resolvers. We can easily do this by passing the mapping names as arguments of the @Query() and @ResolveField() decorators, as shown below: @ @filename ( authors / authors . resolver ) @Resolver ( of => Author ) export class AuthorsResolver { constructor ( private authorsService : AuthorsService , private postsService : PostsService , ) {} @Query ( returns => Author , { name : 'author' }) async getAuthor ( @Args ( 'id' , { type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } @ResolveField ( 'posts' , returns => [ Post ]) async getPosts ( @Parent () author : Author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } } The getAuthor handler method above will result in generating the following part of the GraphQL schema in SDL: type Query { author(id: Int!): Author }","title":"Query type names"},{"location":"graphql/resolvers-map/#query-decorator-options","text":"The @Query() decorator's options object (where we pass {{ '{' }}name: 'author'{{ '}' }} above) accepts a number of key/value pairs: name : name of the query; a string description : a description that will be used to generate GraphQL schema documentation (e.g., in GraphQL playground); a string deprecationReason : sets query metadata to show the query as deprecated (e.g., in GraphQL playground); a string nullable : whether the query can return a null data response; boolean or 'items' or 'itemsAndList' (see above for details of 'items' and 'itemsAndList' )","title":"Query decorator options"},{"location":"graphql/resolvers-map/#args-decorator-options","text":"Use the @Args() decorator to extract arguments from a request for use in the method handler. This works in a very similar fashion to REST route parameter argument extraction . Usually your @Args() decorator will be simple, and not require an object argument as seen with the getAuthor() method above. For example, if the type of an identifier is string, the following construction is sufficient, and simply plucks the named field from the inbound GraphQL request for use as a method argument. @Args ( 'id' ) id : string In the getAuthor() case, the number type is used, which presents a challenge. The number TypeScript type doesn't give us enough information about the expected GraphQL representation (e.g., Int vs. Float ). Thus we have to explicitly pass the type reference. We do that by passing a second argument to the Args() decorator, containing argument options, as shown below: @Query ( returns => Author , { name : 'author' }) async getAuthor ( @Args ( 'id' , { type : () => Int }) id : number ) { return this . authorsService . findOneById ( id ); } The options object allows us to specify the following optional key value pairs: type : a function returning the GraphQL type defaultValue : a default value; any description : description metadata; string deprecationReason : to deprecate a field and provide meta data describing why; string nullable : whether the field is nullable Query handler methods can take multiple arguments. Let's imagine that we want to fetch an author based on its firstName and lastName . In this case, we can call @Args twice: getAuthor ( @Args ( 'firstName' , { nullable : true }) firstName? : string , @Args ( 'lastName' , { defaultValue : '' }) lastName? : string , ) {}","title":"Args decorator options"},{"location":"graphql/resolvers-map/#dedicated-arguments-class","text":"With inline @Args() calls, code like the example above becomes bloated. Instead, you can create a dedicated GetAuthorArgs arguments class and access it in the handler method as follows: @Args () args : GetAuthorArgs Create the GetAuthorArgs class using @ArgsType() as shown below: @ @filename ( authors / dto / get - author . args ) import { MinLength } from 'class-validator' ; import { Field , ArgsType } from '@nestjs/graphql' ; @ArgsType () class GetAuthorArgs { @Field ({ nullable : true }) firstName? : string ; @Field ({ defaultValue : '' }) @MinLength ( 3 ) lastName : string ; } info Hint Again, due to TypeScript's metadata reflection system limitations, it's required to either use the @Field decorator to manually indicate type and optionality, or use a CLI plugin . This will result in generating the following part of the GraphQL schema in SDL: type Query { author(firstName: String, lastName: String = ''): Author } info Hint Note that arguments classes like GetAuthorArgs play very well with the ValidationPipe (read more ).","title":"Dedicated arguments class"},{"location":"graphql/resolvers-map/#class-inheritance","text":"You can use standard TypeScript class inheritance to create base classes with generic utility type features (fields and field properties, validations, etc.) that can be extended. For example, you may have a set of pagination related arguments that always include the standard offset and limit fields, but also other index fields that are type-specific. You can set up a class hierarchy as shown below. Base @ArgsType() class: @ArgsType () class PaginationArgs { @Field (( type ) => Int ) offset : number = 0 ; @Field (( type ) => Int ) limit : number = 10 ; } Type specific sub-class of the base @ArgsType() class: @ArgsType () class GetAuthorArgs extends PaginationArgs { @Field ({ nullable : true }) firstName? : string ; @Field ({ defaultValue : '' }) @MinLength ( 3 ) lastName : string ; } The same approach can be taken with @ObjectType() objects. Define generic properties on the base class: @ObjectType () class Character { @Field (( type ) => Int ) id : number ; @Field () name : string ; } Add type-specific properties on sub-classes: @ObjectType () class Warrior extends Character { @Field () level : number ; } You can use inheritance with a resolver as well. You can ensure type safety by combining inheritance and TypeScript generics. For example, to create a base class with a generic findAll query, use a construction like this: function BaseResolver < T extends Type < unknown >> ( classRef : T ) : any { @Resolver ({ isAbstract : true }) abstract class BaseResolverHost { @Query (( type ) => [ classRef ], { name : `findAll ${ classRef . name } ` }) async findAll () : Promise < T [] > { return []; } } return BaseResolverHost ; } Note the following: an explicit return type ( any above) is required: otherwise TypeScript complains about the usage of a private class definition. Recommended: define an interface instead of using any . Type is imported from the @nestjs/common package The isAbstract: true property indicates that SDL (Schema Definition Language statements) shouldn't be generated for this class. Note, you can set this property for other types as well to suppress SDL generation. Here's how you could generate a concrete sub-class of the BaseResolver : @Resolver (( of ) => Recipe ) export class RecipesResolver extends BaseResolver ( Recipe ) { constructor ( private recipesService : RecipesService ) { super (); } } This construct would generated the following SDL: type Query { findAllRecipe: [Recipe!]! }","title":"Class inheritance"},{"location":"graphql/resolvers-map/#generics","text":"We saw one use of generics above. This powerful TypeScript feature can be used to create useful abstractions. For example, here's a sample cursor-based pagination implementation based on this documentation : import { Field , ObjectType , Int } from '@nestjs/graphql' ; import { Type } from '@nestjs/common' ; interface IEdgeType < T > { cursor : string ; node : T ; } export interface IPaginatedType < T > { edges : IEdgeType < T > []; nodes : T []; totalCount : number ; hasNextPage : boolean ; } export function Paginated < T > ( classRef : Type < T > ) : Type < IPaginatedType < T >> { @ObjectType ( ` ${ classRef . name } Edge` ) abstract class EdgeType { @Field (( type ) => String ) cursor : string ; @Field (( type ) => classRef ) node : T ; } @ObjectType ({ isAbstract : true }) abstract class PaginatedType implements IPaginatedType < T > { @Field (( type ) => [ EdgeType ], { nullable : true }) edges : EdgeType []; @Field (( type ) => [ classRef ], { nullable : true }) nodes : T []; @Field (( type ) => Int ) totalCount : number ; @Field () hasNextPage : boolean ; } return PaginatedType as Type < IPaginatedType < T >> ; } With the above base class defined, we can now easily create specialized types that inherit this behavior. For example: @ObjectType () class PaginatedAuthor extends Paginated ( Author ) {}","title":"Generics"},{"location":"graphql/resolvers-map/#schema-first","text":"As mentioned in the previous chapter, in the schema first approach we start by manually defining schema types in SDL (read more ). Consider the following SDL type definitions. info Hint For convenience in this chapter, we've aggregated all of the SDL in one location (e.g., one .graphql file, as shown below). In practice, you may find it appropriate to organize your code in a modular fashion. For example, it can be helpful to create individual SDL files with type definitions representing each domain entity, along with related services, resolver code, and the Nest module definition class, in a dedicated directory for that entity. Nest will aggregate all the individual schema type definitions at run time. type Author { id: Int! firstName: String lastName: String posts: [Post] } type Post { id: Int! title: String! votes: Int } type Query { author(id: Int!): Author }","title":"Schema first"},{"location":"graphql/resolvers-map/#schema-first-resolver","text":"The schema above exposes a single query - author(id: Int!): Author . info Hint Learn more about GraphQL queries here . Let's now create an AuthorsResolver class that resolves author queries: @ @filename ( authors / authors . resolver ) @Resolver ( 'Author' ) export class AuthorsResolver { constructor ( private authorsService : AuthorsService , private postsService : PostsService , ) {} @Query () async author ( @Args ( 'id' ) id : number ) { return this . authorsService . findOneById ( id ); } @ResolveField () async posts ( @Parent () author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } } info Hint All decorators (e.g., @Resolver , @ResolveField , @Args , etc.) are exported from the @nestjs/graphql package. warning Note The logic inside the AuthorsService and PostsService classes can be as simple or sophisticated as needed. The main point of this example is to show how to construct resolvers and how they can interact with other providers. The @Resolver() decorator is required. It takes an optional string argument with the name of a class. This class name is required whenever the class includes @ResolveField() decorators to inform Nest that the decorated method is associated with a parent type (the Author type in our current example). Alternatively, instead of setting @Resolver() at the top of the class, this can be done for each method: @Resolver ( 'Author' ) @ResolveField () async posts ( @Parent () author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } In this case ( @Resolver() decorator at the method level), if you have multiple @ResolveField() decorators inside a class, you must add @Resolver() to all of them. This is not considered the best practice (as it creates extra overhead). info Hint Any class name argument passed to @Resolver() does not affect queries ( @Query() decorator) or mutations ( @Mutation() decorator). warning Warning Using the @Resolver decorator at the method level is not supported with the code first approach. In the above examples, the @Query() and @ResolveField() decorators are associated with GraphQL schema types based on the method name. For example, consider the following construction from the example above: @Query () async author ( @Args ( 'id' ) id : number ) { return this . authorsService . findOneById ( id ); } This generates the following entry for the author query in our schema (the query type uses the same name as the method name): type Query { author(id: Int!): Author } Conventionally, we would prefer to decouple these, using names like getAuthor() or getPosts() for our resolver methods. We can easily do this by passing the mapping name as an argument to the decorator, as shown below: @ @filename ( authors / authors . resolver ) @Resolver ( 'Author' ) export class AuthorsResolver { constructor ( private authorsService : AuthorsService , private postsService : PostsService , ) {} @Query ( 'author' ) async getAuthor ( @Args ( 'id' ) id : number ) { return this . authorsService . findOneById ( id ); } @ResolveField ( 'posts' ) async getPosts ( @Parent () author ) { const { id } = author ; return this . postsService . findAll ({ authorId : id }); } } info Hint Nest CLI provides a generator (schematic) that automatically generates all the boilerplate code to help us avoid doing all of this, and make the developer experience much simpler. Read more about this feature here .","title":"Schema first resolver"},{"location":"graphql/resolvers-map/#generating-types","text":"Assuming that we use the schema first approach and have enabled the typings generation feature (with outputAs: 'class' as shown in the previous chapter), once you run the application it will generate the following file (in the location you specified in the GraphQLModule.forRoot() method). For example, in src/graphql.ts : @ @filename ( graphql ) export class Author { id : number ; firstName? : string ; lastName? : string ; posts? : Post []; } export class Post { id : number ; title : string ; votes? : number ; } export abstract class IQuery { abstract author ( id : number ) : Author | Promise < Author > ; } By generating classes (instead of the default technique of generating interfaces), you can use declarative validation decorators in combination with the schema first approach, which is an extremely useful technique (read more ). For example, you could add class-validator decorators to the generated CreatePostInput class as shown below to enforce minimum and maximum string lengths on the title field: import { MinLength , MaxLength } from 'class-validator' ; export class CreatePostInput { @MinLength ( 3 ) @MaxLength ( 50 ) title : string ; } warning Notice To enable auto-validation of your inputs (and parameters), use ValidationPipe . Read more about validation here and more specifically about pipes here . However, if you add decorators directly to the automatically generated file, they will be overwritten each time the file is generated. Instead, create a separate file and simply extend the generated class. import { MinLength , MaxLength } from 'class-validator' ; import { Post } from '../../graphql.ts' ; export class CreatePostInput extends Post { @MinLength ( 3 ) @MaxLength ( 50 ) title : string ; }","title":"Generating types"},{"location":"graphql/resolvers-map/#graphql-argument-decorators","text":"We can access the standard GraphQL resolver arguments using dedicated decorators. Below is a comparison of the Nest decorators and the plain Apollo parameters they represent. @Root() and @Parent() root / parent @Context(param?: string) context / context[param] @Info(param?: string) info / info[param] @Args(param?: string) args / args[param] These arguments have the following meanings: root : an object that contains the result returned from the resolver on the parent field, or, in the case of a top-level Query field, the rootValue passed from the server configuration. context : an object shared by all resolvers in a particular query; typically used to contain per-request state. info : an object that contains information about the execution state of the query. args : an object with the arguments passed into the field in the query.","title":"GraphQL argument decorators"},{"location":"graphql/resolvers-map/#module","text":"Once we're done with the above steps, we have declaratively specified all the information needed by the GraphQLModule to generate a resolver map. The GraphQLModule uses reflection to introspect the meta data provided via the decorators, and transforms classes into the correct resolver map automatically. The only other thing you need to take care of is to provide (i.e., list as a provider in some module) the resolver class(es) ( AuthorsResolver ), and importing the module ( AuthorsModule ) somewhere, so Nest will be able to utilize it. For example, we can do this in an AuthorsModule , which can also provide other services needed in this context. Be sure to import AuthorsModule somewhere (e.g., in the root module, or some other module imported by the root module). @ @filename ( authors / authors . module ) @Module ({ imports : [ PostsModule ], providers : [ AuthorsService , AuthorsResolver ], }) export class AuthorsModule {} info Hint It is helpful to organize your code by your so-called domain model (similar to the way you would organize entry points in a REST API). In this approach, keep your models ( ObjectType classes), resolvers and services together within a Nest module representing the domain model. Keep all of these components in a single folder per module. When you do this, and use the Nest CLI to generate each element, Nest will wire all of these parts together (locating files in appropriate folders, generating entries in provider and imports arrays, etc.) automatically for you.","title":"Module"},{"location":"graphql/scalars/","text":"Scalars \u00b6 A GraphQL object type has a name and fields, but at some point those fields have to resolve to some concrete data. That's where the scalar types come in: they represent the leaves of the query (read more here ). GraphQL includes the following default types: Int , Float , String , Boolean and ID . In addition to these built-in types, you may need to support custom atomic data types (e.g., Date ). Code first \u00b6 The code-first approach ships with five scalars in which three of them are simple aliases for the existing GraphQL types. ID (alias for GraphQLID ) - represents a unique identifier, often used to refetch an object or as the key for a cache Int (alias for GraphQLInt ) - a signed 32\u2010bit integer Float (alias for GraphQLFloat ) - a signed double-precision floating-point value GraphQLISODateTime - a date-time string at UTC (used by default to represent Date type) GraphQLTimestamp - a signed integer which represents date and time as number of milliseconds from start of UNIX epoch The GraphQLISODateTime (e.g. 2019-12-03T09:54:33Z ) is used by default to represent the Date type. To use the GraphQLTimestamp instead, set the dateScalarMode of the buildSchemaOptions object to 'timestamp' as follows: GraphQLModule . forRoot ({ buildSchemaOptions : { dateScalarMode : 'timestamp' , } }), Likewise, the GraphQLFloat is used by default to represent the number type. To use the GraphQLInt instead, set the numberScalarMode of the buildSchemaOptions object to 'integer' as follows: GraphQLModule . forRoot ({ buildSchemaOptions : { numberScalarMode : 'integer' , } }), In addition, you can create custom scalars. For example, to create a Date scalar, simply create a new class. import { Scalar , CustomScalar } from '@nestjs/graphql' ; import { Kind , ValueNode } from 'graphql' ; @Scalar ( 'Date' , ( type ) => Date ) export class DateScalar implements CustomScalar < number , Date > { description = 'Date custom scalar type' ; parseValue ( value : number ) : Date { return new Date ( value ); // value from the client } serialize ( value : Date ) : number { return value . getTime (); // value sent to the client } parseLiteral ( ast : ValueNode ) : Date { if ( ast . kind === Kind . INT ) { return new Date ( ast . value ); } return null ; } } With this in place, register DateScalar as a provider. @Module ({ providers : [ DateScalar ], }) export class CommonModule {} Now we can use the Date type in our classes. @Field () creationDate : Date ; Schema first \u00b6 To define a custom scalar (read more about scalars here ), create a type definition and a dedicated resolver. Here (as in the official documentation), we\u2019ll use the graphql-type-json package for demonstration purposes. This npm package defines a JSON GraphQL scalar type. Start by installing the package: $ npm i --save graphql-type-json Once the package is installed, we pass a custom resolver to the forRoot() method: import GraphQLJSON from 'graphql-type-json' ; @Module ({ imports : [ GraphQLModule . forRoot ({ typePaths : [ './**/*.graphql' ], resolvers : { JSON : GraphQLJSON }, }), ], }) export class AppModule {} Now we can use the JSON scalar in our type definitions: scalar JSON type Foo { field: JSON } Another method to define a scalar type is to create a simple class. Assume we want to enhance our schema with the Date type. import { Scalar , CustomScalar } from '@nestjs/graphql' ; import { Kind , ValueNode } from 'graphql' ; @Scalar ( 'Date' ) export class DateScalar implements CustomScalar < number , Date > { description = 'Date custom scalar type' ; parseValue ( value : number ) : Date { return new Date ( value ); // value from the client } serialize ( value : Date ) : number { return value . getTime (); // value sent to the client } parseLiteral ( ast : ValueNode ) : Date { if ( ast . kind === Kind . INT ) { return new Date ( ast . value ); } return null ; } } With this in place, register DateScalar as a provider. @Module ({ providers : [ DateScalar ], }) export class CommonModule {} Now we can use the Date scalar in type definitions. scalar Date By default, the generated TypeScript definition for all scalars is any - which isn't particularly typesafe. But, you can configure how Nest generates typings for your custom scalars when you specify how to generate types: import { GraphQLDefinitionsFactory } from '@nestjs/graphql' ; import { join } from 'path' ; const definitionsFactory = new GraphQLDefinitionsFactory () definitionsFactory . generate ({ typePaths : [ './src/**/*.graphql' ], path : join ( process . cwd (), 'src/graphql.ts' ), outputAs : 'class' , defaultScalarType : 'unknown' , customScalarTypeMapping : { DateTime : 'Date' , BigNumber : '_BigNumber' , }, additionalHeader : \"import _BigNumber from 'bignumber.js'\" , }) info Hint Alternatively, you can use a type reference instead, for example: DateTime: Date . In this case, GraphQLDefinitionsFactory will extract the name property of the specified type ( Date.name ) to generate TS definitions. Note: adding an import statement for non-built-in types (custom types) is required. Now, given the following GraphQL custom scalar types: scalar DateTime scalar BigNumber scalar Payload We will now see the following generated TypeScript definitions in src/graphql.ts : import _BigNumber from 'bignumber.js' export type DateTime = Date export type BigNumber = _BigNumber export type Payload = unknown Here, we've used the customScalarTypeMapping property to supply a map of the types we wish to declare for our custom scalars. We've also provided an additionalHeader property so that we can add any imports required for these type definitions. Lastly, we've added a defaultScalarType of 'unknown' , so that any custom scalars not specified in customScalarTypeMapping will be aliased to unknown instead of any (which TypeScript recommends using since 3.0 for added type safety). info Hint Note that we've imported _BigNumber from bignumber.js ; this is to avoid circular type references .","title":"\u6807\u91cf"},{"location":"graphql/scalars/#scalars","text":"A GraphQL object type has a name and fields, but at some point those fields have to resolve to some concrete data. That's where the scalar types come in: they represent the leaves of the query (read more here ). GraphQL includes the following default types: Int , Float , String , Boolean and ID . In addition to these built-in types, you may need to support custom atomic data types (e.g., Date ).","title":"Scalars"},{"location":"graphql/scalars/#code-first","text":"The code-first approach ships with five scalars in which three of them are simple aliases for the existing GraphQL types. ID (alias for GraphQLID ) - represents a unique identifier, often used to refetch an object or as the key for a cache Int (alias for GraphQLInt ) - a signed 32\u2010bit integer Float (alias for GraphQLFloat ) - a signed double-precision floating-point value GraphQLISODateTime - a date-time string at UTC (used by default to represent Date type) GraphQLTimestamp - a signed integer which represents date and time as number of milliseconds from start of UNIX epoch The GraphQLISODateTime (e.g. 2019-12-03T09:54:33Z ) is used by default to represent the Date type. To use the GraphQLTimestamp instead, set the dateScalarMode of the buildSchemaOptions object to 'timestamp' as follows: GraphQLModule . forRoot ({ buildSchemaOptions : { dateScalarMode : 'timestamp' , } }), Likewise, the GraphQLFloat is used by default to represent the number type. To use the GraphQLInt instead, set the numberScalarMode of the buildSchemaOptions object to 'integer' as follows: GraphQLModule . forRoot ({ buildSchemaOptions : { numberScalarMode : 'integer' , } }), In addition, you can create custom scalars. For example, to create a Date scalar, simply create a new class. import { Scalar , CustomScalar } from '@nestjs/graphql' ; import { Kind , ValueNode } from 'graphql' ; @Scalar ( 'Date' , ( type ) => Date ) export class DateScalar implements CustomScalar < number , Date > { description = 'Date custom scalar type' ; parseValue ( value : number ) : Date { return new Date ( value ); // value from the client } serialize ( value : Date ) : number { return value . getTime (); // value sent to the client } parseLiteral ( ast : ValueNode ) : Date { if ( ast . kind === Kind . INT ) { return new Date ( ast . value ); } return null ; } } With this in place, register DateScalar as a provider. @Module ({ providers : [ DateScalar ], }) export class CommonModule {} Now we can use the Date type in our classes. @Field () creationDate : Date ;","title":"Code first"},{"location":"graphql/scalars/#schema-first","text":"To define a custom scalar (read more about scalars here ), create a type definition and a dedicated resolver. Here (as in the official documentation), we\u2019ll use the graphql-type-json package for demonstration purposes. This npm package defines a JSON GraphQL scalar type. Start by installing the package: $ npm i --save graphql-type-json Once the package is installed, we pass a custom resolver to the forRoot() method: import GraphQLJSON from 'graphql-type-json' ; @Module ({ imports : [ GraphQLModule . forRoot ({ typePaths : [ './**/*.graphql' ], resolvers : { JSON : GraphQLJSON }, }), ], }) export class AppModule {} Now we can use the JSON scalar in our type definitions: scalar JSON type Foo { field: JSON } Another method to define a scalar type is to create a simple class. Assume we want to enhance our schema with the Date type. import { Scalar , CustomScalar } from '@nestjs/graphql' ; import { Kind , ValueNode } from 'graphql' ; @Scalar ( 'Date' ) export class DateScalar implements CustomScalar < number , Date > { description = 'Date custom scalar type' ; parseValue ( value : number ) : Date { return new Date ( value ); // value from the client } serialize ( value : Date ) : number { return value . getTime (); // value sent to the client } parseLiteral ( ast : ValueNode ) : Date { if ( ast . kind === Kind . INT ) { return new Date ( ast . value ); } return null ; } } With this in place, register DateScalar as a provider. @Module ({ providers : [ DateScalar ], }) export class CommonModule {} Now we can use the Date scalar in type definitions. scalar Date By default, the generated TypeScript definition for all scalars is any - which isn't particularly typesafe. But, you can configure how Nest generates typings for your custom scalars when you specify how to generate types: import { GraphQLDefinitionsFactory } from '@nestjs/graphql' ; import { join } from 'path' ; const definitionsFactory = new GraphQLDefinitionsFactory () definitionsFactory . generate ({ typePaths : [ './src/**/*.graphql' ], path : join ( process . cwd (), 'src/graphql.ts' ), outputAs : 'class' , defaultScalarType : 'unknown' , customScalarTypeMapping : { DateTime : 'Date' , BigNumber : '_BigNumber' , }, additionalHeader : \"import _BigNumber from 'bignumber.js'\" , }) info Hint Alternatively, you can use a type reference instead, for example: DateTime: Date . In this case, GraphQLDefinitionsFactory will extract the name property of the specified type ( Date.name ) to generate TS definitions. Note: adding an import statement for non-built-in types (custom types) is required. Now, given the following GraphQL custom scalar types: scalar DateTime scalar BigNumber scalar Payload We will now see the following generated TypeScript definitions in src/graphql.ts : import _BigNumber from 'bignumber.js' export type DateTime = Date export type BigNumber = _BigNumber export type Payload = unknown Here, we've used the customScalarTypeMapping property to supply a map of the types we wish to declare for our custom scalars. We've also provided an additionalHeader property so that we can add any imports required for these type definitions. Lastly, we've added a defaultScalarType of 'unknown' , so that any custom scalars not specified in customScalarTypeMapping will be aliased to unknown instead of any (which TypeScript recommends using since 3.0 for added type safety). info Hint Note that we've imported _BigNumber from bignumber.js ; this is to avoid circular type references .","title":"Schema first"},{"location":"graphql/schema-generator/","text":"Generating SDL \u00b6 warning Warning This chapter applies only to the code first approach. To manually generate a GraphQL SDL schema (i.e., without running an application, connecting to the database, hooking up resolvers, etc.), use the GraphQLSchemaBuilderModule . async function generateSchema () { const app = await NestFactory . create ( GraphQLSchemaBuilderModule ); await app . init (); const gqlSchemaFactory = app . get ( GraphQLSchemaFactory ); const schema = await gqlSchemaFactory . create ([ RecipesResolver ]); console . log ( printSchema ( schema )); } info Hint The GraphQLSchemaBuilderModule and GraphQLSchemaFactory are imported from the @nestjs/graphql package. The printSchema function is imported from the graphql package. Usage \u00b6 The gqlSchemaFactory.create() method takes an array of resolver class references. For example: const schema = await gqlSchemaFactory . create ([ RecipesResolver , AuthorsResolver , PostsResolvers , ]); It also takes a second optional argument with an array of scalar classes: const schema = await gqlSchemaFactory . create ( [ RecipesResolver , AuthorsResolver , PostsResolvers ], [ DurationScalar , DateScalar ], ); Lastly, you can pass an options object: const schema = await gqlSchemaFactory . create ([ RecipesResolver ], { skipCheck : true , orphanedTypes : [], }); skipCheck : ignore schema validation; boolean, defaults to false orphanedTypes : list of classes that are not explicitly referenced (not part of the object graph) to be generated. Normally, if a class is declared but isn't otherwise referenced in the graph, it's omitted. The property value is an array of class references.","title":"\u751f\u6210 SDL"},{"location":"graphql/schema-generator/#generating-sdl","text":"warning Warning This chapter applies only to the code first approach. To manually generate a GraphQL SDL schema (i.e., without running an application, connecting to the database, hooking up resolvers, etc.), use the GraphQLSchemaBuilderModule . async function generateSchema () { const app = await NestFactory . create ( GraphQLSchemaBuilderModule ); await app . init (); const gqlSchemaFactory = app . get ( GraphQLSchemaFactory ); const schema = await gqlSchemaFactory . create ([ RecipesResolver ]); console . log ( printSchema ( schema )); } info Hint The GraphQLSchemaBuilderModule and GraphQLSchemaFactory are imported from the @nestjs/graphql package. The printSchema function is imported from the graphql package.","title":"Generating SDL"},{"location":"graphql/schema-generator/#usage","text":"The gqlSchemaFactory.create() method takes an array of resolver class references. For example: const schema = await gqlSchemaFactory . create ([ RecipesResolver , AuthorsResolver , PostsResolvers , ]); It also takes a second optional argument with an array of scalar classes: const schema = await gqlSchemaFactory . create ( [ RecipesResolver , AuthorsResolver , PostsResolvers ], [ DurationScalar , DateScalar ], ); Lastly, you can pass an options object: const schema = await gqlSchemaFactory . create ([ RecipesResolver ], { skipCheck : true , orphanedTypes : [], }); skipCheck : ignore schema validation; boolean, defaults to false orphanedTypes : list of classes that are not explicitly referenced (not part of the object graph) to be generated. Normally, if a class is declared but isn't otherwise referenced in the graph, it's omitted. The property value is an array of class references.","title":"Usage"},{"location":"graphql/subscriptions/","text":"Subscriptions \u00b6 In addition to fetching data using queries and modifying data using mutations, the GraphQL spec supports a third operation type, called subscription . GraphQL subscriptions are a way to push data from the server to the clients that choose to listen to real time messages from the server. Subscriptions are similar to queries in that they specify a set of fields to be delivered to the client, but instead of immediately returning a single answer, a channel is opened and a result is sent to the client every time a particular event happens on the server. A common use case for subscriptions is notifying the client side about particular events, for example the creation of a new object, updated fields and so on (read more here ). Enable subscriptions \u00b6 To enable subscriptions, set the installSubscriptionHandlers property to true . GraphQLModule . forRoot ({ installSubscriptionHandlers : true , }), warning Warning The installSubscriptionHandlers configuration option has been removed from the latest version of Apollo server and will be soon deprecated in this package as well. By default, installSubscriptionHandlers will fallback to use the subscriptions-transport-ws ( read more ) but we strongly recommend using the graphql-ws ( read more ) library instead. To switch to use the graphql-ws package instead, use the following configuration: GraphQLModule . forRoot ({ subscriptions : { 'graphql-ws' : true }, }), info Hint You can also use both packages ( subscriptions-transport-ws and graphql-ws ) at the same time, for example, for backward compatibility. Code first \u00b6 To create a subscription using the code first approach, we use the @Subscription() decorator and the PubSub class from the graphql-subscriptions package, which provides a simple publish/subscribe API . The following subscription handler takes care of subscribing to an event by calling PubSub#asyncIterator . This method takes a single argument, the triggerName , which corresponds to an event topic name. const pubSub = new PubSub (); @Resolver (( of ) => Author ) export class AuthorResolver { // ... @Subscription (( returns ) => Comment ) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } } info Hint All decorators are exported from the @nestjs/graphql package, while the PubSub class is exported from the graphql-subscriptions package. warning Note PubSub is a class that exposes a simple publish and subscribe API . Read more about it here . Note that the Apollo docs warn that the default implementation is not suitable for production (read more here ). Production apps should use a PubSub implementation backed by an external store (read more here ). This will result in generating the following part of the GraphQL schema in SDL: type Subscription { commentAdded(): Comment! } Note that subscriptions, by definition, return an object with a single top level property whose key is the name of the subscription. This name is either inherited from the name of the subscription handler method (i.e., commentAdded above), or is provided explicitly by passing an option with the key name as the second argument to the @Subscription() decorator, as shown below. @Subscription ( returns => Comment , { name : 'commentAdded' , }) addCommentHandler () { return pubSub . asyncIterator ( 'commentAdded' ); } This construct produces the same SDL as the previous code sample, but allows us to decouple the method name from the subscription. Publishing \u00b6 Now, to publish the event, we use the PubSub#publish method. This is often used within a mutation to trigger a client-side update when a part of the object graph has changed. For example: @ @filename ( posts / posts . resolver ) @Mutation ( returns => Post ) async addComment ( @Args ( 'postId' , { type : () => Int }) postId : number , @Args ( 'comment' , { type : () => Comment }) comment : CommentInput , ) { const newComment = this . commentsService . addComment ({ id : postId , comment }); pubSub . publish ( 'commentAdded' , { commentAdded : newComment }); return newComment ; } The PubSub#publish method takes a triggerName (again, think of this as an event topic name) as the first parameter, and an event payload as the second parameter. As mentioned, the subscription, by definition, returns a value and that value has a shape. Look again at the generated SDL for our commentAdded subscription: type Subscription { commentAdded(): Comment! } This tells us that the subscription must return an object with a top-level property name of commentAdded that has a value which is a Comment object. The important point to note is that the shape of the event payload emitted by the PubSub#publish method must correspond to the shape of the value expected to return from the subscription. So, in our example above, the pubSub.publish('commentAdded', {{ '{' }} commentAdded: newComment {{ '}' }}) statement publishes a commentAdded event with the appropriately shaped payload. If these shapes don't match, your subscription will fail during the GraphQL validation phase. Filtering subscriptions \u00b6 To filter out specific events, set the filter property to a filter function. This function acts similar to the function passed to an array filter . It takes two arguments: payload containing the event payload (as sent by the event publisher), and variables taking any arguments passed in during the subscription request. It returns a boolean determining whether this event should be published to client listeners. @Subscription ( returns => Comment , { filter : ( payload , variables ) => payload . commentAdded . title === variables . title , }) commentAdded ( @Args ( 'title' ) title : string ) { return pubSub . asyncIterator ( 'commentAdded' ); } Mutating subscription payloads \u00b6 To mutate the published event payload, set the resolve property to a function. The function receives the event payload (as sent by the event publisher) and returns the appropriate value. @Subscription ( returns => Comment , { resolve : value => value , }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } warning Note If you use the resolve option, you should return the unwrapped payload (e.g., with our example, return a newComment object directly, not a {{ '{' }} commentAdded: newComment {{ '}' }} object). If you need to access injected providers (e.g., use an external service to validate the data), use the following construction. @Subscription ( returns => Comment , { resolve ( this : AuthorResolver , value ) { // \"this\" refers to an instance of \"AuthorResolver\" return value ; } }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } The same construction works with filters: @Subscription ( returns => Comment , { filter ( this : AuthorResolver , payload , variables ) { // \"this\" refers to an instance of \"AuthorResolver\" return payload . commentAdded . title === variables . title ; } }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } Schema first \u00b6 To create an equivalent subscription in Nest, we'll make use of the @Subscription() decorator. const pubSub = new PubSub (); @Resolver ( 'Author' ) export class AuthorResolver { // ... @Subscription () commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } } To filter out specific events based on context and arguments, set the filter property. @Subscription ( 'commentAdded' , { filter : ( payload , variables ) => payload . commentAdded . title === variables . title , }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } To mutate the published payload, we can use a resolve function. @Subscription ( 'commentAdded' , { resolve : value => value , }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } If you need to access injected providers (e.g., use an external service to validate the data), use the following construction: @Subscription ( 'commentAdded' , { resolve ( this : AuthorResolver , value ) { // \"this\" refers to an instance of \"AuthorResolver\" return value ; } }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } The same construction works with filters: @Subscription ( 'commentAdded' , { filter ( this : AuthorResolver , payload , variables ) { // \"this\" refers to an instance of \"AuthorResolver\" return payload . commentAdded . title === variables . title ; } }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } The last step is to update the type definitions file. type Author { id: Int! firstName: String lastName: String posts: [Post] } type Post { id: Int! title: String votes: Int } type Query { author(id: Int!): Author } type Comment { id: String content: String } type Subscription { commentAdded(title: String!): Comment } With this, we've created a single commentAdded(title: String!): Comment subscription. You can find a full sample implementation here . PubSub \u00b6 We instantiated a local PubSub instance above. The preferred approach is to define PubSub as a provider and inject it through the constructor (using the @Inject() decorator). This allows us to re-use the instance across the whole application. For example, define a provider as follows, then inject 'PUB_SUB' where needed. { provide : 'PUB_SUB' , useValue : new PubSub (), } Customize subscriptions server \u00b6 To customize the subscriptions server (e.g., change the path), use the subscriptions options property. GraphQLModule . forRoot ({ installSubscriptionHandlers : true , subscriptions : { 'subscriptions-transport-ws' : { path : '/graphql' }, } }), If you're using the graphql-ws package for subscriptions, replace the subscriptions-transport-ws key with graphql-ws , as follows: GraphQLModule . forRoot ({ installSubscriptionHandlers : true , subscriptions : { 'graphql-ws' : { path : '/graphql' }, } }), Authentication over WebSocket \u00b6 Checking that the user is authenticated should be done inside the onConnect callback function that you can specify in the subscriptions options. The onConnect will receive as a first argument the connectionParams passed to the SubscriptionClient (read more ). GraphQLModule . forRoot ({ subscriptions : { 'subscriptions-transport-ws' : { onConnect : ( connectionParams ) => { const authToken = connectionParams . authToken ; if ( ! isValid ( authToken )) { throw new Error ( 'Token is not valid' ); } // extract user information from token const user = parseToken ( authToken ); // return user info to add them to the context later return { user }; }, } }, context : ({ connection }) => { // connection.context will be equal to what was returned by the \"onConnect\" callback }, }), The authToken in this example is only sent once by the client, when the connection is first established. All subscriptions made with this connection will have the same authToken , and thus the same user info. warning Note There is a bug in subscriptions-transport-ws that allows connections to skip the onConnect phase (read more ). You should not assume that onConnect was called when the user starts a subscription, and always check that the context is populated. If you're using the graphql-ws package, the signature of the onConnect callback will be slightly different: subscriptions : { 'graphql-ws' : { onConnect : ( context : Context < any > ) => { const { connectionParams } = context ; // the rest will remain the same as in the example above }, }, },","title":"\u8ba2\u9605"},{"location":"graphql/subscriptions/#subscriptions","text":"In addition to fetching data using queries and modifying data using mutations, the GraphQL spec supports a third operation type, called subscription . GraphQL subscriptions are a way to push data from the server to the clients that choose to listen to real time messages from the server. Subscriptions are similar to queries in that they specify a set of fields to be delivered to the client, but instead of immediately returning a single answer, a channel is opened and a result is sent to the client every time a particular event happens on the server. A common use case for subscriptions is notifying the client side about particular events, for example the creation of a new object, updated fields and so on (read more here ).","title":"Subscriptions"},{"location":"graphql/subscriptions/#enable-subscriptions","text":"To enable subscriptions, set the installSubscriptionHandlers property to true . GraphQLModule . forRoot ({ installSubscriptionHandlers : true , }), warning Warning The installSubscriptionHandlers configuration option has been removed from the latest version of Apollo server and will be soon deprecated in this package as well. By default, installSubscriptionHandlers will fallback to use the subscriptions-transport-ws ( read more ) but we strongly recommend using the graphql-ws ( read more ) library instead. To switch to use the graphql-ws package instead, use the following configuration: GraphQLModule . forRoot ({ subscriptions : { 'graphql-ws' : true }, }), info Hint You can also use both packages ( subscriptions-transport-ws and graphql-ws ) at the same time, for example, for backward compatibility.","title":"Enable subscriptions"},{"location":"graphql/subscriptions/#code-first","text":"To create a subscription using the code first approach, we use the @Subscription() decorator and the PubSub class from the graphql-subscriptions package, which provides a simple publish/subscribe API . The following subscription handler takes care of subscribing to an event by calling PubSub#asyncIterator . This method takes a single argument, the triggerName , which corresponds to an event topic name. const pubSub = new PubSub (); @Resolver (( of ) => Author ) export class AuthorResolver { // ... @Subscription (( returns ) => Comment ) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } } info Hint All decorators are exported from the @nestjs/graphql package, while the PubSub class is exported from the graphql-subscriptions package. warning Note PubSub is a class that exposes a simple publish and subscribe API . Read more about it here . Note that the Apollo docs warn that the default implementation is not suitable for production (read more here ). Production apps should use a PubSub implementation backed by an external store (read more here ). This will result in generating the following part of the GraphQL schema in SDL: type Subscription { commentAdded(): Comment! } Note that subscriptions, by definition, return an object with a single top level property whose key is the name of the subscription. This name is either inherited from the name of the subscription handler method (i.e., commentAdded above), or is provided explicitly by passing an option with the key name as the second argument to the @Subscription() decorator, as shown below. @Subscription ( returns => Comment , { name : 'commentAdded' , }) addCommentHandler () { return pubSub . asyncIterator ( 'commentAdded' ); } This construct produces the same SDL as the previous code sample, but allows us to decouple the method name from the subscription.","title":"Code first"},{"location":"graphql/subscriptions/#publishing","text":"Now, to publish the event, we use the PubSub#publish method. This is often used within a mutation to trigger a client-side update when a part of the object graph has changed. For example: @ @filename ( posts / posts . resolver ) @Mutation ( returns => Post ) async addComment ( @Args ( 'postId' , { type : () => Int }) postId : number , @Args ( 'comment' , { type : () => Comment }) comment : CommentInput , ) { const newComment = this . commentsService . addComment ({ id : postId , comment }); pubSub . publish ( 'commentAdded' , { commentAdded : newComment }); return newComment ; } The PubSub#publish method takes a triggerName (again, think of this as an event topic name) as the first parameter, and an event payload as the second parameter. As mentioned, the subscription, by definition, returns a value and that value has a shape. Look again at the generated SDL for our commentAdded subscription: type Subscription { commentAdded(): Comment! } This tells us that the subscription must return an object with a top-level property name of commentAdded that has a value which is a Comment object. The important point to note is that the shape of the event payload emitted by the PubSub#publish method must correspond to the shape of the value expected to return from the subscription. So, in our example above, the pubSub.publish('commentAdded', {{ '{' }} commentAdded: newComment {{ '}' }}) statement publishes a commentAdded event with the appropriately shaped payload. If these shapes don't match, your subscription will fail during the GraphQL validation phase.","title":"Publishing"},{"location":"graphql/subscriptions/#filtering-subscriptions","text":"To filter out specific events, set the filter property to a filter function. This function acts similar to the function passed to an array filter . It takes two arguments: payload containing the event payload (as sent by the event publisher), and variables taking any arguments passed in during the subscription request. It returns a boolean determining whether this event should be published to client listeners. @Subscription ( returns => Comment , { filter : ( payload , variables ) => payload . commentAdded . title === variables . title , }) commentAdded ( @Args ( 'title' ) title : string ) { return pubSub . asyncIterator ( 'commentAdded' ); }","title":"Filtering subscriptions"},{"location":"graphql/subscriptions/#mutating-subscription-payloads","text":"To mutate the published event payload, set the resolve property to a function. The function receives the event payload (as sent by the event publisher) and returns the appropriate value. @Subscription ( returns => Comment , { resolve : value => value , }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } warning Note If you use the resolve option, you should return the unwrapped payload (e.g., with our example, return a newComment object directly, not a {{ '{' }} commentAdded: newComment {{ '}' }} object). If you need to access injected providers (e.g., use an external service to validate the data), use the following construction. @Subscription ( returns => Comment , { resolve ( this : AuthorResolver , value ) { // \"this\" refers to an instance of \"AuthorResolver\" return value ; } }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } The same construction works with filters: @Subscription ( returns => Comment , { filter ( this : AuthorResolver , payload , variables ) { // \"this\" refers to an instance of \"AuthorResolver\" return payload . commentAdded . title === variables . title ; } }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); }","title":"Mutating subscription payloads"},{"location":"graphql/subscriptions/#schema-first","text":"To create an equivalent subscription in Nest, we'll make use of the @Subscription() decorator. const pubSub = new PubSub (); @Resolver ( 'Author' ) export class AuthorResolver { // ... @Subscription () commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } } To filter out specific events based on context and arguments, set the filter property. @Subscription ( 'commentAdded' , { filter : ( payload , variables ) => payload . commentAdded . title === variables . title , }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } To mutate the published payload, we can use a resolve function. @Subscription ( 'commentAdded' , { resolve : value => value , }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } If you need to access injected providers (e.g., use an external service to validate the data), use the following construction: @Subscription ( 'commentAdded' , { resolve ( this : AuthorResolver , value ) { // \"this\" refers to an instance of \"AuthorResolver\" return value ; } }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } The same construction works with filters: @Subscription ( 'commentAdded' , { filter ( this : AuthorResolver , payload , variables ) { // \"this\" refers to an instance of \"AuthorResolver\" return payload . commentAdded . title === variables . title ; } }) commentAdded () { return pubSub . asyncIterator ( 'commentAdded' ); } The last step is to update the type definitions file. type Author { id: Int! firstName: String lastName: String posts: [Post] } type Post { id: Int! title: String votes: Int } type Query { author(id: Int!): Author } type Comment { id: String content: String } type Subscription { commentAdded(title: String!): Comment } With this, we've created a single commentAdded(title: String!): Comment subscription. You can find a full sample implementation here .","title":"Schema first"},{"location":"graphql/subscriptions/#pubsub","text":"We instantiated a local PubSub instance above. The preferred approach is to define PubSub as a provider and inject it through the constructor (using the @Inject() decorator). This allows us to re-use the instance across the whole application. For example, define a provider as follows, then inject 'PUB_SUB' where needed. { provide : 'PUB_SUB' , useValue : new PubSub (), }","title":"PubSub"},{"location":"graphql/subscriptions/#customize-subscriptions-server","text":"To customize the subscriptions server (e.g., change the path), use the subscriptions options property. GraphQLModule . forRoot ({ installSubscriptionHandlers : true , subscriptions : { 'subscriptions-transport-ws' : { path : '/graphql' }, } }), If you're using the graphql-ws package for subscriptions, replace the subscriptions-transport-ws key with graphql-ws , as follows: GraphQLModule . forRoot ({ installSubscriptionHandlers : true , subscriptions : { 'graphql-ws' : { path : '/graphql' }, } }),","title":"Customize subscriptions server"},{"location":"graphql/subscriptions/#authentication-over-websocket","text":"Checking that the user is authenticated should be done inside the onConnect callback function that you can specify in the subscriptions options. The onConnect will receive as a first argument the connectionParams passed to the SubscriptionClient (read more ). GraphQLModule . forRoot ({ subscriptions : { 'subscriptions-transport-ws' : { onConnect : ( connectionParams ) => { const authToken = connectionParams . authToken ; if ( ! isValid ( authToken )) { throw new Error ( 'Token is not valid' ); } // extract user information from token const user = parseToken ( authToken ); // return user info to add them to the context later return { user }; }, } }, context : ({ connection }) => { // connection.context will be equal to what was returned by the \"onConnect\" callback }, }), The authToken in this example is only sent once by the client, when the connection is first established. All subscriptions made with this connection will have the same authToken , and thus the same user info. warning Note There is a bug in subscriptions-transport-ws that allows connections to skip the onConnect phase (read more ). You should not assume that onConnect was called when the user starts a subscription, and always check that the context is populated. If you're using the graphql-ws package, the signature of the onConnect callback will be slightly different: subscriptions : { 'graphql-ws' : { onConnect : ( context : Context < any > ) => { const { connectionParams } = context ; // the rest will remain the same as in the example above }, }, },","title":"Authentication over WebSocket"},{"location":"graphql/unions-and-enums/","text":"Unions \u00b6 Union types are very similar to interfaces, but they don't get to specify any common fields between the types (read more here ). Unions are useful for returning disjoint data types from a single field. Code first \u00b6 To define a GraphQL union type, we must define classes that this union will be composed of. Following the example from the Apollo documentation, we'll create two classes. First, Book : import { Field , ObjectType } from '@nestjs/graphql' ; @ObjectType () export class Book { @Field () title : string ; } And then Author : import { Field , ObjectType } from '@nestjs/graphql' ; @ObjectType () export class Author { @Field () name : string ; } With this in place, register the ResultUnion union using the createUnionType function exported from the @nestjs/graphql package: export const ResultUnion = createUnionType ({ name : 'ResultUnion' , types : () => [ Author , Book ], }); Now, we can reference the ResultUnion in our query: @Query ( returns => [ ResultUnion ]) search () : Array < typeof ResultUnion > { return [ new Author (), new Book ()]; } This will result in generating the following part of the GraphQL schema in SDL: type Author { name: String! } type Book { title: String! } union ResultUnion = Author | Book type Query { search: [ResultUnion!]! } The default resolveType() function generated by the library will extract the type based on the value returned from the resolver method. That means returning class instances instead of literal JavaScript object is obligatory. To provide a customized resolveType() function, pass the resolveType property to the options object passed into the createUnionType() function, as follows: export const ResultUnion = createUnionType ({ name : 'ResultUnion' , types : () => [ Author , Book ], resolveType ( value ) { if ( value . name ) { return Author ; } if ( value . title ) { return Book ; } return null ; }, }); Schema first \u00b6 To define a union in the schema first approach, simply create a GraphQL union with SDL. type Author { name: String! } type Book { title: String! } union ResultUnion = Author | Book Then, you can use the typings generation feature (as shown in the quick start chapter) to generate corresponding TypeScript definitions: export class Author { name : string ; } export class Book { title : string ; } export type ResultUnion = Author | Book ; Unions require an extra __resolveType field in the resolver map to determine which type the union should resolve to. Also, note that the ResultUnionResolver class has to be registered as a provider in any module. Let's create a ResultUnionResolver class and define the __resolveType method. @Resolver ( 'ResultUnion' ) export class ResultUnionResolver { @ResolveField () __resolveType ( value ) { if ( value . name ) { return 'Author' ; } if ( value . title ) { return 'Book' ; } return null ; } } info Hint All decorators are exported from the @nestjs/graphql package. Enums \u00b6 Enumeration types are a special kind of scalar that is restricted to a particular set of allowed values (read more here ). This allows you to: validate that any arguments of this type are one of the allowed values communicate through the type system that a field will always be one of a finite set of values Code first \u00b6 When using the code first approach, you define a GraphQL enum type by simply creating a TypeScript enum. export enum AllowedColor { RED , GREEN , BLUE , } With this in place, register the AllowedColor enum using the registerEnumType function exported from the @nestjs/graphql package: registerEnumType ( AllowedColor , { name : 'AllowedColor' , }); Now you can reference the AllowedColor in our types: @Field ( type => AllowedColor ) favoriteColor : AllowedColor ; This will result in generating the following part of the GraphQL schema in SDL: enum AllowedColor { RED GREEN BLUE } To provide a description for the enum, pass the description property into the registerEnumType() function. registerEnumType ( AllowedColor , { name : 'AllowedColor' , description : 'The supported colors.' , }); To provide a description for the enum values, or to mark a value as deprecated, pass the valuesMap property, as follows: registerEnumType ( AllowedColor , { name : 'AllowedColor' , description : 'The supported colors.' , valuesMap : { RED : { description : 'The default color.' , }, BLUE : { deprecationReason : 'Too blue.' , }, }, }); This will generate the following GraphQL schema in SDL: \"\"\" The supported colors. \"\"\" enum AllowedColor { \"\"\" The default color. \"\"\" RED GREEN BLUE @deprecated(reason: \"Too blue.\") } Schema first \u00b6 To define an enumerator in the schema first approach, simply create a GraphQL enum with SDL. enum AllowedColor { RED GREEN BLUE } Then you can use the typings generation feature (as shown in the quick start chapter) to generate corresponding TypeScript definitions: export enum AllowedColor { RED GREEN BLUE } Sometimes a backend forces a different value for an enum internally than in the public API. In this example the API contains RED , however in resolvers we may use #f00 instead (read more here ). To accomplish this, declare a resolver object for the AllowedColor enum: export const allowedColorResolver : Record < keyof typeof AllowedColor , any > = { RED : '#f00' , }; info Hint All decorators are exported from the @nestjs/graphql package. Then use this resolver object together with the resolvers property of the GraphQLModule#forRoot() method, as follows: GraphQLModule . forRoot ({ resolvers : { AllowedColor : allowedColorResolver , }, });","title":"\u8054\u5408\u548c\u679a\u4e3e"},{"location":"graphql/unions-and-enums/#unions","text":"Union types are very similar to interfaces, but they don't get to specify any common fields between the types (read more here ). Unions are useful for returning disjoint data types from a single field.","title":"Unions"},{"location":"graphql/unions-and-enums/#code-first","text":"To define a GraphQL union type, we must define classes that this union will be composed of. Following the example from the Apollo documentation, we'll create two classes. First, Book : import { Field , ObjectType } from '@nestjs/graphql' ; @ObjectType () export class Book { @Field () title : string ; } And then Author : import { Field , ObjectType } from '@nestjs/graphql' ; @ObjectType () export class Author { @Field () name : string ; } With this in place, register the ResultUnion union using the createUnionType function exported from the @nestjs/graphql package: export const ResultUnion = createUnionType ({ name : 'ResultUnion' , types : () => [ Author , Book ], }); Now, we can reference the ResultUnion in our query: @Query ( returns => [ ResultUnion ]) search () : Array < typeof ResultUnion > { return [ new Author (), new Book ()]; } This will result in generating the following part of the GraphQL schema in SDL: type Author { name: String! } type Book { title: String! } union ResultUnion = Author | Book type Query { search: [ResultUnion!]! } The default resolveType() function generated by the library will extract the type based on the value returned from the resolver method. That means returning class instances instead of literal JavaScript object is obligatory. To provide a customized resolveType() function, pass the resolveType property to the options object passed into the createUnionType() function, as follows: export const ResultUnion = createUnionType ({ name : 'ResultUnion' , types : () => [ Author , Book ], resolveType ( value ) { if ( value . name ) { return Author ; } if ( value . title ) { return Book ; } return null ; }, });","title":"Code first"},{"location":"graphql/unions-and-enums/#schema-first","text":"To define a union in the schema first approach, simply create a GraphQL union with SDL. type Author { name: String! } type Book { title: String! } union ResultUnion = Author | Book Then, you can use the typings generation feature (as shown in the quick start chapter) to generate corresponding TypeScript definitions: export class Author { name : string ; } export class Book { title : string ; } export type ResultUnion = Author | Book ; Unions require an extra __resolveType field in the resolver map to determine which type the union should resolve to. Also, note that the ResultUnionResolver class has to be registered as a provider in any module. Let's create a ResultUnionResolver class and define the __resolveType method. @Resolver ( 'ResultUnion' ) export class ResultUnionResolver { @ResolveField () __resolveType ( value ) { if ( value . name ) { return 'Author' ; } if ( value . title ) { return 'Book' ; } return null ; } } info Hint All decorators are exported from the @nestjs/graphql package.","title":"Schema first"},{"location":"graphql/unions-and-enums/#enums","text":"Enumeration types are a special kind of scalar that is restricted to a particular set of allowed values (read more here ). This allows you to: validate that any arguments of this type are one of the allowed values communicate through the type system that a field will always be one of a finite set of values","title":"Enums"},{"location":"graphql/unions-and-enums/#code-first_1","text":"When using the code first approach, you define a GraphQL enum type by simply creating a TypeScript enum. export enum AllowedColor { RED , GREEN , BLUE , } With this in place, register the AllowedColor enum using the registerEnumType function exported from the @nestjs/graphql package: registerEnumType ( AllowedColor , { name : 'AllowedColor' , }); Now you can reference the AllowedColor in our types: @Field ( type => AllowedColor ) favoriteColor : AllowedColor ; This will result in generating the following part of the GraphQL schema in SDL: enum AllowedColor { RED GREEN BLUE } To provide a description for the enum, pass the description property into the registerEnumType() function. registerEnumType ( AllowedColor , { name : 'AllowedColor' , description : 'The supported colors.' , }); To provide a description for the enum values, or to mark a value as deprecated, pass the valuesMap property, as follows: registerEnumType ( AllowedColor , { name : 'AllowedColor' , description : 'The supported colors.' , valuesMap : { RED : { description : 'The default color.' , }, BLUE : { deprecationReason : 'Too blue.' , }, }, }); This will generate the following GraphQL schema in SDL: \"\"\" The supported colors. \"\"\" enum AllowedColor { \"\"\" The default color. \"\"\" RED GREEN BLUE @deprecated(reason: \"Too blue.\") }","title":"Code first"},{"location":"graphql/unions-and-enums/#schema-first_1","text":"To define an enumerator in the schema first approach, simply create a GraphQL enum with SDL. enum AllowedColor { RED GREEN BLUE } Then you can use the typings generation feature (as shown in the quick start chapter) to generate corresponding TypeScript definitions: export enum AllowedColor { RED GREEN BLUE } Sometimes a backend forces a different value for an enum internally than in the public API. In this example the API contains RED , however in resolvers we may use #f00 instead (read more here ). To accomplish this, declare a resolver object for the AllowedColor enum: export const allowedColorResolver : Record < keyof typeof AllowedColor , any > = { RED : '#f00' , }; info Hint All decorators are exported from the @nestjs/graphql package. Then use this resolver object together with the resolvers property of the GraphQLModule#forRoot() method, as follows: GraphQLModule . forRoot ({ resolvers : { AllowedColor : allowedColorResolver , }, });","title":"Schema first"},{"location":"microservices/basics/","text":"\u6982\u8ff0 \u00b6 \u9664\u4e86\u4f20\u7edf\u7684(\u6709\u65f6\u79f0\u4e3a\u5355\u7247\u7684)\u5e94\u7528\u7a0b\u5e8f\u67b6\u6784\u5916\uff0cNest \u672c\u8eab\u652f\u6301\u5fae\u670d\u52a1\u67b6\u6784\u98ce\u683c\u7684\u5f00\u53d1\u3002 \u672c\u6587\u6863\u4e2d\u5176\u4ed6\u5730\u65b9\u8ba8\u8bba\u7684\u5927\u591a\u6570\u6982\u5ff5\uff0c\u6bd4\u5982\u4f9d\u8d56\u6ce8\u5165\u3001\u88c5\u9970\u5668\u3001\u5f02\u5e38\u8fc7\u6ee4\u5668\u3001\u7ba1\u9053\u3001\u5b88\u536b\u548c\u62e6\u622a\u5668\uff0c\u90fd\u540c\u6837\u9002\u7528\u4e8e\u5fae\u670d\u52a1\u3002 \u53ea\u8981\u6709\u53ef\u80fd\uff0cNest \u5c31\u4f1a\u62bd\u8c61\u5b9e\u73b0\u7ec6\u8282\uff0c\u8fd9\u6837\u76f8\u540c\u7684\u7ec4\u4ef6\u5c31\u53ef\u4ee5\u5728\u57fa\u4e8e http \u7684\u5e73\u53f0\u3001WebSockets \u548c\u5fae\u670d\u52a1\u4e0a\u8fd0\u884c\u3002 \u672c\u8282\u5c06\u4ecb\u7ecd Nest \u7279\u5b9a\u4e8e\u5fae\u670d\u52a1\u7684\u5404\u4e2a\u65b9\u9762\u3002 \u5728 Nest \u4e2d\uff0c\u5fae\u670d\u52a1\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4f7f\u7528\u4e86\u4e0e HTTP \u4e0d\u540c\u7684 \u4f20\u8f93 \u5c42\u3002 Nest \u652f\u6301\u51e0\u4e2a\u5185\u7f6e\u7684\u4f20\u8f93\u5c42\u5b9e\u73b0\uff0c\u79f0\u4e3a transporters \uff0c\u8d1f\u8d23\u5728\u4e0d\u540c\u7684\u5fae\u670d\u52a1\u5b9e\u4f8b\u4e4b\u95f4\u4f20\u8f93\u6d88\u606f\u3002 \u5927\u591a\u6570\u4f20\u8f93\u5668\u5929\u751f\u652f\u6301 \u8bf7\u6c42-\u54cd\u5e94 \u548c \u57fa\u4e8e\u4e8b\u4ef6\u7684 \u6d88\u606f\u6837\u5f0f\u3002 Nest \u5c06\u6bcf\u4e2a\u4f20\u8f93\u5668\u7684\u5b9e\u73b0\u7ec6\u8282\u62bd\u8c61\u4e3a\u4e00\u4e2a\u89c4\u8303\u63a5\u53e3\uff0c\u7528\u4e8e\u57fa\u4e8e\u8bf7\u6c42-\u54cd\u5e94\u548c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d88\u606f\u4f20\u9012\u3002 \u8fd9\u4f7f\u5f97\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4ece\u4e00\u4e2a\u4f20\u8f93\u5c42\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u4f20\u8f93\u5c42\u2014\u2014\u4f8b\u5982\uff0c\u5229\u7528\u7279\u5b9a\u4f20\u8f93\u5c42\u7684\u7279\u5b9a\u53ef\u9760\u6027\u6216\u6027\u80fd\u7279\u6027\u2014\u2014\u800c\u4e0d\u4f1a\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u6784\u5efa\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save @nestjs/microservices \u5f00\u59cb \u00b6 \u8981\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u4f7f\u7528 NestFactory \u7c7b\u7684 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { Transport , MicroserviceOptions } from '@nestjs/microservices' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.TCP , }, ); app . listen (); } bootstrap (); @ @switch import { NestFactory } from '@nestjs/core' ; import { Transport , MicroserviceOptions } from '@nestjs/microservices' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.TCP , }); app . listen (() => console . log ( 'Microservice is listening' )); } bootstrap (); info Hint \u5fae\u670d\u52a1\u9ed8\u8ba4\u4f7f\u7528 TCP \u4f20\u8f93\u5c42\u3002 createMicroservice() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a options \u5bf9\u8c61\u3002 \u8be5\u5bf9\u8c61\u53ef\u4ee5\u7531\u4e24\u4e2a\u6210\u5458\u7ec4\u6210: transport \u6307\u5b9a\u4f20\u8f93\u5668 (\u4f8b\u5982, Transport.NATS ) options \u786e\u5b9a\u4f20\u8f93\u7a0b\u5e8f\u884c\u4e3a\u7684\u4f20\u8f93\u7a0b\u5e8f\u7279\u5b9a\u7684\u9009\u9879\u5bf9\u8c61 options \u5bf9\u8c61\u7279\u5b9a\u4e8e\u6240\u9009\u7684\u4f20\u8f93\u5668\u3002 TCP \u4f20\u8f93\u5668\u516c\u5f00 \u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 \u5bf9\u4e8e\u5176\u4ed6\u4f20\u8f93\u5668(\u5982 Redis\u3001MQTT \u7b49)\uff0c\u8bf7\u53c2\u9605\u76f8\u5173\u7ae0\u8282\u4ee5\u4e86\u89e3\u53ef\u7528\u9009\u9879\u7684\u63cf\u8ff0\u3002 host \u8fde\u63a5\u4e3b\u673a\u540d port \u8fde\u63a5\u7aef\u53e3 retryAttempts \u91cd\u8bd5\u6d88\u606f\u7684\u6b21\u6570 (default: 0 ) retryDelay \u6d88\u606f\u91cd\u8bd5\u95f4\u9694\u65f6\u95f4(ms)(default: 0 ) \u6a21\u5f0f \u00b6 \u5fae\u670d\u52a1\u901a\u8fc7 \u6a21\u5f0f \u8bc6\u522b\u6d88\u606f\u548c\u4e8b\u4ef6\u3002 \u6a21\u5f0f\u662f\u666e\u901a\u503c\uff0c\u4f8b\u5982\uff0c\u6587\u5b57\u5bf9\u8c61\u6216\u5b57\u7b26\u4e32\u3002 \u6a21\u5f0f\u88ab\u81ea\u52a8\u5e8f\u5217\u5316\uff0c\u5e76\u4e0e\u6d88\u606f\u7684\u6570\u636e\u90e8\u5206\u4e00\u8d77\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6d88\u606f\u53d1\u9001\u8005\u548c\u4f7f\u7528\u8005\u53ef\u4ee5\u534f\u8c03\u54ea\u4e9b\u8bf7\u6c42\u7531\u54ea\u4e9b\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528\u3002 \u8bf7\u6c42-\u54cd\u5e94 \u00b6 \u5f53\u60a8\u9700\u8981\u5728\u5404\u79cd\u5916\u90e8\u670d\u52a1\u4e4b\u95f4 \u4ea4\u6362 \u6d88\u606f\u65f6\uff0c\u8bf7\u6c42-\u54cd\u5e94\u6d88\u606f\u6837\u5f0f\u975e\u5e38\u6709\u7528\u3002 \u4f7f\u7528\u6b64\u8303\u4f8b\uff0c\u60a8\u53ef\u4ee5\u786e\u5b9a\u670d\u52a1\u5df2\u7ecf\u5b9e\u9645\u63a5\u6536\u4e86\u6d88\u606f(\u800c\u4e0d\u9700\u8981\u624b\u52a8\u5b9e\u73b0\u6d88\u606f ACK \u534f\u8bae)\u3002 \u7136\u800c\uff0c\u8bf7\u6c42-\u54cd\u5e94\u8303\u4f8b\u5e76\u4e0d\u603b\u662f\u6700\u4f73\u9009\u62e9\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528\u57fa\u4e8e\u65e5\u5fd7\u7684\u6301\u4e45\u6027\u7684\u6d41\u4f20\u8f93\u5668\uff0c\u5982 Kafka \u6216 NATS \u6d41\u4f20\u8f93\u5668 \uff0c\u88ab\u4f18\u5316\u4ee5\u89e3\u51b3\u4e0d\u540c\u8303\u56f4\u7684\u95ee\u9898\uff0c\u66f4\u7b26\u5408\u4e8b\u4ef6\u6d88\u606f\u4f20\u9012\u8303\u4f8b(\u8bf7\u53c2\u9605\u4e0b\u9762\u7684 \u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d88\u606f\u4f20\u9012 \u4ee5\u4e86\u89e3\u66f4\u591a\u7ec6\u8282)\u3002 \u4e3a\u4e86\u542f\u7528\u8bf7\u6c42-\u54cd\u5e94\u6d88\u606f\u7c7b\u578b\uff0cNest \u521b\u5efa\u4e86\u4e24\u4e2a\u903b\u8f91\u901a\u9053\u2014\u2014\u4e00\u4e2a\u8d1f\u8d23\u4f20\u8f93\u6570\u636e\uff0c\u53e6\u4e00\u4e2a\u8d1f\u8d23\u7b49\u5f85\u4f20\u5165\u7684\u54cd\u5e94\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u5e95\u5c42\u4f20\u8f93\uff0c\u5982 NATS \uff0c\u8fd9\u79cd\u53cc\u901a\u9053\u652f\u6301\u662f\u5f00\u7bb1\u5373\u7528\u7684\u3002 \u5bf9\u4e8e\u5176\u4ed6\u4eba\uff0cNest \u4f1a\u624b\u52a8\u521b\u5efa\u5355\u72ec\u7684\u901a\u9053\u4f5c\u4e3a\u8865\u507f\u3002 \u8fd9\u53ef\u80fd\u4f1a\u5e26\u6765\u4e00\u4e9b\u5f00\u9500\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u4e0d\u9700\u8981\u8bf7\u6c42-\u54cd\u5e94\u6d88\u606f\u6837\u5f0f\uff0c\u5219\u5e94\u8be5\u8003\u8651\u4f7f\u7528\u57fa\u4e8e\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002 \u8981\u521b\u5efa\u57fa\u4e8e\u8bf7\u6c42-\u54cd\u5e94\u8303\u4f8b\u7684\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\uff0c\u8bf7\u4f7f\u7528 @MessagePattern() \u88c5\u9970\u5668\uff0c\u5b83\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u5e94\u8be5\u53ea\u5728 controller \u7c7b\u4e2d\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002 \u5728\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u88ab Nest \u8fd0\u884c\u65f6\u5ffd\u7565\u3002 @ @filename ( math . controller ) import { Controller } from '@nestjs/common' ; import { MessagePattern } from '@nestjs/microservices' ; @Controller () export class MathController { @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } } @ @switch import { Controller } from '@nestjs/common' ; import { MessagePattern } from '@nestjs/microservices' ; @Controller () export class MathController { @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); } } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c accumulate() \u6d88\u606f\u5904\u7406\u5668 \u76d1\u542c\u6ee1\u8db3 {{ '{' }} cmd: 'sum' {{ '}' }} \u6d88\u606f\u6a21\u5f0f\u7684\u6d88\u606f\u3002 \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u4ece\u5ba2\u6237\u7aef\u4f20\u9012\u7684\u2018data\u2019\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u662f\u4e00\u4e2a\u8981\u7d2f\u79ef\u7684\u6570\u5b57\u6570\u7ec4\u3002 \u5f02\u6b65\u54cd\u5e94 \u00b6 \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u540c\u6b65\u6216\u5f02\u6b65\u54cd\u5e94\u3002 \u56e0\u6b64\uff0c\u652f\u6301 async \u65b9\u6cd5\u3002 @ @filename () @MessagePattern ({ cmd : 'sum' }) async accumulate ( data : number []) : Promise < number > { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @MessagePattern ({ cmd : 'sum' }) async accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); } \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u4e5f\u80fd\u591f\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u503c\u5c06\u88ab\u89e6\u53d1\uff0c\u76f4\u5230\u6d41\u5b8c\u6210\u3002 @ @filename () @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : Observable < number > { return from ([ 1 , 2 , 3 ]); } @ @switch @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : Observable < number > { return from ([ 1 , 2 , 3 ]); } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u5c06\u54cd\u5e94 3 \u6b21 (\u6bcf\u4e00\u9879\u90fd\u6765\u81ea\u6570\u7ec4)\u3002 \u57fa\u4e8e\u4e8b\u4ef6\u7684 \u00b6 \u867d\u7136\u8bf7\u6c42-\u54cd\u5e94\u65b9\u6cd5\u662f\u670d\u52a1\u4e4b\u95f4\u4ea4\u6362\u6d88\u606f\u7684\u7406\u60f3\u65b9\u6cd5\uff0c\u4f46\u5f53\u60a8\u7684\u6d88\u606f\u6837\u5f0f\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684\u2014\u2014\u5f53\u60a8\u53ea\u60f3\u53d1\u5e03 \u4e8b\u4ef6 \u800c\u4e0d\u7b49\u5f85\u54cd\u5e94\u65f6\uff0c\u5b83\u5c31\u4e0d\u592a\u9002\u5408\u4e86\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u5e0c\u671b\u7ef4\u62a4\u4e24\u4e2a\u901a\u9053\u6240\u9700\u7684\u8bf7\u6c42-\u54cd\u5e94\u5f00\u9500\u3002 \u5047\u8bbe\u60a8\u60f3\u7b80\u5355\u5730\u901a\u77e5\u53e6\u4e00\u4e2a\u670d\u52a1\u5728\u7cfb\u7edf\u7684\u8fd9\u4e00\u90e8\u5206\u53d1\u751f\u4e86\u67d0\u4e2a\u6761\u4ef6\u3002 \u8fd9\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d88\u606f\u6837\u5f0f\u7684\u7406\u60f3\u7528\u4f8b\u3002 \u8981\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u6211\u4eec\u4f7f\u7528 @EventPattern() \u88c5\u9970\u5668\uff0c\u5b83\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 @ @filename () @EventPattern ( 'user_created' ) async handleUserCreated ( data : Record < string , unknown > ) { // business logic } @ @switch @EventPattern ( 'user_created' ) async handleUserCreated ( data ) { // business logic } info Hint \u4f60\u53ef\u4ee5\u4e3a\u4e00\u4e2a \u5355\u4e2a \u4e8b\u4ef6\u6a21\u5f0f\u6ce8\u518c\u591a\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u6240\u6709\u7684\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u90fd\u5c06\u88ab\u81ea\u52a8\u5e76\u884c\u89e6\u53d1\u3002 handleUserCreated() \u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f \u76d1\u542c user_created \u4e8b\u4ef6\u3002 \u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u4ece\u5ba2\u6237\u7aef\u4f20\u9012\u7684 \u6570\u636e (\u5728\u672c\u4f8b\u4e2d\uff0c\u662f\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u7684\u4e8b\u4ef6\u6709\u6548\u8d1f\u8f7d)\u3002 \u4fee\u9970\u7b26 \u00b6 \u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e\u5177\u6709\u901a\u914d\u7b26\u8ba2\u9605\u7684 NATS\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u83b7\u53d6\u751f\u4ea7\u8005\u5df2\u5c06\u6d88\u606f\u53d1\u9001\u5230\u7684\u539f\u59cb\u4e3b\u9898\u3002 \u540c\u6837\uff0c\u5728 Kafka \u4e2d\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u8bbf\u95ee\u6d88\u606f\u5934\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528\u5185\u7f6e\u88c5\u9970\u5668: @ @filename () @MessagePattern ( 'time.us.*' ) getDate ( @Payload () data : number [], @Ctx () context : NatsContext ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'time.us.*' ) getDate ( data , context ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } info Hint @Payload() , @Ctx() and NatsContext \u4ece @nestjs/microservices \u5bfc\u5165. info Hint \u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5c5e\u6027\u952e\u7ed9 @Payload() \u88c5\u9970\u5668\u6765\u4ece\u4f20\u5165\u7684 payload \u5bf9\u8c61\u4e2d\u63d0\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u5c5e\u6027\uff0c\u4f8b\u5982 @Payload('id') \u3002 \u5ba2\u6237\u7aef \u00b6 \u5ba2\u6237\u7aef Nest \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 ClientProxy \u7c7b\u5411 Nest \u5fae\u670d\u52a1\u4ea4\u6362\u6d88\u606f\u6216\u53d1\u5e03\u4e8b\u4ef6\u3002 \u8fd9\u4e2a\u7c7b\u5b9a\u4e49\u4e86\u51e0\u4e2a\u65b9\u6cd5\uff0c\u6bd4\u5982 send() (\u7528\u4e8e\u8bf7\u6c42-\u54cd\u5e94\u6d88\u606f\u4f20\u9012)\u548c emit() (\u7528\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u6d88\u606f\u4f20\u9012)\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5141\u8bb8\u60a8\u4e0e\u8fdc\u7a0b\u5fae\u670d\u52a1\u901a\u4fe1\u3002 \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4e4b\u4e00\u83b7\u53d6\u8be5\u7c7b\u7684\u5b9e\u4f8b\u3002 \u4e00\u79cd\u6280\u672f\u662f\u5bfc\u5165 ClientsModule \uff0c\u5b83\u516c\u5f00\u4e86\u9759\u6001\u7684 register() \u65b9\u6cd5\u3002 \u6b64\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u662f\u4ee3\u8868\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u7684\u5bf9\u8c61\u6570\u7ec4\u3002 \u6bcf\u4e2a\u8fd9\u6837\u7684\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a name \u5c5e\u6027\u3001\u4e00\u4e2a\u53ef\u9009\u7684 transport \u5c5e\u6027(\u9ed8\u8ba4\u4e3a transport.tcp )\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u7279\u5b9a\u4e8e\u4f20\u8f93\u5668\u7684 options \u5c5e\u6027\u3002 name \u5c5e\u6027\u4f5c\u4e3a\u4e00\u4e2a \u6ce8\u5165\u4ee4\u724c \uff0c\u53ef\u4ee5\u5728\u9700\u8981\u7684\u5730\u65b9\u6ce8\u5165\u4e00\u4e2a ClientProxy \u7684\u5b9e\u4f8b\u3002 name \u5c5e\u6027\u7684\u503c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6ce8\u5165\u4ee4\u724c\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\u6216 JavaScript \u7b26\u53f7\uff0c\u5982 \u8fd9\u91cc \u6240\u8ff0\u3002 options \u5c5e\u6027\u662f\u4e00\u4e2a\u4e0e\u6211\u4eec\u4e4b\u524d\u5728 createMicroservice() \u65b9\u6cd5\u4e2d\u770b\u5230\u7684\u5c5e\u6027\u76f8\u540c\u7684\u5bf9\u8c61\u3002 @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.TCP }, ]), ] ... }) \u4e00\u65e6\u6a21\u5757\u88ab\u5bfc\u5165\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\uff0c\u6ce8\u5165 ClientProxy \u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u662f\u901a\u8fc7\u4e0a\u9762\u663e\u793a\u7684 MATH_SERVICE \u4f20\u8f93\u5668\u9009\u9879\u6307\u5b9a\u7684\u3002 constructor ( @Inject ( 'MATH_SERVICE' ) private client : ClientProxy , ) {} info Hint ClientsModule \u548c ClientProxy \u7c7b\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u6709\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4ece\u53e6\u4e00\u4e2a\u670d\u52a1(\u6bd4\u5982 ConfigService )\u83b7\u53d6\u4f20\u8f93\u5668\u914d\u7f6e\uff0c\u800c\u4e0d\u662f\u5728\u6211\u4eec\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e2d\u786c\u7f16\u7801\u5b83\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ClientProxyFactory \u7c7b\u6ce8\u518c\u4e00\u4e2a custom provider \u3002 \u8fd9\u4e2a\u7c7b\u6709\u4e00\u4e2a\u9759\u6001\u7684 create() \u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u4f20\u8f93\u5668\u9009\u9879\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 ClientProxy \u5b9e\u4f8b\u3002 @Module ({ providers : [ { provide : 'MATH_SERVICE' , useFactory : ( configService : ConfigService ) => { const mathSvcOptions = configService . getMathSvcOptions (); return ClientProxyFactory . create ( mathSvcOptions ); }, inject : [ ConfigService ], } ] ... }) info Hint ClientProxyFactory \u662f\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684\u3002 \u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u4f7f\u7528@Client()\u5c5e\u6027\u88c5\u9970\u5668\u3002 @Client ({ transport : Transport.TCP }) client : ClientProxy ; info Hint The @Client() decorator is imported from the @nestjs/microservices package. \u4f7f\u7528 @Client() \u88c5\u9970\u5668\u4e0d\u662f\u9996\u9009\u7684\u6280\u672f\uff0c\u56e0\u4e3a\u5b83\u66f4\u96be\u6d4b\u8bd5\uff0c\u66f4\u96be\u5171\u4eab\u5ba2\u6237\u7aef\u5b9e\u4f8b\u3002 ClientProxy \u662f lazy \u3002 \u5b83\u4e0d\u4f1a\u7acb\u5373\u542f\u52a8\u8fde\u63a5\u3002 \u76f8\u53cd\uff0c\u5b83\u5c06\u5728\u7b2c\u4e00\u6b21\u5fae\u670d\u52a1\u8c03\u7528\u4e4b\u524d\u5efa\u7acb\uff0c\u7136\u540e\u5728\u6bcf\u4e2a\u540e\u7eed\u8c03\u7528\u4e4b\u95f4\u91cd\u7528\u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5ef6\u8fdf\u5e94\u7528\u7a0b\u5e8f\u7684\u5f15\u5bfc\u8fc7\u7a0b\uff0c\u76f4\u5230\u8fde\u63a5\u5efa\u7acb\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 OnApplicationBootstrap \u751f\u547d\u5468\u671f\u94a9\u5b50\u4e2d\u7684 ClientProxy \u5bf9\u8c61\u7684 connect() \u65b9\u6cd5\u624b\u52a8\u542f\u52a8\u4e00\u4e2a\u8fde\u63a5\u3002 @ @filename () async onApplicationBootstrap () { await this . client . connect (); } If the connection cannot be created, the connect() method will reject with the corresponding error object. \u53d1\u9001\u6d88\u606f \u00b6 ClientProxy \u516c\u5f00\u4e86\u4e00\u4e2a send() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u7684\u76ee\u7684\u662f\u8c03\u7528\u5fae\u670d\u52a1\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u54cd\u5e94\u7684' Observable '\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8ba2\u9605\u53d1\u51fa\u7684\u503c\u3002 @ @filename () accumulate () : Observable < number > { const pattern = { cmd : 'sum' }; const payload = [ 1 , 2 , 3 ]; return this . client . send < number > ( pattern , payload ); } @ @switch accumulate () { const pattern = { cmd : 'sum' }; const payload = [ 1 , 2 , 3 ]; return this . client . send ( pattern , payload ); } send() \u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570\uff0c pattern \u548c payload \u3002 pattern \u5e94\u8be5\u4e0e @messageppattern() \u88c5\u9970\u5668\u4e2d\u5b9a\u4e49\u7684\u6a21\u5f0f\u5339\u914d\u3002 \u6709\u6548\u8d1f\u8f7d \u662f\u6211\u4eec\u60f3\u8981\u4f20\u8f93\u5230\u8fdc\u7a0b\u5fae\u670d\u52a1\u7684\u6d88\u606f\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a \u51b7\u7684 \u53ef\u89c2\u5bdf\u5bf9\u8c61 \uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5728\u6d88\u606f\u88ab\u53d1\u9001\u4e4b\u524d\u663e\u5f0f\u5730\u8ba2\u9605\u5b83\u3002 \u53d1\u5e03\u4e8b\u4ef6 \u00b6 \u8981\u53d1\u9001\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8bf7\u4f7f\u7528 ClientProxy \u5bf9\u8c61\u7684 emit() \u65b9\u6cd5\u3002 \u6b64\u65b9\u6cd5\u5c06\u4e8b\u4ef6\u53d1\u5e03\u5230\u6d88\u606f\u4ee3\u7406\u3002 @ @filename () async publish () { this . client . emit < number > ( 'user_created' , new UserCreatedEvent ()); } @ @switch async publish () { this . client . emit ( 'user_created' , new UserCreatedEvent ()); } emit() \u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570\uff0c pattern \u548c payload \u3002 pattern \u5e94\u8be5\u4e0e @EventPattern() \u88c5\u9970\u5668\u4e2d\u5b9a\u4e49\u7684\u6a21\u5f0f\u5339\u914d\u3002 payload \u662f\u6211\u4eec\u60f3\u8981\u4f20\u8f93\u5230\u8fdc\u7a0b\u5fae\u670d\u52a1\u7684\u4e8b\u4ef6\u6709\u6548\u8f7d\u8377\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a \u70ed\u7684 \u53ef\u89c2\u5bdf\u5bf9\u8c61 (\u4e0d\u50cf send() \u8fd4\u56de\u7684\u51b7\u7684 \u53ef\u89c2\u5bdf\u5bf9\u8c61 )\uff0c\u8fd9\u610f\u5473\u7740\u65e0\u8bba\u4f60\u662f\u5426\u663e\u5f0f\u5730\u8ba2\u9605\u4e86\u8fd9\u4e2a\u53ef\u89c2\u5bdf\u5bf9\u8c61\uff0c\u4ee3\u7406\u90fd\u4f1a\u7acb\u5373\u5c1d\u8bd5\u53d1\u9001\u8fd9\u4e2a\u4e8b\u4ef6\u3002 \u4f5c\u7528\u57df \u00b6 \u5bf9\u4e8e\u6765\u81ea\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u53d1\u73b0\uff0c\u5728 Nest \u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u5728\u4f20\u5165\u8bf7\u6c42\u4e4b\u95f4\u5171\u4eab\u7684\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u5230\u6570\u636e\u5e93\u7684\u8fde\u63a5\u6c60\uff0c\u5e26\u6709\u5168\u5c40\u72b6\u6001\u7684\u5355\u4f8b\u670d\u52a1\uff0c\u7b49\u7b49\u3002 \u8bb0\u4f4f\uff0cNode.js \u5e76\u4e0d\u9075\u5faa\u8bf7\u6c42/\u54cd\u5e94\u591a\u7ebf\u7a0b\u65e0\u72b6\u6001\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u7531\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u5904\u7406\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u4f7f\u7528\u5355\u4f8b\u5b9e\u4f8b\u662f\u5b8c\u5168\u5b89\u5168\u7684\u3002 \u7136\u800c\uff0c\u5728\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u8bf7\u6c42\u7684\u5904\u7406\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u53ef\u80fd\u662f\u6240\u9700\u7684\u884c\u4e3a\uff0c\u4f8b\u5982 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7f13\u5b58\u3001\u8bf7\u6c42\u8ddf\u8e2a\u6216\u591a\u79df\u6237\u3002 \u4e86\u89e3\u5982\u4f55\u63a7\u5236\u8303\u56f4 \u5728\u8fd9\u91cc \u3002 \u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u5904\u7406\u7a0b\u5e8f\u548c\u63d0\u4f9b\u8005\u53ef\u4ee5\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u7ed3\u5408 CONTEXT \u4ee4\u724c\u6765\u6ce8\u5165 RequestContext : import { Injectable , Scope , Inject } from '@nestjs/common' ; import { CONTEXT , RequestContext } from '@nestjs/microservices' ; @Injectable ({ scope : Scope.REQUEST }) export class CatsService { constructor ( @Inject ( CONTEXT ) private ctx : RequestContext ) {} } \u8fd9\u63d0\u4f9b\u4e86\u5bf9 RequestContext \u5bf9\u8c61\u7684\u8bbf\u95ee\uff0c\u8be5\u5bf9\u8c61\u6709\u4e24\u4e2a\u5c5e\u6027: export interface RequestContext < T = any > { pattern : string | Record < string , any > ; data : T ; } data \u5c5e\u6027\u662f\u7531\u6d88\u606f\u751f\u6210\u5668\u53d1\u9001\u7684\u6d88\u606f\u6709\u6548\u8d1f\u8f7d\u3002 pattern \u5c5e\u6027\u662f\u7528\u6765\u6807\u8bc6\u5904\u7406\u4f20\u5165\u6d88\u606f\u7684\u9002\u5f53\u5904\u7406\u7a0b\u5e8f\u7684\u6a21\u5f0f\u3002 \u5904\u7406\u8d85\u65f6 \u00b6 \u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6709\u65f6\u5fae\u670d\u52a1\u53ef\u80fd\u4f1a\u5173\u95ed\u6216\u4e0d\u53ef\u7528\u3002 \u4e3a\u4e86\u907f\u514d\u65e0\u9650\u957f\u7684\u7b49\u5f85\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 timeout \u3002 \u5728\u4e0e\u5176\u4ed6\u670d\u52a1\u901a\u4fe1\u65f6\uff0c\u8d85\u65f6\u662f\u4e00\u79cd\u975e\u5e38\u6709\u7528\u7684\u6a21\u5f0f\u3002 \u8981\u5728\u5fae\u670d\u52a1\u8c03\u7528\u4e2d\u5e94\u7528\u8d85\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528' RxJS '\u8d85\u65f6\u64cd\u4f5c\u7b26\u3002 \u5982\u679c\u5fae\u670d\u52a1\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u6ca1\u6709\u54cd\u5e94\u8bf7\u6c42\uff0c\u5c31\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u53ef\u4ee5\u6355\u83b7\u5e76\u9002\u5f53\u5730\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u3002 \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528 rxjs \u5305\u3002 \u53ea\u9700\u5728\u7ba1\u9053\u4e2d\u4f7f\u7528 timeout \u64cd\u4f5c\u7b26: @ @filename () this . client . send < TResult , TInput > ( pattern , data ) . pipe ( timeout ( 5000 )) . toPromise (); @ @switch this . client . send ( pattern , data ) . pipe ( timeout ( 5000 )) . toPromise (); info Hint timeout \u64cd\u4f5c\u7b26\u662f\u4ece rxjs/operators \u5305\u4e2d\u5bfc\u5165\u7684\u3002 5 \u79d2\u540e\uff0c\u5982\u679c\u5fae\u670d\u52a1\u6ca1\u6709\u54cd\u5e94\uff0c\u5b83\u5c06\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002","title":"\u6982\u8ff0"},{"location":"microservices/basics/#_1","text":"\u9664\u4e86\u4f20\u7edf\u7684(\u6709\u65f6\u79f0\u4e3a\u5355\u7247\u7684)\u5e94\u7528\u7a0b\u5e8f\u67b6\u6784\u5916\uff0cNest \u672c\u8eab\u652f\u6301\u5fae\u670d\u52a1\u67b6\u6784\u98ce\u683c\u7684\u5f00\u53d1\u3002 \u672c\u6587\u6863\u4e2d\u5176\u4ed6\u5730\u65b9\u8ba8\u8bba\u7684\u5927\u591a\u6570\u6982\u5ff5\uff0c\u6bd4\u5982\u4f9d\u8d56\u6ce8\u5165\u3001\u88c5\u9970\u5668\u3001\u5f02\u5e38\u8fc7\u6ee4\u5668\u3001\u7ba1\u9053\u3001\u5b88\u536b\u548c\u62e6\u622a\u5668\uff0c\u90fd\u540c\u6837\u9002\u7528\u4e8e\u5fae\u670d\u52a1\u3002 \u53ea\u8981\u6709\u53ef\u80fd\uff0cNest \u5c31\u4f1a\u62bd\u8c61\u5b9e\u73b0\u7ec6\u8282\uff0c\u8fd9\u6837\u76f8\u540c\u7684\u7ec4\u4ef6\u5c31\u53ef\u4ee5\u5728\u57fa\u4e8e http \u7684\u5e73\u53f0\u3001WebSockets \u548c\u5fae\u670d\u52a1\u4e0a\u8fd0\u884c\u3002 \u672c\u8282\u5c06\u4ecb\u7ecd Nest \u7279\u5b9a\u4e8e\u5fae\u670d\u52a1\u7684\u5404\u4e2a\u65b9\u9762\u3002 \u5728 Nest \u4e2d\uff0c\u5fae\u670d\u52a1\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4f7f\u7528\u4e86\u4e0e HTTP \u4e0d\u540c\u7684 \u4f20\u8f93 \u5c42\u3002 Nest \u652f\u6301\u51e0\u4e2a\u5185\u7f6e\u7684\u4f20\u8f93\u5c42\u5b9e\u73b0\uff0c\u79f0\u4e3a transporters \uff0c\u8d1f\u8d23\u5728\u4e0d\u540c\u7684\u5fae\u670d\u52a1\u5b9e\u4f8b\u4e4b\u95f4\u4f20\u8f93\u6d88\u606f\u3002 \u5927\u591a\u6570\u4f20\u8f93\u5668\u5929\u751f\u652f\u6301 \u8bf7\u6c42-\u54cd\u5e94 \u548c \u57fa\u4e8e\u4e8b\u4ef6\u7684 \u6d88\u606f\u6837\u5f0f\u3002 Nest \u5c06\u6bcf\u4e2a\u4f20\u8f93\u5668\u7684\u5b9e\u73b0\u7ec6\u8282\u62bd\u8c61\u4e3a\u4e00\u4e2a\u89c4\u8303\u63a5\u53e3\uff0c\u7528\u4e8e\u57fa\u4e8e\u8bf7\u6c42-\u54cd\u5e94\u548c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d88\u606f\u4f20\u9012\u3002 \u8fd9\u4f7f\u5f97\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4ece\u4e00\u4e2a\u4f20\u8f93\u5c42\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u4f20\u8f93\u5c42\u2014\u2014\u4f8b\u5982\uff0c\u5229\u7528\u7279\u5b9a\u4f20\u8f93\u5c42\u7684\u7279\u5b9a\u53ef\u9760\u6027\u6216\u6027\u80fd\u7279\u6027\u2014\u2014\u800c\u4e0d\u4f1a\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u3002","title":"\u6982\u8ff0"},{"location":"microservices/basics/#_2","text":"\u8981\u5f00\u59cb\u6784\u5efa\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save @nestjs/microservices","title":"\u5b89\u88c5"},{"location":"microservices/basics/#_3","text":"\u8981\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5fae\u670d\u52a1\uff0c\u4f7f\u7528 NestFactory \u7c7b\u7684 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { Transport , MicroserviceOptions } from '@nestjs/microservices' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.TCP , }, ); app . listen (); } bootstrap (); @ @switch import { NestFactory } from '@nestjs/core' ; import { Transport , MicroserviceOptions } from '@nestjs/microservices' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.TCP , }); app . listen (() => console . log ( 'Microservice is listening' )); } bootstrap (); info Hint \u5fae\u670d\u52a1\u9ed8\u8ba4\u4f7f\u7528 TCP \u4f20\u8f93\u5c42\u3002 createMicroservice() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a options \u5bf9\u8c61\u3002 \u8be5\u5bf9\u8c61\u53ef\u4ee5\u7531\u4e24\u4e2a\u6210\u5458\u7ec4\u6210: transport \u6307\u5b9a\u4f20\u8f93\u5668 (\u4f8b\u5982, Transport.NATS ) options \u786e\u5b9a\u4f20\u8f93\u7a0b\u5e8f\u884c\u4e3a\u7684\u4f20\u8f93\u7a0b\u5e8f\u7279\u5b9a\u7684\u9009\u9879\u5bf9\u8c61 options \u5bf9\u8c61\u7279\u5b9a\u4e8e\u6240\u9009\u7684\u4f20\u8f93\u5668\u3002 TCP \u4f20\u8f93\u5668\u516c\u5f00 \u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 \u5bf9\u4e8e\u5176\u4ed6\u4f20\u8f93\u5668(\u5982 Redis\u3001MQTT \u7b49)\uff0c\u8bf7\u53c2\u9605\u76f8\u5173\u7ae0\u8282\u4ee5\u4e86\u89e3\u53ef\u7528\u9009\u9879\u7684\u63cf\u8ff0\u3002 host \u8fde\u63a5\u4e3b\u673a\u540d port \u8fde\u63a5\u7aef\u53e3 retryAttempts \u91cd\u8bd5\u6d88\u606f\u7684\u6b21\u6570 (default: 0 ) retryDelay \u6d88\u606f\u91cd\u8bd5\u95f4\u9694\u65f6\u95f4(ms)(default: 0 )","title":"\u5f00\u59cb"},{"location":"microservices/basics/#_4","text":"\u5fae\u670d\u52a1\u901a\u8fc7 \u6a21\u5f0f \u8bc6\u522b\u6d88\u606f\u548c\u4e8b\u4ef6\u3002 \u6a21\u5f0f\u662f\u666e\u901a\u503c\uff0c\u4f8b\u5982\uff0c\u6587\u5b57\u5bf9\u8c61\u6216\u5b57\u7b26\u4e32\u3002 \u6a21\u5f0f\u88ab\u81ea\u52a8\u5e8f\u5217\u5316\uff0c\u5e76\u4e0e\u6d88\u606f\u7684\u6570\u636e\u90e8\u5206\u4e00\u8d77\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6d88\u606f\u53d1\u9001\u8005\u548c\u4f7f\u7528\u8005\u53ef\u4ee5\u534f\u8c03\u54ea\u4e9b\u8bf7\u6c42\u7531\u54ea\u4e9b\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528\u3002","title":"\u6a21\u5f0f"},{"location":"microservices/basics/#-","text":"\u5f53\u60a8\u9700\u8981\u5728\u5404\u79cd\u5916\u90e8\u670d\u52a1\u4e4b\u95f4 \u4ea4\u6362 \u6d88\u606f\u65f6\uff0c\u8bf7\u6c42-\u54cd\u5e94\u6d88\u606f\u6837\u5f0f\u975e\u5e38\u6709\u7528\u3002 \u4f7f\u7528\u6b64\u8303\u4f8b\uff0c\u60a8\u53ef\u4ee5\u786e\u5b9a\u670d\u52a1\u5df2\u7ecf\u5b9e\u9645\u63a5\u6536\u4e86\u6d88\u606f(\u800c\u4e0d\u9700\u8981\u624b\u52a8\u5b9e\u73b0\u6d88\u606f ACK \u534f\u8bae)\u3002 \u7136\u800c\uff0c\u8bf7\u6c42-\u54cd\u5e94\u8303\u4f8b\u5e76\u4e0d\u603b\u662f\u6700\u4f73\u9009\u62e9\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528\u57fa\u4e8e\u65e5\u5fd7\u7684\u6301\u4e45\u6027\u7684\u6d41\u4f20\u8f93\u5668\uff0c\u5982 Kafka \u6216 NATS \u6d41\u4f20\u8f93\u5668 \uff0c\u88ab\u4f18\u5316\u4ee5\u89e3\u51b3\u4e0d\u540c\u8303\u56f4\u7684\u95ee\u9898\uff0c\u66f4\u7b26\u5408\u4e8b\u4ef6\u6d88\u606f\u4f20\u9012\u8303\u4f8b(\u8bf7\u53c2\u9605\u4e0b\u9762\u7684 \u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d88\u606f\u4f20\u9012 \u4ee5\u4e86\u89e3\u66f4\u591a\u7ec6\u8282)\u3002 \u4e3a\u4e86\u542f\u7528\u8bf7\u6c42-\u54cd\u5e94\u6d88\u606f\u7c7b\u578b\uff0cNest \u521b\u5efa\u4e86\u4e24\u4e2a\u903b\u8f91\u901a\u9053\u2014\u2014\u4e00\u4e2a\u8d1f\u8d23\u4f20\u8f93\u6570\u636e\uff0c\u53e6\u4e00\u4e2a\u8d1f\u8d23\u7b49\u5f85\u4f20\u5165\u7684\u54cd\u5e94\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u5e95\u5c42\u4f20\u8f93\uff0c\u5982 NATS \uff0c\u8fd9\u79cd\u53cc\u901a\u9053\u652f\u6301\u662f\u5f00\u7bb1\u5373\u7528\u7684\u3002 \u5bf9\u4e8e\u5176\u4ed6\u4eba\uff0cNest \u4f1a\u624b\u52a8\u521b\u5efa\u5355\u72ec\u7684\u901a\u9053\u4f5c\u4e3a\u8865\u507f\u3002 \u8fd9\u53ef\u80fd\u4f1a\u5e26\u6765\u4e00\u4e9b\u5f00\u9500\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u4e0d\u9700\u8981\u8bf7\u6c42-\u54cd\u5e94\u6d88\u606f\u6837\u5f0f\uff0c\u5219\u5e94\u8be5\u8003\u8651\u4f7f\u7528\u57fa\u4e8e\u4e8b\u4ef6\u7684\u65b9\u6cd5\u3002 \u8981\u521b\u5efa\u57fa\u4e8e\u8bf7\u6c42-\u54cd\u5e94\u8303\u4f8b\u7684\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\uff0c\u8bf7\u4f7f\u7528 @MessagePattern() \u88c5\u9970\u5668\uff0c\u5b83\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u5e94\u8be5\u53ea\u5728 controller \u7c7b\u4e2d\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002 \u5728\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u88ab Nest \u8fd0\u884c\u65f6\u5ffd\u7565\u3002 @ @filename ( math . controller ) import { Controller } from '@nestjs/common' ; import { MessagePattern } from '@nestjs/microservices' ; @Controller () export class MathController { @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } } @ @switch import { Controller } from '@nestjs/common' ; import { MessagePattern } from '@nestjs/microservices' ; @Controller () export class MathController { @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); } } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c accumulate() \u6d88\u606f\u5904\u7406\u5668 \u76d1\u542c\u6ee1\u8db3 {{ '{' }} cmd: 'sum' {{ '}' }} \u6d88\u606f\u6a21\u5f0f\u7684\u6d88\u606f\u3002 \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u4ece\u5ba2\u6237\u7aef\u4f20\u9012\u7684\u2018data\u2019\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u636e\u662f\u4e00\u4e2a\u8981\u7d2f\u79ef\u7684\u6570\u5b57\u6570\u7ec4\u3002","title":"\u8bf7\u6c42-\u54cd\u5e94"},{"location":"microservices/basics/#_5","text":"\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u540c\u6b65\u6216\u5f02\u6b65\u54cd\u5e94\u3002 \u56e0\u6b64\uff0c\u652f\u6301 async \u65b9\u6cd5\u3002 @ @filename () @MessagePattern ({ cmd : 'sum' }) async accumulate ( data : number []) : Promise < number > { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @MessagePattern ({ cmd : 'sum' }) async accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); } \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u4e5f\u80fd\u591f\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u503c\u5c06\u88ab\u89e6\u53d1\uff0c\u76f4\u5230\u6d41\u5b8c\u6210\u3002 @ @filename () @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : Observable < number > { return from ([ 1 , 2 , 3 ]); } @ @switch @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : Observable < number > { return from ([ 1 , 2 , 3 ]); } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u5c06\u54cd\u5e94 3 \u6b21 (\u6bcf\u4e00\u9879\u90fd\u6765\u81ea\u6570\u7ec4)\u3002","title":"\u5f02\u6b65\u54cd\u5e94"},{"location":"microservices/basics/#_6","text":"\u867d\u7136\u8bf7\u6c42-\u54cd\u5e94\u65b9\u6cd5\u662f\u670d\u52a1\u4e4b\u95f4\u4ea4\u6362\u6d88\u606f\u7684\u7406\u60f3\u65b9\u6cd5\uff0c\u4f46\u5f53\u60a8\u7684\u6d88\u606f\u6837\u5f0f\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684\u2014\u2014\u5f53\u60a8\u53ea\u60f3\u53d1\u5e03 \u4e8b\u4ef6 \u800c\u4e0d\u7b49\u5f85\u54cd\u5e94\u65f6\uff0c\u5b83\u5c31\u4e0d\u592a\u9002\u5408\u4e86\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u5e0c\u671b\u7ef4\u62a4\u4e24\u4e2a\u901a\u9053\u6240\u9700\u7684\u8bf7\u6c42-\u54cd\u5e94\u5f00\u9500\u3002 \u5047\u8bbe\u60a8\u60f3\u7b80\u5355\u5730\u901a\u77e5\u53e6\u4e00\u4e2a\u670d\u52a1\u5728\u7cfb\u7edf\u7684\u8fd9\u4e00\u90e8\u5206\u53d1\u751f\u4e86\u67d0\u4e2a\u6761\u4ef6\u3002 \u8fd9\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d88\u606f\u6837\u5f0f\u7684\u7406\u60f3\u7528\u4f8b\u3002 \u8981\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u6211\u4eec\u4f7f\u7528 @EventPattern() \u88c5\u9970\u5668\uff0c\u5b83\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 @ @filename () @EventPattern ( 'user_created' ) async handleUserCreated ( data : Record < string , unknown > ) { // business logic } @ @switch @EventPattern ( 'user_created' ) async handleUserCreated ( data ) { // business logic } info Hint \u4f60\u53ef\u4ee5\u4e3a\u4e00\u4e2a \u5355\u4e2a \u4e8b\u4ef6\u6a21\u5f0f\u6ce8\u518c\u591a\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u6240\u6709\u7684\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u90fd\u5c06\u88ab\u81ea\u52a8\u5e76\u884c\u89e6\u53d1\u3002 handleUserCreated() \u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f \u76d1\u542c user_created \u4e8b\u4ef6\u3002 \u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u4ece\u5ba2\u6237\u7aef\u4f20\u9012\u7684 \u6570\u636e (\u5728\u672c\u4f8b\u4e2d\uff0c\u662f\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u7684\u4e8b\u4ef6\u6709\u6548\u8d1f\u8f7d)\u3002","title":"\u57fa\u4e8e\u4e8b\u4ef6\u7684"},{"location":"microservices/basics/#_7","text":"\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e\u5177\u6709\u901a\u914d\u7b26\u8ba2\u9605\u7684 NATS\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u83b7\u53d6\u751f\u4ea7\u8005\u5df2\u5c06\u6d88\u606f\u53d1\u9001\u5230\u7684\u539f\u59cb\u4e3b\u9898\u3002 \u540c\u6837\uff0c\u5728 Kafka \u4e2d\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u8bbf\u95ee\u6d88\u606f\u5934\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528\u5185\u7f6e\u88c5\u9970\u5668: @ @filename () @MessagePattern ( 'time.us.*' ) getDate ( @Payload () data : number [], @Ctx () context : NatsContext ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'time.us.*' ) getDate ( data , context ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } info Hint @Payload() , @Ctx() and NatsContext \u4ece @nestjs/microservices \u5bfc\u5165. info Hint \u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5c5e\u6027\u952e\u7ed9 @Payload() \u88c5\u9970\u5668\u6765\u4ece\u4f20\u5165\u7684 payload \u5bf9\u8c61\u4e2d\u63d0\u53d6\u4e00\u4e2a\u7279\u5b9a\u7684\u5c5e\u6027\uff0c\u4f8b\u5982 @Payload('id') \u3002","title":"\u4fee\u9970\u7b26"},{"location":"microservices/basics/#_8","text":"\u5ba2\u6237\u7aef Nest \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 ClientProxy \u7c7b\u5411 Nest \u5fae\u670d\u52a1\u4ea4\u6362\u6d88\u606f\u6216\u53d1\u5e03\u4e8b\u4ef6\u3002 \u8fd9\u4e2a\u7c7b\u5b9a\u4e49\u4e86\u51e0\u4e2a\u65b9\u6cd5\uff0c\u6bd4\u5982 send() (\u7528\u4e8e\u8bf7\u6c42-\u54cd\u5e94\u6d88\u606f\u4f20\u9012)\u548c emit() (\u7528\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u6d88\u606f\u4f20\u9012)\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5141\u8bb8\u60a8\u4e0e\u8fdc\u7a0b\u5fae\u670d\u52a1\u901a\u4fe1\u3002 \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4e4b\u4e00\u83b7\u53d6\u8be5\u7c7b\u7684\u5b9e\u4f8b\u3002 \u4e00\u79cd\u6280\u672f\u662f\u5bfc\u5165 ClientsModule \uff0c\u5b83\u516c\u5f00\u4e86\u9759\u6001\u7684 register() \u65b9\u6cd5\u3002 \u6b64\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u662f\u4ee3\u8868\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u7684\u5bf9\u8c61\u6570\u7ec4\u3002 \u6bcf\u4e2a\u8fd9\u6837\u7684\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a name \u5c5e\u6027\u3001\u4e00\u4e2a\u53ef\u9009\u7684 transport \u5c5e\u6027(\u9ed8\u8ba4\u4e3a transport.tcp )\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u7279\u5b9a\u4e8e\u4f20\u8f93\u5668\u7684 options \u5c5e\u6027\u3002 name \u5c5e\u6027\u4f5c\u4e3a\u4e00\u4e2a \u6ce8\u5165\u4ee4\u724c \uff0c\u53ef\u4ee5\u5728\u9700\u8981\u7684\u5730\u65b9\u6ce8\u5165\u4e00\u4e2a ClientProxy \u7684\u5b9e\u4f8b\u3002 name \u5c5e\u6027\u7684\u503c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u6ce8\u5165\u4ee4\u724c\uff0c\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\u6216 JavaScript \u7b26\u53f7\uff0c\u5982 \u8fd9\u91cc \u6240\u8ff0\u3002 options \u5c5e\u6027\u662f\u4e00\u4e2a\u4e0e\u6211\u4eec\u4e4b\u524d\u5728 createMicroservice() \u65b9\u6cd5\u4e2d\u770b\u5230\u7684\u5c5e\u6027\u76f8\u540c\u7684\u5bf9\u8c61\u3002 @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.TCP }, ]), ] ... }) \u4e00\u65e6\u6a21\u5757\u88ab\u5bfc\u5165\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\uff0c\u6ce8\u5165 ClientProxy \u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u662f\u901a\u8fc7\u4e0a\u9762\u663e\u793a\u7684 MATH_SERVICE \u4f20\u8f93\u5668\u9009\u9879\u6307\u5b9a\u7684\u3002 constructor ( @Inject ( 'MATH_SERVICE' ) private client : ClientProxy , ) {} info Hint ClientsModule \u548c ClientProxy \u7c7b\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u6709\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4ece\u53e6\u4e00\u4e2a\u670d\u52a1(\u6bd4\u5982 ConfigService )\u83b7\u53d6\u4f20\u8f93\u5668\u914d\u7f6e\uff0c\u800c\u4e0d\u662f\u5728\u6211\u4eec\u7684\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e2d\u786c\u7f16\u7801\u5b83\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ClientProxyFactory \u7c7b\u6ce8\u518c\u4e00\u4e2a custom provider \u3002 \u8fd9\u4e2a\u7c7b\u6709\u4e00\u4e2a\u9759\u6001\u7684 create() \u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u4f20\u8f93\u5668\u9009\u9879\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 ClientProxy \u5b9e\u4f8b\u3002 @Module ({ providers : [ { provide : 'MATH_SERVICE' , useFactory : ( configService : ConfigService ) => { const mathSvcOptions = configService . getMathSvcOptions (); return ClientProxyFactory . create ( mathSvcOptions ); }, inject : [ ConfigService ], } ] ... }) info Hint ClientProxyFactory \u662f\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684\u3002 \u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u4f7f\u7528@Client()\u5c5e\u6027\u88c5\u9970\u5668\u3002 @Client ({ transport : Transport.TCP }) client : ClientProxy ; info Hint The @Client() decorator is imported from the @nestjs/microservices package. \u4f7f\u7528 @Client() \u88c5\u9970\u5668\u4e0d\u662f\u9996\u9009\u7684\u6280\u672f\uff0c\u56e0\u4e3a\u5b83\u66f4\u96be\u6d4b\u8bd5\uff0c\u66f4\u96be\u5171\u4eab\u5ba2\u6237\u7aef\u5b9e\u4f8b\u3002 ClientProxy \u662f lazy \u3002 \u5b83\u4e0d\u4f1a\u7acb\u5373\u542f\u52a8\u8fde\u63a5\u3002 \u76f8\u53cd\uff0c\u5b83\u5c06\u5728\u7b2c\u4e00\u6b21\u5fae\u670d\u52a1\u8c03\u7528\u4e4b\u524d\u5efa\u7acb\uff0c\u7136\u540e\u5728\u6bcf\u4e2a\u540e\u7eed\u8c03\u7528\u4e4b\u95f4\u91cd\u7528\u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5ef6\u8fdf\u5e94\u7528\u7a0b\u5e8f\u7684\u5f15\u5bfc\u8fc7\u7a0b\uff0c\u76f4\u5230\u8fde\u63a5\u5efa\u7acb\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 OnApplicationBootstrap \u751f\u547d\u5468\u671f\u94a9\u5b50\u4e2d\u7684 ClientProxy \u5bf9\u8c61\u7684 connect() \u65b9\u6cd5\u624b\u52a8\u542f\u52a8\u4e00\u4e2a\u8fde\u63a5\u3002 @ @filename () async onApplicationBootstrap () { await this . client . connect (); } If the connection cannot be created, the connect() method will reject with the corresponding error object.","title":"\u5ba2\u6237\u7aef"},{"location":"microservices/basics/#_9","text":"ClientProxy \u516c\u5f00\u4e86\u4e00\u4e2a send() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u7684\u76ee\u7684\u662f\u8c03\u7528\u5fae\u670d\u52a1\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u54cd\u5e94\u7684' Observable '\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8ba2\u9605\u53d1\u51fa\u7684\u503c\u3002 @ @filename () accumulate () : Observable < number > { const pattern = { cmd : 'sum' }; const payload = [ 1 , 2 , 3 ]; return this . client . send < number > ( pattern , payload ); } @ @switch accumulate () { const pattern = { cmd : 'sum' }; const payload = [ 1 , 2 , 3 ]; return this . client . send ( pattern , payload ); } send() \u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570\uff0c pattern \u548c payload \u3002 pattern \u5e94\u8be5\u4e0e @messageppattern() \u88c5\u9970\u5668\u4e2d\u5b9a\u4e49\u7684\u6a21\u5f0f\u5339\u914d\u3002 \u6709\u6548\u8d1f\u8f7d \u662f\u6211\u4eec\u60f3\u8981\u4f20\u8f93\u5230\u8fdc\u7a0b\u5fae\u670d\u52a1\u7684\u6d88\u606f\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a \u51b7\u7684 \u53ef\u89c2\u5bdf\u5bf9\u8c61 \uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5728\u6d88\u606f\u88ab\u53d1\u9001\u4e4b\u524d\u663e\u5f0f\u5730\u8ba2\u9605\u5b83\u3002","title":"\u53d1\u9001\u6d88\u606f"},{"location":"microservices/basics/#_10","text":"\u8981\u53d1\u9001\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8bf7\u4f7f\u7528 ClientProxy \u5bf9\u8c61\u7684 emit() \u65b9\u6cd5\u3002 \u6b64\u65b9\u6cd5\u5c06\u4e8b\u4ef6\u53d1\u5e03\u5230\u6d88\u606f\u4ee3\u7406\u3002 @ @filename () async publish () { this . client . emit < number > ( 'user_created' , new UserCreatedEvent ()); } @ @switch async publish () { this . client . emit ( 'user_created' , new UserCreatedEvent ()); } emit() \u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570\uff0c pattern \u548c payload \u3002 pattern \u5e94\u8be5\u4e0e @EventPattern() \u88c5\u9970\u5668\u4e2d\u5b9a\u4e49\u7684\u6a21\u5f0f\u5339\u914d\u3002 payload \u662f\u6211\u4eec\u60f3\u8981\u4f20\u8f93\u5230\u8fdc\u7a0b\u5fae\u670d\u52a1\u7684\u4e8b\u4ef6\u6709\u6548\u8f7d\u8377\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a \u70ed\u7684 \u53ef\u89c2\u5bdf\u5bf9\u8c61 (\u4e0d\u50cf send() \u8fd4\u56de\u7684\u51b7\u7684 \u53ef\u89c2\u5bdf\u5bf9\u8c61 )\uff0c\u8fd9\u610f\u5473\u7740\u65e0\u8bba\u4f60\u662f\u5426\u663e\u5f0f\u5730\u8ba2\u9605\u4e86\u8fd9\u4e2a\u53ef\u89c2\u5bdf\u5bf9\u8c61\uff0c\u4ee3\u7406\u90fd\u4f1a\u7acb\u5373\u5c1d\u8bd5\u53d1\u9001\u8fd9\u4e2a\u4e8b\u4ef6\u3002","title":"\u53d1\u5e03\u4e8b\u4ef6"},{"location":"microservices/basics/#_11","text":"\u5bf9\u4e8e\u6765\u81ea\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u53d1\u73b0\uff0c\u5728 Nest \u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u5728\u4f20\u5165\u8bf7\u6c42\u4e4b\u95f4\u5171\u4eab\u7684\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u5230\u6570\u636e\u5e93\u7684\u8fde\u63a5\u6c60\uff0c\u5e26\u6709\u5168\u5c40\u72b6\u6001\u7684\u5355\u4f8b\u670d\u52a1\uff0c\u7b49\u7b49\u3002 \u8bb0\u4f4f\uff0cNode.js \u5e76\u4e0d\u9075\u5faa\u8bf7\u6c42/\u54cd\u5e94\u591a\u7ebf\u7a0b\u65e0\u72b6\u6001\u6a21\u578b\uff0c\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u7531\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u5904\u7406\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u4f7f\u7528\u5355\u4f8b\u5b9e\u4f8b\u662f\u5b8c\u5168\u5b89\u5168\u7684\u3002 \u7136\u800c\uff0c\u5728\u4e00\u4e9b\u8fb9\u7f18\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u8bf7\u6c42\u7684\u5904\u7406\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u53ef\u80fd\u662f\u6240\u9700\u7684\u884c\u4e3a\uff0c\u4f8b\u5982 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7f13\u5b58\u3001\u8bf7\u6c42\u8ddf\u8e2a\u6216\u591a\u79df\u6237\u3002 \u4e86\u89e3\u5982\u4f55\u63a7\u5236\u8303\u56f4 \u5728\u8fd9\u91cc \u3002 \u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u5904\u7406\u7a0b\u5e8f\u548c\u63d0\u4f9b\u8005\u53ef\u4ee5\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u7ed3\u5408 CONTEXT \u4ee4\u724c\u6765\u6ce8\u5165 RequestContext : import { Injectable , Scope , Inject } from '@nestjs/common' ; import { CONTEXT , RequestContext } from '@nestjs/microservices' ; @Injectable ({ scope : Scope.REQUEST }) export class CatsService { constructor ( @Inject ( CONTEXT ) private ctx : RequestContext ) {} } \u8fd9\u63d0\u4f9b\u4e86\u5bf9 RequestContext \u5bf9\u8c61\u7684\u8bbf\u95ee\uff0c\u8be5\u5bf9\u8c61\u6709\u4e24\u4e2a\u5c5e\u6027: export interface RequestContext < T = any > { pattern : string | Record < string , any > ; data : T ; } data \u5c5e\u6027\u662f\u7531\u6d88\u606f\u751f\u6210\u5668\u53d1\u9001\u7684\u6d88\u606f\u6709\u6548\u8d1f\u8f7d\u3002 pattern \u5c5e\u6027\u662f\u7528\u6765\u6807\u8bc6\u5904\u7406\u4f20\u5165\u6d88\u606f\u7684\u9002\u5f53\u5904\u7406\u7a0b\u5e8f\u7684\u6a21\u5f0f\u3002","title":"\u4f5c\u7528\u57df"},{"location":"microservices/basics/#_12","text":"\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6709\u65f6\u5fae\u670d\u52a1\u53ef\u80fd\u4f1a\u5173\u95ed\u6216\u4e0d\u53ef\u7528\u3002 \u4e3a\u4e86\u907f\u514d\u65e0\u9650\u957f\u7684\u7b49\u5f85\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 timeout \u3002 \u5728\u4e0e\u5176\u4ed6\u670d\u52a1\u901a\u4fe1\u65f6\uff0c\u8d85\u65f6\u662f\u4e00\u79cd\u975e\u5e38\u6709\u7528\u7684\u6a21\u5f0f\u3002 \u8981\u5728\u5fae\u670d\u52a1\u8c03\u7528\u4e2d\u5e94\u7528\u8d85\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528' RxJS '\u8d85\u65f6\u64cd\u4f5c\u7b26\u3002 \u5982\u679c\u5fae\u670d\u52a1\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u6ca1\u6709\u54cd\u5e94\u8bf7\u6c42\uff0c\u5c31\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u53ef\u4ee5\u6355\u83b7\u5e76\u9002\u5f53\u5730\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u3002 \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528 rxjs \u5305\u3002 \u53ea\u9700\u5728\u7ba1\u9053\u4e2d\u4f7f\u7528 timeout \u64cd\u4f5c\u7b26: @ @filename () this . client . send < TResult , TInput > ( pattern , data ) . pipe ( timeout ( 5000 )) . toPromise (); @ @switch this . client . send ( pattern , data ) . pipe ( timeout ( 5000 )) . toPromise (); info Hint timeout \u64cd\u4f5c\u7b26\u662f\u4ece rxjs/operators \u5305\u4e2d\u5bfc\u5165\u7684\u3002 5 \u79d2\u540e\uff0c\u5982\u679c\u5fae\u670d\u52a1\u6ca1\u6709\u54cd\u5e94\uff0c\u5b83\u5c06\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002","title":"\u5904\u7406\u8d85\u65f6"},{"location":"microservices/custom-transport/","text":"\u5b9a\u5236\u4f20\u8f93\u5668 \u00b6 Nest \u63d0\u4f9b\u4e86\u591a\u79cd \u5f00\u7bb1\u5373\u7528 \u7684\u4f20\u8f93\u5668\uff0c\u4ee5\u53ca\u5141\u8bb8\u5f00\u53d1\u8005\u6784\u5efa\u65b0\u7684\u81ea\u5b9a\u4e49\u4f20\u8f93\u7b56\u7565\u7684 API\u3002 \u4f20\u8f93\u5668\u4f7f\u60a8\u80fd\u591f\u4f7f\u7528\u4e00\u4e2a\u53ef\u63d2\u5165\u7684\u901a\u4fe1\u5c42\u548c\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\u7ea7\u6d88\u606f\u534f\u8bae\u5728\u7f51\u7edc\u4e0a\u8fde\u63a5\u7ec4\u4ef6(\u9605\u8bfb\u5168\u6587 \u6587\u7ae0 )\u3002 info Hint \u7528 Nest \u6784\u5efa\u4e00\u4e2a\u5fae\u670d\u52a1\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u4f60\u5fc5\u987b\u4f7f\u7528 @nestjs/microservices \u5305\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u4e0e\u5916\u90e8\u670d\u52a1\u901a\u4fe1(\u6bd4\u5982\u5176\u4ed6\u7528\u4e0d\u540c\u8bed\u8a00\u7f16\u5199\u7684\u5fae\u670d\u52a1)\uff0c\u4f60\u53ef\u80fd\u4e0d\u9700\u8981 @nestjs/microservice \u5e93\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u90a3\u4e9b\u8ba9\u4f60\u58f0\u660e\u5f0f\u5b9a\u4e49\u8ba2\u9605\u8005\u7684\u88c5\u9970\u5668( @EventPattern \u6216 @MessagePattern )\uff0c\u8fd0\u884c\u4e00\u4e2a \u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f \u548c\u624b\u52a8\u7ef4\u62a4\u8fde\u63a5/\u8ba2\u9605\u901a\u9053\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u4f8b\u6765\u8bf4\u5e94\u8be5\u5df2\u7ecf\u8db3\u591f\u4e86\uff0c\u5e76\u4e14\u4f1a\u4e3a\u4f60\u63d0\u4f9b\u66f4\u591a\u7684\u7075\u6d3b\u6027\u3002 \u901a\u8fc7\u81ea\u5b9a\u4e49\u4f20\u8f93\u5668\uff0c\u60a8\u53ef\u4ee5\u96c6\u6210\u4efb\u4f55\u6d88\u606f\u4f20\u9012\u7cfb\u7edf/\u534f\u8bae(\u5305\u62ec\u8c37\u6b4c\u4e91Pub/Sub\u3001Amazon Kinesis \u7b49)\uff0c\u6216\u8005\u6269\u5c55\u73b0\u6709\u7684\u6d88\u606f\u4f20\u9012\u7cfb\u7edf/\u534f\u8bae\uff0c\u5728\u5176\u4e0a\u6dfb\u52a0\u989d\u5916\u7684\u529f\u80fd(\u4f8b\u5982\uff0cMQTT \u7684 QoS )\u3002 info Hint \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3 Nest \u5fae\u670d\u52a1\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u6269\u5c55\u73b0\u6709\u4f20\u8f93\u5668\u7684\u529f\u80fd\uff0c\u6211\u4eec\u5efa\u8bae\u9605\u8bfb NestJS \u5fae\u670d\u52a1\u5728\u884c\u52a8 \u548c \u9ad8\u7ea7 NestJS \u5fae\u670d\u52a1 \u7cfb\u5217\u6587\u7ae0\u3002 \u521b\u5efa\u4e00\u4e2a\u7b56\u7565 \u00b6 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8868\u793a\u81ea\u5b9a\u4e49\u4f20\u8f93\u5668\u7684\u7c7b\u3002 import { CustomTransportStrategy , Server } from '@nestjs/microservices' ; class GoogleCloudPubSubServer extends Server implements CustomTransportStrategy { /** * This method is triggered when you run \"app.listen()\". */ listen ( callback : () => void ) { callback (); } /** * This method is triggered on application shutdown. */ close () {} } warning Warning \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u4f1a\u5728\u672c\u7ae0\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\u7684\u8c37\u6b4c\u4e91\u53d1\u5e03/\u8ba2\u9605\u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u6df1\u5165\u7814\u7a76\u4f20\u8f93\u5668\u7279\u5b9a\u7684\u6280\u672f\u7ec6\u8282\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u58f0\u660e\u4e86 GoogleCloudPubSubServer \u7c7b\uff0c\u5e76\u63d0\u4f9b\u4e86\u7531 CustomTransportStrategy \u63a5\u53e3\u5f3a\u5236\u6267\u884c\u7684 listen() \u548c close() \u65b9\u6cd5\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u7684\u7c7b\u6269\u5c55\u4e86\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684 Server \u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\uff0cNest\u8fd0\u884c\u65f6\u7528\u6765\u6ce8\u518c\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002 \u6216\u8005\uff0c\u5982\u679c\u60a8\u60f3\u6269\u5c55\u73b0\u6709\u4f20\u8f93\u7b56\u7565\u7684\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u6269\u5c55\u76f8\u5e94\u7684\u670d\u52a1\u5668\u7c7b\uff0c\u4f8b\u5982\uff0c ServerRedis \u3002 \u6309\u7167\u60ef\u4f8b\uff0c\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u7c7b\u6dfb\u52a0\u4e86 \"Server\" \u540e\u7f00\uff0c\u56e0\u4e3a\u5b83\u5c06\u8d1f\u8d23\u8ba2\u9605\u6d88\u606f/\u4e8b\u4ef6(\u5e76\u5728\u5fc5\u8981\u65f6\u54cd\u5e94\u5b83\u4eec)\u3002 \u6709\u4e86\u8fd9\u4e9b\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u7b56\u7565\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5185\u7f6e\u4f20\u8f93\u5668\uff0c\u5982\u4e0b\u6240\u793a: const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { strategy : new GoogleCloudPubSubServer (), }, ); \u57fa\u672c\u4e0a\uff0c\u6211\u4eec\u4f20\u9012\u7684\u4e0d\u662f\u5e26\u6709 transport \u548c options \u5c5e\u6027\u7684\u666e\u901a\u4f20\u8f93\u5668\u9009\u9879\u5bf9\u8c61\uff0c\u800c\u662f\u5355\u4e2a\u5c5e\u6027 strategy \uff0c\u5176\u503c\u662f\u81ea\u5b9a\u4e49\u4f20\u8f93\u5668\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u56de\u5230\u6211\u4eec\u7684 GoogleCloudPubSubServer \u7c7b\uff0c\u5728\u771f\u5b9e\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u5c06\u5efa\u7acb\u5230\u6211\u4eec\u7684\u6d88\u606f\u4ee3\u7406/\u5916\u90e8\u670d\u52a1\u7684\u8fde\u63a5\uff0c\u5e76\u5728 listen() \u65b9\u6cd5\u4e2d\u6ce8\u518c\u8ba2\u9605\u65b9/\u76d1\u542c\u7279\u5b9a\u7684\u901a\u9053(\u7136\u540e\u5728 close() \u65b9\u6cd5\u4e2d\u5220\u9664\u8ba2\u9605\u5e76\u5173\u95ed\u8fde\u63a5)\uff0c \u4f46\u7531\u4e8e\u8fd9\u9700\u8981\u5f88\u597d\u5730\u7406\u89e3Nest\u5fae\u670d\u52a1\u4e4b\u95f4\u662f\u5982\u4f55\u901a\u4fe1\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u63a8\u8350\u60a8\u9605\u8bfb\u4ee5\u4e0b \u6587\u7ae0\u7cfb\u5217 . \u76f8\u53cd\uff0c\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5173\u6ce8 Server \u7c7b\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u4ee5\u53ca\u5982\u4f55\u5229\u7528\u5b83\u4eec\u6765\u6784\u5efa\u81ea\u5b9a\u4e49\u7b56\u7565\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u67d0\u4e2a\u5730\u65b9\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u6d88\u606f\u5904\u7406\u7a0b\u5e8f: @MessagePattern ( 'echo' ) echo ( @Payload () data : object ) { return data ; } \u8fd9\u4e2a\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u5c06\u7531Nest\u8fd0\u884c\u65f6\u81ea\u52a8\u6ce8\u518c\u3002 \u4f7f\u7528 Server \u7c7b\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u5df2\u6ce8\u518c\u7684\u6d88\u606f\u6a21\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u8bbf\u95ee\u5e76\u6267\u884c\u5206\u914d\u7ed9\u5b83\u4eec\u7684\u5b9e\u9645\u65b9\u6cd5\u3002 \u4e3a\u4e86\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u5728\u8c03\u7528 callback \u51fd\u6570\u4e4b\u524d\u5728 listen() \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684 console.log : listen ( callback : () => void ) { console . log ( this . messageHandlers ); callback (); } \u5e94\u7528\u7a0b\u5e8f\u91cd\u65b0\u542f\u52a8\u540e\uff0c\u60a8\u5c06\u5728\u7ec8\u7aef\u770b\u5230\u4ee5\u4e0b\u65e5\u5fd7: Map { 'echo' => [ AsyncFunction ] { isEventHandler : false } } info Hint \u5982\u679c\u6211\u4eec\u4f7f\u7528 @EventPattern \u88c5\u9970\u5668\uff0c\u60a8\u5c06\u770b\u5230\u76f8\u540c\u7684\u8f93\u51fa\uff0c\u4f46 isEventHandler \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u3002 \u5982\u60a8\u6240\u89c1\uff0c messageHandlers \u5c5e\u6027\u662f\u6240\u6709\u6d88\u606f(\u548c\u4e8b\u4ef6)\u5904\u7406\u7a0b\u5e8f\u7684 Map \u96c6\u5408\uff0c\u5176\u4e2d\u7684\u6a21\u5f0f\u88ab\u7528\u4f5c\u952e\u3002 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u952e(\u4f8b\u5982\uff0c \"echo\" )\u6765\u63a5\u6536\u5bf9\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u7684\u5f15\u7528: async listen ( callback : () => void ) { const echoHandler = this . messageHandlers . get ( 'echo' ); console . log ( await echoHandler ( 'Hello world!' )); callback (); } \u4e00\u65e6\u6211\u4eec\u6267\u884c echoHandler \uff0c\u4f20\u9012\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570( \"Hello world!\" )\uff0c\u6211\u4eec\u5e94\u8be5\u5728\u63a7\u5236\u53f0\u4e2d\u770b\u5230\u5b83: Hello world! \u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u88ab\u6b63\u786e\u6267\u884c\u3002 \u5ba2\u6237\u7aef\u4ee3\u7406 \u00b6 \u6b63\u5982\u6211\u4eec\u5728\u7b2c\u4e00\u8282\u4e2d\u63d0\u5230\u7684\uff0c\u4f60\u4e0d\u4e00\u5b9a\u9700\u8981\u4f7f\u7528 @nestjs/microservices \u5305\u6765\u521b\u5efa\u5fae\u670d\u52a1\uff0c\u4f46\u662f\u5982\u679c\u4f60\u51b3\u5b9a\u8fd9\u6837\u505a\uff0c\u5e76\u4e14\u4f60\u9700\u8981\u96c6\u6210\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7b56\u7565\uff0c\u4f60\u4e5f\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a \u5ba2\u6237\u7aef \u7c7b\u3002 info Hint \u540c\u6837\uff0c\u5b9e\u73b0\u4e00\u4e2a\u4e0e\u6240\u6709 @nestjs/microservices \u7279\u6027\u517c\u5bb9\u7684\u5168\u529f\u80fd\u5ba2\u6237\u7aef\u7c7b(\u4f8b\u5982\uff0c\u6d41\u5a92\u4f53)\u9700\u8981\u5f88\u597d\u5730\u7406\u89e3\u6846\u67b6\u4f7f\u7528\u7684\u901a\u4fe1\u6280\u672f\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u8fd9\u7bc7 \u6587\u7ae0 . \u8981\u4e0e\u5916\u90e8\u670d\u52a1\u901a\u4fe1/\u53d1\u51fa\u548c\u53d1\u5e03\u6d88\u606f(\u6216\u4e8b\u4ef6)\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5e93\u7279\u5b9a\u7684SDK\u5305\uff0c\u6216\u5b9e\u73b0\u4e00\u4e2a\u6269\u5c55 ClientProxy \u7684\u81ea\u5b9a\u4e49\u5ba2\u6237\u7aef\u7c7b\uff0c\u5982\u4e0b\u6240\u793a: import { ClientProxy , ReadPacket , WritePacket } from '@nestjs/microservices' ; class GoogleCloudPubSubClient extends ClientProxy { async connect () : Promise < any > {} async close () {} async dispatchEvent ( packet : ReadPacket < any > ) : Promise < any > {} publish ( packet : ReadPacket < any > , callback : ( packet : WritePacket < any > ) => void , ) : Function {} } warning Warning \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u4f1a\u5728\u672c\u7ae0\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\u7684\u8c37\u6b4c\u4e91\u53d1\u5e03/\u8ba2\u9605\u5ba2\u6237\u7aef\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u6df1\u5165\u7814\u7a76\u4f20\u8f93\u5668\u7279\u5b9a\u7684\u6280\u672f\u7ec6\u8282\u3002 \u5982\u4f60\u6240\u89c1\uff0c ClientProxy \u7c7b\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u51e0\u4e2a\u65b9\u6cd5\u6765\u5efa\u7acb\u548c\u5173\u95ed\u8fde\u63a5\uff0c\u53d1\u5e03\u6d88\u606f( publish )\u548c\u4e8b\u4ef6( dispatchEvent )\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u4e0d\u9700\u8981\u8bf7\u6c42-\u54cd\u5e94\u901a\u4fe1\u6837\u5f0f\u652f\u6301\uff0c\u53ef\u4ee5\u5c06 publish() \u65b9\u6cd5\u4fdd\u7559\u4e3a\u7a7a\u3002 \u540c\u6837\uff0c\u5982\u679c\u4e0d\u9700\u8981\u652f\u6301\u57fa\u4e8e\u4e8b\u4ef6\u7684\u901a\u4fe1\uff0c\u8bf7\u8df3\u8fc7 dispatchEvent() \u65b9\u6cd5\u3002 \u4e3a\u4e86\u89c2\u5bdf\u8fd9\u4e9b\u65b9\u6cd5\u7684\u6267\u884c\u5185\u5bb9\u548c\u65f6\u95f4\uff0c\u8ba9\u6211\u4eec\u6dfb\u52a0\u591a\u4e2a console.log \u8c03\u7528\uff0c\u5982\u4e0b\u6240\u793a: class GoogleCloudPubSubClient extends ClientProxy { async connect () : Promise < any > { console . log ( 'connect' ); } async close () { console . log ( 'close' ); } async dispatchEvent ( packet : ReadPacket < any > ) : Promise < any > { return console . log ( 'event to dispatch: ' , packet ); } publish ( packet : ReadPacket < any > , callback : ( packet : WritePacket < any > ) => void , ) : Function { console . log ( 'message:' , packet ); // In a real-world application, the \"callback\" function should be executed // with payload sent back from the responder. Here, we'll simply simulate (5 seconds delay) // that response came through by passing the same \"data\" as we've originally passed in. setTimeout (() => callback ({ response : packet.data }), 5000 ); return () => console . log ( 'teardown' ); } } \u6709\u4e86\u8fd9\u4e9b\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a GoogleCloudPubSubClient \u7c7b\u7684\u5b9e\u4f8b\uff0c\u5e76\u8fd0\u884c send() \u65b9\u6cd5(\u4f60\u53ef\u80fd\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u89c1\u8fc7)\uff0c\u8ba2\u9605\u8fd4\u56de\u7684\u53ef\u89c2\u5bdf\u6d41\u3002 const googlePubSubClient = new GoogleCloudPubSubClient (); googlePubSubClient . send ( 'pattern' , 'Hello world!' ) . subscribe (( response ) => console . log ( response )); \u73b0\u5728\uff0c\u60a8\u5e94\u8be5\u5728\u7ec8\u7aef\u4e2d\u770b\u5230\u4ee5\u4e0b\u8f93\u51fa: connect message : { pattern : 'pattern' , data : 'Hello world!' } Hello world ! // <-- after 5 seconds \u4e3a\u4e86\u6d4b\u8bd5\u6211\u4eec\u7684\"teardown\"\u65b9\u6cd5( publish() \u65b9\u6cd5\u8fd4\u56de\u7684\u65b9\u6cd5)\u662f\u5426\u88ab\u6b63\u786e\u6267\u884c\uff0c\u8ba9\u6211\u4eec\u5bf9\u6d41\u5e94\u7528\u4e00\u4e2a\u8d85\u65f6\u64cd\u4f5c\u7b26\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a2\u79d2\uff0c\u4ee5\u786e\u4fdd\u5b83\u5728 setTimeout \u8c03\u7528 callback \u51fd\u6570\u4e4b\u524d\u629b\u51fa\u3002 const googlePubSubClient = new GoogleCloudPubSubClient (); googlePubSubClient . send ( 'pattern' , 'Hello world!' ) . pipe ( timeout ( 2000 )) . subscribe ( ( response ) => console . log ( response ), ( error ) => console . error ( error . message ), ); info Hint timeout \u64cd\u4f5c\u7b26\u4ece rxjs/operators \u5305\u4e2d\u5bfc\u5165\u3002 \u5e94\u7528 timeout \u64cd\u4f5c\u7b26\u540e\uff0c\u7ec8\u7aef\u8f93\u51fa\u5e94\u8be5\u5982\u4e0b\u6240\u793a: connect message : { pattern : 'pattern' , data : 'Hello world!' } teardown // <-- teardown Timeout has occurred \u8981\u5206\u6d3e\u4e8b\u4ef6(\u800c\u4e0d\u662f\u53d1\u9001\u6d88\u606f)\uff0c\u4f7f\u7528 emit() \u65b9\u6cd5: googlePubSubClient . emit ( 'event' , 'Hello world!' ); \u8fd9\u5c31\u662f\u4f60\u5e94\u8be5\u5728\u63a7\u5236\u53f0\u770b\u5230\u7684: connect event to dispatch : { pattern : 'event' , data : 'Hello world!' } \u6d88\u606f\u5e8f\u5217\u5316 \u00b6 \u5982\u679c\u60a8\u9700\u8981\u5728\u5ba2\u6237\u7aef\u6dfb\u52a0\u4e00\u4e9b\u5173\u4e8e\u54cd\u5e94\u5e8f\u5217\u5316\u7684\u81ea\u5b9a\u4e49\u903b\u8f91\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55 ClientProxy \u7c7b\u6216\u5b83\u7684\u4e00\u4e2a\u5b50\u7c7b\u7684\u81ea\u5b9a\u4e49\u7c7b\u3002 \u4e3a\u4e86\u4fee\u6539\u6210\u529f\u7684\u8bf7\u6c42\uff0c\u4f60\u53ef\u4ee5\u8986\u76d6 serializeResponse \u65b9\u6cd5\uff0c\u800c\u4e3a\u4e86\u4fee\u6539\u901a\u8fc7\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u4efb\u4f55\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u8986\u76d6 serializeError \u65b9\u6cd5\u3002 \u8981\u4f7f\u7528\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7c7b\uff0c\u53ef\u4ee5\u4f7f\u7528 customClass \u5c5e\u6027\u5c06\u7c7b\u672c\u8eab\u4f20\u9012\u7ed9 ClientsModule.register() \u65b9\u6cd5\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49 ClientProxy \u7684\u4f8b\u5b50\uff0c\u5b83\u5c06\u6bcf\u4e2a\u9519\u8bef\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a RpcException \u3002 @ @filename ( error - handling . proxy ) import { ClientTcp , RpcException } from '@nestjs/microservices' ; class ErrorHandlingProxy extends ClientTCP { serializeError ( err : Error ) { return new RpcException ( err ); } } \u7136\u540e\u5728 ClientsModule \u4e2d\u50cf\u8fd9\u6837\u4f7f\u7528\u5b83: @ @filename ( app . module ) @Module ({ imports : [ ClientsModule . register ({ name : 'CustomProxy' , customClass : ErrorHandlingProxy , }), ] }) export class AppModule info hint \u8fd9\u662f\u4f20\u9012\u7ed9 customClass \u7684\u7c7b\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 Nest\u5c06\u5728\u5e95\u5c42\u4e3a\u4f60\u521b\u5efa\u5b9e\u4f8b\uff0c\u5e76\u5c06\u7ed9 options \u5c5e\u6027\u7684\u4efb\u4f55\u9009\u9879\u4f20\u9012\u7ed9\u65b0\u7684 ClientProxy \u3002","title":"\u5b9a\u5236\u7684\u4f20\u8f93\u5668"},{"location":"microservices/custom-transport/#_1","text":"Nest \u63d0\u4f9b\u4e86\u591a\u79cd \u5f00\u7bb1\u5373\u7528 \u7684\u4f20\u8f93\u5668\uff0c\u4ee5\u53ca\u5141\u8bb8\u5f00\u53d1\u8005\u6784\u5efa\u65b0\u7684\u81ea\u5b9a\u4e49\u4f20\u8f93\u7b56\u7565\u7684 API\u3002 \u4f20\u8f93\u5668\u4f7f\u60a8\u80fd\u591f\u4f7f\u7528\u4e00\u4e2a\u53ef\u63d2\u5165\u7684\u901a\u4fe1\u5c42\u548c\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\u7ea7\u6d88\u606f\u534f\u8bae\u5728\u7f51\u7edc\u4e0a\u8fde\u63a5\u7ec4\u4ef6(\u9605\u8bfb\u5168\u6587 \u6587\u7ae0 )\u3002 info Hint \u7528 Nest \u6784\u5efa\u4e00\u4e2a\u5fae\u670d\u52a1\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u4f60\u5fc5\u987b\u4f7f\u7528 @nestjs/microservices \u5305\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u4e0e\u5916\u90e8\u670d\u52a1\u901a\u4fe1(\u6bd4\u5982\u5176\u4ed6\u7528\u4e0d\u540c\u8bed\u8a00\u7f16\u5199\u7684\u5fae\u670d\u52a1)\uff0c\u4f60\u53ef\u80fd\u4e0d\u9700\u8981 @nestjs/microservice \u5e93\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u90a3\u4e9b\u8ba9\u4f60\u58f0\u660e\u5f0f\u5b9a\u4e49\u8ba2\u9605\u8005\u7684\u88c5\u9970\u5668( @EventPattern \u6216 @MessagePattern )\uff0c\u8fd0\u884c\u4e00\u4e2a \u72ec\u7acb\u7684\u5e94\u7528\u7a0b\u5e8f \u548c\u624b\u52a8\u7ef4\u62a4\u8fde\u63a5/\u8ba2\u9605\u901a\u9053\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u4f8b\u6765\u8bf4\u5e94\u8be5\u5df2\u7ecf\u8db3\u591f\u4e86\uff0c\u5e76\u4e14\u4f1a\u4e3a\u4f60\u63d0\u4f9b\u66f4\u591a\u7684\u7075\u6d3b\u6027\u3002 \u901a\u8fc7\u81ea\u5b9a\u4e49\u4f20\u8f93\u5668\uff0c\u60a8\u53ef\u4ee5\u96c6\u6210\u4efb\u4f55\u6d88\u606f\u4f20\u9012\u7cfb\u7edf/\u534f\u8bae(\u5305\u62ec\u8c37\u6b4c\u4e91Pub/Sub\u3001Amazon Kinesis \u7b49)\uff0c\u6216\u8005\u6269\u5c55\u73b0\u6709\u7684\u6d88\u606f\u4f20\u9012\u7cfb\u7edf/\u534f\u8bae\uff0c\u5728\u5176\u4e0a\u6dfb\u52a0\u989d\u5916\u7684\u529f\u80fd(\u4f8b\u5982\uff0cMQTT \u7684 QoS )\u3002 info Hint \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3 Nest \u5fae\u670d\u52a1\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u6269\u5c55\u73b0\u6709\u4f20\u8f93\u5668\u7684\u529f\u80fd\uff0c\u6211\u4eec\u5efa\u8bae\u9605\u8bfb NestJS \u5fae\u670d\u52a1\u5728\u884c\u52a8 \u548c \u9ad8\u7ea7 NestJS \u5fae\u670d\u52a1 \u7cfb\u5217\u6587\u7ae0\u3002","title":"\u5b9a\u5236\u4f20\u8f93\u5668"},{"location":"microservices/custom-transport/#_2","text":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8868\u793a\u81ea\u5b9a\u4e49\u4f20\u8f93\u5668\u7684\u7c7b\u3002 import { CustomTransportStrategy , Server } from '@nestjs/microservices' ; class GoogleCloudPubSubServer extends Server implements CustomTransportStrategy { /** * This method is triggered when you run \"app.listen()\". */ listen ( callback : () => void ) { callback (); } /** * This method is triggered on application shutdown. */ close () {} } warning Warning \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u4f1a\u5728\u672c\u7ae0\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\u7684\u8c37\u6b4c\u4e91\u53d1\u5e03/\u8ba2\u9605\u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u6df1\u5165\u7814\u7a76\u4f20\u8f93\u5668\u7279\u5b9a\u7684\u6280\u672f\u7ec6\u8282\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u58f0\u660e\u4e86 GoogleCloudPubSubServer \u7c7b\uff0c\u5e76\u63d0\u4f9b\u4e86\u7531 CustomTransportStrategy \u63a5\u53e3\u5f3a\u5236\u6267\u884c\u7684 listen() \u548c close() \u65b9\u6cd5\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u7684\u7c7b\u6269\u5c55\u4e86\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684 Server \u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\uff0cNest\u8fd0\u884c\u65f6\u7528\u6765\u6ce8\u518c\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u7684\u65b9\u6cd5\u3002 \u6216\u8005\uff0c\u5982\u679c\u60a8\u60f3\u6269\u5c55\u73b0\u6709\u4f20\u8f93\u7b56\u7565\u7684\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u6269\u5c55\u76f8\u5e94\u7684\u670d\u52a1\u5668\u7c7b\uff0c\u4f8b\u5982\uff0c ServerRedis \u3002 \u6309\u7167\u60ef\u4f8b\uff0c\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u7c7b\u6dfb\u52a0\u4e86 \"Server\" \u540e\u7f00\uff0c\u56e0\u4e3a\u5b83\u5c06\u8d1f\u8d23\u8ba2\u9605\u6d88\u606f/\u4e8b\u4ef6(\u5e76\u5728\u5fc5\u8981\u65f6\u54cd\u5e94\u5b83\u4eec)\u3002 \u6709\u4e86\u8fd9\u4e9b\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u7b56\u7565\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5185\u7f6e\u4f20\u8f93\u5668\uff0c\u5982\u4e0b\u6240\u793a: const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { strategy : new GoogleCloudPubSubServer (), }, ); \u57fa\u672c\u4e0a\uff0c\u6211\u4eec\u4f20\u9012\u7684\u4e0d\u662f\u5e26\u6709 transport \u548c options \u5c5e\u6027\u7684\u666e\u901a\u4f20\u8f93\u5668\u9009\u9879\u5bf9\u8c61\uff0c\u800c\u662f\u5355\u4e2a\u5c5e\u6027 strategy \uff0c\u5176\u503c\u662f\u81ea\u5b9a\u4e49\u4f20\u8f93\u5668\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u56de\u5230\u6211\u4eec\u7684 GoogleCloudPubSubServer \u7c7b\uff0c\u5728\u771f\u5b9e\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u5c06\u5efa\u7acb\u5230\u6211\u4eec\u7684\u6d88\u606f\u4ee3\u7406/\u5916\u90e8\u670d\u52a1\u7684\u8fde\u63a5\uff0c\u5e76\u5728 listen() \u65b9\u6cd5\u4e2d\u6ce8\u518c\u8ba2\u9605\u65b9/\u76d1\u542c\u7279\u5b9a\u7684\u901a\u9053(\u7136\u540e\u5728 close() \u65b9\u6cd5\u4e2d\u5220\u9664\u8ba2\u9605\u5e76\u5173\u95ed\u8fde\u63a5)\uff0c \u4f46\u7531\u4e8e\u8fd9\u9700\u8981\u5f88\u597d\u5730\u7406\u89e3Nest\u5fae\u670d\u52a1\u4e4b\u95f4\u662f\u5982\u4f55\u901a\u4fe1\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u63a8\u8350\u60a8\u9605\u8bfb\u4ee5\u4e0b \u6587\u7ae0\u7cfb\u5217 . \u76f8\u53cd\uff0c\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5173\u6ce8 Server \u7c7b\u63d0\u4f9b\u7684\u529f\u80fd\uff0c\u4ee5\u53ca\u5982\u4f55\u5229\u7528\u5b83\u4eec\u6765\u6784\u5efa\u81ea\u5b9a\u4e49\u7b56\u7565\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u67d0\u4e2a\u5730\u65b9\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u6d88\u606f\u5904\u7406\u7a0b\u5e8f: @MessagePattern ( 'echo' ) echo ( @Payload () data : object ) { return data ; } \u8fd9\u4e2a\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u5c06\u7531Nest\u8fd0\u884c\u65f6\u81ea\u52a8\u6ce8\u518c\u3002 \u4f7f\u7528 Server \u7c7b\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u5df2\u6ce8\u518c\u7684\u6d88\u606f\u6a21\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u8bbf\u95ee\u5e76\u6267\u884c\u5206\u914d\u7ed9\u5b83\u4eec\u7684\u5b9e\u9645\u65b9\u6cd5\u3002 \u4e3a\u4e86\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u5728\u8c03\u7528 callback \u51fd\u6570\u4e4b\u524d\u5728 listen() \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684 console.log : listen ( callback : () => void ) { console . log ( this . messageHandlers ); callback (); } \u5e94\u7528\u7a0b\u5e8f\u91cd\u65b0\u542f\u52a8\u540e\uff0c\u60a8\u5c06\u5728\u7ec8\u7aef\u770b\u5230\u4ee5\u4e0b\u65e5\u5fd7: Map { 'echo' => [ AsyncFunction ] { isEventHandler : false } } info Hint \u5982\u679c\u6211\u4eec\u4f7f\u7528 @EventPattern \u88c5\u9970\u5668\uff0c\u60a8\u5c06\u770b\u5230\u76f8\u540c\u7684\u8f93\u51fa\uff0c\u4f46 isEventHandler \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u3002 \u5982\u60a8\u6240\u89c1\uff0c messageHandlers \u5c5e\u6027\u662f\u6240\u6709\u6d88\u606f(\u548c\u4e8b\u4ef6)\u5904\u7406\u7a0b\u5e8f\u7684 Map \u96c6\u5408\uff0c\u5176\u4e2d\u7684\u6a21\u5f0f\u88ab\u7528\u4f5c\u952e\u3002 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u952e(\u4f8b\u5982\uff0c \"echo\" )\u6765\u63a5\u6536\u5bf9\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u7684\u5f15\u7528: async listen ( callback : () => void ) { const echoHandler = this . messageHandlers . get ( 'echo' ); console . log ( await echoHandler ( 'Hello world!' )); callback (); } \u4e00\u65e6\u6211\u4eec\u6267\u884c echoHandler \uff0c\u4f20\u9012\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570( \"Hello world!\" )\uff0c\u6211\u4eec\u5e94\u8be5\u5728\u63a7\u5236\u53f0\u4e2d\u770b\u5230\u5b83: Hello world! \u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u88ab\u6b63\u786e\u6267\u884c\u3002","title":"\u521b\u5efa\u4e00\u4e2a\u7b56\u7565"},{"location":"microservices/custom-transport/#_3","text":"\u6b63\u5982\u6211\u4eec\u5728\u7b2c\u4e00\u8282\u4e2d\u63d0\u5230\u7684\uff0c\u4f60\u4e0d\u4e00\u5b9a\u9700\u8981\u4f7f\u7528 @nestjs/microservices \u5305\u6765\u521b\u5efa\u5fae\u670d\u52a1\uff0c\u4f46\u662f\u5982\u679c\u4f60\u51b3\u5b9a\u8fd9\u6837\u505a\uff0c\u5e76\u4e14\u4f60\u9700\u8981\u96c6\u6210\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7b56\u7565\uff0c\u4f60\u4e5f\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a \u5ba2\u6237\u7aef \u7c7b\u3002 info Hint \u540c\u6837\uff0c\u5b9e\u73b0\u4e00\u4e2a\u4e0e\u6240\u6709 @nestjs/microservices \u7279\u6027\u517c\u5bb9\u7684\u5168\u529f\u80fd\u5ba2\u6237\u7aef\u7c7b(\u4f8b\u5982\uff0c\u6d41\u5a92\u4f53)\u9700\u8981\u5f88\u597d\u5730\u7406\u89e3\u6846\u67b6\u4f7f\u7528\u7684\u901a\u4fe1\u6280\u672f\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u8fd9\u7bc7 \u6587\u7ae0 . \u8981\u4e0e\u5916\u90e8\u670d\u52a1\u901a\u4fe1/\u53d1\u51fa\u548c\u53d1\u5e03\u6d88\u606f(\u6216\u4e8b\u4ef6)\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5e93\u7279\u5b9a\u7684SDK\u5305\uff0c\u6216\u5b9e\u73b0\u4e00\u4e2a\u6269\u5c55 ClientProxy \u7684\u81ea\u5b9a\u4e49\u5ba2\u6237\u7aef\u7c7b\uff0c\u5982\u4e0b\u6240\u793a: import { ClientProxy , ReadPacket , WritePacket } from '@nestjs/microservices' ; class GoogleCloudPubSubClient extends ClientProxy { async connect () : Promise < any > {} async close () {} async dispatchEvent ( packet : ReadPacket < any > ) : Promise < any > {} publish ( packet : ReadPacket < any > , callback : ( packet : WritePacket < any > ) => void , ) : Function {} } warning Warning \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u4f1a\u5728\u672c\u7ae0\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\u7684\u8c37\u6b4c\u4e91\u53d1\u5e03/\u8ba2\u9605\u5ba2\u6237\u7aef\uff0c\u56e0\u4e3a\u8fd9\u9700\u8981\u6df1\u5165\u7814\u7a76\u4f20\u8f93\u5668\u7279\u5b9a\u7684\u6280\u672f\u7ec6\u8282\u3002 \u5982\u4f60\u6240\u89c1\uff0c ClientProxy \u7c7b\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u51e0\u4e2a\u65b9\u6cd5\u6765\u5efa\u7acb\u548c\u5173\u95ed\u8fde\u63a5\uff0c\u53d1\u5e03\u6d88\u606f( publish )\u548c\u4e8b\u4ef6( dispatchEvent )\u3002 \u6ce8\u610f\uff0c\u5982\u679c\u4e0d\u9700\u8981\u8bf7\u6c42-\u54cd\u5e94\u901a\u4fe1\u6837\u5f0f\u652f\u6301\uff0c\u53ef\u4ee5\u5c06 publish() \u65b9\u6cd5\u4fdd\u7559\u4e3a\u7a7a\u3002 \u540c\u6837\uff0c\u5982\u679c\u4e0d\u9700\u8981\u652f\u6301\u57fa\u4e8e\u4e8b\u4ef6\u7684\u901a\u4fe1\uff0c\u8bf7\u8df3\u8fc7 dispatchEvent() \u65b9\u6cd5\u3002 \u4e3a\u4e86\u89c2\u5bdf\u8fd9\u4e9b\u65b9\u6cd5\u7684\u6267\u884c\u5185\u5bb9\u548c\u65f6\u95f4\uff0c\u8ba9\u6211\u4eec\u6dfb\u52a0\u591a\u4e2a console.log \u8c03\u7528\uff0c\u5982\u4e0b\u6240\u793a: class GoogleCloudPubSubClient extends ClientProxy { async connect () : Promise < any > { console . log ( 'connect' ); } async close () { console . log ( 'close' ); } async dispatchEvent ( packet : ReadPacket < any > ) : Promise < any > { return console . log ( 'event to dispatch: ' , packet ); } publish ( packet : ReadPacket < any > , callback : ( packet : WritePacket < any > ) => void , ) : Function { console . log ( 'message:' , packet ); // In a real-world application, the \"callback\" function should be executed // with payload sent back from the responder. Here, we'll simply simulate (5 seconds delay) // that response came through by passing the same \"data\" as we've originally passed in. setTimeout (() => callback ({ response : packet.data }), 5000 ); return () => console . log ( 'teardown' ); } } \u6709\u4e86\u8fd9\u4e9b\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a GoogleCloudPubSubClient \u7c7b\u7684\u5b9e\u4f8b\uff0c\u5e76\u8fd0\u884c send() \u65b9\u6cd5(\u4f60\u53ef\u80fd\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u89c1\u8fc7)\uff0c\u8ba2\u9605\u8fd4\u56de\u7684\u53ef\u89c2\u5bdf\u6d41\u3002 const googlePubSubClient = new GoogleCloudPubSubClient (); googlePubSubClient . send ( 'pattern' , 'Hello world!' ) . subscribe (( response ) => console . log ( response )); \u73b0\u5728\uff0c\u60a8\u5e94\u8be5\u5728\u7ec8\u7aef\u4e2d\u770b\u5230\u4ee5\u4e0b\u8f93\u51fa: connect message : { pattern : 'pattern' , data : 'Hello world!' } Hello world ! // <-- after 5 seconds \u4e3a\u4e86\u6d4b\u8bd5\u6211\u4eec\u7684\"teardown\"\u65b9\u6cd5( publish() \u65b9\u6cd5\u8fd4\u56de\u7684\u65b9\u6cd5)\u662f\u5426\u88ab\u6b63\u786e\u6267\u884c\uff0c\u8ba9\u6211\u4eec\u5bf9\u6d41\u5e94\u7528\u4e00\u4e2a\u8d85\u65f6\u64cd\u4f5c\u7b26\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a2\u79d2\uff0c\u4ee5\u786e\u4fdd\u5b83\u5728 setTimeout \u8c03\u7528 callback \u51fd\u6570\u4e4b\u524d\u629b\u51fa\u3002 const googlePubSubClient = new GoogleCloudPubSubClient (); googlePubSubClient . send ( 'pattern' , 'Hello world!' ) . pipe ( timeout ( 2000 )) . subscribe ( ( response ) => console . log ( response ), ( error ) => console . error ( error . message ), ); info Hint timeout \u64cd\u4f5c\u7b26\u4ece rxjs/operators \u5305\u4e2d\u5bfc\u5165\u3002 \u5e94\u7528 timeout \u64cd\u4f5c\u7b26\u540e\uff0c\u7ec8\u7aef\u8f93\u51fa\u5e94\u8be5\u5982\u4e0b\u6240\u793a: connect message : { pattern : 'pattern' , data : 'Hello world!' } teardown // <-- teardown Timeout has occurred \u8981\u5206\u6d3e\u4e8b\u4ef6(\u800c\u4e0d\u662f\u53d1\u9001\u6d88\u606f)\uff0c\u4f7f\u7528 emit() \u65b9\u6cd5: googlePubSubClient . emit ( 'event' , 'Hello world!' ); \u8fd9\u5c31\u662f\u4f60\u5e94\u8be5\u5728\u63a7\u5236\u53f0\u770b\u5230\u7684: connect event to dispatch : { pattern : 'event' , data : 'Hello world!' }","title":"\u5ba2\u6237\u7aef\u4ee3\u7406"},{"location":"microservices/custom-transport/#_4","text":"\u5982\u679c\u60a8\u9700\u8981\u5728\u5ba2\u6237\u7aef\u6dfb\u52a0\u4e00\u4e9b\u5173\u4e8e\u54cd\u5e94\u5e8f\u5217\u5316\u7684\u81ea\u5b9a\u4e49\u903b\u8f91\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6269\u5c55 ClientProxy \u7c7b\u6216\u5b83\u7684\u4e00\u4e2a\u5b50\u7c7b\u7684\u81ea\u5b9a\u4e49\u7c7b\u3002 \u4e3a\u4e86\u4fee\u6539\u6210\u529f\u7684\u8bf7\u6c42\uff0c\u4f60\u53ef\u4ee5\u8986\u76d6 serializeResponse \u65b9\u6cd5\uff0c\u800c\u4e3a\u4e86\u4fee\u6539\u901a\u8fc7\u8fd9\u4e2a\u5ba2\u6237\u7aef\u7684\u4efb\u4f55\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u8986\u76d6 serializeError \u65b9\u6cd5\u3002 \u8981\u4f7f\u7528\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u7c7b\uff0c\u53ef\u4ee5\u4f7f\u7528 customClass \u5c5e\u6027\u5c06\u7c7b\u672c\u8eab\u4f20\u9012\u7ed9 ClientsModule.register() \u65b9\u6cd5\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49 ClientProxy \u7684\u4f8b\u5b50\uff0c\u5b83\u5c06\u6bcf\u4e2a\u9519\u8bef\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a RpcException \u3002 @ @filename ( error - handling . proxy ) import { ClientTcp , RpcException } from '@nestjs/microservices' ; class ErrorHandlingProxy extends ClientTCP { serializeError ( err : Error ) { return new RpcException ( err ); } } \u7136\u540e\u5728 ClientsModule \u4e2d\u50cf\u8fd9\u6837\u4f7f\u7528\u5b83: @ @filename ( app . module ) @Module ({ imports : [ ClientsModule . register ({ name : 'CustomProxy' , customClass : ErrorHandlingProxy , }), ] }) export class AppModule info hint \u8fd9\u662f\u4f20\u9012\u7ed9 customClass \u7684\u7c7b\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 Nest\u5c06\u5728\u5e95\u5c42\u4e3a\u4f60\u521b\u5efa\u5b9e\u4f8b\uff0c\u5e76\u5c06\u7ed9 options \u5c5e\u6027\u7684\u4efb\u4f55\u9009\u9879\u4f20\u9012\u7ed9\u65b0\u7684 ClientProxy \u3002","title":"\u6d88\u606f\u5e8f\u5217\u5316"},{"location":"microservices/exception-filters/","text":"\u5f02\u5e38\u8fc7\u6ee4\u5668 \u00b6 HTTP \u5f02\u5e38\u8fc7\u6ee4\u5668 \u5c42\u548c\u76f8\u5e94\u7684\u5fae\u670d\u52a1\u5c42\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 RpcException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 throw new RpcException ( 'Invalid credentials.' ); info Hint RpcException \u7c7b\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cNest \u5c06\u5904\u7406\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u5e76\u4ee5\u5982\u4e0b\u7ed3\u6784\u8fd4\u56de error \u5bf9\u8c61: { \"status\" : \"error\" , \"message\" : \"Invalid credentials.\" } \u8fc7\u6ee4\u5668 \u00b6 \u5fae\u670d\u52a1\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e HTTP \u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u53ea\u6709\u4e00\u4e2a\u5c0f\u533a\u522b\u3002 catch() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a Observable \u3002 @ @filename ( rpc - exception . filter ) import { Catch , RpcExceptionFilter , ArgumentsHost } from '@nestjs/common' ; import { Observable , throwError } from 'rxjs' ; import { RpcException } from '@nestjs/microservices' ; @Catch ( RpcException ) export class ExceptionFilter implements RpcExceptionFilter < RpcException > { catch ( exception : RpcException , host : ArgumentsHost ) : Observable < any > { return throwError ( exception . getError ()); } } @ @switch import { Catch } from '@nestjs/common' ; import { throwError } from 'rxjs' ; @Catch ( RpcException ) export class ExceptionFilter { catch ( exception , host ) { return throwError ( exception . getError ()); } } warning Warning \u5f53\u4f7f\u7528 \u6df7\u5408\u5e94\u7528\u7a0b\u5e8f \u65f6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5168\u5c40\u5fae\u670d\u52a1\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e0d\u542f\u7528. \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e00\u4e2a\u624b\u52a8\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u8303\u56f4\u7684\u8fc7\u6ee4\u5668\u3002 \u5c31\u50cf\u57fa\u4e8e HTTP \u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63a7\u5236\u5668\u4f5c\u7528\u57df\u7684\u8fc7\u6ee4\u5668(\u5373\uff0c\u5728\u63a7\u5236\u5668\u7c7b\u524d\u9762\u52a0\u4e0a @UseFilters() \u88c5\u9970\u5668)\u3002 @ @filename () @UseFilters ( new ExceptionFilter ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @UseFilters ( new ExceptionFilter ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); } \u7ee7\u627f \u00b6 \u901a\u5e38\uff0c\u60a8\u5c06\u521b\u5efa\u5b8c\u5168\u5b9a\u5236\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u6765\u6ee1\u8db3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u7136\u800c\uff0c\u5728\u6709\u4e9b\u7528\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u7b80\u5355\u5730\u6269\u5c55 \u6838\u5fc3\u5f02\u5e38\u8fc7\u6ee4\u5668 \uff0c\u5e76\u57fa\u4e8e\u67d0\u4e9b\u56e0\u7d20\u8986\u76d6\u884c\u4e3a\u3002 \u4e3a\u4e86\u5c06\u5f02\u5e38\u5904\u7406\u59d4\u6258\u7ed9\u57fa\u672c\u8fc7\u6ee4\u5668\uff0c\u4f60\u9700\u8981\u6269\u5c55 BaseExceptionFilter \u5e76\u8c03\u7528\u7ee7\u627f\u7684 catch() \u65b9\u6cd5\u3002 @ @filename () import { Catch , ArgumentsHost } from '@nestjs/common' ; import { BaseRpcExceptionFilter } from '@nestjs/microservices' ; @Catch () export class AllExceptionsFilter extends BaseRpcExceptionFilter { catch ( exception : any , host : ArgumentsHost ) { return super . catch ( exception , host ); } } @ @switch import { Catch } from '@nestjs/common' ; import { BaseRpcExceptionFilter } from '@nestjs/microservices' ; @Catch () export class AllExceptionsFilter extends BaseRpcExceptionFilter { catch ( exception , host ) { return super . catch ( exception , host ); } } \u4e0a\u9762\u7684\u5b9e\u73b0\u53ea\u662f\u6f14\u793a\u8be5\u65b9\u6cd5\u7684 shell\u3002 \u6269\u5c55\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u5b9e\u73b0\u5c06\u5305\u62ec\u5b9a\u5236\u7684 \u4e1a\u52a1\u903b\u8f91 (\u4f8b\u5982\uff0c\u5904\u7406\u5404\u79cd\u6761\u4ef6)\u3002","title":"\u5f02\u5e38\u8fc7\u6ee4\u5668"},{"location":"microservices/exception-filters/#_1","text":"HTTP \u5f02\u5e38\u8fc7\u6ee4\u5668 \u5c42\u548c\u76f8\u5e94\u7684\u5fae\u670d\u52a1\u5c42\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 RpcException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 throw new RpcException ( 'Invalid credentials.' ); info Hint RpcException \u7c7b\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cNest \u5c06\u5904\u7406\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u5e76\u4ee5\u5982\u4e0b\u7ed3\u6784\u8fd4\u56de error \u5bf9\u8c61: { \"status\" : \"error\" , \"message\" : \"Invalid credentials.\" }","title":"\u5f02\u5e38\u8fc7\u6ee4\u5668"},{"location":"microservices/exception-filters/#_2","text":"\u5fae\u670d\u52a1\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e HTTP \u5f02\u5e38\u8fc7\u6ee4\u5668\uff0c\u53ea\u6709\u4e00\u4e2a\u5c0f\u533a\u522b\u3002 catch() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a Observable \u3002 @ @filename ( rpc - exception . filter ) import { Catch , RpcExceptionFilter , ArgumentsHost } from '@nestjs/common' ; import { Observable , throwError } from 'rxjs' ; import { RpcException } from '@nestjs/microservices' ; @Catch ( RpcException ) export class ExceptionFilter implements RpcExceptionFilter < RpcException > { catch ( exception : RpcException , host : ArgumentsHost ) : Observable < any > { return throwError ( exception . getError ()); } } @ @switch import { Catch } from '@nestjs/common' ; import { throwError } from 'rxjs' ; @Catch ( RpcException ) export class ExceptionFilter { catch ( exception , host ) { return throwError ( exception . getError ()); } } warning Warning \u5f53\u4f7f\u7528 \u6df7\u5408\u5e94\u7528\u7a0b\u5e8f \u65f6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5168\u5c40\u5fae\u670d\u52a1\u5f02\u5e38\u8fc7\u6ee4\u5668\u4e0d\u542f\u7528. \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e00\u4e2a\u624b\u52a8\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u8303\u56f4\u7684\u8fc7\u6ee4\u5668\u3002 \u5c31\u50cf\u57fa\u4e8e HTTP \u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63a7\u5236\u5668\u4f5c\u7528\u57df\u7684\u8fc7\u6ee4\u5668(\u5373\uff0c\u5728\u63a7\u5236\u5668\u7c7b\u524d\u9762\u52a0\u4e0a @UseFilters() \u88c5\u9970\u5668)\u3002 @ @filename () @UseFilters ( new ExceptionFilter ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @UseFilters ( new ExceptionFilter ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); }","title":"\u8fc7\u6ee4\u5668"},{"location":"microservices/exception-filters/#_3","text":"\u901a\u5e38\uff0c\u60a8\u5c06\u521b\u5efa\u5b8c\u5168\u5b9a\u5236\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u6765\u6ee1\u8db3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u7136\u800c\uff0c\u5728\u6709\u4e9b\u7528\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u7b80\u5355\u5730\u6269\u5c55 \u6838\u5fc3\u5f02\u5e38\u8fc7\u6ee4\u5668 \uff0c\u5e76\u57fa\u4e8e\u67d0\u4e9b\u56e0\u7d20\u8986\u76d6\u884c\u4e3a\u3002 \u4e3a\u4e86\u5c06\u5f02\u5e38\u5904\u7406\u59d4\u6258\u7ed9\u57fa\u672c\u8fc7\u6ee4\u5668\uff0c\u4f60\u9700\u8981\u6269\u5c55 BaseExceptionFilter \u5e76\u8c03\u7528\u7ee7\u627f\u7684 catch() \u65b9\u6cd5\u3002 @ @filename () import { Catch , ArgumentsHost } from '@nestjs/common' ; import { BaseRpcExceptionFilter } from '@nestjs/microservices' ; @Catch () export class AllExceptionsFilter extends BaseRpcExceptionFilter { catch ( exception : any , host : ArgumentsHost ) { return super . catch ( exception , host ); } } @ @switch import { Catch } from '@nestjs/common' ; import { BaseRpcExceptionFilter } from '@nestjs/microservices' ; @Catch () export class AllExceptionsFilter extends BaseRpcExceptionFilter { catch ( exception , host ) { return super . catch ( exception , host ); } } \u4e0a\u9762\u7684\u5b9e\u73b0\u53ea\u662f\u6f14\u793a\u8be5\u65b9\u6cd5\u7684 shell\u3002 \u6269\u5c55\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u5b9e\u73b0\u5c06\u5305\u62ec\u5b9a\u5236\u7684 \u4e1a\u52a1\u903b\u8f91 (\u4f8b\u5982\uff0c\u5904\u7406\u5404\u79cd\u6761\u4ef6)\u3002","title":"\u7ee7\u627f"},{"location":"microservices/grpc/","text":"gRPC \u00b6 gRPC \u662f\u4e00\u4e2a\u73b0\u4ee3\u7684\u3001\u5f00\u6e90\u7684\u3001\u9ad8\u6027\u80fd\u7684 RPC \u6846\u67b6\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u73af\u5883\u4e2d\u8fd0\u884c\u3002 \u5b83\u53ef\u4ee5\u6709\u6548\u5730\u8fde\u63a5\u6570\u636e\u4e2d\u5fc3\u5185\u548c\u8de8\u6570\u636e\u4e2d\u5fc3\u7684\u670d\u52a1\uff0c\u652f\u6301\u8d1f\u8f7d\u5747\u8861\u3001\u8ddf\u8e2a\u3001\u5065\u5eb7\u68c0\u67e5\u548c\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4e0e\u8bb8\u591a RPC \u7cfb\u7edf\u4e00\u6837\uff0cgRPC \u57fa\u4e8e\u4ee5\u53ef\u4ee5\u8fdc\u7a0b\u8c03\u7528\u7684\u51fd\u6570(\u65b9\u6cd5)\u5b9a\u4e49\u670d\u52a1\u7684\u6982\u5ff5\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u6cd5\uff0c\u60a8\u90fd\u5b9a\u4e49\u4e86\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u3002 \u670d\u52a1\u3001\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u5b9a\u4e49\u5728\u3002 \u534f\u8bae\u7f13\u51b2\u533a \u673a\u5236\u3002 \u901a\u8fc7 gRPC \u8fd0\u8f93\u673a\uff0cNest \u4f7f\u7528 .proto \u7684\u6587\u4ef6\u52a8\u6001\u7ed1\u5b9a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\uff0c\u4f7f\u5176\u6613\u4e8e\u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff0c\u81ea\u52a8\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7ed3\u6784\u5316\u6570\u636e\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e grpc \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save @grpc/grpc-js @grpc/proto-loader \u6982\u8ff0 \u00b6 \u50cf\u5176\u4ed6\u7684 Nest \u5fae\u670d\u52a1\u4f20\u8f93\u5c42\u5b9e\u73b0\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684 transport \u5c5e\u6027\u6765\u9009\u62e9 gRPC \u4f20\u8f93\u673a\u5236\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u8bbe\u7f6e\u4e00\u4e2a\u82f1\u96c4\u670d\u52a1\u3002 options \u5c5e\u6027\u63d0\u4f9b\u5173\u4e8e\u8be5\u670d\u52a1\u7684\u5143\u6570\u636e;\u5b83\u7684\u5c5e\u6027\u63cf\u8ff0 \u5982\u4e0b \u3002 @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.GRPC , options : { package : `hero` , protoPath : join ( __dirname , `hero/hero.proto` ), }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.GRPC , options : { package : `hero` , protoPath : join ( __dirname , `hero/hero.proto` ), }, }); info Hint join() \u51fd\u6570\u4ece path \u5305\u5bfc\u5165; Transport enum \u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728 nest-cli.json \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86 assets \u5c5e\u6027\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u5206\u53d1\u975e typescript \u6587\u4ef6\uff0c\u4ee5\u53ca watchAssets \u2014\u2014\u7528\u6765\u6253\u5f00\u76d1\u89c6\u6240\u6709\u975e typescript \u8d44\u4ea7\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b .proto \u6587\u4ef6\u88ab\u81ea\u52a8\u590d\u5236\u5230 dist \u6587\u4ef6\u5939\u4e2d\u3002 { \"compilerOptions\" : { \"assets\" : [ \"**/*.proto\" ], \"watchAssets\" : true } } \u9009\u9879 \u00b6 gRPC \u4f20\u8f93\u5668\u9009\u9879\u5bf9\u8c61\u516c\u5f00\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 \u9009\u9879 \u5fc5\u9009 \u9ed8\u8ba4 \u63cf\u8ff0 package Required Protobuf \u5305\u540d(\u5339\u914d .proto \u6587\u4ef6\u4e2d\u7684 package \u8bbe\u7f6e)\u3002 protoPath Required .proto \u6587\u4ef6\u7684\u7edd\u5bf9(\u6216\u76f8\u5bf9\u4e8e\u6839\u76ee\u5f55)\u8def\u5f84\u3002 url Optional localhost:5000 \u8fde\u63a5 url\u3002\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a ip address/dns name:port (\u4f8b\u5982\uff0c localhost:50051 )\uff0c\u5b9a\u4e49\u4f20\u8f93\u7a0b\u5e8f\u5efa\u7acb\u8fde\u63a5\u7684\u5730\u5740/\u7aef\u53e3\u3002 protoLoader Optional @grpc/proto-loader \u7528\u4e8e\u52a0\u8f7d .proto \u6587\u4ef6\u7684\u5b9e\u7528\u7a0b\u5e8f\u7684 NPM \u5305\u540d\u79f0\u3002 loader Optional @grpc/proto-loader \u9009\u9879\u3002\u8fd9\u4e9b\u6587\u4ef6\u63d0\u4f9b\u4e86\u5bf9 .proto \u6587\u4ef6\u884c\u4e3a\u7684\u8be6\u7ec6\u63a7\u5236\u3002\u67e5\u770b \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u7ec6\u8282 credentials Optional \u670d\u52a1\u5668\u8bc1\u4e66\u3002\u70b9\u51fb \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a gRPC \u670d\u52a1\u793a\u4f8b \u00b6 \u8ba9\u6211\u4eec\u5b9a\u4e49\u540d\u4e3a HeroesService \u7684\u793a\u4f8b gRPC \u670d\u52a1\u3002 \u5728\u4e0a\u9762\u7684 options \u5bf9\u8c61\u4e2d\uff0c protopath \u5c5e\u6027\u8bbe\u7f6e\u4e86 .proto \u5b9a\u4e49\u6587\u4ef6 hero.proto \u7684\u8def\u5f84\u3002 hero.proto \u6587\u4ef6\u7684\u7ed3\u6784\u4f7f\u7528 \u534f\u8bae\u7f13\u51b2\u533a \u3002 \u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684: // hero/hero.proto syntax = \"proto3\" ; package hero ; service HeroesService { rpc FindOne ( HeroById ) returns ( Hero ) {} } message HeroById { int32 id = 1 ; } message Hero { int32 id = 1 ; string name = 2 ; } \u6211\u4eec\u7684 HeroesService \u516c\u5f00\u4e86\u4e00\u4e2a FindOne() \u65b9\u6cd5\u3002 \u8be5\u65b9\u6cd5\u671f\u671b\u4e00\u4e2a\u7c7b\u578b\u4e3a HeroById \u7684\u8f93\u5165\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a Hero \u6d88\u606f(\u534f\u8bae\u7f13\u51b2\u533a\u4f7f\u7528 message \u5143\u7d20\u6765\u5b9a\u4e49\u53c2\u6570\u7c7b\u578b\u548c\u8fd4\u56de\u7c7b\u578b)\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u670d\u52a1\u3002 \u8981\u5b9a\u4e49\u6ee1\u8db3\u6b64\u5b9a\u4e49\u7684\u5904\u7406\u7a0b\u5e8f\uff0c\u6211\u4eec\u5728\u63a7\u5236\u5668\u4e2d\u4f7f\u7528 @GrpcMethod() \u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u6b64\u88c5\u9970\u5668\u63d0\u4f9b\u5c06\u65b9\u6cd5\u58f0\u660e\u4e3a gRPC \u670d\u52a1\u65b9\u6cd5\u6240\u9700\u7684\u5143\u6570\u636e\u3002 info Hint \u5728\u4e4b\u524d\u7684\u5fae\u670d\u52a1\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u7684 @messageppattern() \u88c5\u9970\u5668( \u9605\u8bfb\u66f4\u591a\u4fe1\u606f )\u6ca1\u6709\u7528\u4e8e\u57fa\u4e8e grpc \u7684\u5fae\u670d\u52a1\u3002 @GrpcMethod() \u88c5\u9970\u5668\u6709\u6548\u5730\u53d6\u4ee3\u4e86\u57fa\u4e8e grpc \u7684\u5fae\u670d\u52a1\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesController { @GrpcMethod ( `HeroesService` , `FindOne` ) findOne ( data : HeroById , metadata : Metadata , call : ServerUnaryCall < any > ) : Hero { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } @ @switch @Controller () export class HeroesController { @GrpcMethod ( `HeroesService` , `FindOne` ) findOne ( data , metadata , call ) { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } info Hint @GrpcMethod() \u88c5\u9970\u5668\u662f\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684\uff0c\u800c Metadata \u548c ServerUnaryCall \u5219\u662f\u4ece grpc \u5305\u5bfc\u5165\u7684\u3002 \u4e0a\u9762\u663e\u793a\u7684\u88c5\u9970\u5668\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u662f\u670d\u52a1\u540d\u79f0(\u4f8b\u5982\uff0c HeroesService )\uff0c\u5bf9\u5e94\u4e8e hero.proto \u4e2d\u7684 HeroesService \u670d\u52a1\u5b9a\u4e49\u3002 \u7b2c\u4e8c\u4e2a(\u5b57\u7b26\u4e32 FindOne )\u5bf9\u5e94\u4e8e hero \u4e2d\u7684 HeroesService \u4e2d\u5b9a\u4e49\u7684 FindOne() rpc \u65b9\u6cd5\u3002\u5178\u578b\u7684\u6587\u4ef6\u3002 findOne() \u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u4ece\u8c03\u7528\u8005\u4f20\u9012\u7684 \u6570\u636e \uff0c\u5b58\u50a8 gRPC \u7684 \u5143\u6570\u636e \u8bf7\u6c42\u5143\u6570\u636e\u548c \u8c03\u7528 \u4ee5\u83b7\u53d6 GrpcCall \u5bf9\u8c61\u5c5e\u6027\uff0c\u5982 sendMetadata \u7528\u4e8e\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u5143\u6570\u636e\u3002 @GrpcMethod() \u88c5\u9970\u5668\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u8c03\u7528\u65f6\u6ca1\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570(\u4f8b\u5982\uff0c FindOne )\uff0c Nest \u5c06\u81ea\u52a8\u5173\u8054 .proto \u6587\u4ef6 rpc \u65b9\u6cd5\u548c\u57fa\u4e8e\u5c06\u5904\u7406\u7a0b\u5e8f\u540d\u79f0\u8f6c\u6362\u4e3a\u4e0a\u9a7c\u5cf0\u5927\u5c0f\u5199\u7684\u5904\u7406\u7a0b\u5e8f(\u4f8b\u5982\uff0c findOne \u5904\u7406\u7a0b\u5e8f\u4e0e findOne rpc \u8c03\u7528\u5b9a\u4e49\u76f8\u5173\u8054)\u3002 \u5982\u4e0b\u6240\u793a\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesController { @GrpcMethod ( `HeroesService` ) findOne ( data : HeroById , metadata : Metadata , call : ServerUnaryCall < any > ) : Hero { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } @ @switch @Controller () export class HeroesController { @GrpcMethod ( `HeroesService` ) findOne ( data , metadata , call ) { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } \u4f60\u4e5f\u53ef\u4ee5\u7701\u7565\u7b2c\u4e00\u4e2a @GrpcMethod() \u53c2\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cNest \u6839\u636e\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u7684 \u7c7b \u540d\u81ea\u52a8\u5c06\u5904\u7406\u7a0b\u5e8f\u4e0e\u6765\u81ea\u539f\u5b9a\u4e49\u6587\u4ef6\u7684\u670d\u52a1\u5b9a\u4e49\u5173\u8054\u8d77\u6765\u3002 \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u7c7b HeroesService \u5c06\u5b83\u7684\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u4e0e hero \u4e2d\u7684 HeroesService \u670d\u52a1\u5b9a\u4e49\u5173\u8054\u8d77\u6765 .proto \u6587\u4ef6\uff0c\u6839\u636e\u540d\u79f0\" HeroesService \u7684\u5339\u914d\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesService { @GrpcMethod () findOne ( data : HeroById , metadata : Metadata , call : ServerUnaryCall < any > ) : Hero { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } @ @switch @Controller () export class HeroesService { @GrpcMethod () findOne ( data , metadata , call ) { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } \u5ba2\u6237\u7aef \u00b6 Nest \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5145\u5f53 gRPC \u5ba2\u6237\u7aef\uff0c\u4f7f\u7528 \u5178\u578b\u7684\u6587\u4ef6 \u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7 ClientGrpc \u5bf9\u8c61\u8bbf\u95ee\u8fdc\u7a0b\u670d\u52a1\u3002 \u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u65b9\u5f0f\u83b7\u53d6 ClientGrpc \u5bf9\u8c61\u3002 \u9996\u9009\u7684\u6280\u672f\u662f\u5bfc\u5165 ClientsModule \u3002 \u4f7f\u7528 register() \u65b9\u6cd5\u7ed1\u5b9a\u7c7b\u4e2d\u5b9a\u4e49\u7684\u670d\u52a1\u5305 .proto \u6587\u4ef6\u5230\u6ce8\u5165\u4ee4\u724c\uff0c\u5e76\u914d\u7f6e\u8be5\u670d\u52a1\u3002 name \u5c5e\u6027\u662f\u6ce8\u5165\u4ee4\u724c\u3002 \u5bf9\u4e8e gRPC \u670d\u52a1\uff0c\u8bf7\u4f7f\u7528 transport: transport . gRPC \u3002 options \u5c5e\u6027\u662f\u4e00\u4e2a\u5177\u6709 \u4e0a\u9762 \u63cf\u8ff0\u7684\u76f8\u540c\u5c5e\u6027\u7684\u5bf9\u8c61\u3002 imports : [ ClientsModule . register ([ { name : `HERO_PACKAGE` , transport : Transport.GRPC , options : { package : `hero` , protoPath : join ( __dirname , `hero/hero.proto` ), }, }, ]), ]; info Hint register() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\u3002 \u901a\u8fc7\u63d0\u4f9b\u4ee5\u9017\u53f7\u5206\u9694\u7684\u6ce8\u518c\u5bf9\u8c61\u5217\u8868\u6765\u6ce8\u518c\u591a\u4e2a\u5305\u3002 \u6ce8\u518c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 @Inject() \u6ce8\u5165\u914d\u7f6e\u597d\u7684 ClientGrpc \u5bf9\u8c61\u3002 \u7136\u540e\u6211\u4eec\u4f7f\u7528 ClientGrpc \u5bf9\u8c61\u7684 getService() \u65b9\u6cd5\u6765\u68c0\u7d22\u670d\u52a1\u5b9e\u4f8b\uff0c\u5982\u4e0b\u6240\u793a\u3002 @Injectable () export class AppService implements OnModuleInit { private heroesService : HeroesService ; constructor ( @Inject ( `HERO_PACKAGE` ) private client : ClientGrpc ) {} onModuleInit () { this . heroesService = this . client . getService < HeroesService > ( `HeroesService` ); } getHero () : Observable < string > { return this . heroesService . findOne ({ id : 1 }); } } error Warning gRPC \u5ba2\u6237\u7aef\u4e0d\u4f1a\u53d1\u9001\u540d\u79f0\u4e2d\u5305\u542b\u4e0b\u5212\u7ebf _ \u7684\u5b57\u6bb5\uff0c\u9664\u975e keepCase \u9009\u9879\u5728 proto \u52a0\u8f7d\u5668\u914d\u7f6e\u4e2d\u8bbe\u7f6e\u4e3a true \u3002\u5728\u5fae\u670d\u52a1\u4f20\u8f93\u914d\u7f6e\u4e2d\u7684 Keepcase\u2019)\u3002 \u6ce8\u610f\uff0c\u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u65b9\u6cd5\u4e2d\u4f7f\u7528\u7684\u6280\u672f\u76f8\u6bd4\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u5c0f\u7684\u533a\u522b\u3002 \u6211\u4eec\u6ca1\u6709\u4f7f\u7528 ClientProxy \u7c7b\uff0c\u800c\u662f\u4f7f\u7528 ClientGrpc \u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86 getService() \u65b9\u6cd5\u3002 getService() \u6cdb\u578b\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u670d\u52a1\u540d\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u5176\u5b9e\u4f8b(\u5982\u679c\u53ef\u7528)\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 @Client() \u88c5\u9970\u5668\u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a ClientGrpc \u5bf9\u8c61\uff0c\u5982\u4e0b\u6240\u793a: @Injectable () export class AppService implements OnModuleInit { @Client ({ transport : Transport.GRPC , options : { package : `hero` , protoPath : join ( __dirname , `hero/hero.proto` ), }, }) client : ClientGrpc ; private heroesService : HeroesService ; onModuleInit () { this . heroesService = this . client . getService < HeroesService > ( `HeroesService` ); } getHero () : Observable < string > { return this . heroesService . findOne ({ id : 1 }); } } \u6700\u540e\uff0c\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ClientProxyFactory \u7c7b\u6ce8\u5165\u52a8\u6001\u914d\u7f6e\u7684\u5ba2\u6237\u7aef\uff0c\u5982 \u8fd9\u91cc \u6240\u8ff0\u3002 \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6700\u7ec8\u90fd\u5f97\u5230\u4e86\u5bf9 HeroesService \u4ee3\u7406\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5b83\u516c\u5f00\u4e86\u5728 \u5178\u578b\u7684\u6587\u4ef6 \u3002 \u73b0\u5728\uff0c\u5f53\u6211\u4eec\u8bbf\u95ee\u8fd9\u4e2a\u4ee3\u7406\u5bf9\u8c61(\u5373 heroesService )\u65f6\uff0cgRPC \u7cfb\u7edf\u81ea\u52a8\u5e8f\u5217\u5316\u8bf7\u6c42\uff0c\u5c06\u5b83\u4eec\u8f6c\u53d1\u5230\u8fdc\u7a0b\u7cfb\u7edf\uff0c\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\uff0c\u5e76\u53cd\u5e8f\u5217\u5316\u54cd\u5e94\u3002 \u56e0\u4e3a gRPC \u5c4f\u853d\u4e86\u8fd9\u4e9b\u7f51\u7edc\u901a\u4fe1\u7ec6\u8282\uff0c\u6240\u4ee5 heroesService \u770b\u8d77\u6765\u548c\u884c\u4e3a\u90fd\u50cf\u672c\u5730\u63d0\u4f9b\u8005\u3002 \u6ce8\u610f\uff0c\u6240\u6709\u7684\u670d\u52a1\u65b9\u6cd5\u90fd\u662f \u5c0f\u5199\u7684 (\u4e3a\u4e86\u9075\u5faa\u8bed\u8a00\u7684\u81ea\u7136\u60ef\u4f8b)\u3002 \u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u7684 .proto \u6587\u4ef6 HeroesService \u5b9a\u4e49\u5305\u542b FindOne() \u51fd\u6570\uff0c HeroesService \u5b9e\u4f8b\u5c06\u63d0\u4f9b FindOne() \u65b9\u6cd5\u3002 interface HeroesService { findOne ( data : { id : number }) : Observable < any > ; } \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u8fd8\u80fd\u591f\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u503c\u5c06\u88ab\u53d1\u51fa\uff0c\u76f4\u5230\u6d41\u5b8c\u6210\u3002 @ @filename ( heroes . controller ) @Get () call () : Observable < any > { return this . heroesService . findOne ({ id : 1 }); } @ @switch @Get () call () { return this . heroesService . findOne ({ id : 1 }); } \u8981\u53d1\u9001 gRPC \u5143\u6570\u636e(\u4e0e\u8bf7\u6c42\u4e00\u8d77)\uff0c\u53ef\u4ee5\u4f20\u9012\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a: call () : Observable < any > { const metadata = new Metadata (); metadata . add ( `Set-Cookie` , `yummy_cookie=choco` ); return this . heroesService . findOne ({ id : 1 }, metadata ); } info Hint Metadata \u7c7b\u662f\u4ece grpc \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u5c06\u9700\u8981\u66f4\u65b0\u6211\u4eec\u5728\u524d\u9762\u51e0\u4e2a\u6b65\u9aa4\u4e2d\u5b9a\u4e49\u7684 HeroesService \u63a5\u53e3\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6709\u4e00\u4e2a\u53ef\u7528\u7684\u793a\u4f8b \u6b64\u5904 . gRPC \u6d41 \u00b6 gRPC \u672c\u8eab\u652f\u6301\u957f\u671f\u7684\u5b9e\u65f6\u8fde\u63a5\uff0c\u901a\u5e38\u79f0\u4e3a \u6d41 \u3002 \u6d41\u5728\u804a\u5929\u3001\u89c2\u5bdf\u6216\u5757\u6570\u636e\u4f20\u8f93\u7b49\u60c5\u51b5\u4e0b\u975e\u5e38\u6709\u7528\u3002 \u5728\u5b98\u65b9\u6587\u6863\u4e2d\u627e\u5230\u66f4\u591a\u7ec6\u8282 \u70b9\u51fb\u8fd9\u91cc . Nest \u4ee5\u4e24\u79cd\u53ef\u80fd\u7684\u65b9\u5f0f\u652f\u6301 GRPC \u6d41\u5904\u7406\u7a0b\u5e8f: RxJS Subject + Observable handler: \u5c06\u54cd\u5e94\u5199\u5728 Controller \u65b9\u6cd5\u5185\u90e8\u6216\u4f20\u9012\u7ed9 Subject / Observable \u6d88\u8d39\u8005\u662f\u5426\u6709\u7528 \u7eaf GRPC \u8c03\u7528\u6d41\u5904\u7406\u7a0b\u5e8f: \u4f20\u9012\u7ed9\u4e00\u4e9b\u6267\u884c\u5668\u662f\u5f88\u6709\u7528\u7684\uff0c\u5b83\u5c06\u4e3a Node \u6807\u51c6\u7684 Duplex \u6d41\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u5176\u4f59\u7684\u8c03\u5ea6\u3002 \u6d41\u793a\u4f8b \u00b6 \u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a HelloService \u7684\u65b0\u7684 gRPC \u670d\u52a1\u793a\u4f8b\u3002 \u4f60\u597d\u3002Proto \u6587\u4ef6\u7684\u7ed3\u6784\u4f7f\u7528 \u534f\u8bae\u7f13\u51b2\u533a \u3002 \u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684: // hello/hello.proto syntax = \"proto3\" ; package hello ; service HelloService { rpc BidiHello ( stream HelloRequest ) returns ( stream HelloResponse ); rpc LotsOfGreetings ( stream HelloRequest ) returns ( HelloResponse ); } message HelloRequest { string greeting = 1 ; } message HelloResponse { string reply = 1 ; } info Hint LotsOfGreetings \u65b9\u6cd5\u53ef\u4ee5\u7b80\u5355\u5730\u7528 @GrpcMethod \u88c5\u9970\u5668\u5b9e\u73b0(\u5982\u4e0a\u4f8b\u6240\u793a)\uff0c\u56e0\u4e3a\u8fd4\u56de\u7684\u6d41\u53ef\u4ee5\u53d1\u51fa\u591a\u4e2a\u503c\u3002 \u57fa\u4e8e\u8fd9\u4e2a .proto \u6587\u4ef6\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49 HelloService \u63a5\u53e3: interface HelloService { bidiHello ( upstream : Observable < HelloRequest > ) : Observable < HelloResponse > ; lotsOfGreetings ( upstream : Observable < HelloRequest > , ) : Observable < HelloResponse > ; } interface HelloRequest { greeting : string ; } interface HelloResponse { reply : string ; } info Hint proto \u63a5\u53e3\u53ef\u4ee5\u901a\u8fc7 ts-proto \u5305\u81ea\u52a8\u751f\u6210\uff0c\u4e86\u89e3\u66f4\u591a\u4fe1\u606f \u8fd9\u91cc \u3002 \u4e3b\u9898\u7b56\u7565 \u00b6 @GrpcStreamMethod() \u88c5\u9970\u5668\u4ee5 RxJS Observable \u7684\u5f62\u5f0f\u63d0\u4f9b\u51fd\u6570\u53c2\u6570\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u6536\u548c\u5904\u7406\u591a\u4e2a\u6d88\u606f\u3002 @GrpcStreamMethod () bidiHello ( messages : Observable < any > , metadata : Metadata , call : ServerDuplexStream < any , any > ) : Observable < any > { const subject = new Subject (); const onNext = message => { console . log ( message ); subject . next ({ reply : `Hello, world!` }); }; const onComplete = () => subject . complete (); messages . subscribe ({ next : onNext , complete : onComplete , }); return subject . asObservable (); } warning Warning \u4e3a\u4e86\u652f\u6301\u4e0e @GrpcStreamMethod() \u88c5\u9970\u5668\u7684\u5168\u53cc\u5de5\u4ea4\u4e92\uff0c\u63a7\u5236\u5668\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a RxJS Observable \u3002 info Hint Metadata \u548c ServerUnaryCall \u7c7b/\u63a5\u53e3\u662f\u4ece grpc \u5305\u5bfc\u5165\u7684\u3002 \u6839\u636e\u670d\u52a1\u5b9a\u4e49(\u5728 .proto \u6587\u4ef6)\uff0c BidiHello \u65b9\u6cd5\u5e94\u8be5\u5c06\u8bf7\u6c42\u6d41\u53d1\u9001\u5230\u670d\u52a1\u3002 \u4e3a\u4e86\u4ece\u5ba2\u6237\u7aef\u5411\u6d41\u53d1\u9001\u591a\u4e2a\u5f02\u6b65\u6d88\u606f\uff0c\u6211\u4eec\u5229\u7528\u4e86 RxJS \u7684 ReplaySubject \u7c7b\u3002 const helloService = this . client . getService < HelloService > ( `HelloService` ); const helloRequest$ = new ReplaySubject < HelloRequest > (); helloRequest$ . next ({ greeting : `Hello (1)!` }); helloRequest$ . next ({ greeting : `Hello (2)!` }); helloRequest$ . complete (); return helloService . bidiHello ( helloRequest$ ); \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5411\u6d41\u5199\u5165\u4e86\u4e24\u6761\u6d88\u606f( next() \u8c03\u7528)\uff0c\u5e76\u901a\u77e5\u670d\u52a1\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u6570\u636e\u7684\u53d1\u9001( complete() \u8c03\u7528)\u3002 \u8c03\u7528\u6d41\u5904\u7406\u7a0b\u5e8f \u00b6 \u5f53\u65b9\u6cd5\u8fd4\u56de\u503c\u5b9a\u4e49\u4e3a stream \u65f6\uff0c @GrpcStreamCall() \u88c5\u9970\u5668\u5c06\u51fd\u6570\u53c2\u6570\u5b9a\u4e49\u4e3a grpc \u3002 ServerDuplexStream \uff0c\u5b83\u652f\u6301\u50cf\u8fd9\u6837\u7684\u6807\u51c6\u65b9\u6cd5\u3002( \u6570\u636e ,\u56de\u8c03) \u3001 .write(\u6d88\u606f) \u6216 .cancel()`\u3002 \u53ef\u7528\u65b9\u6cd5\u7684\u5b8c\u6574\u6587\u6863\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 \u6b64\u5904 . \u6216\u8005\uff0c\u5f53\u65b9\u6cd5\u8fd4\u56de\u503c\u4e0d\u662f stream \u65f6\uff0c @GrpcStreamCall() \u88c5\u9970\u5668\u63d0\u4f9b\u4e24\u4e2a\u51fd\u6570\u5f62\u53c2\uff0c\u5206\u522b\u662f grpc\u3002ServerReadableStream (\u9605\u8bfb\u66f4\u591a \u8fd9\u91cc )\u548c callback \u3002 \u8ba9\u6211\u4eec\u4ece\u5b9e\u73b0 BidiHello \u5f00\u59cb\uff0c\u5b83\u5e94\u8be5\u652f\u6301\u5168\u53cc\u5de5\u4ea4\u4e92\u3002 @GrpcStreamCall () bidiHello ( requestStream : any ) { requestStream . on ( `data` , message => { console . log ( message ); requestStream . write ({ reply : `Hello, world!` }); }); } info Hint \u8fd9\u4e2a\u88c5\u9970\u5668\u4e0d\u9700\u8981\u63d0\u4f9b\u4efb\u4f55\u7279\u5b9a\u7684\u8fd4\u56de\u53c2\u6570\u3002 \u9884\u671f\u6d41\u7684\u5904\u7406\u65b9\u5f0f\u5c06\u4e0e\u4efb\u4f55\u5176\u4ed6\u6807\u51c6\u6d41\u7c7b\u578b\u7c7b\u4f3c\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 write() \u65b9\u6cd5\u5c06\u5bf9\u8c61\u5199\u5165\u54cd\u5e94\u6d41\u3002 \u4f20\u9012\u7ed9 .on() \u65b9\u6cd5\u7684\u56de\u8c03\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u5728\u6bcf\u6b21\u670d\u52a1\u63a5\u6536\u5230\u65b0\u7684\u6570\u636e\u5757\u65f6\u88ab\u8c03\u7528\u3002 \u8ba9\u6211\u4eec\u5b9e\u73b0 LotsOfGreetings \u65b9\u6cd5\u3002 @GrpcStreamCall () lotsOfGreetings ( requestStream : any , callback : ( err : unknown , value : HelloResponse ) => void ) { requestStream . on ( `data` , message => { console . log ( message ); }); requestStream . on ( `end` , () => callback ( null , { reply : `Hello, world!` })); } \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 callback \u51fd\u6570\u5728 requestStream \u5904\u7406\u5b8c\u6210\u540e\u53d1\u9001\u54cd\u5e94\u3002 gRPC \u5143\u6570\u636e \u00b6 \u5143\u6570\u636e\u662f\u952e-\u503c\u5bf9\u5217\u8868\u5f62\u5f0f\u7684\u5173\u4e8e\u7279\u5b9a RPC \u8c03\u7528\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u952e\u662f\u5b57\u7b26\u4e32\uff0c\u503c\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5143\u6570\u636e\u5bf9 gRPC \u672c\u8eab\u662f\u4e0d\u900f\u660e\u7684\u2014\u2014\u5b83\u5141\u8bb8\u5ba2\u6237\u673a\u5411\u670d\u52a1\u5668\u63d0\u4f9b\u4e0e\u8c03\u7528\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 \u5143\u6570\u636e\u53ef\u80fd\u5305\u62ec\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u3001\u7528\u4e8e\u76d1\u89c6\u76ee\u7684\u7684\u8bf7\u6c42\u6807\u8bc6\u7b26\u548c\u6807\u8bb0\uff0c\u4ee5\u53ca\u6570\u636e\u4fe1\u606f\uff0c\u5982\u6570\u636e\u96c6\u4e2d\u7684\u8bb0\u5f55\u6570\u91cf\u3002 \u8981\u8bfb\u53d6 @GrpcMethod() \u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u5143\u6570\u636e\uff0c\u8bf7\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570(metadata)\uff0c\u5176\u7c7b\u578b\u4e3a metadata (\u4ece grpc \u5305\u5bfc\u5165)\u3002 \u8981\u4ece\u5904\u7406\u7a0b\u5e8f\u53d1\u9001\u56de\u5143\u6570\u636e\uff0c\u4f7f\u7528 ServerUnaryCall#sendMetadata() \u65b9\u6cd5(\u7b2c\u4e09\u4e2a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570)\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesService { @GrpcMethod () findOne ( data : HeroById , metadata : Metadata , call : ServerUnaryCall < any > ) : Hero { const serverMetadata = new Metadata (); const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; serverMetadata . add ( `Set-Cookie` , `yummy_cookie=choco` ); call . sendMetadata ( serverMetadata ); return items . find (({ id }) => id === data . id ); } } @ @switch @Controller () export class HeroesService { @GrpcMethod () findOne ( data , metadata , call ) { const serverMetadata = new Metadata (); const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; serverMetadata . add ( `Set-Cookie` , `yummy_cookie=choco` ); call . sendMetadata ( serverMetadata ); return items . find (({ id }) => id === data . id ); } } \u540c\u6837\uff0c\u8981\u5728\u7528 @GrpcStreamMethod() \u5904\u7406\u7a0b\u5e8f( subject strategy )\u6ce8\u91ca\u7684\u5904\u7406\u7a0b\u5e8f\u4e2d\u8bfb\u53d6\u5143\u6570\u636e\uff0c\u8bf7\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570(metadata)\uff0c\u5b83\u7684\u7c7b\u578b\u4e3a metadata (\u4ece grpc \u5305\u5bfc\u5165)\u3002 \u8981\u4ece\u5904\u7406\u7a0b\u5e8f\u53d1\u9001\u56de\u5143\u6570\u636e\uff0c\u4f7f\u7528 ServerDuplexStream#sendMetadata() \u65b9\u6cd5(\u7b2c\u4e09\u4e2a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570)\u3002 \u8981\u4ece \u8c03\u7528\u6d41\u5904\u7406\u7a0b\u5e8f (\u5e26\u6709 @GrpcStreamCall() \u88c5\u9970\u5668\u6ce8\u91ca\u7684\u5904\u7406\u7a0b\u5e8f)\u5185\u8bfb\u53d6\u5143\u6570\u636e\uff0c\u8bf7\u542c requestStream \u5f15\u7528\u4e0a\u7684 metadata \u4e8b\u4ef6\uff0c\u5982\u4e0b\u6240\u793a: requestStream . on ( `metadata` , ( metadata : Metadata ) => { const meta = metadata . get ( `X-Meta` ); });","title":"gRPC"},{"location":"microservices/grpc/#grpc","text":"gRPC \u662f\u4e00\u4e2a\u73b0\u4ee3\u7684\u3001\u5f00\u6e90\u7684\u3001\u9ad8\u6027\u80fd\u7684 RPC \u6846\u67b6\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u73af\u5883\u4e2d\u8fd0\u884c\u3002 \u5b83\u53ef\u4ee5\u6709\u6548\u5730\u8fde\u63a5\u6570\u636e\u4e2d\u5fc3\u5185\u548c\u8de8\u6570\u636e\u4e2d\u5fc3\u7684\u670d\u52a1\uff0c\u652f\u6301\u8d1f\u8f7d\u5747\u8861\u3001\u8ddf\u8e2a\u3001\u5065\u5eb7\u68c0\u67e5\u548c\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4e0e\u8bb8\u591a RPC \u7cfb\u7edf\u4e00\u6837\uff0cgRPC \u57fa\u4e8e\u4ee5\u53ef\u4ee5\u8fdc\u7a0b\u8c03\u7528\u7684\u51fd\u6570(\u65b9\u6cd5)\u5b9a\u4e49\u670d\u52a1\u7684\u6982\u5ff5\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u6cd5\uff0c\u60a8\u90fd\u5b9a\u4e49\u4e86\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u3002 \u670d\u52a1\u3001\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u5b9a\u4e49\u5728\u3002 \u534f\u8bae\u7f13\u51b2\u533a \u673a\u5236\u3002 \u901a\u8fc7 gRPC \u8fd0\u8f93\u673a\uff0cNest \u4f7f\u7528 .proto \u7684\u6587\u4ef6\u52a8\u6001\u7ed1\u5b9a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\uff0c\u4f7f\u5176\u6613\u4e8e\u5b9e\u73b0\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528\uff0c\u81ea\u52a8\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7ed3\u6784\u5316\u6570\u636e\u3002","title":"gRPC"},{"location":"microservices/grpc/#_1","text":"\u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e grpc \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save @grpc/grpc-js @grpc/proto-loader","title":"\u5b89\u88c5"},{"location":"microservices/grpc/#_2","text":"\u50cf\u5176\u4ed6\u7684 Nest \u5fae\u670d\u52a1\u4f20\u8f93\u5c42\u5b9e\u73b0\u4e00\u6837\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684 transport \u5c5e\u6027\u6765\u9009\u62e9 gRPC \u4f20\u8f93\u673a\u5236\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u8bbe\u7f6e\u4e00\u4e2a\u82f1\u96c4\u670d\u52a1\u3002 options \u5c5e\u6027\u63d0\u4f9b\u5173\u4e8e\u8be5\u670d\u52a1\u7684\u5143\u6570\u636e;\u5b83\u7684\u5c5e\u6027\u63cf\u8ff0 \u5982\u4e0b \u3002 @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.GRPC , options : { package : `hero` , protoPath : join ( __dirname , `hero/hero.proto` ), }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.GRPC , options : { package : `hero` , protoPath : join ( __dirname , `hero/hero.proto` ), }, }); info Hint join() \u51fd\u6570\u4ece path \u5305\u5bfc\u5165; Transport enum \u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728 nest-cli.json \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86 assets \u5c5e\u6027\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u5206\u53d1\u975e typescript \u6587\u4ef6\uff0c\u4ee5\u53ca watchAssets \u2014\u2014\u7528\u6765\u6253\u5f00\u76d1\u89c6\u6240\u6709\u975e typescript \u8d44\u4ea7\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b .proto \u6587\u4ef6\u88ab\u81ea\u52a8\u590d\u5236\u5230 dist \u6587\u4ef6\u5939\u4e2d\u3002 { \"compilerOptions\" : { \"assets\" : [ \"**/*.proto\" ], \"watchAssets\" : true } }","title":"\u6982\u8ff0"},{"location":"microservices/grpc/#_3","text":"gRPC \u4f20\u8f93\u5668\u9009\u9879\u5bf9\u8c61\u516c\u5f00\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 \u9009\u9879 \u5fc5\u9009 \u9ed8\u8ba4 \u63cf\u8ff0 package Required Protobuf \u5305\u540d(\u5339\u914d .proto \u6587\u4ef6\u4e2d\u7684 package \u8bbe\u7f6e)\u3002 protoPath Required .proto \u6587\u4ef6\u7684\u7edd\u5bf9(\u6216\u76f8\u5bf9\u4e8e\u6839\u76ee\u5f55)\u8def\u5f84\u3002 url Optional localhost:5000 \u8fde\u63a5 url\u3002\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a ip address/dns name:port (\u4f8b\u5982\uff0c localhost:50051 )\uff0c\u5b9a\u4e49\u4f20\u8f93\u7a0b\u5e8f\u5efa\u7acb\u8fde\u63a5\u7684\u5730\u5740/\u7aef\u53e3\u3002 protoLoader Optional @grpc/proto-loader \u7528\u4e8e\u52a0\u8f7d .proto \u6587\u4ef6\u7684\u5b9e\u7528\u7a0b\u5e8f\u7684 NPM \u5305\u540d\u79f0\u3002 loader Optional @grpc/proto-loader \u9009\u9879\u3002\u8fd9\u4e9b\u6587\u4ef6\u63d0\u4f9b\u4e86\u5bf9 .proto \u6587\u4ef6\u884c\u4e3a\u7684\u8be6\u7ec6\u63a7\u5236\u3002\u67e5\u770b \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u7ec6\u8282 credentials Optional \u670d\u52a1\u5668\u8bc1\u4e66\u3002\u70b9\u51fb \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a","title":"\u9009\u9879"},{"location":"microservices/grpc/#grpc_1","text":"\u8ba9\u6211\u4eec\u5b9a\u4e49\u540d\u4e3a HeroesService \u7684\u793a\u4f8b gRPC \u670d\u52a1\u3002 \u5728\u4e0a\u9762\u7684 options \u5bf9\u8c61\u4e2d\uff0c protopath \u5c5e\u6027\u8bbe\u7f6e\u4e86 .proto \u5b9a\u4e49\u6587\u4ef6 hero.proto \u7684\u8def\u5f84\u3002 hero.proto \u6587\u4ef6\u7684\u7ed3\u6784\u4f7f\u7528 \u534f\u8bae\u7f13\u51b2\u533a \u3002 \u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684: // hero/hero.proto syntax = \"proto3\" ; package hero ; service HeroesService { rpc FindOne ( HeroById ) returns ( Hero ) {} } message HeroById { int32 id = 1 ; } message Hero { int32 id = 1 ; string name = 2 ; } \u6211\u4eec\u7684 HeroesService \u516c\u5f00\u4e86\u4e00\u4e2a FindOne() \u65b9\u6cd5\u3002 \u8be5\u65b9\u6cd5\u671f\u671b\u4e00\u4e2a\u7c7b\u578b\u4e3a HeroById \u7684\u8f93\u5165\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a Hero \u6d88\u606f(\u534f\u8bae\u7f13\u51b2\u533a\u4f7f\u7528 message \u5143\u7d20\u6765\u5b9a\u4e49\u53c2\u6570\u7c7b\u578b\u548c\u8fd4\u56de\u7c7b\u578b)\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u670d\u52a1\u3002 \u8981\u5b9a\u4e49\u6ee1\u8db3\u6b64\u5b9a\u4e49\u7684\u5904\u7406\u7a0b\u5e8f\uff0c\u6211\u4eec\u5728\u63a7\u5236\u5668\u4e2d\u4f7f\u7528 @GrpcMethod() \u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u6b64\u88c5\u9970\u5668\u63d0\u4f9b\u5c06\u65b9\u6cd5\u58f0\u660e\u4e3a gRPC \u670d\u52a1\u65b9\u6cd5\u6240\u9700\u7684\u5143\u6570\u636e\u3002 info Hint \u5728\u4e4b\u524d\u7684\u5fae\u670d\u52a1\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u7684 @messageppattern() \u88c5\u9970\u5668( \u9605\u8bfb\u66f4\u591a\u4fe1\u606f )\u6ca1\u6709\u7528\u4e8e\u57fa\u4e8e grpc \u7684\u5fae\u670d\u52a1\u3002 @GrpcMethod() \u88c5\u9970\u5668\u6709\u6548\u5730\u53d6\u4ee3\u4e86\u57fa\u4e8e grpc \u7684\u5fae\u670d\u52a1\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesController { @GrpcMethod ( `HeroesService` , `FindOne` ) findOne ( data : HeroById , metadata : Metadata , call : ServerUnaryCall < any > ) : Hero { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } @ @switch @Controller () export class HeroesController { @GrpcMethod ( `HeroesService` , `FindOne` ) findOne ( data , metadata , call ) { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } info Hint @GrpcMethod() \u88c5\u9970\u5668\u662f\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684\uff0c\u800c Metadata \u548c ServerUnaryCall \u5219\u662f\u4ece grpc \u5305\u5bfc\u5165\u7684\u3002 \u4e0a\u9762\u663e\u793a\u7684\u88c5\u9970\u5668\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u662f\u670d\u52a1\u540d\u79f0(\u4f8b\u5982\uff0c HeroesService )\uff0c\u5bf9\u5e94\u4e8e hero.proto \u4e2d\u7684 HeroesService \u670d\u52a1\u5b9a\u4e49\u3002 \u7b2c\u4e8c\u4e2a(\u5b57\u7b26\u4e32 FindOne )\u5bf9\u5e94\u4e8e hero \u4e2d\u7684 HeroesService \u4e2d\u5b9a\u4e49\u7684 FindOne() rpc \u65b9\u6cd5\u3002\u5178\u578b\u7684\u6587\u4ef6\u3002 findOne() \u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u4ece\u8c03\u7528\u8005\u4f20\u9012\u7684 \u6570\u636e \uff0c\u5b58\u50a8 gRPC \u7684 \u5143\u6570\u636e \u8bf7\u6c42\u5143\u6570\u636e\u548c \u8c03\u7528 \u4ee5\u83b7\u53d6 GrpcCall \u5bf9\u8c61\u5c5e\u6027\uff0c\u5982 sendMetadata \u7528\u4e8e\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u5143\u6570\u636e\u3002 @GrpcMethod() \u88c5\u9970\u5668\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u8c03\u7528\u65f6\u6ca1\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570(\u4f8b\u5982\uff0c FindOne )\uff0c Nest \u5c06\u81ea\u52a8\u5173\u8054 .proto \u6587\u4ef6 rpc \u65b9\u6cd5\u548c\u57fa\u4e8e\u5c06\u5904\u7406\u7a0b\u5e8f\u540d\u79f0\u8f6c\u6362\u4e3a\u4e0a\u9a7c\u5cf0\u5927\u5c0f\u5199\u7684\u5904\u7406\u7a0b\u5e8f(\u4f8b\u5982\uff0c findOne \u5904\u7406\u7a0b\u5e8f\u4e0e findOne rpc \u8c03\u7528\u5b9a\u4e49\u76f8\u5173\u8054)\u3002 \u5982\u4e0b\u6240\u793a\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesController { @GrpcMethod ( `HeroesService` ) findOne ( data : HeroById , metadata : Metadata , call : ServerUnaryCall < any > ) : Hero { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } @ @switch @Controller () export class HeroesController { @GrpcMethod ( `HeroesService` ) findOne ( data , metadata , call ) { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } \u4f60\u4e5f\u53ef\u4ee5\u7701\u7565\u7b2c\u4e00\u4e2a @GrpcMethod() \u53c2\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cNest \u6839\u636e\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\u7684 \u7c7b \u540d\u81ea\u52a8\u5c06\u5904\u7406\u7a0b\u5e8f\u4e0e\u6765\u81ea\u539f\u5b9a\u4e49\u6587\u4ef6\u7684\u670d\u52a1\u5b9a\u4e49\u5173\u8054\u8d77\u6765\u3002 \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u7c7b HeroesService \u5c06\u5b83\u7684\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u4e0e hero \u4e2d\u7684 HeroesService \u670d\u52a1\u5b9a\u4e49\u5173\u8054\u8d77\u6765 .proto \u6587\u4ef6\uff0c\u6839\u636e\u540d\u79f0\" HeroesService \u7684\u5339\u914d\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesService { @GrpcMethod () findOne ( data : HeroById , metadata : Metadata , call : ServerUnaryCall < any > ) : Hero { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } } @ @switch @Controller () export class HeroesService { @GrpcMethod () findOne ( data , metadata , call ) { const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; return items . find (({ id }) => id === data . id ); } }","title":"gRPC \u670d\u52a1\u793a\u4f8b"},{"location":"microservices/grpc/#_4","text":"Nest \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5145\u5f53 gRPC \u5ba2\u6237\u7aef\uff0c\u4f7f\u7528 \u5178\u578b\u7684\u6587\u4ef6 \u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7 ClientGrpc \u5bf9\u8c61\u8bbf\u95ee\u8fdc\u7a0b\u670d\u52a1\u3002 \u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u65b9\u5f0f\u83b7\u53d6 ClientGrpc \u5bf9\u8c61\u3002 \u9996\u9009\u7684\u6280\u672f\u662f\u5bfc\u5165 ClientsModule \u3002 \u4f7f\u7528 register() \u65b9\u6cd5\u7ed1\u5b9a\u7c7b\u4e2d\u5b9a\u4e49\u7684\u670d\u52a1\u5305 .proto \u6587\u4ef6\u5230\u6ce8\u5165\u4ee4\u724c\uff0c\u5e76\u914d\u7f6e\u8be5\u670d\u52a1\u3002 name \u5c5e\u6027\u662f\u6ce8\u5165\u4ee4\u724c\u3002 \u5bf9\u4e8e gRPC \u670d\u52a1\uff0c\u8bf7\u4f7f\u7528 transport: transport . gRPC \u3002 options \u5c5e\u6027\u662f\u4e00\u4e2a\u5177\u6709 \u4e0a\u9762 \u63cf\u8ff0\u7684\u76f8\u540c\u5c5e\u6027\u7684\u5bf9\u8c61\u3002 imports : [ ClientsModule . register ([ { name : `HERO_PACKAGE` , transport : Transport.GRPC , options : { package : `hero` , protoPath : join ( __dirname , `hero/hero.proto` ), }, }, ]), ]; info Hint register() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\u3002 \u901a\u8fc7\u63d0\u4f9b\u4ee5\u9017\u53f7\u5206\u9694\u7684\u6ce8\u518c\u5bf9\u8c61\u5217\u8868\u6765\u6ce8\u518c\u591a\u4e2a\u5305\u3002 \u6ce8\u518c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 @Inject() \u6ce8\u5165\u914d\u7f6e\u597d\u7684 ClientGrpc \u5bf9\u8c61\u3002 \u7136\u540e\u6211\u4eec\u4f7f\u7528 ClientGrpc \u5bf9\u8c61\u7684 getService() \u65b9\u6cd5\u6765\u68c0\u7d22\u670d\u52a1\u5b9e\u4f8b\uff0c\u5982\u4e0b\u6240\u793a\u3002 @Injectable () export class AppService implements OnModuleInit { private heroesService : HeroesService ; constructor ( @Inject ( `HERO_PACKAGE` ) private client : ClientGrpc ) {} onModuleInit () { this . heroesService = this . client . getService < HeroesService > ( `HeroesService` ); } getHero () : Observable < string > { return this . heroesService . findOne ({ id : 1 }); } } error Warning gRPC \u5ba2\u6237\u7aef\u4e0d\u4f1a\u53d1\u9001\u540d\u79f0\u4e2d\u5305\u542b\u4e0b\u5212\u7ebf _ \u7684\u5b57\u6bb5\uff0c\u9664\u975e keepCase \u9009\u9879\u5728 proto \u52a0\u8f7d\u5668\u914d\u7f6e\u4e2d\u8bbe\u7f6e\u4e3a true \u3002\u5728\u5fae\u670d\u52a1\u4f20\u8f93\u914d\u7f6e\u4e2d\u7684 Keepcase\u2019)\u3002 \u6ce8\u610f\uff0c\u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u65b9\u6cd5\u4e2d\u4f7f\u7528\u7684\u6280\u672f\u76f8\u6bd4\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u5c0f\u7684\u533a\u522b\u3002 \u6211\u4eec\u6ca1\u6709\u4f7f\u7528 ClientProxy \u7c7b\uff0c\u800c\u662f\u4f7f\u7528 ClientGrpc \u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86 getService() \u65b9\u6cd5\u3002 getService() \u6cdb\u578b\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u670d\u52a1\u540d\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u5176\u5b9e\u4f8b(\u5982\u679c\u53ef\u7528)\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 @Client() \u88c5\u9970\u5668\u6765\u5b9e\u4f8b\u5316\u4e00\u4e2a ClientGrpc \u5bf9\u8c61\uff0c\u5982\u4e0b\u6240\u793a: @Injectable () export class AppService implements OnModuleInit { @Client ({ transport : Transport.GRPC , options : { package : `hero` , protoPath : join ( __dirname , `hero/hero.proto` ), }, }) client : ClientGrpc ; private heroesService : HeroesService ; onModuleInit () { this . heroesService = this . client . getService < HeroesService > ( `HeroesService` ); } getHero () : Observable < string > { return this . heroesService . findOne ({ id : 1 }); } } \u6700\u540e\uff0c\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ClientProxyFactory \u7c7b\u6ce8\u5165\u52a8\u6001\u914d\u7f6e\u7684\u5ba2\u6237\u7aef\uff0c\u5982 \u8fd9\u91cc \u6240\u8ff0\u3002 \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6700\u7ec8\u90fd\u5f97\u5230\u4e86\u5bf9 HeroesService \u4ee3\u7406\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5b83\u516c\u5f00\u4e86\u5728 \u5178\u578b\u7684\u6587\u4ef6 \u3002 \u73b0\u5728\uff0c\u5f53\u6211\u4eec\u8bbf\u95ee\u8fd9\u4e2a\u4ee3\u7406\u5bf9\u8c61(\u5373 heroesService )\u65f6\uff0cgRPC \u7cfb\u7edf\u81ea\u52a8\u5e8f\u5217\u5316\u8bf7\u6c42\uff0c\u5c06\u5b83\u4eec\u8f6c\u53d1\u5230\u8fdc\u7a0b\u7cfb\u7edf\uff0c\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\uff0c\u5e76\u53cd\u5e8f\u5217\u5316\u54cd\u5e94\u3002 \u56e0\u4e3a gRPC \u5c4f\u853d\u4e86\u8fd9\u4e9b\u7f51\u7edc\u901a\u4fe1\u7ec6\u8282\uff0c\u6240\u4ee5 heroesService \u770b\u8d77\u6765\u548c\u884c\u4e3a\u90fd\u50cf\u672c\u5730\u63d0\u4f9b\u8005\u3002 \u6ce8\u610f\uff0c\u6240\u6709\u7684\u670d\u52a1\u65b9\u6cd5\u90fd\u662f \u5c0f\u5199\u7684 (\u4e3a\u4e86\u9075\u5faa\u8bed\u8a00\u7684\u81ea\u7136\u60ef\u4f8b)\u3002 \u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u7684 .proto \u6587\u4ef6 HeroesService \u5b9a\u4e49\u5305\u542b FindOne() \u51fd\u6570\uff0c HeroesService \u5b9e\u4f8b\u5c06\u63d0\u4f9b FindOne() \u65b9\u6cd5\u3002 interface HeroesService { findOne ( data : { id : number }) : Observable < any > ; } \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u8fd8\u80fd\u591f\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u503c\u5c06\u88ab\u53d1\u51fa\uff0c\u76f4\u5230\u6d41\u5b8c\u6210\u3002 @ @filename ( heroes . controller ) @Get () call () : Observable < any > { return this . heroesService . findOne ({ id : 1 }); } @ @switch @Get () call () { return this . heroesService . findOne ({ id : 1 }); } \u8981\u53d1\u9001 gRPC \u5143\u6570\u636e(\u4e0e\u8bf7\u6c42\u4e00\u8d77)\uff0c\u53ef\u4ee5\u4f20\u9012\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a: call () : Observable < any > { const metadata = new Metadata (); metadata . add ( `Set-Cookie` , `yummy_cookie=choco` ); return this . heroesService . findOne ({ id : 1 }, metadata ); } info Hint Metadata \u7c7b\u662f\u4ece grpc \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u5c06\u9700\u8981\u66f4\u65b0\u6211\u4eec\u5728\u524d\u9762\u51e0\u4e2a\u6b65\u9aa4\u4e2d\u5b9a\u4e49\u7684 HeroesService \u63a5\u53e3\u3002","title":"\u5ba2\u6237\u7aef"},{"location":"microservices/grpc/#_5","text":"\u8fd9\u91cc\u6709\u4e00\u4e2a\u53ef\u7528\u7684\u793a\u4f8b \u6b64\u5904 .","title":"\u4f8b\u5b50"},{"location":"microservices/grpc/#grpc_2","text":"gRPC \u672c\u8eab\u652f\u6301\u957f\u671f\u7684\u5b9e\u65f6\u8fde\u63a5\uff0c\u901a\u5e38\u79f0\u4e3a \u6d41 \u3002 \u6d41\u5728\u804a\u5929\u3001\u89c2\u5bdf\u6216\u5757\u6570\u636e\u4f20\u8f93\u7b49\u60c5\u51b5\u4e0b\u975e\u5e38\u6709\u7528\u3002 \u5728\u5b98\u65b9\u6587\u6863\u4e2d\u627e\u5230\u66f4\u591a\u7ec6\u8282 \u70b9\u51fb\u8fd9\u91cc . Nest \u4ee5\u4e24\u79cd\u53ef\u80fd\u7684\u65b9\u5f0f\u652f\u6301 GRPC \u6d41\u5904\u7406\u7a0b\u5e8f: RxJS Subject + Observable handler: \u5c06\u54cd\u5e94\u5199\u5728 Controller \u65b9\u6cd5\u5185\u90e8\u6216\u4f20\u9012\u7ed9 Subject / Observable \u6d88\u8d39\u8005\u662f\u5426\u6709\u7528 \u7eaf GRPC \u8c03\u7528\u6d41\u5904\u7406\u7a0b\u5e8f: \u4f20\u9012\u7ed9\u4e00\u4e9b\u6267\u884c\u5668\u662f\u5f88\u6709\u7528\u7684\uff0c\u5b83\u5c06\u4e3a Node \u6807\u51c6\u7684 Duplex \u6d41\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u5176\u4f59\u7684\u8c03\u5ea6\u3002","title":"gRPC \u6d41"},{"location":"microservices/grpc/#_6","text":"\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a HelloService \u7684\u65b0\u7684 gRPC \u670d\u52a1\u793a\u4f8b\u3002 \u4f60\u597d\u3002Proto \u6587\u4ef6\u7684\u7ed3\u6784\u4f7f\u7528 \u534f\u8bae\u7f13\u51b2\u533a \u3002 \u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684: // hello/hello.proto syntax = \"proto3\" ; package hello ; service HelloService { rpc BidiHello ( stream HelloRequest ) returns ( stream HelloResponse ); rpc LotsOfGreetings ( stream HelloRequest ) returns ( HelloResponse ); } message HelloRequest { string greeting = 1 ; } message HelloResponse { string reply = 1 ; } info Hint LotsOfGreetings \u65b9\u6cd5\u53ef\u4ee5\u7b80\u5355\u5730\u7528 @GrpcMethod \u88c5\u9970\u5668\u5b9e\u73b0(\u5982\u4e0a\u4f8b\u6240\u793a)\uff0c\u56e0\u4e3a\u8fd4\u56de\u7684\u6d41\u53ef\u4ee5\u53d1\u51fa\u591a\u4e2a\u503c\u3002 \u57fa\u4e8e\u8fd9\u4e2a .proto \u6587\u4ef6\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49 HelloService \u63a5\u53e3: interface HelloService { bidiHello ( upstream : Observable < HelloRequest > ) : Observable < HelloResponse > ; lotsOfGreetings ( upstream : Observable < HelloRequest > , ) : Observable < HelloResponse > ; } interface HelloRequest { greeting : string ; } interface HelloResponse { reply : string ; } info Hint proto \u63a5\u53e3\u53ef\u4ee5\u901a\u8fc7 ts-proto \u5305\u81ea\u52a8\u751f\u6210\uff0c\u4e86\u89e3\u66f4\u591a\u4fe1\u606f \u8fd9\u91cc \u3002","title":"\u6d41\u793a\u4f8b"},{"location":"microservices/grpc/#_7","text":"@GrpcStreamMethod() \u88c5\u9970\u5668\u4ee5 RxJS Observable \u7684\u5f62\u5f0f\u63d0\u4f9b\u51fd\u6570\u53c2\u6570\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u63a5\u6536\u548c\u5904\u7406\u591a\u4e2a\u6d88\u606f\u3002 @GrpcStreamMethod () bidiHello ( messages : Observable < any > , metadata : Metadata , call : ServerDuplexStream < any , any > ) : Observable < any > { const subject = new Subject (); const onNext = message => { console . log ( message ); subject . next ({ reply : `Hello, world!` }); }; const onComplete = () => subject . complete (); messages . subscribe ({ next : onNext , complete : onComplete , }); return subject . asObservable (); } warning Warning \u4e3a\u4e86\u652f\u6301\u4e0e @GrpcStreamMethod() \u88c5\u9970\u5668\u7684\u5168\u53cc\u5de5\u4ea4\u4e92\uff0c\u63a7\u5236\u5668\u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a RxJS Observable \u3002 info Hint Metadata \u548c ServerUnaryCall \u7c7b/\u63a5\u53e3\u662f\u4ece grpc \u5305\u5bfc\u5165\u7684\u3002 \u6839\u636e\u670d\u52a1\u5b9a\u4e49(\u5728 .proto \u6587\u4ef6)\uff0c BidiHello \u65b9\u6cd5\u5e94\u8be5\u5c06\u8bf7\u6c42\u6d41\u53d1\u9001\u5230\u670d\u52a1\u3002 \u4e3a\u4e86\u4ece\u5ba2\u6237\u7aef\u5411\u6d41\u53d1\u9001\u591a\u4e2a\u5f02\u6b65\u6d88\u606f\uff0c\u6211\u4eec\u5229\u7528\u4e86 RxJS \u7684 ReplaySubject \u7c7b\u3002 const helloService = this . client . getService < HelloService > ( `HelloService` ); const helloRequest$ = new ReplaySubject < HelloRequest > (); helloRequest$ . next ({ greeting : `Hello (1)!` }); helloRequest$ . next ({ greeting : `Hello (2)!` }); helloRequest$ . complete (); return helloService . bidiHello ( helloRequest$ ); \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5411\u6d41\u5199\u5165\u4e86\u4e24\u6761\u6d88\u606f( next() \u8c03\u7528)\uff0c\u5e76\u901a\u77e5\u670d\u52a1\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u6570\u636e\u7684\u53d1\u9001( complete() \u8c03\u7528)\u3002","title":"\u4e3b\u9898\u7b56\u7565"},{"location":"microservices/grpc/#_8","text":"\u5f53\u65b9\u6cd5\u8fd4\u56de\u503c\u5b9a\u4e49\u4e3a stream \u65f6\uff0c @GrpcStreamCall() \u88c5\u9970\u5668\u5c06\u51fd\u6570\u53c2\u6570\u5b9a\u4e49\u4e3a grpc \u3002 ServerDuplexStream \uff0c\u5b83\u652f\u6301\u50cf\u8fd9\u6837\u7684\u6807\u51c6\u65b9\u6cd5\u3002( \u6570\u636e ,\u56de\u8c03) \u3001 .write(\u6d88\u606f) \u6216 .cancel()`\u3002 \u53ef\u7528\u65b9\u6cd5\u7684\u5b8c\u6574\u6587\u6863\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230 \u6b64\u5904 . \u6216\u8005\uff0c\u5f53\u65b9\u6cd5\u8fd4\u56de\u503c\u4e0d\u662f stream \u65f6\uff0c @GrpcStreamCall() \u88c5\u9970\u5668\u63d0\u4f9b\u4e24\u4e2a\u51fd\u6570\u5f62\u53c2\uff0c\u5206\u522b\u662f grpc\u3002ServerReadableStream (\u9605\u8bfb\u66f4\u591a \u8fd9\u91cc )\u548c callback \u3002 \u8ba9\u6211\u4eec\u4ece\u5b9e\u73b0 BidiHello \u5f00\u59cb\uff0c\u5b83\u5e94\u8be5\u652f\u6301\u5168\u53cc\u5de5\u4ea4\u4e92\u3002 @GrpcStreamCall () bidiHello ( requestStream : any ) { requestStream . on ( `data` , message => { console . log ( message ); requestStream . write ({ reply : `Hello, world!` }); }); } info Hint \u8fd9\u4e2a\u88c5\u9970\u5668\u4e0d\u9700\u8981\u63d0\u4f9b\u4efb\u4f55\u7279\u5b9a\u7684\u8fd4\u56de\u53c2\u6570\u3002 \u9884\u671f\u6d41\u7684\u5904\u7406\u65b9\u5f0f\u5c06\u4e0e\u4efb\u4f55\u5176\u4ed6\u6807\u51c6\u6d41\u7c7b\u578b\u7c7b\u4f3c\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 write() \u65b9\u6cd5\u5c06\u5bf9\u8c61\u5199\u5165\u54cd\u5e94\u6d41\u3002 \u4f20\u9012\u7ed9 .on() \u65b9\u6cd5\u7684\u56de\u8c03\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u5728\u6bcf\u6b21\u670d\u52a1\u63a5\u6536\u5230\u65b0\u7684\u6570\u636e\u5757\u65f6\u88ab\u8c03\u7528\u3002 \u8ba9\u6211\u4eec\u5b9e\u73b0 LotsOfGreetings \u65b9\u6cd5\u3002 @GrpcStreamCall () lotsOfGreetings ( requestStream : any , callback : ( err : unknown , value : HelloResponse ) => void ) { requestStream . on ( `data` , message => { console . log ( message ); }); requestStream . on ( `end` , () => callback ( null , { reply : `Hello, world!` })); } \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 callback \u51fd\u6570\u5728 requestStream \u5904\u7406\u5b8c\u6210\u540e\u53d1\u9001\u54cd\u5e94\u3002","title":"\u8c03\u7528\u6d41\u5904\u7406\u7a0b\u5e8f"},{"location":"microservices/grpc/#grpc_3","text":"\u5143\u6570\u636e\u662f\u952e-\u503c\u5bf9\u5217\u8868\u5f62\u5f0f\u7684\u5173\u4e8e\u7279\u5b9a RPC \u8c03\u7528\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u952e\u662f\u5b57\u7b26\u4e32\uff0c\u503c\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u5143\u6570\u636e\u5bf9 gRPC \u672c\u8eab\u662f\u4e0d\u900f\u660e\u7684\u2014\u2014\u5b83\u5141\u8bb8\u5ba2\u6237\u673a\u5411\u670d\u52a1\u5668\u63d0\u4f9b\u4e0e\u8c03\u7528\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 \u5143\u6570\u636e\u53ef\u80fd\u5305\u62ec\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\u3001\u7528\u4e8e\u76d1\u89c6\u76ee\u7684\u7684\u8bf7\u6c42\u6807\u8bc6\u7b26\u548c\u6807\u8bb0\uff0c\u4ee5\u53ca\u6570\u636e\u4fe1\u606f\uff0c\u5982\u6570\u636e\u96c6\u4e2d\u7684\u8bb0\u5f55\u6570\u91cf\u3002 \u8981\u8bfb\u53d6 @GrpcMethod() \u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u5143\u6570\u636e\uff0c\u8bf7\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570(metadata)\uff0c\u5176\u7c7b\u578b\u4e3a metadata (\u4ece grpc \u5305\u5bfc\u5165)\u3002 \u8981\u4ece\u5904\u7406\u7a0b\u5e8f\u53d1\u9001\u56de\u5143\u6570\u636e\uff0c\u4f7f\u7528 ServerUnaryCall#sendMetadata() \u65b9\u6cd5(\u7b2c\u4e09\u4e2a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570)\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesService { @GrpcMethod () findOne ( data : HeroById , metadata : Metadata , call : ServerUnaryCall < any > ) : Hero { const serverMetadata = new Metadata (); const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; serverMetadata . add ( `Set-Cookie` , `yummy_cookie=choco` ); call . sendMetadata ( serverMetadata ); return items . find (({ id }) => id === data . id ); } } @ @switch @Controller () export class HeroesService { @GrpcMethod () findOne ( data , metadata , call ) { const serverMetadata = new Metadata (); const items = [ { id : 1 , name : `John` }, { id : 2 , name : `Doe` }, ]; serverMetadata . add ( `Set-Cookie` , `yummy_cookie=choco` ); call . sendMetadata ( serverMetadata ); return items . find (({ id }) => id === data . id ); } } \u540c\u6837\uff0c\u8981\u5728\u7528 @GrpcStreamMethod() \u5904\u7406\u7a0b\u5e8f( subject strategy )\u6ce8\u91ca\u7684\u5904\u7406\u7a0b\u5e8f\u4e2d\u8bfb\u53d6\u5143\u6570\u636e\uff0c\u8bf7\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570(metadata)\uff0c\u5b83\u7684\u7c7b\u578b\u4e3a metadata (\u4ece grpc \u5305\u5bfc\u5165)\u3002 \u8981\u4ece\u5904\u7406\u7a0b\u5e8f\u53d1\u9001\u56de\u5143\u6570\u636e\uff0c\u4f7f\u7528 ServerDuplexStream#sendMetadata() \u65b9\u6cd5(\u7b2c\u4e09\u4e2a\u5904\u7406\u7a0b\u5e8f\u53c2\u6570)\u3002 \u8981\u4ece \u8c03\u7528\u6d41\u5904\u7406\u7a0b\u5e8f (\u5e26\u6709 @GrpcStreamCall() \u88c5\u9970\u5668\u6ce8\u91ca\u7684\u5904\u7406\u7a0b\u5e8f)\u5185\u8bfb\u53d6\u5143\u6570\u636e\uff0c\u8bf7\u542c requestStream \u5f15\u7528\u4e0a\u7684 metadata \u4e8b\u4ef6\uff0c\u5982\u4e0b\u6240\u793a: requestStream . on ( `metadata` , ( metadata : Metadata ) => { const meta = metadata . get ( `X-Meta` ); });","title":"gRPC \u5143\u6570\u636e"},{"location":"microservices/guards/","text":"\u8b66\u536b \u00b6 \u5fae\u670d\u52a1\u4fdd\u62a4\u548c \u5e38\u89c4 HTTP \u5e94\u7528\u7a0b\u5e8f\u4fdd\u62a4 \u4e4b\u95f4\u6ca1\u6709\u6839\u672c\u533a\u522b\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 RpcException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 info Hint RpcException \u7c7b\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u516c\u5f00\u7684\u3002 \u7ed1\u5b9a\u8b66\u536b \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e86\u4e00\u4e2a\u65b9\u6cd5\u8303\u56f4\u7684\u4fdd\u62a4\u3002 \u5c31\u50cf\u57fa\u4e8e HTTP \u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63a7\u5236\u5668\u8303\u56f4\u7684\u4fdd\u62a4\u5668(\u4f8b\u5982\uff0c\u5728\u63a7\u5236\u5668\u7c7b\u524d\u9762\u52a0\u4e0a @UseGuards() \u88c5\u9970\u5668)\u3002 @ @filename () @UseGuards ( AuthGuard ) @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @UseGuards ( AuthGuard ) @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); }","title":"\u5b88\u536b"},{"location":"microservices/guards/#_1","text":"\u5fae\u670d\u52a1\u4fdd\u62a4\u548c \u5e38\u89c4 HTTP \u5e94\u7528\u7a0b\u5e8f\u4fdd\u62a4 \u4e4b\u95f4\u6ca1\u6709\u6839\u672c\u533a\u522b\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 RpcException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 info Hint RpcException \u7c7b\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u516c\u5f00\u7684\u3002","title":"\u8b66\u536b"},{"location":"microservices/guards/#_2","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e86\u4e00\u4e2a\u65b9\u6cd5\u8303\u56f4\u7684\u4fdd\u62a4\u3002 \u5c31\u50cf\u57fa\u4e8e HTTP \u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63a7\u5236\u5668\u8303\u56f4\u7684\u4fdd\u62a4\u5668(\u4f8b\u5982\uff0c\u5728\u63a7\u5236\u5668\u7c7b\u524d\u9762\u52a0\u4e0a @UseGuards() \u88c5\u9970\u5668)\u3002 @ @filename () @UseGuards ( AuthGuard ) @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @UseGuards ( AuthGuard ) @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); }","title":"\u7ed1\u5b9a\u8b66\u536b"},{"location":"microservices/interceptors/","text":"\u62e6\u622a\u5668 \u00b6 \u5e38\u89c4\u62e6\u622a\u5668 \u548c\u5fae\u670d\u52a1\u62e6\u622a\u5668\u6ca1\u6709\u533a\u522b\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e86\u4e00\u4e2a\u624b\u5de5\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u8303\u56f4\u7684\u62e6\u622a\u5668\u3002 \u5c31\u50cf\u57fa\u4e8e HTTP \u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63a7\u5236\u5668\u4f5c\u7528\u57df\u7684\u62e6\u622a\u5668(\u4f8b\u5982\uff0c\u5728\u63a7\u5236\u5668\u7c7b\u524d\u9762\u52a0\u4e0a @UseInterceptors() \u88c5\u9970\u5668)\u3002 @ @filename () @UseInterceptors ( new TransformInterceptor ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @UseInterceptors ( new TransformInterceptor ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); }","title":"\u62e6\u622a\u5668"},{"location":"microservices/interceptors/#_1","text":"\u5e38\u89c4\u62e6\u622a\u5668 \u548c\u5fae\u670d\u52a1\u62e6\u622a\u5668\u6ca1\u6709\u533a\u522b\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e86\u4e00\u4e2a\u624b\u5de5\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u8303\u56f4\u7684\u62e6\u622a\u5668\u3002 \u5c31\u50cf\u57fa\u4e8e HTTP \u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63a7\u5236\u5668\u4f5c\u7528\u57df\u7684\u62e6\u622a\u5668(\u4f8b\u5982\uff0c\u5728\u63a7\u5236\u5668\u7c7b\u524d\u9762\u52a0\u4e0a @UseInterceptors() \u88c5\u9970\u5668)\u3002 @ @filename () @UseInterceptors ( new TransformInterceptor ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @UseInterceptors ( new TransformInterceptor ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); }","title":"\u62e6\u622a\u5668"},{"location":"microservices/kafka/","text":"Kafka \u00b6 Kafka \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6d41\u5a92\u4f53\u5e73\u53f0\uff0c\u5b83\u6709\u4e09\u4e2a\u5173\u952e\u529f\u80fd: \u53d1\u5e03\u548c\u8ba2\u9605\u8bb0\u5f55\u6d41\uff0c\u7c7b\u4f3c\u4e8e\u6d88\u606f\u961f\u5217\u6216\u4f01\u4e1a\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u3002 \u5bf9\u8bb0\u5f55\u6d41\u8fdb\u884c\u6301\u4e45\u7684\u5bb9\u9519\u5b58\u50a8\u3002 \u8bb0\u5f55\u6d41\u53d1\u751f\u65f6\u8fdb\u884c\u5904\u7406\u3002 Kafka \u9879\u76ee\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u3001\u9ad8\u541e\u5410\u91cf\u3001\u4f4e\u5ef6\u8fdf\u7684\u5e73\u53f0\u6765\u5904\u7406\u5b9e\u65f6\u6570\u636e\u3002\u5b83\u4e0e Apache Storm \u548c Spark \u96c6\u6210\u5f97\u975e\u5e38\u597d\uff0c\u53ef\u4ee5\u8fdb\u884c\u5b9e\u65f6\u6d41\u6570\u636e\u5206\u6790\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e kafka \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save kafkajs \u6982\u8ff0 \u00b6 \u50cf\u5176\u4ed6\u7684 Nest \u5fae\u670d\u52a1\u4f20\u8f93\u5c42\u5b9e\u73b0\u4e00\u6837\uff0c\u4f60\u4f7f\u7528\u4f20\u9012\u7ed9' createMicroservice() '\u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684' transport '\u5c5e\u6027\u6765\u9009\u62e9 Kafka \u4f20\u8f93\u673a\u5236\uff0c\u4ee5\u53ca\u4e00\u4e2a\u53ef\u9009\u7684' options '\u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.KAFKA , options : { client : { brokers : [ 'localhost:9092' ], } } }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.KAFKA , options : { client : { brokers : [ 'localhost:9092' ], } } }); info Hint ' Transport ' enum \u662f\u4ece' @nestjs/microservices '\u5305\u5bfc\u5165\u7684\u3002 \u9009\u9879 \u00b6 options \u5c5e\u6027\u662f\u7279\u5b9a\u4e8e\u6240\u9009\u4f20\u8f93\u5668\u7684\u3002 Kafka \u4f20\u8f93\u5668\u66b4\u9732\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 client Client configuration options (read more here ) consumer Consumer configuration options (read more here ) run Run configuration options (read more here ) subscribe Subscribe configuration options (read more here ) producer Producer configuration options (read more here ) send Send configuration options (read more here ) \u5ba2\u6237\u7aef \u00b6 \u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u76f8\u6bd4\uff0cKafka \u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u533a\u522b\u3002\u6211\u4eec\u4f7f\u7528' ClientKafka '\u7c7b\u4ee3\u66ff' ClientProxy '\u7c7b\u3002 Like other microservice transporters, you have several options for creating a ClientKafka instance. One method for creating an instance is to use the ClientsModule . To create a client instance with the ClientsModule , import it and use the register() method to pass an options object with the same properties shown above in the createMicroservice() method, as well as a name property to be used as the injection token. Read more about ClientsModule here . @Module ({ imports : [ ClientsModule . register ([ { name : 'HERO_SERVICE' , transport : Transport.KAFKA , options : { client : { clientId : 'hero' , brokers : [ 'localhost:9092' ], }, consumer : { groupId : 'hero-consumer' } } }, ]), ] ... }) Other options to create a client (either ClientProxyFactory or @Client() ) can be used as well. You can read about them here . Use the @Client() decorator as follows: @Client ({ transport : Transport.KAFKA , options : { client : { clientId : 'hero' , brokers : [ 'localhost:9092' ], }, consumer : { groupId : 'hero-consumer' } } }) client : ClientKafka ; \u6d88\u606f\u6a21\u5f0f \u00b6 Kafka \u5fae\u670d\u52a1\u6d88\u606f\u6a21\u5f0f\u4e3a\u8bf7\u6c42\u548c\u5e94\u7b54\u901a\u9053\u5229\u7528\u4e86\u4e24\u4e2a\u4e3b\u9898\u3002 The ClientKafka#send() method sends messages with a return address by associating a correlation id , reply topic, and reply partition with the request message. This requires the ClientKafka instance to be subscribed to the reply topic and assigned to at least one partition before sending a message. \u968f\u540e\uff0c\u60a8\u9700\u8981\u4e3a\u6bcf\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Nest \u5e94\u7528\u7a0b\u5e8f\u81f3\u5c11\u8bbe\u7f6e\u4e00\u4e2a\u56de\u590d\u4e3b\u9898\u5206\u533a\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u8fd0\u884c 4 \u4e2a Nest \u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u662f\u56de\u590d\u4e3b\u9898\u53ea\u6709 3 \u4e2a\u5206\u533a\uff0c\u90a3\u4e48\u5f53\u8bd5\u56fe\u53d1\u9001\u6d88\u606f\u65f6\uff0c\u5176\u4e2d\u4e00\u4e2a Nest \u5e94\u7528\u7a0b\u5e8f\u5c06\u51fa\u9519\u3002 When new ClientKafka instances are launched they join the consumer group and subscribe to their respective topics. This process triggers a rebalance of topic partitions assigned to consumers of the consumer group. Normally, topic partitions are assigned using the round robin partitioner, which assigns topic partitions to a collection of consumers sorted by consumer names which are randomly set on application launch. However, when a new consumer joins the consumer group, the new consumer can be positioned anywhere within the collection of consumers. This creates a condition where pre-existing consumers can be assigned different partitions when the pre-existing consumer is positioned after the new consumer. As a result, the consumers that are assigned different partitions will lose response messages of requests sent before the rebalance. To prevent the ClientKafka consumers from losing response messages, a Nest-specific built-in custom partitioner is utilized. This custom partitioner assigns partitions to a collection of consumers sorted by high-resolution timestamps ( process.hrtime() ) that are set on application launch. \u6d88\u606f\u54cd\u5e94\u8ba2\u9605 \u00b6 warning Note This section is only relevant if you use request-response message style (with the @MessagePatern decorator and the ClientKafka#send method). Subscribing to the response topic is not necessary for the event-based communication ( @EventPattern decorator and ClientKafka#emit method). The ClientKafka class provides the subscribeToResponseOf() method. The subscribeToResponseOf() method takes a request's topic name as an argument and adds the derived reply topic name to a collection of reply topics. This method is required when implementing the message pattern. @ @filename ( heroes . controller ) onModuleInit () { this . client . subscribeToResponseOf ( 'hero.kill.dragon' ); } If the ClientKafka instance is created asynchronously, the subscribeToResponseOf() method must be called before calling the connect() method. @ @filename ( heroes . controller ) async onModuleInit () { this . client . subscribeToResponseOf ( 'hero.kill.dragon' ); await this . client . connect (); } \u4f20\u5165\u7684 \u00b6 Nest \u63a5\u6536\u4f20\u5165\u7684 Kafka \u6d88\u606f\u4f5c\u4e3a\u4e00\u4e2a\u5177\u6709\u201ckey\u201d\u3001\u201cvalue\u201d\u548c\u201cheaders\u201d\u5c5e\u6027\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u7c7b\u578b\u4e3a\u201cBuffer\u201d\u3002 \u7136\u540e Nest \u901a\u8fc7\u5c06\u7f13\u51b2\u533a\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u6790\u8fd9\u4e9b\u503c\u3002 \u5982\u679c\u5b57\u7b26\u4e32\u662f\"object like\"\uff0c Nest \u5c06\u5c1d\u8bd5\u5c06\u8be5\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\" JSON \"\u3002\u7136\u540e\u5c06' value '\u4f20\u9012\u7ed9\u5176\u5173\u8054\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u5373\u5c06\u79bb\u4efb\u7684 \u00b6 \u5f53\u53d1\u5e03\u4e8b\u4ef6\u6216\u53d1\u9001\u6d88\u606f\u65f6\uff0cNest \u5728\u5e8f\u5217\u5316\u8fc7\u7a0b\u4e4b\u540e\u53d1\u9001\u51fa\u7ad9 Kafka \u6d88\u606f\u3002 \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u4f20\u9012\u7ed9' ClientKafka ' ' emit() '\u548c' send() '\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\uff0c\u6216\u8005\u53d1\u751f\u5728\u4ece' @ messageppattern '\u65b9\u6cd5\u8fd4\u56de\u7684\u503c\u4e0a\u3002 \u8fd9\u79cd\u5e8f\u5217\u5316\u901a\u8fc7\u4f7f\u7528' JSON.stringify() '\u6216' toString() '\u539f\u578b\u65b9\u6cd5\u6765\u201c\u5b57\u7b26\u4e32\u5316\u201d\u975e\u5b57\u7b26\u4e32\u6216\u7f13\u51b2\u533a\u7684\u5bf9\u8c61\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesController { @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage ) : any { const dragonId = message . dragonId ; const items = [ { id : 1 , name : 'Mythical Sword' }, { id : 2 , name : 'Key to Dungeon' }, ]; return items ; } } info Hint @Payload() is imported from the @nestjs/microservices . Outgoing messages can also be keyed by passing an object with the key and value properties. Keying messages is important for meeting the co-partitioning requirement . @ @filename ( heroes . controller ) @Controller () export class HeroesController { @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage ) : any { const realm = 'Nest' ; const heroId = message . heroId ; const dragonId = message . dragonId ; const items = [ { id : 1 , name : 'Mythical Sword' }, { id : 2 , name : 'Key to Dungeon' }, ]; return { headers : { realm }, key : heroId , value : items } } } Additionally, messages passed in this format can also contain custom headers set in the headers hash property. Header hash property values must be either of type string or type Buffer . @ @filename ( heroes . controller ) @Controller () export class HeroesController { @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage ) : any { const realm = 'Nest' ; const heroId = message . heroId ; const dragonId = message . dragonId ; const items = [ { id : 1 , name : 'Mythical Sword' }, { id : 2 , name : 'Key to Dungeon' }, ]; return { headers : { kafka_nestRealm : realm }, key : heroId , value : items } } } \u57fa\u4e8e\u4e8b\u4ef6\u7684 \u00b6 \u867d\u7136\u8bf7\u6c42-\u54cd\u5e94\u65b9\u6cd5\u975e\u5e38\u9002\u5408\u4e8e\u5728\u670d\u52a1\u4e4b\u95f4\u4ea4\u6362\u6d88\u606f\uff0c\u4f46\u662f\u5f53\u60a8\u7684\u6d88\u606f\u6837\u5f0f\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684(\u8fd9\u5bf9\u4e8e Kafka \u6765\u8bf4\u662f\u975e\u5e38\u7406\u60f3\u7684)\u2014\u5f53\u60a8\u53ea\u60f3\u53d1\u5e03\u4e8b\u4ef6 \u800c\u4e0d\u9700\u8981\u7b49\u5f85\u54cd\u5e94 \u65f6\uff0c\u5b83\u5c31\u4e0d\u592a\u9002\u5408\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u5e0c\u671b\u7ef4\u62a4\u4e24\u4e2a\u4e3b\u9898\u6240\u9700\u7684\u8bf7\u6c42-\u54cd\u5e94\u5f00\u9500\u3002 Check out these two sections to learn more about this: Overview: Event-based and Overview: Publishing events . \u4e0a\u4e0b\u6587 \u00b6 \u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002\u5f53\u4f7f\u7528 Kafka \u4f20\u8f93\u5668\u65f6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee' KafkaContext '\u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage , @Ctx () context : KafkaContext ) { console . log ( `Topic: ${ context . getTopic () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'hero.kill.dragon' ) killDragon ( message , context ) { console . log ( `Topic: ${ context . getTopic () } ` ); } info Hint @Payload() , @Ctx() and KafkaContext are imported from the @nestjs/microservices package. To access the original Kafka IncomingMessage object, use the getMessage() method of the KafkaContext object, as follows: @ @filename () @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage , @Ctx () context : KafkaContext ) { const originalMessage = context . getMessage (); const { headers , partition , timestamp } = originalMessage ; } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'hero.kill.dragon' ) killDragon ( message , context ) { const originalMessage = context . getMessage (); const { headers , partition , timestamp } = originalMessage ; } Where the IncomingMessage fulfills the following interface: interface IncomingMessage { topic : string ; partition : number ; timestamp : string ; size : number ; attributes : number ; offset : string ; key : any ; value : any ; headers : Record < string , any > ; } \u547d\u540d\u7ea6\u5b9a \u00b6 Kafka \u5fae\u670d\u52a1\u7ec4\u4ef6\u5728' client.clientId '\u548c' consumer.groupId '\u9009\u9879\u4e0a\u9644\u52a0\u4e86\u5404\u81ea\u89d2\u8272\u7684\u63cf\u8ff0\uff0c\u4ee5\u9632\u6b62 Nest \u5fae\u670d\u52a1\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7ec4\u4ef6\u4e4b\u95f4\u7684\u51b2\u7a81\u3002 By default the ClientKafka components append -client and the ServerKafka components append -server to both of these options. Note how the provided values below are transformed in that way (as shown in the comments). @ @filename ( main ) const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.KAFKA , options : { client : { clientId : 'hero' , // hero-server brokers : [ 'localhost:9092' ], }, consumer : { groupId : 'hero-consumer' // hero-consumer-server }, } }); And for the client: @ @filename ( heroes . controller ) @Client ({ transport : Transport.KAFKA , options : { client : { clientId : 'hero' , // hero-client brokers : [ 'localhost:9092' ], }, consumer : { groupId : 'hero-consumer' // hero-consumer-client } } }) client : ClientKafka ; info Hint Kafka client and consumer naming conventions can be customized by extending ClientKafka and KafkaServer in your own custom provider and overriding the constructor. Since the Kafka microservice message pattern utilizes two topics for the request and reply channels, a reply pattern should be derived from the request topic. By default, the name of the reply topic is the composite of the request topic name with .reply appended. @ @filename ( heroes . controller ) onModuleInit () { this . client . subscribeToResponseOf ( 'hero.get' ); // hero.get.reply } info Hint Kafka reply topic naming conventions can be customized by extending ClientKafka in your own custom provider and overriding the getResponsePatternName method.","title":"Kafka"},{"location":"microservices/kafka/#kafka","text":"Kafka \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u6d41\u5a92\u4f53\u5e73\u53f0\uff0c\u5b83\u6709\u4e09\u4e2a\u5173\u952e\u529f\u80fd: \u53d1\u5e03\u548c\u8ba2\u9605\u8bb0\u5f55\u6d41\uff0c\u7c7b\u4f3c\u4e8e\u6d88\u606f\u961f\u5217\u6216\u4f01\u4e1a\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u3002 \u5bf9\u8bb0\u5f55\u6d41\u8fdb\u884c\u6301\u4e45\u7684\u5bb9\u9519\u5b58\u50a8\u3002 \u8bb0\u5f55\u6d41\u53d1\u751f\u65f6\u8fdb\u884c\u5904\u7406\u3002 Kafka \u9879\u76ee\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u3001\u9ad8\u541e\u5410\u91cf\u3001\u4f4e\u5ef6\u8fdf\u7684\u5e73\u53f0\u6765\u5904\u7406\u5b9e\u65f6\u6570\u636e\u3002\u5b83\u4e0e Apache Storm \u548c Spark \u96c6\u6210\u5f97\u975e\u5e38\u597d\uff0c\u53ef\u4ee5\u8fdb\u884c\u5b9e\u65f6\u6d41\u6570\u636e\u5206\u6790\u3002","title":"Kafka"},{"location":"microservices/kafka/#_1","text":"\u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e kafka \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save kafkajs","title":"\u5b89\u88c5"},{"location":"microservices/kafka/#_2","text":"\u50cf\u5176\u4ed6\u7684 Nest \u5fae\u670d\u52a1\u4f20\u8f93\u5c42\u5b9e\u73b0\u4e00\u6837\uff0c\u4f60\u4f7f\u7528\u4f20\u9012\u7ed9' createMicroservice() '\u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684' transport '\u5c5e\u6027\u6765\u9009\u62e9 Kafka \u4f20\u8f93\u673a\u5236\uff0c\u4ee5\u53ca\u4e00\u4e2a\u53ef\u9009\u7684' options '\u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.KAFKA , options : { client : { brokers : [ 'localhost:9092' ], } } }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.KAFKA , options : { client : { brokers : [ 'localhost:9092' ], } } }); info Hint ' Transport ' enum \u662f\u4ece' @nestjs/microservices '\u5305\u5bfc\u5165\u7684\u3002","title":"\u6982\u8ff0"},{"location":"microservices/kafka/#_3","text":"options \u5c5e\u6027\u662f\u7279\u5b9a\u4e8e\u6240\u9009\u4f20\u8f93\u5668\u7684\u3002 Kafka \u4f20\u8f93\u5668\u66b4\u9732\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 client Client configuration options (read more here ) consumer Consumer configuration options (read more here ) run Run configuration options (read more here ) subscribe Subscribe configuration options (read more here ) producer Producer configuration options (read more here ) send Send configuration options (read more here )","title":"\u9009\u9879"},{"location":"microservices/kafka/#_4","text":"\u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u76f8\u6bd4\uff0cKafka \u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u533a\u522b\u3002\u6211\u4eec\u4f7f\u7528' ClientKafka '\u7c7b\u4ee3\u66ff' ClientProxy '\u7c7b\u3002 Like other microservice transporters, you have several options for creating a ClientKafka instance. One method for creating an instance is to use the ClientsModule . To create a client instance with the ClientsModule , import it and use the register() method to pass an options object with the same properties shown above in the createMicroservice() method, as well as a name property to be used as the injection token. Read more about ClientsModule here . @Module ({ imports : [ ClientsModule . register ([ { name : 'HERO_SERVICE' , transport : Transport.KAFKA , options : { client : { clientId : 'hero' , brokers : [ 'localhost:9092' ], }, consumer : { groupId : 'hero-consumer' } } }, ]), ] ... }) Other options to create a client (either ClientProxyFactory or @Client() ) can be used as well. You can read about them here . Use the @Client() decorator as follows: @Client ({ transport : Transport.KAFKA , options : { client : { clientId : 'hero' , brokers : [ 'localhost:9092' ], }, consumer : { groupId : 'hero-consumer' } } }) client : ClientKafka ;","title":"\u5ba2\u6237\u7aef"},{"location":"microservices/kafka/#_5","text":"Kafka \u5fae\u670d\u52a1\u6d88\u606f\u6a21\u5f0f\u4e3a\u8bf7\u6c42\u548c\u5e94\u7b54\u901a\u9053\u5229\u7528\u4e86\u4e24\u4e2a\u4e3b\u9898\u3002 The ClientKafka#send() method sends messages with a return address by associating a correlation id , reply topic, and reply partition with the request message. This requires the ClientKafka instance to be subscribed to the reply topic and assigned to at least one partition before sending a message. \u968f\u540e\uff0c\u60a8\u9700\u8981\u4e3a\u6bcf\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Nest \u5e94\u7528\u7a0b\u5e8f\u81f3\u5c11\u8bbe\u7f6e\u4e00\u4e2a\u56de\u590d\u4e3b\u9898\u5206\u533a\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u8fd0\u884c 4 \u4e2a Nest \u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u662f\u56de\u590d\u4e3b\u9898\u53ea\u6709 3 \u4e2a\u5206\u533a\uff0c\u90a3\u4e48\u5f53\u8bd5\u56fe\u53d1\u9001\u6d88\u606f\u65f6\uff0c\u5176\u4e2d\u4e00\u4e2a Nest \u5e94\u7528\u7a0b\u5e8f\u5c06\u51fa\u9519\u3002 When new ClientKafka instances are launched they join the consumer group and subscribe to their respective topics. This process triggers a rebalance of topic partitions assigned to consumers of the consumer group. Normally, topic partitions are assigned using the round robin partitioner, which assigns topic partitions to a collection of consumers sorted by consumer names which are randomly set on application launch. However, when a new consumer joins the consumer group, the new consumer can be positioned anywhere within the collection of consumers. This creates a condition where pre-existing consumers can be assigned different partitions when the pre-existing consumer is positioned after the new consumer. As a result, the consumers that are assigned different partitions will lose response messages of requests sent before the rebalance. To prevent the ClientKafka consumers from losing response messages, a Nest-specific built-in custom partitioner is utilized. This custom partitioner assigns partitions to a collection of consumers sorted by high-resolution timestamps ( process.hrtime() ) that are set on application launch.","title":"\u6d88\u606f\u6a21\u5f0f"},{"location":"microservices/kafka/#_6","text":"warning Note This section is only relevant if you use request-response message style (with the @MessagePatern decorator and the ClientKafka#send method). Subscribing to the response topic is not necessary for the event-based communication ( @EventPattern decorator and ClientKafka#emit method). The ClientKafka class provides the subscribeToResponseOf() method. The subscribeToResponseOf() method takes a request's topic name as an argument and adds the derived reply topic name to a collection of reply topics. This method is required when implementing the message pattern. @ @filename ( heroes . controller ) onModuleInit () { this . client . subscribeToResponseOf ( 'hero.kill.dragon' ); } If the ClientKafka instance is created asynchronously, the subscribeToResponseOf() method must be called before calling the connect() method. @ @filename ( heroes . controller ) async onModuleInit () { this . client . subscribeToResponseOf ( 'hero.kill.dragon' ); await this . client . connect (); }","title":"\u6d88\u606f\u54cd\u5e94\u8ba2\u9605"},{"location":"microservices/kafka/#_7","text":"Nest \u63a5\u6536\u4f20\u5165\u7684 Kafka \u6d88\u606f\u4f5c\u4e3a\u4e00\u4e2a\u5177\u6709\u201ckey\u201d\u3001\u201cvalue\u201d\u548c\u201cheaders\u201d\u5c5e\u6027\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u7c7b\u578b\u4e3a\u201cBuffer\u201d\u3002 \u7136\u540e Nest \u901a\u8fc7\u5c06\u7f13\u51b2\u533a\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u6790\u8fd9\u4e9b\u503c\u3002 \u5982\u679c\u5b57\u7b26\u4e32\u662f\"object like\"\uff0c Nest \u5c06\u5c1d\u8bd5\u5c06\u8be5\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\" JSON \"\u3002\u7136\u540e\u5c06' value '\u4f20\u9012\u7ed9\u5176\u5173\u8054\u7684\u5904\u7406\u7a0b\u5e8f\u3002","title":"\u4f20\u5165\u7684"},{"location":"microservices/kafka/#_8","text":"\u5f53\u53d1\u5e03\u4e8b\u4ef6\u6216\u53d1\u9001\u6d88\u606f\u65f6\uff0cNest \u5728\u5e8f\u5217\u5316\u8fc7\u7a0b\u4e4b\u540e\u53d1\u9001\u51fa\u7ad9 Kafka \u6d88\u606f\u3002 \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u4f20\u9012\u7ed9' ClientKafka ' ' emit() '\u548c' send() '\u65b9\u6cd5\u7684\u53c2\u6570\u4e0a\uff0c\u6216\u8005\u53d1\u751f\u5728\u4ece' @ messageppattern '\u65b9\u6cd5\u8fd4\u56de\u7684\u503c\u4e0a\u3002 \u8fd9\u79cd\u5e8f\u5217\u5316\u901a\u8fc7\u4f7f\u7528' JSON.stringify() '\u6216' toString() '\u539f\u578b\u65b9\u6cd5\u6765\u201c\u5b57\u7b26\u4e32\u5316\u201d\u975e\u5b57\u7b26\u4e32\u6216\u7f13\u51b2\u533a\u7684\u5bf9\u8c61\u3002 @ @filename ( heroes . controller ) @Controller () export class HeroesController { @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage ) : any { const dragonId = message . dragonId ; const items = [ { id : 1 , name : 'Mythical Sword' }, { id : 2 , name : 'Key to Dungeon' }, ]; return items ; } } info Hint @Payload() is imported from the @nestjs/microservices . Outgoing messages can also be keyed by passing an object with the key and value properties. Keying messages is important for meeting the co-partitioning requirement . @ @filename ( heroes . controller ) @Controller () export class HeroesController { @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage ) : any { const realm = 'Nest' ; const heroId = message . heroId ; const dragonId = message . dragonId ; const items = [ { id : 1 , name : 'Mythical Sword' }, { id : 2 , name : 'Key to Dungeon' }, ]; return { headers : { realm }, key : heroId , value : items } } } Additionally, messages passed in this format can also contain custom headers set in the headers hash property. Header hash property values must be either of type string or type Buffer . @ @filename ( heroes . controller ) @Controller () export class HeroesController { @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage ) : any { const realm = 'Nest' ; const heroId = message . heroId ; const dragonId = message . dragonId ; const items = [ { id : 1 , name : 'Mythical Sword' }, { id : 2 , name : 'Key to Dungeon' }, ]; return { headers : { kafka_nestRealm : realm }, key : heroId , value : items } } }","title":"\u5373\u5c06\u79bb\u4efb\u7684"},{"location":"microservices/kafka/#_9","text":"\u867d\u7136\u8bf7\u6c42-\u54cd\u5e94\u65b9\u6cd5\u975e\u5e38\u9002\u5408\u4e8e\u5728\u670d\u52a1\u4e4b\u95f4\u4ea4\u6362\u6d88\u606f\uff0c\u4f46\u662f\u5f53\u60a8\u7684\u6d88\u606f\u6837\u5f0f\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684(\u8fd9\u5bf9\u4e8e Kafka \u6765\u8bf4\u662f\u975e\u5e38\u7406\u60f3\u7684)\u2014\u5f53\u60a8\u53ea\u60f3\u53d1\u5e03\u4e8b\u4ef6 \u800c\u4e0d\u9700\u8981\u7b49\u5f85\u54cd\u5e94 \u65f6\uff0c\u5b83\u5c31\u4e0d\u592a\u9002\u5408\u4e86\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u5e0c\u671b\u7ef4\u62a4\u4e24\u4e2a\u4e3b\u9898\u6240\u9700\u7684\u8bf7\u6c42-\u54cd\u5e94\u5f00\u9500\u3002 Check out these two sections to learn more about this: Overview: Event-based and Overview: Publishing events .","title":"\u57fa\u4e8e\u4e8b\u4ef6\u7684"},{"location":"microservices/kafka/#_10","text":"\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002\u5f53\u4f7f\u7528 Kafka \u4f20\u8f93\u5668\u65f6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee' KafkaContext '\u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage , @Ctx () context : KafkaContext ) { console . log ( `Topic: ${ context . getTopic () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'hero.kill.dragon' ) killDragon ( message , context ) { console . log ( `Topic: ${ context . getTopic () } ` ); } info Hint @Payload() , @Ctx() and KafkaContext are imported from the @nestjs/microservices package. To access the original Kafka IncomingMessage object, use the getMessage() method of the KafkaContext object, as follows: @ @filename () @MessagePattern ( 'hero.kill.dragon' ) killDragon ( @Payload () message : KillDragonMessage , @Ctx () context : KafkaContext ) { const originalMessage = context . getMessage (); const { headers , partition , timestamp } = originalMessage ; } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'hero.kill.dragon' ) killDragon ( message , context ) { const originalMessage = context . getMessage (); const { headers , partition , timestamp } = originalMessage ; } Where the IncomingMessage fulfills the following interface: interface IncomingMessage { topic : string ; partition : number ; timestamp : string ; size : number ; attributes : number ; offset : string ; key : any ; value : any ; headers : Record < string , any > ; }","title":"\u4e0a\u4e0b\u6587"},{"location":"microservices/kafka/#_11","text":"Kafka \u5fae\u670d\u52a1\u7ec4\u4ef6\u5728' client.clientId '\u548c' consumer.groupId '\u9009\u9879\u4e0a\u9644\u52a0\u4e86\u5404\u81ea\u89d2\u8272\u7684\u63cf\u8ff0\uff0c\u4ee5\u9632\u6b62 Nest \u5fae\u670d\u52a1\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7ec4\u4ef6\u4e4b\u95f4\u7684\u51b2\u7a81\u3002 By default the ClientKafka components append -client and the ServerKafka components append -server to both of these options. Note how the provided values below are transformed in that way (as shown in the comments). @ @filename ( main ) const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.KAFKA , options : { client : { clientId : 'hero' , // hero-server brokers : [ 'localhost:9092' ], }, consumer : { groupId : 'hero-consumer' // hero-consumer-server }, } }); And for the client: @ @filename ( heroes . controller ) @Client ({ transport : Transport.KAFKA , options : { client : { clientId : 'hero' , // hero-client brokers : [ 'localhost:9092' ], }, consumer : { groupId : 'hero-consumer' // hero-consumer-client } } }) client : ClientKafka ; info Hint Kafka client and consumer naming conventions can be customized by extending ClientKafka and KafkaServer in your own custom provider and overriding the constructor. Since the Kafka microservice message pattern utilizes two topics for the request and reply channels, a reply pattern should be derived from the request topic. By default, the name of the reply topic is the composite of the request topic name with .reply appended. @ @filename ( heroes . controller ) onModuleInit () { this . client . subscribeToResponseOf ( 'hero.get' ); // hero.get.reply } info Hint Kafka reply topic naming conventions can be customized by extending ClientKafka in your own custom provider and overriding the getResponsePatternName method.","title":"\u547d\u540d\u7ea6\u5b9a"},{"location":"microservices/mqtt/","text":"MQTT \u00b6 MQTT (\u6d88\u606f\u961f\u5217\u9065\u6d4b\u4f20\u8f93)\u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8f7b\u91cf\u7ea7\u7684\u6d88\u606f\u4f20\u9012\u534f\u8bae\uff0c\u4e3a\u4f4e\u5ef6\u8fdf\u8fdb\u884c\u4e86\u4f18\u5316\u3002 \u8be5\u534f\u8bae\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f7f\u7528 \u53d1\u5e03/\u8ba2\u9605 \u6a21\u578b\u8fde\u63a5\u8bbe\u5907\u7684\u53ef\u6269\u5c55\u4e14\u7ecf\u6d4e\u6709\u6548\u7684\u65b9\u5f0f\u3002 \u6784\u5efa\u5728 MQTT \u4e0a\u7684\u901a\u4fe1\u7cfb\u7edf\u7531\u53d1\u5e03\u670d\u52a1\u5668\u3001\u4ee3\u7406\u548c\u4e00\u4e2a\u6216\u591a\u4e2a\u5ba2\u6237\u7aef\u7ec4\u6210\u3002 \u5b83\u662f\u4e3a\u53d7\u9650\u7684\u8bbe\u5907\u548c\u4f4e\u5e26\u5bbd\u3001\u9ad8\u5ef6\u8fdf\u6216\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u800c\u8bbe\u8ba1\u7684\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e mqtt \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save mqtt \u6982\u8ff0 \u00b6 \u8981\u4f7f\u7528 MQTT \u4f20\u8f93\u5668\uff0c\u8bf7\u5c06\u4ee5\u4e0b\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.MQTT , options : { url : 'mqtt://localhost:1883' , }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.MQTT , options : { url : 'mqtt://localhost:1883' , }, }); info Hint Transport enum \u4ece @nestjs/microservices \u5305\u5bfc\u5165\u3002 \u9009\u9879 \u00b6 options \u5bf9\u8c61\u7279\u5b9a\u4e8e\u6240\u9009\u7684\u4f20\u8f93\u5668\u3002 MQTT \u4f20\u8f93\u5668\u516c\u5f00\u4e86 \u6b64\u5904 \u63cf\u8ff0\u7684\u5c5e\u6027\u3002 \u5ba2\u6237\u7aef \u00b6 \u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u4e00\u6837\uff0c\u60a8\u6709\u51e0\u4e2a\u521b\u5efa MQTT ClientProxy \u5b9e\u4f8b\u7684 \u9009\u9879 \u3002 \u521b\u5efa\u5b9e\u4f8b\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ClientsModule \u3002 \u8981\u7528 ClientsModule \u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u8bf7\u5bfc\u5165\u5b83\uff0c\u5e76\u4f7f\u7528 register() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u7684\u5c5e\u6027\u4e0e\u4e0a\u9762\u7684 createMicroservice() \u65b9\u6cd5\u4e2d\u663e\u793a\u7684\u76f8\u540c\uff0c\u4ee5\u53ca\u4e00\u4e2a name \u5c5e\u6027\u4f5c\u4e3a\u6ce8\u5165\u4ee4\u724c\u3002 \u5728 \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e ClientsModule \u7684\u5185\u5bb9\u3002 @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.MQTT , options : { url : 'mqtt://localhost:1883' , } }, ]), ] ... }) \u521b\u5efa\u5ba2\u6237\u7aef\u7684\u5176\u4ed6\u9009\u9879( ClientProxyFactory \u6216 @Client() )\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002 \u4f60\u53ef\u4ee5\u9605\u8bfb \u8fd9\u91cc \u3002 \u4e0a\u4e0b\u6587 \u00b6 \u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u5f53\u4f7f\u7528 MQTT \u4f20\u8f93\u5668\u65f6\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee MqttContext \u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : MqttContext ) { console . log ( `Topic: ${ context . getTopic () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( `Topic: ${ context . getTopic () } ` ); } info Hint @Payload() , @Ctx() and MqttContext \u4ece @nestjs/microservices \u5305\u5bfc\u5165\u3002 \u8981\u8bbf\u95ee\u539f\u59cb\u7684 mqtt packet \uff0c\u4f7f\u7528 MqttContext \u5bf9\u8c61\u7684 getPacket() \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : MqttContext ) { console . log ( context . getPacket ()); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( context . getPacket ()); } \u901a\u914d\u7b26 \u00b6 \u8ba2\u9605\u53ef\u4ee5\u662f\u4e00\u4e2a\u663e\u5f0f\u4e3b\u9898\uff0c\u4e5f\u53ef\u4ee5\u5305\u542b\u901a\u914d\u7b26\u3002 \u6709\u4e24\u4e2a\u901a\u914d\u7b26\u53ef\u7528\uff0c + \u548c # \u3002 + \u662f\u5355\u7ea7\u901a\u914d\u7b26\uff0c\u800c # \u662f\u591a\u7ea7\u901a\u914d\u7b26\uff0c\u6db5\u76d6\u8bb8\u591a\u4e3b\u9898\u7ea7\u522b\u3002 @ @filename () @MessagePattern ( 'sensors/+/temperature/+' ) getTemperature ( @Ctx () context : MqttContext ) { console . log ( `Topic: ${ context . getTopic () } ` ); } @ @switch @Bind ( Ctx ()) @MessagePattern ( 'sensors/+/temperature/+' ) getTemperature ( context ) { console . log ( `Topic: ${ context . getTopic () } ` ); } \u8bb0\u5f55\u6784\u5efa\u5668 \u00b6 \u8981\u914d\u7f6e\u6d88\u606f\u9009\u9879(\u8c03\u6574 QoS \u7ea7\u522b\u3001\u8bbe\u7f6e Retain \u6216 DUP \u6807\u5fd7\uff0c\u6216\u5411\u8d1f\u8f7d\u6dfb\u52a0\u989d\u5916\u7684\u5c5e\u6027)\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 MqttRecordBuilder \u7c7b\u3002 \u4f8b\u5982\uff0c\u8bbe\u7f6e QoS \u4e3a 2 \u4f7f\u7528 setQoS \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: const userProperties = { 'x-version' : '1.0.0' }; const record = new MqttRecordBuilder ( ':cat:' ) . setProperties ({ userProperties }) . setQoS ( 1 ) . build (); client . send ( 'replace-emoji' , record ). subscribe (...); info Hint MqttRecordBuilder \u7c7b\u662f\u4ece @nestjs/microservices \u5305\u5bfc\u51fa\u7684\u3002 \u901a\u8fc7\u8bbf\u95ee MqttContext \uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u8bfb\u53d6\u8fd9\u4e9b\u9009\u9879\u3002 @ @filename () @MessagePattern ( 'replace-emoji' ) replaceEmoji ( @Payload () data : string , @Ctx () context : MqttContext ) : string { const { properties : { userProperties } } = context . getPacket (); return userProperties [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'replace-emoji' ) replaceEmoji ( data , context ) { const { properties : { userProperties } } = context . getPacket (); return userProperties [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u4e3a\u591a\u4e2a\u8bf7\u6c42\u914d\u7f6e\u7528\u6237\u5c5e\u6027\uff0c\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u9009\u9879\u4f20\u9012\u7ed9 ClientProxyFactory \u3002 import { Module } from '@nestjs/common' ; import { ClientProxyFactory , Transport } from '@nestjs/microservices' ; @Module ({ providers : [ { provide : 'API_v1' , useFactory : () => ClientProxyFactory . create ({ transport : Transport.MQTT , options : { url : 'mqtt://localhost:1833' , userProperties : { 'x-version' : '1.0.0' }, }, }), }, ], }) export class ApiModule {}","title":"MQTT"},{"location":"microservices/mqtt/#mqtt","text":"MQTT (\u6d88\u606f\u961f\u5217\u9065\u6d4b\u4f20\u8f93)\u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8f7b\u91cf\u7ea7\u7684\u6d88\u606f\u4f20\u9012\u534f\u8bae\uff0c\u4e3a\u4f4e\u5ef6\u8fdf\u8fdb\u884c\u4e86\u4f18\u5316\u3002 \u8be5\u534f\u8bae\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f7f\u7528 \u53d1\u5e03/\u8ba2\u9605 \u6a21\u578b\u8fde\u63a5\u8bbe\u5907\u7684\u53ef\u6269\u5c55\u4e14\u7ecf\u6d4e\u6709\u6548\u7684\u65b9\u5f0f\u3002 \u6784\u5efa\u5728 MQTT \u4e0a\u7684\u901a\u4fe1\u7cfb\u7edf\u7531\u53d1\u5e03\u670d\u52a1\u5668\u3001\u4ee3\u7406\u548c\u4e00\u4e2a\u6216\u591a\u4e2a\u5ba2\u6237\u7aef\u7ec4\u6210\u3002 \u5b83\u662f\u4e3a\u53d7\u9650\u7684\u8bbe\u5907\u548c\u4f4e\u5e26\u5bbd\u3001\u9ad8\u5ef6\u8fdf\u6216\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u800c\u8bbe\u8ba1\u7684\u3002","title":"MQTT"},{"location":"microservices/mqtt/#_1","text":"\u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e mqtt \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save mqtt","title":"\u5b89\u88c5"},{"location":"microservices/mqtt/#_2","text":"\u8981\u4f7f\u7528 MQTT \u4f20\u8f93\u5668\uff0c\u8bf7\u5c06\u4ee5\u4e0b\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.MQTT , options : { url : 'mqtt://localhost:1883' , }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.MQTT , options : { url : 'mqtt://localhost:1883' , }, }); info Hint Transport enum \u4ece @nestjs/microservices \u5305\u5bfc\u5165\u3002","title":"\u6982\u8ff0"},{"location":"microservices/mqtt/#_3","text":"options \u5bf9\u8c61\u7279\u5b9a\u4e8e\u6240\u9009\u7684\u4f20\u8f93\u5668\u3002 MQTT \u4f20\u8f93\u5668\u516c\u5f00\u4e86 \u6b64\u5904 \u63cf\u8ff0\u7684\u5c5e\u6027\u3002","title":"\u9009\u9879"},{"location":"microservices/mqtt/#_4","text":"\u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u4e00\u6837\uff0c\u60a8\u6709\u51e0\u4e2a\u521b\u5efa MQTT ClientProxy \u5b9e\u4f8b\u7684 \u9009\u9879 \u3002 \u521b\u5efa\u5b9e\u4f8b\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ClientsModule \u3002 \u8981\u7528 ClientsModule \u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u8bf7\u5bfc\u5165\u5b83\uff0c\u5e76\u4f7f\u7528 register() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u7684\u5c5e\u6027\u4e0e\u4e0a\u9762\u7684 createMicroservice() \u65b9\u6cd5\u4e2d\u663e\u793a\u7684\u76f8\u540c\uff0c\u4ee5\u53ca\u4e00\u4e2a name \u5c5e\u6027\u4f5c\u4e3a\u6ce8\u5165\u4ee4\u724c\u3002 \u5728 \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e ClientsModule \u7684\u5185\u5bb9\u3002 @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.MQTT , options : { url : 'mqtt://localhost:1883' , } }, ]), ] ... }) \u521b\u5efa\u5ba2\u6237\u7aef\u7684\u5176\u4ed6\u9009\u9879( ClientProxyFactory \u6216 @Client() )\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002 \u4f60\u53ef\u4ee5\u9605\u8bfb \u8fd9\u91cc \u3002","title":"\u5ba2\u6237\u7aef"},{"location":"microservices/mqtt/#_5","text":"\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u5f53\u4f7f\u7528 MQTT \u4f20\u8f93\u5668\u65f6\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee MqttContext \u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : MqttContext ) { console . log ( `Topic: ${ context . getTopic () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( `Topic: ${ context . getTopic () } ` ); } info Hint @Payload() , @Ctx() and MqttContext \u4ece @nestjs/microservices \u5305\u5bfc\u5165\u3002 \u8981\u8bbf\u95ee\u539f\u59cb\u7684 mqtt packet \uff0c\u4f7f\u7528 MqttContext \u5bf9\u8c61\u7684 getPacket() \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : MqttContext ) { console . log ( context . getPacket ()); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( context . getPacket ()); }","title":"\u4e0a\u4e0b\u6587"},{"location":"microservices/mqtt/#_6","text":"\u8ba2\u9605\u53ef\u4ee5\u662f\u4e00\u4e2a\u663e\u5f0f\u4e3b\u9898\uff0c\u4e5f\u53ef\u4ee5\u5305\u542b\u901a\u914d\u7b26\u3002 \u6709\u4e24\u4e2a\u901a\u914d\u7b26\u53ef\u7528\uff0c + \u548c # \u3002 + \u662f\u5355\u7ea7\u901a\u914d\u7b26\uff0c\u800c # \u662f\u591a\u7ea7\u901a\u914d\u7b26\uff0c\u6db5\u76d6\u8bb8\u591a\u4e3b\u9898\u7ea7\u522b\u3002 @ @filename () @MessagePattern ( 'sensors/+/temperature/+' ) getTemperature ( @Ctx () context : MqttContext ) { console . log ( `Topic: ${ context . getTopic () } ` ); } @ @switch @Bind ( Ctx ()) @MessagePattern ( 'sensors/+/temperature/+' ) getTemperature ( context ) { console . log ( `Topic: ${ context . getTopic () } ` ); }","title":"\u901a\u914d\u7b26"},{"location":"microservices/mqtt/#_7","text":"\u8981\u914d\u7f6e\u6d88\u606f\u9009\u9879(\u8c03\u6574 QoS \u7ea7\u522b\u3001\u8bbe\u7f6e Retain \u6216 DUP \u6807\u5fd7\uff0c\u6216\u5411\u8d1f\u8f7d\u6dfb\u52a0\u989d\u5916\u7684\u5c5e\u6027)\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 MqttRecordBuilder \u7c7b\u3002 \u4f8b\u5982\uff0c\u8bbe\u7f6e QoS \u4e3a 2 \u4f7f\u7528 setQoS \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: const userProperties = { 'x-version' : '1.0.0' }; const record = new MqttRecordBuilder ( ':cat:' ) . setProperties ({ userProperties }) . setQoS ( 1 ) . build (); client . send ( 'replace-emoji' , record ). subscribe (...); info Hint MqttRecordBuilder \u7c7b\u662f\u4ece @nestjs/microservices \u5305\u5bfc\u51fa\u7684\u3002 \u901a\u8fc7\u8bbf\u95ee MqttContext \uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u8bfb\u53d6\u8fd9\u4e9b\u9009\u9879\u3002 @ @filename () @MessagePattern ( 'replace-emoji' ) replaceEmoji ( @Payload () data : string , @Ctx () context : MqttContext ) : string { const { properties : { userProperties } } = context . getPacket (); return userProperties [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'replace-emoji' ) replaceEmoji ( data , context ) { const { properties : { userProperties } } = context . getPacket (); return userProperties [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u4e3a\u591a\u4e2a\u8bf7\u6c42\u914d\u7f6e\u7528\u6237\u5c5e\u6027\uff0c\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u9009\u9879\u4f20\u9012\u7ed9 ClientProxyFactory \u3002 import { Module } from '@nestjs/common' ; import { ClientProxyFactory , Transport } from '@nestjs/microservices' ; @Module ({ providers : [ { provide : 'API_v1' , useFactory : () => ClientProxyFactory . create ({ transport : Transport.MQTT , options : { url : 'mqtt://localhost:1833' , userProperties : { 'x-version' : '1.0.0' }, }, }), }, ], }) export class ApiModule {}","title":"\u8bb0\u5f55\u6784\u5efa\u5668"},{"location":"microservices/nats/","text":"NATS \u00b6 NATS \u662f\u4e00\u4e2a\u7b80\u5355\u3001\u5b89\u5168\u3001\u9ad8\u6027\u80fd\u7684\u5f00\u6e90\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\uff0c\u9002\u7528\u4e8e\u4e91\u672c\u5730\u5e94\u7528\u3001\u7269\u8054\u7f51\u6d88\u606f\u4f20\u9012\u548c\u5fae\u670d\u52a1\u67b6\u6784\u3002 NATS \u670d\u52a1\u5668\u662f\u7528 Go \u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u4f46\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u5ba2\u6237\u7aef\u5e93\u53ef\u7528\u4e8e\u6570\u5341\u79cd\u4e3b\u8981\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 NATS \u652f\u6301 At Most Once \u548c At Least Once \u4ea4\u4ed8\u3002 \u5b83\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8fd0\u884c\uff0c\u4ece\u5927\u578b\u670d\u52a1\u5668\u548c\u4e91\u5b9e\u4f8b\uff0c\u5230\u8fb9\u7f18\u7f51\u5173\uff0c\u751a\u81f3\u662f\u7269\u8054\u7f51\u8bbe\u5907\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e NATS \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save nats \u6982\u8ff0 \u00b6 \u8981\u4f7f\u7528 NATS \u4f20\u8f93\u5668\uff0c\u5c06\u4ee5\u4e0b\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], }, }); info Hint Transport \u679a\u4e3e\u662f\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684\u3002 \u9009\u9879 \u00b6 options \u5bf9\u8c61\u7279\u5b9a\u4e8e\u6240\u9009\u7684\u4f20\u8f93\u5668\u3002 NATS \u4f20\u8f93\u5668\u516c\u5f00\u4e86 \u6b64\u5904 \u6240\u63cf\u8ff0\u7684\u5c5e\u6027. \u6b64\u5916\uff0c\u6709\u4e00\u4e2a queue \u5c5e\u6027\uff0c\u5b83\u5141\u8bb8\u4f60\u6307\u5b9a\u4f60\u7684\u670d\u52a1\u5668\u5e94\u8be5\u8ba2\u9605\u7684\u961f\u5217\u7684\u540d\u79f0(\u4fdd\u7559 undefined \u5ffd\u7565\u8fd9\u4e2a\u8bbe\u7f6e)\u3002 \u9605\u8bfb \u4e0b\u9762 \u5173\u4e8e NATS \u961f\u5217\u7ec4\u7684\u66f4\u591a\u4fe1\u606f \u5ba2\u6237\u7aef \u00b6 \u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u4e00\u6837\uff0c\u521b\u5efa NATS ClientProxy \u5b9e\u4f8b\u6709 \u51e0\u4e2a\u9009\u9879 \u3002 \u521b\u5efa\u5b9e\u4f8b\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ClientsModule \u3002 \u8981\u4f7f\u7528 ClientsModule \u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u8bf7\u5bfc\u5165\u5b83\u5e76\u4f7f\u7528 register() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5177\u6709\u4e0a\u9762 createMicroservice() \u65b9\u6cd5\u4e2d\u663e\u793a\u7684\u76f8\u540c\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a name \u5c5e\u6027\uff0c\u7528\u4e8e\u4f5c\u4e3a\u6ce8\u5165\u4ee4\u724c\u3002 \u70b9\u51fb \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u201cClientsModule\u201d\u7684\u4fe1\u606f @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], } }, ]), ] ... }) \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u521b\u5efa\u5ba2\u6237\u7aef\u7684\u9009\u9879( ClientProxyFactory \u6216 @Client() )\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u3002 \u8bf7\u6c42-\u54cd\u5e94 \u00b6 \u5bf9\u4e8e \u8bf7\u6c42-\u54cd\u5e94 \u6d88\u606f\u6837\u5f0f( \u9605\u8bfb\u66f4\u591a )\uff0cNATS \u4f20\u8f93\u5668\u4e0d\u4f7f\u7528 NATS \u5185\u7f6e\u7684 \u8bf7\u6c42-\u5e94\u7b54 \u673a\u5236\u3002 \u76f8\u53cd\uff0c\u4f7f\u7528 publish() \u65b9\u6cd5\u5728\u7ed9\u5b9a\u7684\u4e3b\u9898\u4e0a\u53d1\u5e03\u4e00\u4e2a\u201c\u8bf7\u6c42\u201d\uff0c\u8be5\u65b9\u6cd5\u5177\u6709\u60df\u4e00\u7684\u5e94\u7b54\u4e3b\u9898\u540d\u79f0\uff0c\u5e94\u7b54\u8005\u76d1\u542c\u8be5\u4e3b\u9898\u5e76\u5411\u5e94\u7b54\u4e3b\u9898\u53d1\u9001\u54cd\u5e94\u3002 \u56de\u590d\u4e3b\u9898\u88ab\u52a8\u6001\u5730\u5b9a\u5411\u56de\u8bf7\u6c42\u8005\uff0c\u800c\u4e0d\u7ba1\u4efb\u4f55\u4e00\u65b9\u7684\u4f4d\u7f6e\u3002 \u57fa\u4e8e\u4e8b\u4ef6\u7684 \u00b6 \u5bf9\u4e8e \u57fa\u4e8e\u4e8b\u4ef6\u7684 \u6d88\u606f\u6837\u5f0f( \u9605\u8bfb\u66f4\u591a )\uff0c NATS \u4f20\u8f93\u5668\u4f7f\u7528 NATS \u5185\u7f6e\u7684 \u53d1\u5e03-\u8ba2\u9605 \u673a\u5236\u3002 \u53d1\u5e03\u8005\u53d1\u9001\u5173\u4e8e\u4e3b\u9898\u7684\u6d88\u606f\uff0c\u4efb\u4f55\u76d1\u542c\u8be5\u4e3b\u9898\u7684\u6d3b\u52a8\u8ba2\u9605\u8005\u90fd\u4f1a\u63a5\u6536\u8be5\u6d88\u606f\u3002 \u8ba2\u9605\u8005\u8fd8\u53ef\u4ee5\u6ce8\u518c\u5bf9\u901a\u914d\u7b26\u4e3b\u9898\u7684\u5174\u8da3\uff0c\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u70b9\u50cf\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u8fd9\u79cd\u4e00\u5bf9\u591a\u6a21\u5f0f\u6709\u65f6\u79f0\u4e3a\u6247\u51fa\u3002 \u961f\u5217\u7ec4 \u00b6 NATS \u63d0\u4f9b\u4e86\u4e00\u4e2a\u79f0\u4e3a \u5206\u5e03\u5f0f\u961f\u5217 \u7684\u5185\u7f6e\u8d1f\u8f7d\u5e73\u8861\u7279\u6027\u3002 \u8981\u521b\u5efa\u961f\u5217\u8ba2\u9605\uff0c\u4f7f\u7528' queue '\u5c5e\u6027\u5982\u4e0b\u6240\u793a: @ @filename ( main ) const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], queue : 'cats_queue' , }, }); \u4e0a\u4e0b\u6587 \u00b6 \u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u5f53\u4f7f\u7528 NATS \u4f20\u8f93\u5668\u65f6\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee' NatsContext '\u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : NatsContext ) { console . log ( `Subject: ${ context . getSubject () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( `Subject: ${ context . getSubject () } ` ); } info Hint ' @Payload() '\uff0c ' @Ctx() '\u548c' NatsContext '\u662f\u4ece' @nestjs/microservices '\u5305\u5bfc\u5165\u7684\u3002 \u901a\u914d\u7b26 \u00b6 \u8ba2\u9605\u53ef\u4ee5\u662f\u5bf9\u663e\u5f0f\u4e3b\u9898\u7684\u8ba2\u9605\uff0c\u4e5f\u53ef\u4ee5\u5305\u62ec\u901a\u914d\u7b26\u3002 @ @filename () @MessagePattern ( 'time.us.*' ) getDate ( @Payload () data : number [], @Ctx () context : NatsContext ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'time.us.*' ) getDate ( data , context ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } \u8bb0\u5f55\u6784\u5efa \u00b6 \u8981\u914d\u7f6e\u6d88\u606f\u9009\u9879\uff0c\u53ef\u4ee5\u4f7f\u7528' NatsRecordBuilder '\u7c7b(\u6ce8\u610f:\u8fd9\u5bf9\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d41\u4e5f\u662f\u53ef\u884c\u7684)\u3002 \u4f8b\u5982\uff0c\u8981\u6dfb\u52a0' x-version '\u6807\u5934\uff0c\u4f7f\u7528' setHeaders '\u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: import * as nats from 'nats' ; // somewhere in your code const headers = nats . headers (); headers . set ( 'x-version' , '1.0.0' ); const record = new NatsRecordBuilder ( ':cat:' ). setHeaders ( headers ). build (); this . client . send ( 'replace-emoji' , record ). subscribe (...); info Hint ' NatsRecordBuilder '\u7c7b\u4ece' @nestjs/microservices '\u5305\u4e2d\u5bfc\u51fa\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u8bfb\u53d6\u8fd9\u4e9b\u5934\u6587\u4ef6\uff0c\u901a\u8fc7\u8bbf\u95ee' NatsContext '\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @MessagePattern ( 'replace-emoji' ) replaceEmoji ( @Payload () data : string , @Ctx () context : NatsContext ) : string { const headers = context . getHeaders (); return headers [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'replace-emoji' ) replaceEmoji ( data , context ) { const headers = context . getHeaders (); return headers [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u60f3\u4e3a\u591a\u4e2a\u8bf7\u6c42\u914d\u7f6e\u5934\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4f5c\u4e3a\u9009\u9879\u4f20\u9012\u7ed9' ClientProxyFactory ': import { Module } from '@nestjs/common' ; import { ClientProxyFactory , Transport } from '@nestjs/microservices' ; @Module ({ providers : [ { provide : 'API_v1' , useFactory : () => ClientProxyFactory . create ({ transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], headers : { 'x-version' : '1.0.0' }, }, }), }, ], }) export class ApiModule {}","title":"NATS"},{"location":"microservices/nats/#nats","text":"NATS \u662f\u4e00\u4e2a\u7b80\u5355\u3001\u5b89\u5168\u3001\u9ad8\u6027\u80fd\u7684\u5f00\u6e90\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\uff0c\u9002\u7528\u4e8e\u4e91\u672c\u5730\u5e94\u7528\u3001\u7269\u8054\u7f51\u6d88\u606f\u4f20\u9012\u548c\u5fae\u670d\u52a1\u67b6\u6784\u3002 NATS \u670d\u52a1\u5668\u662f\u7528 Go \u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u4f46\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u5ba2\u6237\u7aef\u5e93\u53ef\u7528\u4e8e\u6570\u5341\u79cd\u4e3b\u8981\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 NATS \u652f\u6301 At Most Once \u548c At Least Once \u4ea4\u4ed8\u3002 \u5b83\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8fd0\u884c\uff0c\u4ece\u5927\u578b\u670d\u52a1\u5668\u548c\u4e91\u5b9e\u4f8b\uff0c\u5230\u8fb9\u7f18\u7f51\u5173\uff0c\u751a\u81f3\u662f\u7269\u8054\u7f51\u8bbe\u5907\u3002","title":"NATS"},{"location":"microservices/nats/#_1","text":"\u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e NATS \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save nats","title":"\u5b89\u88c5"},{"location":"microservices/nats/#_2","text":"\u8981\u4f7f\u7528 NATS \u4f20\u8f93\u5668\uff0c\u5c06\u4ee5\u4e0b\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], }, }); info Hint Transport \u679a\u4e3e\u662f\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684\u3002","title":"\u6982\u8ff0"},{"location":"microservices/nats/#_3","text":"options \u5bf9\u8c61\u7279\u5b9a\u4e8e\u6240\u9009\u7684\u4f20\u8f93\u5668\u3002 NATS \u4f20\u8f93\u5668\u516c\u5f00\u4e86 \u6b64\u5904 \u6240\u63cf\u8ff0\u7684\u5c5e\u6027. \u6b64\u5916\uff0c\u6709\u4e00\u4e2a queue \u5c5e\u6027\uff0c\u5b83\u5141\u8bb8\u4f60\u6307\u5b9a\u4f60\u7684\u670d\u52a1\u5668\u5e94\u8be5\u8ba2\u9605\u7684\u961f\u5217\u7684\u540d\u79f0(\u4fdd\u7559 undefined \u5ffd\u7565\u8fd9\u4e2a\u8bbe\u7f6e)\u3002 \u9605\u8bfb \u4e0b\u9762 \u5173\u4e8e NATS \u961f\u5217\u7ec4\u7684\u66f4\u591a\u4fe1\u606f","title":"\u9009\u9879"},{"location":"microservices/nats/#_4","text":"\u4e0e\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u4e00\u6837\uff0c\u521b\u5efa NATS ClientProxy \u5b9e\u4f8b\u6709 \u51e0\u4e2a\u9009\u9879 \u3002 \u521b\u5efa\u5b9e\u4f8b\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ClientsModule \u3002 \u8981\u4f7f\u7528 ClientsModule \u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u8bf7\u5bfc\u5165\u5b83\u5e76\u4f7f\u7528 register() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5177\u6709\u4e0a\u9762 createMicroservice() \u65b9\u6cd5\u4e2d\u663e\u793a\u7684\u76f8\u540c\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a name \u5c5e\u6027\uff0c\u7528\u4e8e\u4f5c\u4e3a\u6ce8\u5165\u4ee4\u724c\u3002 \u70b9\u51fb \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u201cClientsModule\u201d\u7684\u4fe1\u606f @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], } }, ]), ] ... }) \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u521b\u5efa\u5ba2\u6237\u7aef\u7684\u9009\u9879( ClientProxyFactory \u6216 @Client() )\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u3002","title":"\u5ba2\u6237\u7aef"},{"location":"microservices/nats/#-","text":"\u5bf9\u4e8e \u8bf7\u6c42-\u54cd\u5e94 \u6d88\u606f\u6837\u5f0f( \u9605\u8bfb\u66f4\u591a )\uff0cNATS \u4f20\u8f93\u5668\u4e0d\u4f7f\u7528 NATS \u5185\u7f6e\u7684 \u8bf7\u6c42-\u5e94\u7b54 \u673a\u5236\u3002 \u76f8\u53cd\uff0c\u4f7f\u7528 publish() \u65b9\u6cd5\u5728\u7ed9\u5b9a\u7684\u4e3b\u9898\u4e0a\u53d1\u5e03\u4e00\u4e2a\u201c\u8bf7\u6c42\u201d\uff0c\u8be5\u65b9\u6cd5\u5177\u6709\u60df\u4e00\u7684\u5e94\u7b54\u4e3b\u9898\u540d\u79f0\uff0c\u5e94\u7b54\u8005\u76d1\u542c\u8be5\u4e3b\u9898\u5e76\u5411\u5e94\u7b54\u4e3b\u9898\u53d1\u9001\u54cd\u5e94\u3002 \u56de\u590d\u4e3b\u9898\u88ab\u52a8\u6001\u5730\u5b9a\u5411\u56de\u8bf7\u6c42\u8005\uff0c\u800c\u4e0d\u7ba1\u4efb\u4f55\u4e00\u65b9\u7684\u4f4d\u7f6e\u3002","title":"\u8bf7\u6c42-\u54cd\u5e94"},{"location":"microservices/nats/#_5","text":"\u5bf9\u4e8e \u57fa\u4e8e\u4e8b\u4ef6\u7684 \u6d88\u606f\u6837\u5f0f( \u9605\u8bfb\u66f4\u591a )\uff0c NATS \u4f20\u8f93\u5668\u4f7f\u7528 NATS \u5185\u7f6e\u7684 \u53d1\u5e03-\u8ba2\u9605 \u673a\u5236\u3002 \u53d1\u5e03\u8005\u53d1\u9001\u5173\u4e8e\u4e3b\u9898\u7684\u6d88\u606f\uff0c\u4efb\u4f55\u76d1\u542c\u8be5\u4e3b\u9898\u7684\u6d3b\u52a8\u8ba2\u9605\u8005\u90fd\u4f1a\u63a5\u6536\u8be5\u6d88\u606f\u3002 \u8ba2\u9605\u8005\u8fd8\u53ef\u4ee5\u6ce8\u518c\u5bf9\u901a\u914d\u7b26\u4e3b\u9898\u7684\u5174\u8da3\uff0c\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u70b9\u50cf\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u8fd9\u79cd\u4e00\u5bf9\u591a\u6a21\u5f0f\u6709\u65f6\u79f0\u4e3a\u6247\u51fa\u3002","title":"\u57fa\u4e8e\u4e8b\u4ef6\u7684"},{"location":"microservices/nats/#_6","text":"NATS \u63d0\u4f9b\u4e86\u4e00\u4e2a\u79f0\u4e3a \u5206\u5e03\u5f0f\u961f\u5217 \u7684\u5185\u7f6e\u8d1f\u8f7d\u5e73\u8861\u7279\u6027\u3002 \u8981\u521b\u5efa\u961f\u5217\u8ba2\u9605\uff0c\u4f7f\u7528' queue '\u5c5e\u6027\u5982\u4e0b\u6240\u793a: @ @filename ( main ) const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], queue : 'cats_queue' , }, });","title":"\u961f\u5217\u7ec4"},{"location":"microservices/nats/#_7","text":"\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u5f53\u4f7f\u7528 NATS \u4f20\u8f93\u5668\u65f6\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee' NatsContext '\u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : NatsContext ) { console . log ( `Subject: ${ context . getSubject () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( `Subject: ${ context . getSubject () } ` ); } info Hint ' @Payload() '\uff0c ' @Ctx() '\u548c' NatsContext '\u662f\u4ece' @nestjs/microservices '\u5305\u5bfc\u5165\u7684\u3002","title":"\u4e0a\u4e0b\u6587"},{"location":"microservices/nats/#_8","text":"\u8ba2\u9605\u53ef\u4ee5\u662f\u5bf9\u663e\u5f0f\u4e3b\u9898\u7684\u8ba2\u9605\uff0c\u4e5f\u53ef\u4ee5\u5305\u62ec\u901a\u914d\u7b26\u3002 @ @filename () @MessagePattern ( 'time.us.*' ) getDate ( @Payload () data : number [], @Ctx () context : NatsContext ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'time.us.*' ) getDate ( data , context ) { console . log ( `Subject: ${ context . getSubject () } ` ); // e.g. \"time.us.east\" return new Date (). toLocaleTimeString (...); }","title":"\u901a\u914d\u7b26"},{"location":"microservices/nats/#_9","text":"\u8981\u914d\u7f6e\u6d88\u606f\u9009\u9879\uff0c\u53ef\u4ee5\u4f7f\u7528' NatsRecordBuilder '\u7c7b(\u6ce8\u610f:\u8fd9\u5bf9\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d41\u4e5f\u662f\u53ef\u884c\u7684)\u3002 \u4f8b\u5982\uff0c\u8981\u6dfb\u52a0' x-version '\u6807\u5934\uff0c\u4f7f\u7528' setHeaders '\u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: import * as nats from 'nats' ; // somewhere in your code const headers = nats . headers (); headers . set ( 'x-version' , '1.0.0' ); const record = new NatsRecordBuilder ( ':cat:' ). setHeaders ( headers ). build (); this . client . send ( 'replace-emoji' , record ). subscribe (...); info Hint ' NatsRecordBuilder '\u7c7b\u4ece' @nestjs/microservices '\u5305\u4e2d\u5bfc\u51fa\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u8bfb\u53d6\u8fd9\u4e9b\u5934\u6587\u4ef6\uff0c\u901a\u8fc7\u8bbf\u95ee' NatsContext '\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @MessagePattern ( 'replace-emoji' ) replaceEmoji ( @Payload () data : string , @Ctx () context : NatsContext ) : string { const headers = context . getHeaders (); return headers [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'replace-emoji' ) replaceEmoji ( data , context ) { const headers = context . getHeaders (); return headers [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u60f3\u4e3a\u591a\u4e2a\u8bf7\u6c42\u914d\u7f6e\u5934\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4f5c\u4e3a\u9009\u9879\u4f20\u9012\u7ed9' ClientProxyFactory ': import { Module } from '@nestjs/common' ; import { ClientProxyFactory , Transport } from '@nestjs/microservices' ; @Module ({ providers : [ { provide : 'API_v1' , useFactory : () => ClientProxyFactory . create ({ transport : Transport.NATS , options : { servers : [ 'nats://localhost:4222' ], headers : { 'x-version' : '1.0.0' }, }, }), }, ], }) export class ApiModule {}","title":"\u8bb0\u5f55\u6784\u5efa"},{"location":"microservices/pipes/","text":"Pipes \u00b6 \u5e38\u89c4\u7ba1\u9053 \u548c\u5fae\u670d\u52a1\u7ba1\u9053\u4e4b\u95f4\u6ca1\u6709\u6839\u672c\u533a\u522b\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 RpcException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 info Hint RpcException \u7c7b\u4ece @nestjs/microservices \u5305\u4e2d\u516c\u5f00\u3002 \u7ed1\u5b9a\u7ba1\u9053 \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e00\u4e2a\u624b\u5de5\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u8303\u56f4\u7684\u7ba1\u9053\u3002\u5c31\u50cf\u57fa\u4e8e HTTP \u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63a7\u5236\u5668\u4f5c\u7528\u57df\u7684\u7ba1\u9053(\u5373\uff0c\u5728\u63a7\u5236\u5668\u7c7b\u524d\u9762\u52a0\u4e0a @UsePipes() \u88c5\u9970\u5668)\u3002 @ @filename () @UsePipes ( new ValidationPipe ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @UsePipes ( new ValidationPipe ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); }","title":"\u7ba1\u9053"},{"location":"microservices/pipes/#pipes","text":"\u5e38\u89c4\u7ba1\u9053 \u548c\u5fae\u670d\u52a1\u7ba1\u9053\u4e4b\u95f4\u6ca1\u6709\u6839\u672c\u533a\u522b\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 RpcException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 info Hint RpcException \u7c7b\u4ece @nestjs/microservices \u5305\u4e2d\u516c\u5f00\u3002","title":"Pipes"},{"location":"microservices/pipes/#_1","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e00\u4e2a\u624b\u5de5\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u8303\u56f4\u7684\u7ba1\u9053\u3002\u5c31\u50cf\u57fa\u4e8e HTTP \u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u63a7\u5236\u5668\u4f5c\u7528\u57df\u7684\u7ba1\u9053(\u5373\uff0c\u5728\u63a7\u5236\u5668\u7c7b\u524d\u9762\u52a0\u4e0a @UsePipes() \u88c5\u9970\u5668)\u3002 @ @filename () @UsePipes ( new ValidationPipe ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data : number []) : number { return ( data || []). reduce (( a , b ) => a + b ); } @ @switch @UsePipes ( new ValidationPipe ()) @MessagePattern ({ cmd : 'sum' }) accumulate ( data ) { return ( data || []). reduce (( a , b ) => a + b ); }","title":"\u7ed1\u5b9a\u7ba1\u9053"},{"location":"microservices/rabbitmq/","text":"RabbitMQ \u00b6 RabbitMQ \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u8f7b\u91cf\u7ea7\u6d88\u606f\u4ee3\u7406\uff0c \u652f\u6301\u591a\u79cd\u6d88\u606f\u534f\u8bae\u3002 \u5b83\u53ef\u4ee5\u90e8\u7f72\u5728\u5206\u5e03\u5f0f\u548c\u8054\u5408\u914d\u7f6e\u4e2d\uff0c\u4ee5\u6ee1\u8db3\u5927\u89c4\u6a21\u3001\u9ad8\u53ef\u7528\u6027\u9700\u6c42\u3002 \u6b64\u5916\uff0c\u5b83\u662f\u90e8\u7f72\u6700\u5e7f\u6cdb\u7684\u6d88\u606f\u4ee3\u7406\uff0c\u5728\u5168\u7403\u8303\u56f4\u5185\u7528\u4e8e\u5c0f\u578b\u521d\u521b\u4f01\u4e1a\u548c\u5927\u578b\u4f01\u4e1a\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e rabbitmq \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save amqplib amqp-connection-manager \u6982\u8ff0 \u00b6 \u8981\u4f7f\u7528 RabbitMQ \u4f20\u8f93\u5668\uff0c\u9700\u8981\u5c06\u4ee5\u4e0b\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.RMQ , options : { urls : [ 'amqp://localhost:5672' ], queue : 'cats_queue' , queueOptions : { durable : false }, }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.RMQ , options : { urls : [ 'amqp://localhost:5672' ], queue : 'cats_queue' , queueOptions : { durable : false }, }, }); info Hint Transport \u679a\u4e3e\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u9009\u9879 \u00b6 options \u5c5e\u6027\u7279\u5b9a\u4e8e\u6240\u9009\u7684\u4f20\u8f93\u5668\u3002 RabbitMQ \u4f20\u8f93\u5668\u66b4\u9732\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 urls \u8fde\u63a5url queue \u60a8\u7684\u670d\u52a1\u5668\u5c06\u4fa6\u542c\u7684\u961f\u5217\u540d\u79f0 prefetchCount \u8bbe\u7f6e\u901a\u9053\u7684\u9884\u53d6\u8ba1\u6570 isGlobalPrefetchCount \u542f\u7528\u6bcf\u4e2a\u901a\u9053\u9884\u53d6 noAck \u5982\u679c false \uff0c\u5219\u542f\u7528\u624b\u52a8\u786e\u8ba4\u6a21\u5f0f queueOptions \u989d\u5916\u7684\u961f\u5217\u9009\u9879(\u8bfb\u53d6\u66f4\u591a \u8fd9\u91cc ) socketOptions \u989d\u5916\u7684\u5957\u63a5\u5b57\u9009\u9879(\u8bfb\u53d6\u66f4\u591a \u8fd9\u91cc ) headers \u6807\u9898\u5c06\u968f\u6bcf\u6761\u6d88\u606f\u4e00\u8d77\u53d1\u9001 \u5ba2\u6237\u7aef \u00b6 \u50cf\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u4e00\u6837\uff0c\u521b\u5efaRabbitMQ ClientProxy \u5b9e\u4f8b\u6709 \u51e0\u4e2a\u9009\u9879 \u3002 \u521b\u5efa\u5b9e\u4f8b\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ClientsModule \u3002 \u8981\u4f7f\u7528 ClientsModule \u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u8bf7\u5bfc\u5165\u5b83\u5e76\u4f7f\u7528 register() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5177\u6709\u4e0a\u9762 createMicroservice() \u65b9\u6cd5\u4e2d\u663e\u793a\u7684\u76f8\u540c\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a name \u5c5e\u6027\uff0c\u7528\u4e8e\u4f5c\u4e3a\u6ce8\u5165\u4ee4\u724c\u3002 \u70b9\u51fb \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e ClientsModule \u7684\u4fe1\u606f\u3002 @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.RMQ , options : { urls : [ 'amqp://localhost:5672' ], queue : 'cats_queue' , queueOptions : { durable : false }, }, }, ]), ] ... }) \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u521b\u5efa\u5ba2\u6237\u7aef\u7684\u9009\u9879( ClientProxyFactory \u6216 @Client() )\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u3002 \u4e0a\u4e0b\u6587 \u00b6 \u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u5f53\u4f7f\u7528 RabbitMQ \u4f20\u8f93\u5668\u65f6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee RmqContext \u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RmqContext ) { console . log ( `Pattern: ${ context . getPattern () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( `Pattern: ${ context . getPattern () } ` ); } info Hint @Payload() , @Ctx() \u548c RmqContext \u4ece @nestjs/microservices \u5305\u5bfc\u5165. \u8981\u8bbf\u95ee\u539f\u59cb\u7684RabbitMQ\u6d88\u606f (with the properties , fields , and content ), \u4f7f\u7528 RmqContext \u5bf9\u8c61\u7684 getMessage() \u65b9\u6cd5, \u5982\u4e0b: @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RmqContext ) { console . log ( context . getMessage ()); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( context . getMessage ()); } \u83b7\u53d6\u5bf9RabbitMQ channel \u7684\u5f15\u7528, \u4f7f\u7528 RmqContext \u5bf9\u8c61\u7684 getChannelRef \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RmqContext ) { console . log ( context . getChannelRef ()); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( context . getChannelRef ()); } \u6d88\u606f\u786e\u8ba4 \u00b6 \u4e3a\u4e86\u786e\u4fdd\u6d88\u606f\u6c38\u8fdc\u4e0d\u4f1a\u4e22\u5931\uff0cRabbitMQ\u652f\u6301 \u6d88\u606f\u786e\u8ba4 . \u4e00\u4e2a\u786e\u8ba4\u4fe1\u606f\u88ab\u6d88\u8d39\u8005\u53d1\u9001\u56deRabbitMQ\uff0c\u544a\u8bc9RabbitMQ\u5df2\u7ecf\u6536\u5230\u5e76\u5904\u7406\u4e86\u4e00\u4e2a\u7279\u5b9a\u7684\u6d88\u606f\uff0c\u5e76\u4e14RabbitMQ\u53ef\u4ee5\u81ea\u7531\u5220\u9664\u5b83\u3002 \u5982\u679c\u4e00\u4e2a\u4f7f\u7528\u8005\u6b7b\u4e86(\u5b83\u7684\u901a\u9053\u88ab\u5173\u95ed\uff0c\u8fde\u63a5\u88ab\u5173\u95ed\uff0c\u6216\u8005TCP\u8fde\u63a5\u4e22\u5931)\u800c\u6ca1\u6709\u53d1\u9001\u4e00\u4e2aack, RabbitMQ\u5c06\u4f1a\u7406\u89e3\u4e00\u4e2a\u6d88\u606f\u6ca1\u6709\u88ab\u5b8c\u5168\u5904\u7406\uff0c\u5e76\u5c06\u5b83\u91cd\u65b0\u6392\u961f\u3002 \u8981\u542f\u7528\u624b\u52a8\u786e\u8ba4\u6a21\u5f0f\uff0c\u8bf7\u5c06 noAck \u5c5e\u6027\u8bbe\u7f6e\u4e3a false : options : { urls : [ 'amqp://localhost:5672' ], queue : 'cats_queue' , noAck : false , queueOptions : { durable : false }, }, \u5f53\u624b\u52a8\u4f7f\u7528\u8005\u786e\u8ba4\u88ab\u6253\u5f00\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u4ece\u5de5\u4f5c\u8005\u53d1\u9001\u4e00\u4e2a\u9002\u5f53\u7684\u786e\u8ba4\uff0c\u4ee5\u8868\u660e\u6211\u4eec\u5b8c\u6210\u4e86\u4e00\u4e2a\u4efb\u52a1\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RmqContext ) { const channel = context . getChannelRef (); const originalMsg = context . getMessage (); channel . ack ( originalMsg ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { const channel = context . getChannelRef (); const originalMsg = context . getMessage (); channel . ack ( originalMsg ); } \u8bb0\u5f55\u6784\u5efa \u00b6 \u8981\u914d\u7f6e\u6d88\u606f\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 RmqRecordBuilder \u7c7b(\u6ce8\u610f:\u8fd9\u5bf9\u4e8e\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d41\u4e5f\u662f\u53ef\u884c\u7684)\u3002 \u4f8b\u5982\uff0c\u8981\u8bbe\u7f6e headers \u548c priority \u5c5e\u6027\uff0c\u4f7f\u7528 setOptions \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: const message = ':cat:' ; const record = new RmqRecordBuilder ( message ) . setOptions ({ headers : { [ 'x-version' ] : '1.0.0' , }, priority : 3 , }) . build (); this . client . send ( 'replace-emoji' , record ). subscribe (...); info Hint RmqRecordBuilder \u7c7b\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u51fa\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u8bfb\u53d6\u8fd9\u4e9b\u503c\uff0c\u901a\u8fc7\u8bbf\u95ee RmqContext \uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @MessagePattern ( 'replace-emoji' ) replaceEmoji ( @Payload () data : string , @Ctx () context : RmqContext ) : string { const { properties : { headers } } = context . getMessage (); return headers [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'replace-emoji' ) replaceEmoji ( data , context ) { const { properties : { headers } } = context . getMessage (); return headers [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; }","title":"RabbitMQ"},{"location":"microservices/rabbitmq/#rabbitmq","text":"RabbitMQ \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u8f7b\u91cf\u7ea7\u6d88\u606f\u4ee3\u7406\uff0c \u652f\u6301\u591a\u79cd\u6d88\u606f\u534f\u8bae\u3002 \u5b83\u53ef\u4ee5\u90e8\u7f72\u5728\u5206\u5e03\u5f0f\u548c\u8054\u5408\u914d\u7f6e\u4e2d\uff0c\u4ee5\u6ee1\u8db3\u5927\u89c4\u6a21\u3001\u9ad8\u53ef\u7528\u6027\u9700\u6c42\u3002 \u6b64\u5916\uff0c\u5b83\u662f\u90e8\u7f72\u6700\u5e7f\u6cdb\u7684\u6d88\u606f\u4ee3\u7406\uff0c\u5728\u5168\u7403\u8303\u56f4\u5185\u7528\u4e8e\u5c0f\u578b\u521d\u521b\u4f01\u4e1a\u548c\u5927\u578b\u4f01\u4e1a\u3002","title":"RabbitMQ"},{"location":"microservices/rabbitmq/#_1","text":"\u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8e rabbitmq \u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save amqplib amqp-connection-manager","title":"\u5b89\u88c5"},{"location":"microservices/rabbitmq/#_2","text":"\u8981\u4f7f\u7528 RabbitMQ \u4f20\u8f93\u5668\uff0c\u9700\u8981\u5c06\u4ee5\u4e0b\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.RMQ , options : { urls : [ 'amqp://localhost:5672' ], queue : 'cats_queue' , queueOptions : { durable : false }, }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.RMQ , options : { urls : [ 'amqp://localhost:5672' ], queue : 'cats_queue' , queueOptions : { durable : false }, }, }); info Hint Transport \u679a\u4e3e\u662f\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u6982\u8ff0"},{"location":"microservices/rabbitmq/#_3","text":"options \u5c5e\u6027\u7279\u5b9a\u4e8e\u6240\u9009\u7684\u4f20\u8f93\u5668\u3002 RabbitMQ \u4f20\u8f93\u5668\u66b4\u9732\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 urls \u8fde\u63a5url queue \u60a8\u7684\u670d\u52a1\u5668\u5c06\u4fa6\u542c\u7684\u961f\u5217\u540d\u79f0 prefetchCount \u8bbe\u7f6e\u901a\u9053\u7684\u9884\u53d6\u8ba1\u6570 isGlobalPrefetchCount \u542f\u7528\u6bcf\u4e2a\u901a\u9053\u9884\u53d6 noAck \u5982\u679c false \uff0c\u5219\u542f\u7528\u624b\u52a8\u786e\u8ba4\u6a21\u5f0f queueOptions \u989d\u5916\u7684\u961f\u5217\u9009\u9879(\u8bfb\u53d6\u66f4\u591a \u8fd9\u91cc ) socketOptions \u989d\u5916\u7684\u5957\u63a5\u5b57\u9009\u9879(\u8bfb\u53d6\u66f4\u591a \u8fd9\u91cc ) headers \u6807\u9898\u5c06\u968f\u6bcf\u6761\u6d88\u606f\u4e00\u8d77\u53d1\u9001","title":"\u9009\u9879"},{"location":"microservices/rabbitmq/#_4","text":"\u50cf\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u4e00\u6837\uff0c\u521b\u5efaRabbitMQ ClientProxy \u5b9e\u4f8b\u6709 \u51e0\u4e2a\u9009\u9879 \u3002 \u521b\u5efa\u5b9e\u4f8b\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ClientsModule \u3002 \u8981\u4f7f\u7528 ClientsModule \u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u8bf7\u5bfc\u5165\u5b83\u5e76\u4f7f\u7528 register() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5177\u6709\u4e0a\u9762 createMicroservice() \u65b9\u6cd5\u4e2d\u663e\u793a\u7684\u76f8\u540c\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a name \u5c5e\u6027\uff0c\u7528\u4e8e\u4f5c\u4e3a\u6ce8\u5165\u4ee4\u724c\u3002 \u70b9\u51fb \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e ClientsModule \u7684\u4fe1\u606f\u3002 @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.RMQ , options : { urls : [ 'amqp://localhost:5672' ], queue : 'cats_queue' , queueOptions : { durable : false }, }, }, ]), ] ... }) \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u521b\u5efa\u5ba2\u6237\u7aef\u7684\u9009\u9879( ClientProxyFactory \u6216 @Client() )\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u3002","title":"\u5ba2\u6237\u7aef"},{"location":"microservices/rabbitmq/#_5","text":"\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u5f53\u4f7f\u7528 RabbitMQ \u4f20\u8f93\u5668\u65f6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee RmqContext \u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RmqContext ) { console . log ( `Pattern: ${ context . getPattern () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( `Pattern: ${ context . getPattern () } ` ); } info Hint @Payload() , @Ctx() \u548c RmqContext \u4ece @nestjs/microservices \u5305\u5bfc\u5165. \u8981\u8bbf\u95ee\u539f\u59cb\u7684RabbitMQ\u6d88\u606f (with the properties , fields , and content ), \u4f7f\u7528 RmqContext \u5bf9\u8c61\u7684 getMessage() \u65b9\u6cd5, \u5982\u4e0b: @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RmqContext ) { console . log ( context . getMessage ()); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( context . getMessage ()); } \u83b7\u53d6\u5bf9RabbitMQ channel \u7684\u5f15\u7528, \u4f7f\u7528 RmqContext \u5bf9\u8c61\u7684 getChannelRef \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RmqContext ) { console . log ( context . getChannelRef ()); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( context . getChannelRef ()); }","title":"\u4e0a\u4e0b\u6587"},{"location":"microservices/rabbitmq/#_6","text":"\u4e3a\u4e86\u786e\u4fdd\u6d88\u606f\u6c38\u8fdc\u4e0d\u4f1a\u4e22\u5931\uff0cRabbitMQ\u652f\u6301 \u6d88\u606f\u786e\u8ba4 . \u4e00\u4e2a\u786e\u8ba4\u4fe1\u606f\u88ab\u6d88\u8d39\u8005\u53d1\u9001\u56deRabbitMQ\uff0c\u544a\u8bc9RabbitMQ\u5df2\u7ecf\u6536\u5230\u5e76\u5904\u7406\u4e86\u4e00\u4e2a\u7279\u5b9a\u7684\u6d88\u606f\uff0c\u5e76\u4e14RabbitMQ\u53ef\u4ee5\u81ea\u7531\u5220\u9664\u5b83\u3002 \u5982\u679c\u4e00\u4e2a\u4f7f\u7528\u8005\u6b7b\u4e86(\u5b83\u7684\u901a\u9053\u88ab\u5173\u95ed\uff0c\u8fde\u63a5\u88ab\u5173\u95ed\uff0c\u6216\u8005TCP\u8fde\u63a5\u4e22\u5931)\u800c\u6ca1\u6709\u53d1\u9001\u4e00\u4e2aack, RabbitMQ\u5c06\u4f1a\u7406\u89e3\u4e00\u4e2a\u6d88\u606f\u6ca1\u6709\u88ab\u5b8c\u5168\u5904\u7406\uff0c\u5e76\u5c06\u5b83\u91cd\u65b0\u6392\u961f\u3002 \u8981\u542f\u7528\u624b\u52a8\u786e\u8ba4\u6a21\u5f0f\uff0c\u8bf7\u5c06 noAck \u5c5e\u6027\u8bbe\u7f6e\u4e3a false : options : { urls : [ 'amqp://localhost:5672' ], queue : 'cats_queue' , noAck : false , queueOptions : { durable : false }, }, \u5f53\u624b\u52a8\u4f7f\u7528\u8005\u786e\u8ba4\u88ab\u6253\u5f00\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u4ece\u5de5\u4f5c\u8005\u53d1\u9001\u4e00\u4e2a\u9002\u5f53\u7684\u786e\u8ba4\uff0c\u4ee5\u8868\u660e\u6211\u4eec\u5b8c\u6210\u4e86\u4e00\u4e2a\u4efb\u52a1\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RmqContext ) { const channel = context . getChannelRef (); const originalMsg = context . getMessage (); channel . ack ( originalMsg ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { const channel = context . getChannelRef (); const originalMsg = context . getMessage (); channel . ack ( originalMsg ); }","title":"\u6d88\u606f\u786e\u8ba4"},{"location":"microservices/rabbitmq/#_7","text":"\u8981\u914d\u7f6e\u6d88\u606f\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 RmqRecordBuilder \u7c7b(\u6ce8\u610f:\u8fd9\u5bf9\u4e8e\u57fa\u4e8e\u4e8b\u4ef6\u7684\u6d41\u4e5f\u662f\u53ef\u884c\u7684)\u3002 \u4f8b\u5982\uff0c\u8981\u8bbe\u7f6e headers \u548c priority \u5c5e\u6027\uff0c\u4f7f\u7528 setOptions \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: const message = ':cat:' ; const record = new RmqRecordBuilder ( message ) . setOptions ({ headers : { [ 'x-version' ] : '1.0.0' , }, priority : 3 , }) . build (); this . client . send ( 'replace-emoji' , record ). subscribe (...); info Hint RmqRecordBuilder \u7c7b\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u51fa\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u8bfb\u53d6\u8fd9\u4e9b\u503c\uff0c\u901a\u8fc7\u8bbf\u95ee RmqContext \uff0c\u5982\u4e0b\u6240\u793a: @ @filename () @MessagePattern ( 'replace-emoji' ) replaceEmoji ( @Payload () data : string , @Ctx () context : RmqContext ) : string { const { properties : { headers } } = context . getMessage (); return headers [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'replace-emoji' ) replaceEmoji ( data , context ) { const { properties : { headers } } = context . getMessage (); return headers [ 'x-version' ] === '1.0.0' ? '\ud83d\udc31' : '\ud83d\udc08' ; }","title":"\u8bb0\u5f55\u6784\u5efa"},{"location":"microservices/redis/","text":"Redis \u00b6 Redis \u4f20\u8f93\u5668\u5b9e\u73b0\u4e86\u53d1\u5e03/\u8ba2\u9605\u6d88\u606f\u4f20\u9012\u6a21\u5f0f\uff0c\u5e76\u5229\u7528\u4e86 Redis \u7684 Pub/Sub \u7279\u6027\u3002 \u5df2\u53d1\u5e03\u7684\u6d88\u606f\u5728\u901a\u9053\u4e2d\u5206\u7c7b\uff0c\u800c\u4e0d\u77e5\u9053\u54ea\u4e9b\u8ba2\u9605\u8005(\u5982\u679c\u6709\u7684\u8bdd)\u6700\u7ec8\u5c06\u63a5\u6536\u8be5\u6d88\u606f\u3002 \u6bcf\u4e2a\u5fae\u670d\u52a1\u53ef\u4ee5\u8ba2\u9605\u4efb\u610f\u6570\u91cf\u7684\u9891\u9053\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u540c\u65f6\u8ba2\u9605\u591a\u4e2a\u9891\u9053\u3002 \u901a\u8fc7\u901a\u9053\u4ea4\u6362\u7684\u6d88\u606f\u662f \u5373\u53d1\u5373\u5fd8 \uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u53d1\u5e03\u4e86\u6d88\u606f\uff0c\u5e76\u4e14\u6ca1\u6709\u5bf9\u8be5\u6d88\u606f\u611f\u5174\u8da3\u7684\u8ba2\u9605\u8005\uff0c\u5219\u8be5\u6d88\u606f\u5c06\u88ab\u5220\u9664\u4e14\u65e0\u6cd5\u6062\u590d\u3002 \u56e0\u6b64\uff0c\u60a8\u4e0d\u80fd\u4fdd\u8bc1\u6d88\u606f\u6216\u4e8b\u4ef6\u5c06\u7531\u81f3\u5c11\u4e00\u4e2a\u670d\u52a1\u5904\u7406\u3002 \u5355\u4e2a\u6d88\u606f\u53ef\u4ee5\u7531\u591a\u4e2a\u8ba2\u9605\u8005\u8ba2\u9605(\u548c\u63a5\u6536)\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8eredis\u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save redis \u6982\u8ff0 \u00b6 \u8981\u4f7f\u7528Redis\u4f20\u8f93\u5668\uff0c\u5c06\u4ee5\u4e0b\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.REDIS , options : { url : 'redis://localhost:6379' , }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.REDIS , options : { url : 'redis://localhost:6379' , }, }); info Hint Transport \u679a\u4e3e\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u3002 \u9009\u9879 \u00b6 options \u5c5e\u6027\u662f\u7279\u5b9a\u4e8e\u6240\u9009\u4f20\u8f93\u5668\u7684\u3002 Redis \u4f20\u8f93\u5668\u516c\u5f00\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 url \u8fde\u63a5url retryAttempts \u91cd\u8bd5\u6d88\u606f\u7684\u6b21\u6570 (\u9ed8\u8ba4: 0 ) retryDelay \u6d88\u606f\u91cd\u8bd5\u5c1d\u8bd5\u4e4b\u95f4\u7684\u5ef6\u8fdf (ms) (\u9ed8\u8ba4: 0 ) \u5b98\u65b9 redis \u5ba2\u6237\u7aef\u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u4e5f\u7531\u8fd9\u4e2a\u4f20\u8f93\u5668\u652f\u6301\u3002 \u5ba2\u6237\u7aef \u00b6 \u50cf\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u4e00\u6837\uff0c\u4f60\u6709 \u51e0\u4e2a\u9009\u9879 \u6765\u521b\u5efa Redis ClientProxy \u5b9e\u4f8b\u3002 \u521b\u5efa\u5b9e\u4f8b\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ClientsModule \u3002 \u8981\u4f7f\u7528 ClientsModule \u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u8bf7\u5bfc\u5165\u5b83\u5e76\u4f7f\u7528 register() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5177\u6709\u4e0a\u9762 createMicroservice() \u65b9\u6cd5\u4e2d\u663e\u793a\u7684\u76f8\u540c\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a name \u5c5e\u6027\uff0c\u7528\u4e8e\u4f5c\u4e3a\u6ce8\u5165\u4ee4\u724c\u3002 \u70b9\u51fb \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e ClientsModule \u7684\u4fe1\u606f\u3002 @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.REDIS , options : { url : 'redis://localhost:6379' , } }, ]), ] ... }) \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u521b\u5efa\u5ba2\u6237\u7aef\u7684\u9009\u9879( ClientProxyFactory \u6216 @Client() )\u3002\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u3002 \u4e0a\u4e0b\u6587 \u00b6 \u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002\u5f53\u4f7f\u7528Redis\u4f20\u8f93\u5668\u65f6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee RedisContext \u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RedisContext ) { console . log ( `Channel: ${ context . getChannel () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( `Channel: ${ context . getChannel () } ` ); } info Hint @Payload() , @Ctx() \u548c RedisContext \u662f\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684\u3002","title":"Redis"},{"location":"microservices/redis/#redis","text":"Redis \u4f20\u8f93\u5668\u5b9e\u73b0\u4e86\u53d1\u5e03/\u8ba2\u9605\u6d88\u606f\u4f20\u9012\u6a21\u5f0f\uff0c\u5e76\u5229\u7528\u4e86 Redis \u7684 Pub/Sub \u7279\u6027\u3002 \u5df2\u53d1\u5e03\u7684\u6d88\u606f\u5728\u901a\u9053\u4e2d\u5206\u7c7b\uff0c\u800c\u4e0d\u77e5\u9053\u54ea\u4e9b\u8ba2\u9605\u8005(\u5982\u679c\u6709\u7684\u8bdd)\u6700\u7ec8\u5c06\u63a5\u6536\u8be5\u6d88\u606f\u3002 \u6bcf\u4e2a\u5fae\u670d\u52a1\u53ef\u4ee5\u8ba2\u9605\u4efb\u610f\u6570\u91cf\u7684\u9891\u9053\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u540c\u65f6\u8ba2\u9605\u591a\u4e2a\u9891\u9053\u3002 \u901a\u8fc7\u901a\u9053\u4ea4\u6362\u7684\u6d88\u606f\u662f \u5373\u53d1\u5373\u5fd8 \uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u53d1\u5e03\u4e86\u6d88\u606f\uff0c\u5e76\u4e14\u6ca1\u6709\u5bf9\u8be5\u6d88\u606f\u611f\u5174\u8da3\u7684\u8ba2\u9605\u8005\uff0c\u5219\u8be5\u6d88\u606f\u5c06\u88ab\u5220\u9664\u4e14\u65e0\u6cd5\u6062\u590d\u3002 \u56e0\u6b64\uff0c\u60a8\u4e0d\u80fd\u4fdd\u8bc1\u6d88\u606f\u6216\u4e8b\u4ef6\u5c06\u7531\u81f3\u5c11\u4e00\u4e2a\u670d\u52a1\u5904\u7406\u3002 \u5355\u4e2a\u6d88\u606f\u53ef\u4ee5\u7531\u591a\u4e2a\u8ba2\u9605\u8005\u8ba2\u9605(\u548c\u63a5\u6536)\u3002","title":"Redis"},{"location":"microservices/redis/#_1","text":"\u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8eredis\u7684\u5fae\u670d\u52a1\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save redis","title":"\u5b89\u88c5"},{"location":"microservices/redis/#_2","text":"\u8981\u4f7f\u7528Redis\u4f20\u8f93\u5668\uff0c\u5c06\u4ee5\u4e0b\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 createMicroservice() \u65b9\u6cd5: @ @filename ( main ) const app = await NestFactory . createMicroservice < MicroserviceOptions > ( AppModule , { transport : Transport.REDIS , options : { url : 'redis://localhost:6379' , }, }); @ @switch const app = await NestFactory . createMicroservice ( AppModule , { transport : Transport.REDIS , options : { url : 'redis://localhost:6379' , }, }); info Hint Transport \u679a\u4e3e\u4ece @nestjs/microservices \u5305\u4e2d\u5bfc\u5165\u3002","title":"\u6982\u8ff0"},{"location":"microservices/redis/#_3","text":"options \u5c5e\u6027\u662f\u7279\u5b9a\u4e8e\u6240\u9009\u4f20\u8f93\u5668\u7684\u3002 Redis \u4f20\u8f93\u5668\u516c\u5f00\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5c5e\u6027\u3002 url \u8fde\u63a5url retryAttempts \u91cd\u8bd5\u6d88\u606f\u7684\u6b21\u6570 (\u9ed8\u8ba4: 0 ) retryDelay \u6d88\u606f\u91cd\u8bd5\u5c1d\u8bd5\u4e4b\u95f4\u7684\u5ef6\u8fdf (ms) (\u9ed8\u8ba4: 0 ) \u5b98\u65b9 redis \u5ba2\u6237\u7aef\u652f\u6301\u7684\u6240\u6709\u5c5e\u6027\u4e5f\u7531\u8fd9\u4e2a\u4f20\u8f93\u5668\u652f\u6301\u3002","title":"\u9009\u9879"},{"location":"microservices/redis/#_4","text":"\u50cf\u5176\u4ed6\u5fae\u670d\u52a1\u4f20\u8f93\u5668\u4e00\u6837\uff0c\u4f60\u6709 \u51e0\u4e2a\u9009\u9879 \u6765\u521b\u5efa Redis ClientProxy \u5b9e\u4f8b\u3002 \u521b\u5efa\u5b9e\u4f8b\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 ClientsModule \u3002 \u8981\u4f7f\u7528 ClientsModule \u521b\u5efa\u4e00\u4e2a\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u8bf7\u5bfc\u5165\u5b83\u5e76\u4f7f\u7528 register() \u65b9\u6cd5\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5177\u6709\u4e0a\u9762 createMicroservice() \u65b9\u6cd5\u4e2d\u663e\u793a\u7684\u76f8\u540c\u5c5e\u6027\uff0c\u4ee5\u53ca\u4e00\u4e2a name \u5c5e\u6027\uff0c\u7528\u4e8e\u4f5c\u4e3a\u6ce8\u5165\u4ee4\u724c\u3002 \u70b9\u51fb \u8fd9\u91cc \u9605\u8bfb\u66f4\u591a\u5173\u4e8e ClientsModule \u7684\u4fe1\u606f\u3002 @Module ({ imports : [ ClientsModule . register ([ { name : 'MATH_SERVICE' , transport : Transport.REDIS , options : { url : 'redis://localhost:6379' , } }, ]), ] ... }) \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u521b\u5efa\u5ba2\u6237\u7aef\u7684\u9009\u9879( ClientProxyFactory \u6216 @Client() )\u3002\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u9605\u8bfb\u3002","title":"\u5ba2\u6237\u7aef"},{"location":"microservices/redis/#_5","text":"\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u8bbf\u95ee\u5173\u4e8e\u4f20\u5165\u8bf7\u6c42\u7684\u66f4\u591a\u4fe1\u606f\u3002\u5f53\u4f7f\u7528Redis\u4f20\u8f93\u5668\u65f6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee RedisContext \u5bf9\u8c61\u3002 @ @filename () @MessagePattern ( 'notifications' ) getNotifications ( @Payload () data : number [], @Ctx () context : RedisContext ) { console . log ( `Channel: ${ context . getChannel () } ` ); } @ @switch @Bind ( Payload (), Ctx ()) @MessagePattern ( 'notifications' ) getNotifications ( data , context ) { console . log ( `Channel: ${ context . getChannel () } ` ); } info Hint @Payload() , @Ctx() \u548c RedisContext \u662f\u4ece @nestjs/microservices \u5305\u5bfc\u5165\u7684\u3002","title":"\u4e0a\u4e0b\u6587"},{"location":"openapi/cli-plugin/","text":"CLI \u63d2\u4ef6 \u00b6 TypeScript \u7684\u5143\u6570\u636e\u53cd\u5c04\u7cfb\u7edf\u6709\u51e0\u4e2a\u9650\u5236\uff0c\u6bd4\u5982\uff0c\u5b83\u4e0d\u53ef\u80fd\u786e\u5b9a\u4e00\u4e2a\u7c7b\u7531\u54ea\u4e9b\u5c5e\u6027\u7ec4\u6210\uff0c\u6216\u8005\u8bc6\u522b\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5c5e\u6027\u662f\u53ef\u9009\u7684\u8fd8\u662f\u5fc5\u9700\u7684\u3002 \u4f46\u662f\uff0c\u5176\u4e2d\u4e00\u4e9b\u7ea6\u675f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u89e3\u51b3\u3002 Nest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u589e\u5f3a TypeScript \u7f16\u8bd1\u8fc7\u7a0b\u7684\u63d2\u4ef6\uff0c\u4ee5\u51cf\u5c11\u6240\u9700\u6837\u677f\u4ee3\u7801\u7684\u6570\u91cf\u3002 info Hint \u8fd9\u4e2a\u63d2\u4ef6\u662f opt-in \u3002 \u5982\u679c\u613f\u610f\uff0c\u53ef\u4ee5\u624b\u52a8\u58f0\u660e\u6240\u6709\u7684 decorator\uff0c\u6216\u8005\u53ea\u5728\u9700\u8981\u5b83\u4eec\u7684\u5730\u65b9\u58f0\u660e\u7279\u5b9a\u7684 decorator\u3002 \u6982\u8ff0 \u00b6 Swagger \u63d2\u4ef6\u5c06\u81ea\u52a8: \u7528 @ApiProperty \u6ce8\u91ca\u6240\u6709\u7684 DTO \u5c5e\u6027\uff0c\u9664\u975e\u4f7f\u7528 @ApiHideProperty \u6839\u636e\u95ee\u53f7\u8bbe\u7f6e\u201c required \u201d\u5c5e\u6027(\u4f8b\u5982: name?:string \u5c06\u8bbe\u7f6e required:false ) \u6839\u636e\u7c7b\u578b\u8bbe\u7f6e type \u6216 enum \u5c5e\u6027(\u4e5f\u652f\u6301\u6570\u7ec4) \u6839\u636e\u6307\u5b9a\u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e default \u5c5e\u6027 \u8bbe\u7f6e\u51e0\u4e2a\u57fa\u4e8e class-validator \u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u89c4\u5219(\u5982\u679c classValidatorShim \u8bbe\u7f6e\u4e3a true ) \u5411\u6bcf\u4e2a\u7aef\u70b9\u6dfb\u52a0\u4e00\u4e2a\u5177\u6709\u9002\u5f53\u72b6\u6001\u548c type \u7684\u54cd\u5e94\u88c5\u9970\u5668(\u54cd\u5e94\u6a21\u578b) \u57fa\u4e8e\u6ce8\u91ca\u751f\u6210\u5c5e\u6027\u548c\u7aef\u70b9\u7684\u63cf\u8ff0(\u5982\u679c introspeccomments \u8bbe\u7f6e\u4e3a true ) \u6839\u636e\u6ce8\u91ca\u4e3a\u5c5e\u6027\u751f\u6210\u793a\u4f8b\u503c(\u5982\u679c introspeccomments \u8bbe\u7f6e\u4e3a true ) \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u6587\u4ef6\u540d \u5fc5\u987b \u4ee5\u4e0b\u540e\u7f00\u4e4b\u4e00: ['.dto.ts'\uff0c '.entity.ts'] (\u4f8b\u5982\uff0c create-user.dto.ts )\uff0c\u624d\u80fd\u88ab\u63d2\u4ef6\u5206\u6790\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u540e\u7f00\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a dtoFileNameSuffix \u9009\u9879\u6765\u8c03\u6574\u63d2\u4ef6\u7684\u884c\u4e3a(\u89c1\u4e0b\u6587)\u3002 \u4ee5\u524d\uff0c\u5982\u679c\u4f60\u60f3\u63d0\u4f9b\u4e0e Swagger UI \u7684\u4ea4\u4e92\u4f53\u9a8c\uff0c\u4f60\u5fc5\u987b\u590d\u5236\u5927\u91cf\u7684\u4ee3\u7801\uff0c\u8ba9\u5305\u77e5\u9053\u4f60\u7684\u6a21\u578b/\u7ec4\u4ef6\u5e94\u8be5\u5982\u4f55\u5728\u89c4\u8303\u4e2d\u58f0\u660e\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684 CreateUserDto \u7c7b: export class CreateUserDto { @ApiProperty () email : string ; @ApiProperty () password : string ; @ApiProperty ({ enum : RoleEnum , default : [], isArray : true }) roles : RoleEnum [] = []; @ApiProperty ({ required : false , default : true }) isEnabled? : boolean = true ; } \u867d\u7136\u5bf9\u4e8e\u4e2d\u7b49\u89c4\u6a21\u7684\u9879\u76ee\u6765\u8bf4\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5927\u95ee\u9898\uff0c\u4f46\u662f\u4e00\u65e6\u4f60\u6709\u4e00\u5927\u5806\u7684\u7c7b\uff0c\u5b83\u5c31\u4f1a\u53d8\u5f97\u5197\u957f\u5e76\u4e14\u96be\u4ee5\u7ef4\u62a4\u3002 \u901a\u8fc7\u542f\u7528 Swagger \u63d2\u4ef6\uff0c\u4e0a\u9762\u7684\u7c7b\u5b9a\u4e49\u53ef\u4ee5\u7b80\u5355\u5730\u58f0\u660e: export class CreateUserDto { email : string ; password : string ; roles : RoleEnum [] = []; isEnabled? : boolean = true ; } \u8be5\u63d2\u4ef6\u6839\u636e \u62bd\u8c61\u8bed\u6cd5\u6811 \u52a8\u6001\u6dfb\u52a0\u9002\u5f53\u7684\u88c5\u9970\u5668\u3002 \u8fd9\u6837\u4f60\u5c31\u4e0d\u5fc5\u5728\u4ee3\u7801\u4e2d\u7ea0\u7ed3\u4e8e @ApiProperty \u88c5\u9970\u5668\u4e86\u3002 info Hint \u63d2\u4ef6\u4f1a\u81ea\u52a8\u751f\u6210\u4efb\u4f55\u4e22\u5931\u7684 swagger \u5c5e\u6027\uff0c\u4f46\u5982\u679c\u4f60\u9700\u8981\u91cd\u5199\u5b83\u4eec\uff0c\u4f60\u53ea\u9700\u901a\u8fc7 @ApiProperty() \u663e\u5f0f\u5730\u8bbe\u7f6e\u5b83\u4eec\u3002 \u6ce8\u91ca\u5185\u7701 \u00b6 \u542f\u7528\u6ce8\u91ca\u5185\u7701\u529f\u80fd\u540e\uff0cCLI \u63d2\u4ef6\u5c06\u6839\u636e\u6ce8\u91ca\u751f\u6210\u63cf\u8ff0\u548c\u5c5e\u6027\u793a\u4f8b\u503c\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a roles \u5c5e\u6027\u793a\u4f8b: /** * A list of user's roles * @example ['admin'] */ @ApiProperty ({ description : `A list of user's roles` , example : [ 'admin' ], }) roles : RoleEnum [] = []; \u63cf\u8ff0\u548c\u793a\u4f8b\u503c\u90fd\u5fc5\u987b\u91cd\u590d\u3002 \u542f\u7528 introspectComments \u540e\uff0cCLI \u63d2\u4ef6\u53ef\u4ee5\u63d0\u53d6\u8fd9\u4e9b\u6ce8\u91ca\uff0c\u5e76\u81ea\u52a8\u4e3a\u5c5e\u6027\u63d0\u4f9b\u63cf\u8ff0(\u5982\u679c\u5b9a\u4e49\u4e86\u793a\u4f8b)\u3002 \u73b0\u5728\uff0c\u4e0a\u9762\u7684\u5c5e\u6027\u53ef\u4ee5\u7b80\u5355\u5730\u58f0\u660e\u5982\u4e0b: /** * A list of user's roles * @example ['admin'] */ roles : RoleEnum [] = []; \u6709 dtoKeyOfComment \u548c controllerKeyOfComment \u63d2\u4ef6\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u5b9a\u5236\u63d2\u4ef6\u5c06\u5982\u4f55\u5206\u522b\u4e3a ApiProperty \u548c ApiOperation \u88c5\u9970\u5668\u8bbe\u7f6e\u503c\u3002 \u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50: export class SomeController { /** * Create some resource */ @Post () create () {} } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u9009\u9879\u8bbe\u7f6e\u4e3a \"description\" \u3002 \u8fd9\u610f\u5473\u7740\u63d2\u4ef6\u5c06 \"Create some resource\" \u5206\u914d\u7ed9 ApiOperation \u64cd\u4f5c\u7b26\u4e0a\u7684 description \u952e\u3002 \u50cf\u8fd9\u6837: @ApiOperation ({ description : \"Create some resource\" }) info Hint \u5bf9\u4e8e\u6a21\u578b\uff0c\u540c\u6837\u7684\u903b\u8f91\u9002\u7528\u4e8e ApiProperty \u88c5\u9970\u5668\u3002 \u4f7f\u7528 CLI \u63d2\u4ef6 \u00b6 \u8981\u542f\u7528\u63d2\u4ef6\uff0c\u6253\u5f00 nest-cli.json (\u5982\u679c\u4f60\u4f7f\u7528 Nest CLI )\uff0c\u5e76\u6dfb\u52a0\u4ee5\u4e0b plugins \u914d\u7f6e: { \"collection\" : \"@nestjs/schematics\" , \"sourceRoot\" : \"src\" , \"compilerOptions\" : { \"plugins\" : [ \"@nestjs/swagger\" ] } } \u4f60\u53ef\u4ee5\u4f7f\u7528 options \u5c5e\u6027\u6765\u5b9a\u5236\u63d2\u4ef6\u7684\u884c\u4e3a\u3002 \"plugins\" : [ { \"name\" : \"@nestjs/swagger\" , \"options\" : { \"classValidatorShim\" : false , \"introspectComments\" : true } } ] options \u5c5e\u6027\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u63a5\u53e3: export interface PluginOptions { dtoFileNameSuffix? : string []; controllerFileNameSuffix? : string []; classValidatorShim? : boolean ; dtoKeyOfComment? : string ; controllerKeyOfComment? : string ; introspectComments? : boolean ; } \u9009\u9879 \u9ed8\u8ba4 \u63cf\u8ff0 dtoFileNameSuffix ['.dto.ts', '.entity.ts'] DTO(\u6570\u636e\u4f20\u8f93\u5bf9\u8c61)\u6587\u4ef6\u540e\u7f00 controllerFileNameSuffix .controller.ts \u63a7\u5236\u5668\u6587\u4ef6\u540e\u7f00 classValidatorShim true \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u6a21\u5757\u5c06\u91cd\u7528 `class-validator` \u9a8c\u8bc1\u88c5\u9970\u5668(\u4f8b\u5982: `@Max(10)` \u5c06\u5728\u6a21\u5f0f\u5b9a\u4e49\u4e2d\u6dfb\u52a0 `max: 10`) dtoKeyOfComment 'description' \u5c5e\u6027\u952e\u7528\u6765\u8bbe\u7f6e`ApiProperty`\u4e0a\u7684\u6ce8\u91ca\u6587\u672c\u3002 controllerKeyOfComment 'description' \u5728`ApiOperation`\u4e0a\u8bbe\u7f6e\u6ce8\u91ca\u6587\u672c\u7684\u5c5e\u6027\u952e\u3002 introspectComments false \u5982\u679c\u8bbe\u7f6e\u4e3a`true`\uff0c\u63d2\u4ef6\u5c06\u6839\u636e\u6ce8\u91ca\u751f\u6210\u5c5e\u6027\u7684\u63cf\u8ff0\u548c\u793a\u4f8b\u503c \u5982\u679c\u4f60\u4e0d\u4f7f\u7528 CLI\uff0c\u800c\u662f\u6709\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 webpack \u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u7ed3\u5408 ts-loader \u4f7f\u7528\u8fd9\u4e2a\u63d2\u4ef6: getCustomTransformers : ( program : any ) => ({ before : [ require ( '@nestjs/swagger/plugin' ). before ({}, program )] }), \u4e0e ts-jest \u96c6\u6210(\u7aef\u5230\u7aef\u6d4b\u8bd5) \u00b6 \u8981\u8fd0\u884c\u7aef\u5230\u7aef\u6d4b\u8bd5\uff0c ts-jest \u4f1a\u5728\u5185\u5b58\u4e2d\u52a8\u6001\u7f16\u8bd1\u6e90\u4ee3\u7801\u6587\u4ef6\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5b83\u4e0d\u4f7f\u7528 Nest CLI \u7f16\u8bd1\u5668\uff0c\u4e5f\u4e0d\u5e94\u7528\u4efb\u4f55\u63d2\u4ef6\u6216\u6267\u884c AST \u8f6c\u6362\u3002 \u8981\u542f\u7528\u63d2\u4ef6\uff0c\u8bf7\u5728 e2e \u6d4b\u8bd5\u76ee\u5f55\u4e2d\u521b\u5efa\u4ee5\u4e0b\u6587\u4ef6: const transformer = require ( '@nestjs/swagger/plugin' ); module . exports . name = 'nestjs-swagger-transformer' ; // you should change the version number anytime you change the configuration below - otherwise, jest will not detect changes module . exports . version = 1 ; module . exports . factory = ( cs ) => { return transformer . before ( { // @nestjs/swagger/plugin options (can be empty) }, cs . program , // \"cs.tsCompiler.program\" for older versions of Jest (<= v27) ); }; \u5b8c\u6210\u8fd9\u4e9b\u4e4b\u540e\uff0c\u5728 jest \u914d\u7f6e\u6587\u4ef6\u4e2d\u5bfc\u5165 AST \u8f6c\u6362\u5668\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b(\u5728 starter \u5e94\u7528\u7a0b\u5e8f\u4e2d)\uff0ce2e \u6d4b\u8bd5\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e test \u6587\u4ef6\u5939\u4e0b\uff0c\u547d\u540d\u4e3a jest-e2e.json \u3002 { ... // other configuration \"globals\" : { \"ts-jest\" : { \"astTransformers\" : { \"before\" : [ \"<path to the file created above>\" ], } } } } \u201cjest\u201d\u6545\u969c\u6392\u9664(\u7aef\u5230\u7aef\u6d4b\u8bd5) \u00b6 In case jest does not seem to pick up your configuration changes, it's possible that Jest has already cached the build result. To apply the new configuration, you need to clear Jest's cache directory. To clear the cache directory, run the following command in your NestJS project folder: $ npx jest --clearCache In case the automatic cache clearance fails, you can still manually remove the cache folder with the following commands: # Find jest cache directory (usually /tmp/jest_rs) # by running the following command in your NestJS project root $ npx jest --showConfig | grep cache # ex result: # \"cache\": true, # \"cacheDirectory\": \"/tmp/jest_rs\" # Remove or empty the Jest cache directory $ rm -rf <cacheDirectory value> # ex: # rm -rf /tmp/jest_rs","title":"CLI \u63d2\u4ef6"},{"location":"openapi/cli-plugin/#cli","text":"TypeScript \u7684\u5143\u6570\u636e\u53cd\u5c04\u7cfb\u7edf\u6709\u51e0\u4e2a\u9650\u5236\uff0c\u6bd4\u5982\uff0c\u5b83\u4e0d\u53ef\u80fd\u786e\u5b9a\u4e00\u4e2a\u7c7b\u7531\u54ea\u4e9b\u5c5e\u6027\u7ec4\u6210\uff0c\u6216\u8005\u8bc6\u522b\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5c5e\u6027\u662f\u53ef\u9009\u7684\u8fd8\u662f\u5fc5\u9700\u7684\u3002 \u4f46\u662f\uff0c\u5176\u4e2d\u4e00\u4e9b\u7ea6\u675f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u89e3\u51b3\u3002 Nest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u589e\u5f3a TypeScript \u7f16\u8bd1\u8fc7\u7a0b\u7684\u63d2\u4ef6\uff0c\u4ee5\u51cf\u5c11\u6240\u9700\u6837\u677f\u4ee3\u7801\u7684\u6570\u91cf\u3002 info Hint \u8fd9\u4e2a\u63d2\u4ef6\u662f opt-in \u3002 \u5982\u679c\u613f\u610f\uff0c\u53ef\u4ee5\u624b\u52a8\u58f0\u660e\u6240\u6709\u7684 decorator\uff0c\u6216\u8005\u53ea\u5728\u9700\u8981\u5b83\u4eec\u7684\u5730\u65b9\u58f0\u660e\u7279\u5b9a\u7684 decorator\u3002","title":"CLI \u63d2\u4ef6"},{"location":"openapi/cli-plugin/#_1","text":"Swagger \u63d2\u4ef6\u5c06\u81ea\u52a8: \u7528 @ApiProperty \u6ce8\u91ca\u6240\u6709\u7684 DTO \u5c5e\u6027\uff0c\u9664\u975e\u4f7f\u7528 @ApiHideProperty \u6839\u636e\u95ee\u53f7\u8bbe\u7f6e\u201c required \u201d\u5c5e\u6027(\u4f8b\u5982: name?:string \u5c06\u8bbe\u7f6e required:false ) \u6839\u636e\u7c7b\u578b\u8bbe\u7f6e type \u6216 enum \u5c5e\u6027(\u4e5f\u652f\u6301\u6570\u7ec4) \u6839\u636e\u6307\u5b9a\u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e default \u5c5e\u6027 \u8bbe\u7f6e\u51e0\u4e2a\u57fa\u4e8e class-validator \u88c5\u9970\u5668\u7684\u9a8c\u8bc1\u89c4\u5219(\u5982\u679c classValidatorShim \u8bbe\u7f6e\u4e3a true ) \u5411\u6bcf\u4e2a\u7aef\u70b9\u6dfb\u52a0\u4e00\u4e2a\u5177\u6709\u9002\u5f53\u72b6\u6001\u548c type \u7684\u54cd\u5e94\u88c5\u9970\u5668(\u54cd\u5e94\u6a21\u578b) \u57fa\u4e8e\u6ce8\u91ca\u751f\u6210\u5c5e\u6027\u548c\u7aef\u70b9\u7684\u63cf\u8ff0(\u5982\u679c introspeccomments \u8bbe\u7f6e\u4e3a true ) \u6839\u636e\u6ce8\u91ca\u4e3a\u5c5e\u6027\u751f\u6210\u793a\u4f8b\u503c(\u5982\u679c introspeccomments \u8bbe\u7f6e\u4e3a true ) \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u6587\u4ef6\u540d \u5fc5\u987b \u4ee5\u4e0b\u540e\u7f00\u4e4b\u4e00: ['.dto.ts'\uff0c '.entity.ts'] (\u4f8b\u5982\uff0c create-user.dto.ts )\uff0c\u624d\u80fd\u88ab\u63d2\u4ef6\u5206\u6790\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u540e\u7f00\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a dtoFileNameSuffix \u9009\u9879\u6765\u8c03\u6574\u63d2\u4ef6\u7684\u884c\u4e3a(\u89c1\u4e0b\u6587)\u3002 \u4ee5\u524d\uff0c\u5982\u679c\u4f60\u60f3\u63d0\u4f9b\u4e0e Swagger UI \u7684\u4ea4\u4e92\u4f53\u9a8c\uff0c\u4f60\u5fc5\u987b\u590d\u5236\u5927\u91cf\u7684\u4ee3\u7801\uff0c\u8ba9\u5305\u77e5\u9053\u4f60\u7684\u6a21\u578b/\u7ec4\u4ef6\u5e94\u8be5\u5982\u4f55\u5728\u89c4\u8303\u4e2d\u58f0\u660e\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684 CreateUserDto \u7c7b: export class CreateUserDto { @ApiProperty () email : string ; @ApiProperty () password : string ; @ApiProperty ({ enum : RoleEnum , default : [], isArray : true }) roles : RoleEnum [] = []; @ApiProperty ({ required : false , default : true }) isEnabled? : boolean = true ; } \u867d\u7136\u5bf9\u4e8e\u4e2d\u7b49\u89c4\u6a21\u7684\u9879\u76ee\u6765\u8bf4\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5927\u95ee\u9898\uff0c\u4f46\u662f\u4e00\u65e6\u4f60\u6709\u4e00\u5927\u5806\u7684\u7c7b\uff0c\u5b83\u5c31\u4f1a\u53d8\u5f97\u5197\u957f\u5e76\u4e14\u96be\u4ee5\u7ef4\u62a4\u3002 \u901a\u8fc7\u542f\u7528 Swagger \u63d2\u4ef6\uff0c\u4e0a\u9762\u7684\u7c7b\u5b9a\u4e49\u53ef\u4ee5\u7b80\u5355\u5730\u58f0\u660e: export class CreateUserDto { email : string ; password : string ; roles : RoleEnum [] = []; isEnabled? : boolean = true ; } \u8be5\u63d2\u4ef6\u6839\u636e \u62bd\u8c61\u8bed\u6cd5\u6811 \u52a8\u6001\u6dfb\u52a0\u9002\u5f53\u7684\u88c5\u9970\u5668\u3002 \u8fd9\u6837\u4f60\u5c31\u4e0d\u5fc5\u5728\u4ee3\u7801\u4e2d\u7ea0\u7ed3\u4e8e @ApiProperty \u88c5\u9970\u5668\u4e86\u3002 info Hint \u63d2\u4ef6\u4f1a\u81ea\u52a8\u751f\u6210\u4efb\u4f55\u4e22\u5931\u7684 swagger \u5c5e\u6027\uff0c\u4f46\u5982\u679c\u4f60\u9700\u8981\u91cd\u5199\u5b83\u4eec\uff0c\u4f60\u53ea\u9700\u901a\u8fc7 @ApiProperty() \u663e\u5f0f\u5730\u8bbe\u7f6e\u5b83\u4eec\u3002","title":"\u6982\u8ff0"},{"location":"openapi/cli-plugin/#_2","text":"\u542f\u7528\u6ce8\u91ca\u5185\u7701\u529f\u80fd\u540e\uff0cCLI \u63d2\u4ef6\u5c06\u6839\u636e\u6ce8\u91ca\u751f\u6210\u63cf\u8ff0\u548c\u5c5e\u6027\u793a\u4f8b\u503c\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a roles \u5c5e\u6027\u793a\u4f8b: /** * A list of user's roles * @example ['admin'] */ @ApiProperty ({ description : `A list of user's roles` , example : [ 'admin' ], }) roles : RoleEnum [] = []; \u63cf\u8ff0\u548c\u793a\u4f8b\u503c\u90fd\u5fc5\u987b\u91cd\u590d\u3002 \u542f\u7528 introspectComments \u540e\uff0cCLI \u63d2\u4ef6\u53ef\u4ee5\u63d0\u53d6\u8fd9\u4e9b\u6ce8\u91ca\uff0c\u5e76\u81ea\u52a8\u4e3a\u5c5e\u6027\u63d0\u4f9b\u63cf\u8ff0(\u5982\u679c\u5b9a\u4e49\u4e86\u793a\u4f8b)\u3002 \u73b0\u5728\uff0c\u4e0a\u9762\u7684\u5c5e\u6027\u53ef\u4ee5\u7b80\u5355\u5730\u58f0\u660e\u5982\u4e0b: /** * A list of user's roles * @example ['admin'] */ roles : RoleEnum [] = []; \u6709 dtoKeyOfComment \u548c controllerKeyOfComment \u63d2\u4ef6\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u5b9a\u5236\u63d2\u4ef6\u5c06\u5982\u4f55\u5206\u522b\u4e3a ApiProperty \u548c ApiOperation \u88c5\u9970\u5668\u8bbe\u7f6e\u503c\u3002 \u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50: export class SomeController { /** * Create some resource */ @Post () create () {} } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u9009\u9879\u8bbe\u7f6e\u4e3a \"description\" \u3002 \u8fd9\u610f\u5473\u7740\u63d2\u4ef6\u5c06 \"Create some resource\" \u5206\u914d\u7ed9 ApiOperation \u64cd\u4f5c\u7b26\u4e0a\u7684 description \u952e\u3002 \u50cf\u8fd9\u6837: @ApiOperation ({ description : \"Create some resource\" }) info Hint \u5bf9\u4e8e\u6a21\u578b\uff0c\u540c\u6837\u7684\u903b\u8f91\u9002\u7528\u4e8e ApiProperty \u88c5\u9970\u5668\u3002","title":"\u6ce8\u91ca\u5185\u7701"},{"location":"openapi/cli-plugin/#cli_1","text":"\u8981\u542f\u7528\u63d2\u4ef6\uff0c\u6253\u5f00 nest-cli.json (\u5982\u679c\u4f60\u4f7f\u7528 Nest CLI )\uff0c\u5e76\u6dfb\u52a0\u4ee5\u4e0b plugins \u914d\u7f6e: { \"collection\" : \"@nestjs/schematics\" , \"sourceRoot\" : \"src\" , \"compilerOptions\" : { \"plugins\" : [ \"@nestjs/swagger\" ] } } \u4f60\u53ef\u4ee5\u4f7f\u7528 options \u5c5e\u6027\u6765\u5b9a\u5236\u63d2\u4ef6\u7684\u884c\u4e3a\u3002 \"plugins\" : [ { \"name\" : \"@nestjs/swagger\" , \"options\" : { \"classValidatorShim\" : false , \"introspectComments\" : true } } ] options \u5c5e\u6027\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u63a5\u53e3: export interface PluginOptions { dtoFileNameSuffix? : string []; controllerFileNameSuffix? : string []; classValidatorShim? : boolean ; dtoKeyOfComment? : string ; controllerKeyOfComment? : string ; introspectComments? : boolean ; } \u9009\u9879 \u9ed8\u8ba4 \u63cf\u8ff0 dtoFileNameSuffix ['.dto.ts', '.entity.ts'] DTO(\u6570\u636e\u4f20\u8f93\u5bf9\u8c61)\u6587\u4ef6\u540e\u7f00 controllerFileNameSuffix .controller.ts \u63a7\u5236\u5668\u6587\u4ef6\u540e\u7f00 classValidatorShim true \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u6a21\u5757\u5c06\u91cd\u7528 `class-validator` \u9a8c\u8bc1\u88c5\u9970\u5668(\u4f8b\u5982: `@Max(10)` \u5c06\u5728\u6a21\u5f0f\u5b9a\u4e49\u4e2d\u6dfb\u52a0 `max: 10`) dtoKeyOfComment 'description' \u5c5e\u6027\u952e\u7528\u6765\u8bbe\u7f6e`ApiProperty`\u4e0a\u7684\u6ce8\u91ca\u6587\u672c\u3002 controllerKeyOfComment 'description' \u5728`ApiOperation`\u4e0a\u8bbe\u7f6e\u6ce8\u91ca\u6587\u672c\u7684\u5c5e\u6027\u952e\u3002 introspectComments false \u5982\u679c\u8bbe\u7f6e\u4e3a`true`\uff0c\u63d2\u4ef6\u5c06\u6839\u636e\u6ce8\u91ca\u751f\u6210\u5c5e\u6027\u7684\u63cf\u8ff0\u548c\u793a\u4f8b\u503c \u5982\u679c\u4f60\u4e0d\u4f7f\u7528 CLI\uff0c\u800c\u662f\u6709\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 webpack \u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u7ed3\u5408 ts-loader \u4f7f\u7528\u8fd9\u4e2a\u63d2\u4ef6: getCustomTransformers : ( program : any ) => ({ before : [ require ( '@nestjs/swagger/plugin' ). before ({}, program )] }),","title":"\u4f7f\u7528 CLI \u63d2\u4ef6"},{"location":"openapi/cli-plugin/#ts-jest","text":"\u8981\u8fd0\u884c\u7aef\u5230\u7aef\u6d4b\u8bd5\uff0c ts-jest \u4f1a\u5728\u5185\u5b58\u4e2d\u52a8\u6001\u7f16\u8bd1\u6e90\u4ee3\u7801\u6587\u4ef6\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5b83\u4e0d\u4f7f\u7528 Nest CLI \u7f16\u8bd1\u5668\uff0c\u4e5f\u4e0d\u5e94\u7528\u4efb\u4f55\u63d2\u4ef6\u6216\u6267\u884c AST \u8f6c\u6362\u3002 \u8981\u542f\u7528\u63d2\u4ef6\uff0c\u8bf7\u5728 e2e \u6d4b\u8bd5\u76ee\u5f55\u4e2d\u521b\u5efa\u4ee5\u4e0b\u6587\u4ef6: const transformer = require ( '@nestjs/swagger/plugin' ); module . exports . name = 'nestjs-swagger-transformer' ; // you should change the version number anytime you change the configuration below - otherwise, jest will not detect changes module . exports . version = 1 ; module . exports . factory = ( cs ) => { return transformer . before ( { // @nestjs/swagger/plugin options (can be empty) }, cs . program , // \"cs.tsCompiler.program\" for older versions of Jest (<= v27) ); }; \u5b8c\u6210\u8fd9\u4e9b\u4e4b\u540e\uff0c\u5728 jest \u914d\u7f6e\u6587\u4ef6\u4e2d\u5bfc\u5165 AST \u8f6c\u6362\u5668\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b(\u5728 starter \u5e94\u7528\u7a0b\u5e8f\u4e2d)\uff0ce2e \u6d4b\u8bd5\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e test \u6587\u4ef6\u5939\u4e0b\uff0c\u547d\u540d\u4e3a jest-e2e.json \u3002 { ... // other configuration \"globals\" : { \"ts-jest\" : { \"astTransformers\" : { \"before\" : [ \"<path to the file created above>\" ], } } } }","title":"\u4e0ets-jest\u96c6\u6210(\u7aef\u5230\u7aef\u6d4b\u8bd5)"},{"location":"openapi/cli-plugin/#jest","text":"In case jest does not seem to pick up your configuration changes, it's possible that Jest has already cached the build result. To apply the new configuration, you need to clear Jest's cache directory. To clear the cache directory, run the following command in your NestJS project folder: $ npx jest --clearCache In case the automatic cache clearance fails, you can still manually remove the cache folder with the following commands: # Find jest cache directory (usually /tmp/jest_rs) # by running the following command in your NestJS project root $ npx jest --showConfig | grep cache # ex result: # \"cache\": true, # \"cacheDirectory\": \"/tmp/jest_rs\" # Remove or empty the Jest cache directory $ rm -rf <cacheDirectory value> # ex: # rm -rf /tmp/jest_rs","title":"\u201cjest\u201d\u6545\u969c\u6392\u9664(\u7aef\u5230\u7aef\u6d4b\u8bd5)"},{"location":"openapi/decorators/","text":"\u4fee\u9970\u5668 \u00b6 \u6240\u6709\u53ef\u7528\u7684 OpenAPI \u88c5\u9970\u5668\u90fd\u6709\u4e00\u4e2a Api \u524d\u7f00\uff0c\u4ee5\u533a\u522b\u4e8e\u6838\u5fc3\u88c5\u9970\u5668\u3002 \u4e0b\u9762\u662f\u5bfc\u51fa\u7684 decorator \u7684\u5b8c\u6574\u5217\u8868\uff0c\u5e76\u6307\u5b9a\u4e86 decorator \u53ef\u4ee5\u5e94\u7528\u7684\u7ea7\u522b\u3002 @ApiOperation() Method @ApiResponse() Method / Controller @ApiProduces() Method / Controller @ApiConsumes() Method / Controller @ApiBearerAuth() Method / Controller @ApiOAuth2() Method / Controller @ApiBasicAuth() Method / Controller @ApiSecurity() Method / Controller @ApiExtraModels() Method / Controller @ApiBody() Method @ApiParam() Method @ApiQuery() Method @ApiHeader() Method / Controller @ApiExcludeEndpoint() Method @ApiTags() Method / Controller @ApiProperty() Model @ApiPropertyOptional() Model @ApiHideProperty() Model @ApiExtension() Method","title":"\u4fee\u9970\u7b26"},{"location":"openapi/decorators/#_1","text":"\u6240\u6709\u53ef\u7528\u7684 OpenAPI \u88c5\u9970\u5668\u90fd\u6709\u4e00\u4e2a Api \u524d\u7f00\uff0c\u4ee5\u533a\u522b\u4e8e\u6838\u5fc3\u88c5\u9970\u5668\u3002 \u4e0b\u9762\u662f\u5bfc\u51fa\u7684 decorator \u7684\u5b8c\u6574\u5217\u8868\uff0c\u5e76\u6307\u5b9a\u4e86 decorator \u53ef\u4ee5\u5e94\u7528\u7684\u7ea7\u522b\u3002 @ApiOperation() Method @ApiResponse() Method / Controller @ApiProduces() Method / Controller @ApiConsumes() Method / Controller @ApiBearerAuth() Method / Controller @ApiOAuth2() Method / Controller @ApiBasicAuth() Method / Controller @ApiSecurity() Method / Controller @ApiExtraModels() Method / Controller @ApiBody() Method @ApiParam() Method @ApiQuery() Method @ApiHeader() Method / Controller @ApiExcludeEndpoint() Method @ApiTags() Method / Controller @ApiProperty() Model @ApiPropertyOptional() Model @ApiHideProperty() Model @ApiExtension() Method","title":"\u4fee\u9970\u5668"},{"location":"openapi/introduction/","text":"\u4ecb\u7ecd \u00b6 OpenAPI \u89c4\u8303\u662f\u4e00\u79cd\u4e0e\u8bed\u8a00\u65e0\u5173\u7684\u5b9a\u4e49\u683c\u5f0f\uff0c\u7528\u4e8e\u63cf\u8ff0 RESTful api\u3002 Nest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e13\u95e8\u7684 \u6a21\u5757 \uff0c\u5b83\u5141\u8bb8\u901a\u8fc7\u5229\u7528\u88c5\u9970\u5668\u751f\u6210\u8fd9\u6837\u7684\u89c4\u8303\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm install --save @nestjs/swagger swagger-ui-express \u5982\u679c\u4f60\u4f7f\u7528 fastify\uff0c\u5b89\u88c5 fastify-swagger \u800c\u4e0d\u662f swagger-ui-express : $ npm install --save @nestjs/swagger fastify-swagger \u5f15\u5bfc \u00b6 \u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\u540e\uff0c\u6253\u5f00 main.ts \u5e76\u4f7f\u7528 SwaggerModule \u7c7b\u521d\u59cb\u5316 Swagger: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { SwaggerModule , DocumentBuilder } from '@nestjs/swagger' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); const config = new DocumentBuilder () . setTitle ( 'Cats example' ) . setDescription ( 'The cats API description' ) . setVersion ( '1.0' ) . addTag ( 'cats' ) . build (); const document = SwaggerModule . createDocument ( app , config ); SwaggerModule . setup ( 'api' , app , document ); await app . listen ( 3000 ); } bootstrap (); info Hint document (\u7531 SwaggerModule#createDocument() \u65b9\u6cd5\u8fd4\u56de)\u662f\u4e00\u4e2a\u7b26\u5408 OpenAPI \u6587\u6863 \u7684\u53ef\u5e8f\u5217\u5316\u5bf9\u8c61. \u9664\u4e86\u901a\u8fc7 HTTP \u6258\u7ba1\u5b83\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5c06\u5b83\u4fdd\u5b58\u4e3a JSON/YAML \u6587\u4ef6\uff0c\u5e76\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u3002 DocumentBuilder \u6709\u52a9\u4e8e\u6784\u9020\u4e00\u4e2a\u7b26\u5408 OpenAPI \u89c4\u8303\u7684\u57fa\u7840\u6587\u6863\u3002 \u5b83\u63d0\u4f9b\u4e86\u51e0\u4e2a\u65b9\u6cd5\uff0c\u5141\u8bb8\u8bbe\u7f6e\u8bf8\u5982\u6807\u9898\u3001\u63cf\u8ff0\u3001\u7248\u672c\u7b49\u5c5e\u6027\u3002 \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u6863(\u5b9a\u4e49\u4e86\u6240\u6709 HTTP \u8def\u7531)\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 SwaggerModule \u7c7b\u7684 createDocument() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u548c\u4e00\u4e2a Swagger \u9009\u9879\u5bf9\u8c61\u3002 \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u5e94\u8be5\u662f SwaggerDocumentOptions \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863\u9009\u9879\u90e8\u5206 \u3002 \u4e00\u65e6\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u6587\u6863\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 setup() \u65b9\u6cd5\u3002\u5b83\u63a5\u53d7: \u5b89\u88c5 Swagger UI \u7684\u8def\u5f84 \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b \u4e0a\u9762\u5b9e\u4f8b\u5316\u7684\u6587\u6863\u5bf9\u8c61 \u53ef\u9009\u7684\u914d\u7f6e\u53c2\u6570(\u9605\u8bfb\u66f4\u591a\u4fe1\u606f \u6b64\u5904 ) \u73b0\u5728\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 HTTP \u670d\u52a1: $ npm run start \u5f53\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230 http://localhost:3000/api \u3002\u4f60\u5e94\u8be5\u770b\u770b Swagger UI\u3002 SwaggerModule \u4f1a\u81ea\u52a8\u53cd\u6620\u4f60\u6240\u6709\u7684\u7aef\u70b9\u3002\u8bf7\u6ce8\u610f\uff0c\u6839\u636e\u5e73\u53f0\u7684\u4e0d\u540c\uff0cSwagger UI \u53ef\u4ee5\u4f7f\u7528 swagger-ui-express or fastify-swagger \u521b\u5efa\u3002 info Hint \u8981\u751f\u6210\u548c\u4e0b\u8f7d Swagger JSON \u6587\u4ef6\uff0c\u8bf7\u5728\u6d4f\u89c8\u5668\u4e2d\u5bfc\u822a\u5230 http://localhost:3000/api-json ( swagger-ui-express )\u6216 http://localhost:3000/api/json ( fastify-swagger )(\u5047\u8bbe\u60a8\u7684 Swagger \u6587\u6863\u5728 http://localhost:3000/api \u4e0b\u53ef\u7528)\u3002 warning Warning \u5f53\u4f7f\u7528 fastify-swagger \u548c helmet \u65f6\uff0c CSP \u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u78b0\u649e\uff0c\u914d\u7f6e CSP \u5982\u4e0b\u6240\u793a: app . register ( helmet , { contentSecurityPolicy : { directives : { defaultSrc : [ `'self'` ], styleSrc : [ `'self'` , `'unsafe-inline'` ], imgSrc : [ `'self'` , 'data:' , 'validator.swagger.io' ], scriptSrc : [ `'self'` , `https: 'unsafe-inline'` ], }, }, }); // If you are not going to use CSP at all, you can use this: app . register ( helmet , { contentSecurityPolicy : false , }); \u6587\u6863\u9009\u9879 \u00b6 \u5728\u521b\u5efa\u6587\u6863\u65f6\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u989d\u5916\u7684\u9009\u9879\u6765\u5fae\u8c03\u5e93\u7684\u884c\u4e3a\u3002\u8fd9\u4e9b\u9009\u9879\u7684\u7c7b\u578b\u5e94\u8be5\u662f SwaggerDocumentOptions \uff0c\u53ef\u4ee5\u5982\u4e0b: export interface SwaggerDocumentOptions { /** * List of modules to include in the specification */ include? : Function []; /** * Additional, extra models that should be inspected and included in the specification */ extraModels? : Function []; /** * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method */ ignoreGlobalPrefix? : boolean ; /** * If `true`, swagger will also load routes from the modules imported by `include` modules */ deepScanRoutes? : boolean ; /** * Custom operationIdFactory that will be used to generate the `operationId` * based on the `controllerKey` and `methodKey` * @default () => controllerKey_methodKey */ operationIdFactory ?: ( controllerKey : string , methodKey : string ) => string ; } \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u786e\u4fdd\u5e93\u751f\u6210\u7684\u64cd\u4f5c\u540d\u662f createUser \u800c\u4e0d\u662f UserController_createUser \uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u5982\u4e0b: const options : SwaggerDocumentOptions = { operationIdFactory : ( controllerKey : string , methodKey : string ) => methodKey }; const document = SwaggerModule . createDocument ( app , config , options ); \u8bbe\u7f6e\u9009\u9879 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5b9e\u73b0 ExpressSwaggerCustomOptions (\u5982\u679c\u4f60\u4f7f\u7528 express)\u63a5\u53e3\u7684\u9009\u9879\u5bf9\u8c61\u4f5c\u4e3a SwaggerModule#setup \u65b9\u6cd5\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u6765\u914d\u7f6e Swagger UI\u3002 export interface ExpressSwaggerCustomOptions { explorer? : boolean ; swaggerOptions? : Record < string , any > ; customCss? : string ; customCssUrl? : string ; customJs? : string ; customfavIcon? : string ; swaggerUrl? : string ; customSiteTitle? : string ; validatorUrl? : string ; url? : string ; urls? : Record < 'url' | 'name' , string > []; } \u5982\u679c\u4f60\u4f7f\u7528 fastify\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 FastifySwaggerCustomOptions \u5bf9\u8c61\u6765\u914d\u7f6e\u7528\u6237\u754c\u9762\u3002 export interface FastifySwaggerCustomOptions { uiConfig? : Record < string , any > ; } \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u786e\u4fdd\u5728\u5237\u65b0\u9875\u9762\u540e\u8ba4\u8bc1\u4ee4\u724c\u4ecd\u7136\u5b58\u5728\uff0c\u6216\u8005\u6539\u53d8\u9875\u9762\u6807\u9898(\u663e\u793a\u5728\u6d4f\u89c8\u5668\u4e2d)\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bbe\u7f6e: const customOptions : SwaggerCustomOptions = { swaggerOptions : { persistAuthorization : true , }, customSiteTitle : 'My API Docs' , }; SwaggerModule . setup ( 'docs' , app , document , customOptions ); \u4f8b\u5b50 \u00b6 \u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"Swagger"},{"location":"openapi/introduction/#_1","text":"OpenAPI \u89c4\u8303\u662f\u4e00\u79cd\u4e0e\u8bed\u8a00\u65e0\u5173\u7684\u5b9a\u4e49\u683c\u5f0f\uff0c\u7528\u4e8e\u63cf\u8ff0 RESTful api\u3002 Nest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e13\u95e8\u7684 \u6a21\u5757 \uff0c\u5b83\u5141\u8bb8\u901a\u8fc7\u5229\u7528\u88c5\u9970\u5668\u751f\u6210\u8fd9\u6837\u7684\u89c4\u8303\u3002","title":"\u4ecb\u7ecd"},{"location":"openapi/introduction/#_2","text":"\u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm install --save @nestjs/swagger swagger-ui-express \u5982\u679c\u4f60\u4f7f\u7528 fastify\uff0c\u5b89\u88c5 fastify-swagger \u800c\u4e0d\u662f swagger-ui-express : $ npm install --save @nestjs/swagger fastify-swagger","title":"\u5b89\u88c5"},{"location":"openapi/introduction/#_3","text":"\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\u540e\uff0c\u6253\u5f00 main.ts \u5e76\u4f7f\u7528 SwaggerModule \u7c7b\u521d\u59cb\u5316 Swagger: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { SwaggerModule , DocumentBuilder } from '@nestjs/swagger' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); const config = new DocumentBuilder () . setTitle ( 'Cats example' ) . setDescription ( 'The cats API description' ) . setVersion ( '1.0' ) . addTag ( 'cats' ) . build (); const document = SwaggerModule . createDocument ( app , config ); SwaggerModule . setup ( 'api' , app , document ); await app . listen ( 3000 ); } bootstrap (); info Hint document (\u7531 SwaggerModule#createDocument() \u65b9\u6cd5\u8fd4\u56de)\u662f\u4e00\u4e2a\u7b26\u5408 OpenAPI \u6587\u6863 \u7684\u53ef\u5e8f\u5217\u5316\u5bf9\u8c61. \u9664\u4e86\u901a\u8fc7 HTTP \u6258\u7ba1\u5b83\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5c06\u5b83\u4fdd\u5b58\u4e3a JSON/YAML \u6587\u4ef6\uff0c\u5e76\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u3002 DocumentBuilder \u6709\u52a9\u4e8e\u6784\u9020\u4e00\u4e2a\u7b26\u5408 OpenAPI \u89c4\u8303\u7684\u57fa\u7840\u6587\u6863\u3002 \u5b83\u63d0\u4f9b\u4e86\u51e0\u4e2a\u65b9\u6cd5\uff0c\u5141\u8bb8\u8bbe\u7f6e\u8bf8\u5982\u6807\u9898\u3001\u63cf\u8ff0\u3001\u7248\u672c\u7b49\u5c5e\u6027\u3002 \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u6863(\u5b9a\u4e49\u4e86\u6240\u6709 HTTP \u8def\u7531)\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 SwaggerModule \u7c7b\u7684 createDocument() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u548c\u4e00\u4e2a Swagger \u9009\u9879\u5bf9\u8c61\u3002 \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u5b83\u7684\u7c7b\u578b\u5e94\u8be5\u662f SwaggerDocumentOptions \u3002 \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 \u6587\u6863\u9009\u9879\u90e8\u5206 \u3002 \u4e00\u65e6\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u6587\u6863\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 setup() \u65b9\u6cd5\u3002\u5b83\u63a5\u53d7: \u5b89\u88c5 Swagger UI \u7684\u8def\u5f84 \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b \u4e0a\u9762\u5b9e\u4f8b\u5316\u7684\u6587\u6863\u5bf9\u8c61 \u53ef\u9009\u7684\u914d\u7f6e\u53c2\u6570(\u9605\u8bfb\u66f4\u591a\u4fe1\u606f \u6b64\u5904 ) \u73b0\u5728\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 HTTP \u670d\u52a1: $ npm run start \u5f53\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230 http://localhost:3000/api \u3002\u4f60\u5e94\u8be5\u770b\u770b Swagger UI\u3002 SwaggerModule \u4f1a\u81ea\u52a8\u53cd\u6620\u4f60\u6240\u6709\u7684\u7aef\u70b9\u3002\u8bf7\u6ce8\u610f\uff0c\u6839\u636e\u5e73\u53f0\u7684\u4e0d\u540c\uff0cSwagger UI \u53ef\u4ee5\u4f7f\u7528 swagger-ui-express or fastify-swagger \u521b\u5efa\u3002 info Hint \u8981\u751f\u6210\u548c\u4e0b\u8f7d Swagger JSON \u6587\u4ef6\uff0c\u8bf7\u5728\u6d4f\u89c8\u5668\u4e2d\u5bfc\u822a\u5230 http://localhost:3000/api-json ( swagger-ui-express )\u6216 http://localhost:3000/api/json ( fastify-swagger )(\u5047\u8bbe\u60a8\u7684 Swagger \u6587\u6863\u5728 http://localhost:3000/api \u4e0b\u53ef\u7528)\u3002 warning Warning \u5f53\u4f7f\u7528 fastify-swagger \u548c helmet \u65f6\uff0c CSP \u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u78b0\u649e\uff0c\u914d\u7f6e CSP \u5982\u4e0b\u6240\u793a: app . register ( helmet , { contentSecurityPolicy : { directives : { defaultSrc : [ `'self'` ], styleSrc : [ `'self'` , `'unsafe-inline'` ], imgSrc : [ `'self'` , 'data:' , 'validator.swagger.io' ], scriptSrc : [ `'self'` , `https: 'unsafe-inline'` ], }, }, }); // If you are not going to use CSP at all, you can use this: app . register ( helmet , { contentSecurityPolicy : false , });","title":"\u5f15\u5bfc"},{"location":"openapi/introduction/#_4","text":"\u5728\u521b\u5efa\u6587\u6863\u65f6\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u989d\u5916\u7684\u9009\u9879\u6765\u5fae\u8c03\u5e93\u7684\u884c\u4e3a\u3002\u8fd9\u4e9b\u9009\u9879\u7684\u7c7b\u578b\u5e94\u8be5\u662f SwaggerDocumentOptions \uff0c\u53ef\u4ee5\u5982\u4e0b: export interface SwaggerDocumentOptions { /** * List of modules to include in the specification */ include? : Function []; /** * Additional, extra models that should be inspected and included in the specification */ extraModels? : Function []; /** * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method */ ignoreGlobalPrefix? : boolean ; /** * If `true`, swagger will also load routes from the modules imported by `include` modules */ deepScanRoutes? : boolean ; /** * Custom operationIdFactory that will be used to generate the `operationId` * based on the `controllerKey` and `methodKey` * @default () => controllerKey_methodKey */ operationIdFactory ?: ( controllerKey : string , methodKey : string ) => string ; } \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u786e\u4fdd\u5e93\u751f\u6210\u7684\u64cd\u4f5c\u540d\u662f createUser \u800c\u4e0d\u662f UserController_createUser \uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u5982\u4e0b: const options : SwaggerDocumentOptions = { operationIdFactory : ( controllerKey : string , methodKey : string ) => methodKey }; const document = SwaggerModule . createDocument ( app , config , options );","title":"\u6587\u6863\u9009\u9879"},{"location":"openapi/introduction/#_5","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5b9e\u73b0 ExpressSwaggerCustomOptions (\u5982\u679c\u4f60\u4f7f\u7528 express)\u63a5\u53e3\u7684\u9009\u9879\u5bf9\u8c61\u4f5c\u4e3a SwaggerModule#setup \u65b9\u6cd5\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u6765\u914d\u7f6e Swagger UI\u3002 export interface ExpressSwaggerCustomOptions { explorer? : boolean ; swaggerOptions? : Record < string , any > ; customCss? : string ; customCssUrl? : string ; customJs? : string ; customfavIcon? : string ; swaggerUrl? : string ; customSiteTitle? : string ; validatorUrl? : string ; url? : string ; urls? : Record < 'url' | 'name' , string > []; } \u5982\u679c\u4f60\u4f7f\u7528 fastify\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 FastifySwaggerCustomOptions \u5bf9\u8c61\u6765\u914d\u7f6e\u7528\u6237\u754c\u9762\u3002 export interface FastifySwaggerCustomOptions { uiConfig? : Record < string , any > ; } \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u786e\u4fdd\u5728\u5237\u65b0\u9875\u9762\u540e\u8ba4\u8bc1\u4ee4\u724c\u4ecd\u7136\u5b58\u5728\uff0c\u6216\u8005\u6539\u53d8\u9875\u9762\u6807\u9898(\u663e\u793a\u5728\u6d4f\u89c8\u5668\u4e2d)\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bbe\u7f6e: const customOptions : SwaggerCustomOptions = { swaggerOptions : { persistAuthorization : true , }, customSiteTitle : 'My API Docs' , }; SwaggerModule . setup ( 'docs' , app , document , customOptions );","title":"\u8bbe\u7f6e\u9009\u9879"},{"location":"openapi/introduction/#_6","text":"\u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u4f8b\u5b50"},{"location":"openapi/mapped-types/","text":"\u6620\u5c04\u7c7b\u578b \u00b6 \u5f53\u4f60\u6784\u5efa\u51fa\u50cf CRUD (\u521b\u5efa/\u8bfb\u53d6/\u66f4\u65b0/\u5220\u9664)\u8fd9\u6837\u7684\u7279\u6027\u65f6\uff0c\u5728\u57fa\u672c\u5b9e\u4f53\u7c7b\u578b\u4e0a\u6784\u9020\u53d8\u4f53\u901a\u5e38\u662f\u6709\u7528\u7684\u3002 Nest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u6267\u884c\u7c7b\u578b\u8f6c\u6362\u7684\u5b9e\u7528\u51fd\u6570\uff0c\u4f7f\u8fd9\u9879\u4efb\u52a1\u66f4\u52a0\u65b9\u4fbf\u3002 \u90e8\u5206 \u00b6 \u5f53\u6784\u5efa\u8f93\u5165\u9a8c\u8bc1\u7c7b\u578b(\u4e5f\u79f0\u4e3a dto)\u65f6\uff0c\u5728\u540c\u4e00\u7c7b\u578b\u4e0a\u6784\u5efa create \u548c update \u53d8\u4f53\u901a\u5e38\u662f\u6709\u7528\u7684\u3002 \u4f8b\u5982\uff0c create \u53ef\u80fd\u8981\u6c42\u6240\u6709\u5b57\u6bb5\uff0c\u800c update \u53ef\u80fd\u4f7f\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\u3002 Nest \u63d0\u4f9b\u4e86 PartialType() \u5b9e\u7528\u51fd\u6570\u6765\u7b80\u5316\u8fd9\u4e2a\u4efb\u52a1\u5e76\u51cf\u5c11\u6837\u677f\u6587\u4ef6\u3002 PartialType() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b(\u7c7b)\uff0c\u5c06\u8f93\u5165\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\u8bbe\u7f6e\u4e3a \u53ef\u9009 \u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a create \u7c7b\u578b\uff0c\u5982\u4e0b: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u662f\u5fc5\u9700\u7684\u3002 \u8981\u521b\u5efa\u5177\u6709\u76f8\u540c\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u4f46\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\uff0c\u4f7f\u7528 PartialType() \u4f20\u9012\u7c7b\u5f15\u7528( CreateCatDto )\u4f5c\u4e3a\u53c2\u6570: export class UpdateCatDto extends PartialType ( CreateCatDto ) {} info Hint PartialType() \u51fd\u6570\u662f\u4ece @nestjs/swagger \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u9009\u62e9 \u00b6 PickType() \u51fd\u6570\u901a\u8fc7\u4ece\u8f93\u5165\u7c7b\u578b\u4e2d\u9009\u62e9\u4e00\u7ec4\u5c5e\u6027\u6765\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b(\u7c7b)\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u8fd9\u6837\u7684\u7c7b\u578b\u5f00\u59cb: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 PickType() \u5b9e\u7528\u51fd\u6570\u4ece\u8fd9\u4e2a\u7c7b\u4e2d\u9009\u53d6\u4e00\u7ec4\u5c5e\u6027: export class UpdateCatAgeDto extends PickType ( CreateCatDto , [ 'age' ] as const ) {} info Hint PickType() \u51fd\u6570\u662f\u4ece @nestjs/swagger \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u7701\u7565 \u00b6 OmitType() \u51fd\u6570\u4ece\u8f93\u5165\u7c7b\u578b\u4e2d\u9009\u62e9\u6240\u6709\u5c5e\u6027\uff0c\u7136\u540e\u5220\u9664\u7279\u5b9a\u7684\u952e\u96c6\uff0c\u4ece\u800c\u6784\u9020\u4e00\u4e2a\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u8fd9\u6837\u7684\u7c7b\u578b\u5f00\u59cb: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u6d3e\u751f\u7c7b\u578b\uff0c\u5b83\u62e5\u6709 \u9664 name \u4e4b\u5916\u7684\u6240\u6709\u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5728\u8fd9\u4e2a\u7ed3\u6784\u4e2d\uff0c\u201cOmitType\u201d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5c5e\u6027\u540d\u6570\u7ec4\u3002 export class UpdateCatDto extends OmitType ( CreateCatDto , [ 'name' ] as const ) {} info Hint OmitType() \u51fd\u6570\u662f\u4ece @nestjs/swagger \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4ea4\u53c9\u5f15\u7528 \u00b6 IntersectionType() \u51fd\u6570\u5c06\u4e24\u79cd\u7c7b\u578b\u7ec4\u5408\u6210\u4e00\u4e2a\u65b0\u7c7b\u578b(\u7c7b)\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ece\u4e24\u79cd\u7c7b\u578b\u5f00\u59cb: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () breed : string ; } export class AdditionalCatInfo { @ApiProperty () color : string ; } \u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u65b0\u7c7b\u578b\uff0c\u5b83\u7ec4\u5408\u4e86\u8fd9\u4e24\u79cd\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u3002 export class UpdateCatDto extends IntersectionType ( CreateCatDto , AdditionalCatInfo , ) {} info Hint IntersectionType() \u51fd\u6570\u662f\u4ece @nestjs/swagger \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u7ec4\u5408 \u00b6 \u7c7b\u578b\u6620\u5c04\u5b9e\u7528\u7a0b\u5e8f\u51fd\u6570\u662f\u53ef\u7ec4\u5408\u7684\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5c06\u751f\u6210\u4e00\u4e2a\u7c7b\u578b(\u7c7b)\uff0c\u5b83\u5177\u6709 CreateCatDto \u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\uff0c\u9664\u4e86 name \u4e4b\u5916\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u53ef\u9009: export class UpdateCatDto extends PartialType ( OmitType ( CreateCatDto , [ 'name' ] as const ), ) {}","title":"\u6620\u5c04\u7c7b\u578b"},{"location":"openapi/mapped-types/#_1","text":"\u5f53\u4f60\u6784\u5efa\u51fa\u50cf CRUD (\u521b\u5efa/\u8bfb\u53d6/\u66f4\u65b0/\u5220\u9664)\u8fd9\u6837\u7684\u7279\u6027\u65f6\uff0c\u5728\u57fa\u672c\u5b9e\u4f53\u7c7b\u578b\u4e0a\u6784\u9020\u53d8\u4f53\u901a\u5e38\u662f\u6709\u7528\u7684\u3002 Nest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u6267\u884c\u7c7b\u578b\u8f6c\u6362\u7684\u5b9e\u7528\u51fd\u6570\uff0c\u4f7f\u8fd9\u9879\u4efb\u52a1\u66f4\u52a0\u65b9\u4fbf\u3002","title":"\u6620\u5c04\u7c7b\u578b"},{"location":"openapi/mapped-types/#_2","text":"\u5f53\u6784\u5efa\u8f93\u5165\u9a8c\u8bc1\u7c7b\u578b(\u4e5f\u79f0\u4e3a dto)\u65f6\uff0c\u5728\u540c\u4e00\u7c7b\u578b\u4e0a\u6784\u5efa create \u548c update \u53d8\u4f53\u901a\u5e38\u662f\u6709\u7528\u7684\u3002 \u4f8b\u5982\uff0c create \u53ef\u80fd\u8981\u6c42\u6240\u6709\u5b57\u6bb5\uff0c\u800c update \u53ef\u80fd\u4f7f\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\u3002 Nest \u63d0\u4f9b\u4e86 PartialType() \u5b9e\u7528\u51fd\u6570\u6765\u7b80\u5316\u8fd9\u4e2a\u4efb\u52a1\u5e76\u51cf\u5c11\u6837\u677f\u6587\u4ef6\u3002 PartialType() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b(\u7c7b)\uff0c\u5c06\u8f93\u5165\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\u8bbe\u7f6e\u4e3a \u53ef\u9009 \u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a create \u7c7b\u578b\uff0c\u5982\u4e0b: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u662f\u5fc5\u9700\u7684\u3002 \u8981\u521b\u5efa\u5177\u6709\u76f8\u540c\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u4f46\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\uff0c\u4f7f\u7528 PartialType() \u4f20\u9012\u7c7b\u5f15\u7528( CreateCatDto )\u4f5c\u4e3a\u53c2\u6570: export class UpdateCatDto extends PartialType ( CreateCatDto ) {} info Hint PartialType() \u51fd\u6570\u662f\u4ece @nestjs/swagger \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u90e8\u5206"},{"location":"openapi/mapped-types/#_3","text":"PickType() \u51fd\u6570\u901a\u8fc7\u4ece\u8f93\u5165\u7c7b\u578b\u4e2d\u9009\u62e9\u4e00\u7ec4\u5c5e\u6027\u6765\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b(\u7c7b)\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u8fd9\u6837\u7684\u7c7b\u578b\u5f00\u59cb: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 PickType() \u5b9e\u7528\u51fd\u6570\u4ece\u8fd9\u4e2a\u7c7b\u4e2d\u9009\u53d6\u4e00\u7ec4\u5c5e\u6027: export class UpdateCatAgeDto extends PickType ( CreateCatDto , [ 'age' ] as const ) {} info Hint PickType() \u51fd\u6570\u662f\u4ece @nestjs/swagger \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u9009\u62e9"},{"location":"openapi/mapped-types/#_4","text":"OmitType() \u51fd\u6570\u4ece\u8f93\u5165\u7c7b\u578b\u4e2d\u9009\u62e9\u6240\u6709\u5c5e\u6027\uff0c\u7136\u540e\u5220\u9664\u7279\u5b9a\u7684\u952e\u96c6\uff0c\u4ece\u800c\u6784\u9020\u4e00\u4e2a\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u8fd9\u6837\u7684\u7c7b\u578b\u5f00\u59cb: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u6d3e\u751f\u7c7b\u578b\uff0c\u5b83\u62e5\u6709 \u9664 name \u4e4b\u5916\u7684\u6240\u6709\u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5728\u8fd9\u4e2a\u7ed3\u6784\u4e2d\uff0c\u201cOmitType\u201d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5c5e\u6027\u540d\u6570\u7ec4\u3002 export class UpdateCatDto extends OmitType ( CreateCatDto , [ 'name' ] as const ) {} info Hint OmitType() \u51fd\u6570\u662f\u4ece @nestjs/swagger \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u7701\u7565"},{"location":"openapi/mapped-types/#_5","text":"IntersectionType() \u51fd\u6570\u5c06\u4e24\u79cd\u7c7b\u578b\u7ec4\u5408\u6210\u4e00\u4e2a\u65b0\u7c7b\u578b(\u7c7b)\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ece\u4e24\u79cd\u7c7b\u578b\u5f00\u59cb: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () breed : string ; } export class AdditionalCatInfo { @ApiProperty () color : string ; } \u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u65b0\u7c7b\u578b\uff0c\u5b83\u7ec4\u5408\u4e86\u8fd9\u4e24\u79cd\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u3002 export class UpdateCatDto extends IntersectionType ( CreateCatDto , AdditionalCatInfo , ) {} info Hint IntersectionType() \u51fd\u6570\u662f\u4ece @nestjs/swagger \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u4ea4\u53c9\u5f15\u7528"},{"location":"openapi/mapped-types/#_6","text":"\u7c7b\u578b\u6620\u5c04\u5b9e\u7528\u7a0b\u5e8f\u51fd\u6570\u662f\u53ef\u7ec4\u5408\u7684\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5c06\u751f\u6210\u4e00\u4e2a\u7c7b\u578b(\u7c7b)\uff0c\u5b83\u5177\u6709 CreateCatDto \u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\uff0c\u9664\u4e86 name \u4e4b\u5916\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u53ef\u9009: export class UpdateCatDto extends PartialType ( OmitType ( CreateCatDto , [ 'name' ] as const ), ) {}","title":"\u7ec4\u5408"},{"location":"openapi/migration-guide/","text":"\u8fc1\u79fb\u5411\u5bfc \u00b6 \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 @nestjs/swagger@3.* \uff0c\u8bf7\u6ce8\u610f\u4e0b\u9762\u5728 4.0 \u7248\u672c\u4e2d\u5bf9/API \u7684\u66f4\u6539\u3002 \u7a81\u53d1\u7684\u53d8\u5316 \u00b6 \u4ee5\u4e0b\u88c5\u9970\u5668\u5df2\u88ab\u66f4\u6539/\u91cd\u547d\u540d: @ApiModelProperty is now @ApiProperty @ApiModelPropertyOptional is now @ApiPropertyOptional @ApiResponseModelProperty is now @ApiResponseProperty @ApiImplicitQuery is now @ApiQuery @ApiImplicitParam is now @ApiParam @ApiImplicitBody is now @ApiBody @ApiImplicitHeader is now @ApiHeader @ApiOperation({{ '{' }} title: 'test' {{ '}' }}) is now @ApiOperation({{ '{' }} summary: 'test' {{ '}' }}) @ApiUseTags is now @ApiTags DocumentBuilder breaking changes (updated method signatures): addTag addBearerAuth addOAuth2 setContactEmail is now setContact setHost has been removed setSchemes has been removed (use the addServer instead, e.g., addServer('http://') ) \u65b0\u65b9\u6cd5 \u00b6 \u6dfb\u52a0\u4e86\u4ee5\u4e0b\u65b9\u6cd5: addServer addApiKey addBasicAuth addSecurity addSecurityRequirements","title":"\u8fc1\u79fb\u5411\u5bfc"},{"location":"openapi/migration-guide/#_1","text":"\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 @nestjs/swagger@3.* \uff0c\u8bf7\u6ce8\u610f\u4e0b\u9762\u5728 4.0 \u7248\u672c\u4e2d\u5bf9/API \u7684\u66f4\u6539\u3002","title":"\u8fc1\u79fb\u5411\u5bfc"},{"location":"openapi/migration-guide/#_2","text":"\u4ee5\u4e0b\u88c5\u9970\u5668\u5df2\u88ab\u66f4\u6539/\u91cd\u547d\u540d: @ApiModelProperty is now @ApiProperty @ApiModelPropertyOptional is now @ApiPropertyOptional @ApiResponseModelProperty is now @ApiResponseProperty @ApiImplicitQuery is now @ApiQuery @ApiImplicitParam is now @ApiParam @ApiImplicitBody is now @ApiBody @ApiImplicitHeader is now @ApiHeader @ApiOperation({{ '{' }} title: 'test' {{ '}' }}) is now @ApiOperation({{ '{' }} summary: 'test' {{ '}' }}) @ApiUseTags is now @ApiTags DocumentBuilder breaking changes (updated method signatures): addTag addBearerAuth addOAuth2 setContactEmail is now setContact setHost has been removed setSchemes has been removed (use the addServer instead, e.g., addServer('http://') )","title":"\u7a81\u53d1\u7684\u53d8\u5316"},{"location":"openapi/migration-guide/#_3","text":"\u6dfb\u52a0\u4e86\u4ee5\u4e0b\u65b9\u6cd5: addServer addApiKey addBasicAuth addSecurity addSecurityRequirements","title":"\u65b0\u65b9\u6cd5"},{"location":"openapi/operations/","text":"\u64cd\u4f5c \u00b6 \u5728 OpenAPI \u672f\u8bed\u4e2d\uff0c\u8def\u5f84\u662f API \u516c\u5f00\u7684\u7aef\u70b9(\u8d44\u6e90)\uff0c\u5982 /users \u6216 /reports/summary \uff0c\u64cd\u4f5c\u662f\u7528\u4e8e\u64cd\u4f5c\u8fd9\u4e9b\u8def\u5f84\u7684 HTTP \u65b9\u6cd5\uff0c\u5982 GET \uff0c POST \u6216 DELETE \u3002 \u6807\u7b7e \u00b6 \u8981\u5c06\u4e00\u4e2a\u63a7\u5236\u5668\u9644\u52a0\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u6807\u7b7e\uff0c\u53ef\u4ee5\u4f7f\u7528 @ApiTags(\u2026tags) \u88c5\u9970\u5668\u3002 @ApiTags ( 'cats' ) @Controller ( 'cats' ) export class CatsController {} \u5934 \u00b6 \u8981\u5b9a\u4e49\u4f5c\u4e3a\u8bf7\u6c42\u4e00\u90e8\u5206\u7684\u81ea\u5b9a\u4e49\u5934\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528 @ApiHeader() \u3002 @ApiHeader ({ name : 'X-MyHeader' , description : 'Custom header' , }) @Controller ( 'cats' ) export class CatsController {} \u54cd\u5e94 \u00b6 \u8981\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 HTTP \u54cd\u5e94\uff0c\u4f7f\u7528 @ApiResponse() \u88c5\u9970\u5668\u3002 @Post () @ApiResponse ({ status : 201 , description : 'The record has been successfully created.' }) @ApiResponse ({ status : 403 , description : 'Forbidden.' }) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } Nest \u63d0\u4f9b\u4e86\u4e00\u7ec4\u7b80\u77ed\u7684 API \u54cd\u5e94 \u88c5\u9970\u5668\uff0c\u5b83\u4eec\u7ee7\u627f\u81ea @ApiResponse \u88c5\u9970\u5668: @ApiOkResponse() @ApiCreatedResponse() @ApiAcceptedResponse() @ApiNoContentResponse() @ApiMovedPermanentlyResponse() @ApiBadRequestResponse() @ApiUnauthorizedResponse() @ApiNotFoundResponse() @ApiForbiddenResponse() @ApiMethodNotAllowedResponse() @ApiNotAcceptableResponse() @ApiRequestTimeoutResponse() @ApiConflictResponse() @ApiTooManyRequestsResponse() @ApiGoneResponse() @ApiPayloadTooLargeResponse() @ApiUnsupportedMediaTypeResponse() @ApiUnprocessableEntityResponse() @ApiInternalServerErrorResponse() @ApiNotImplementedResponse() @ApiBadGatewayResponse() @ApiServiceUnavailableResponse() @ApiGatewayTimeoutResponse() @ApiDefaultResponse() @Post () @ApiCreatedResponse ({ description : 'The record has been successfully created.' }) @ApiForbiddenResponse ({ description : 'Forbidden.' }) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } \u4e3a\u4e86\u6307\u5b9a\u8bf7\u6c42\u7684\u8fd4\u56de\u6a21\u578b\uff0c\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u7c7b\uff0c\u5e76\u4f7f\u7528 @ApiProperty() \u88c5\u9970\u5668\u6ce8\u91ca\u6240\u6709\u5c5e\u6027\u3002 export class Cat { @ApiProperty () id : number ; @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u7136\u540e Cat \u6a21\u578b\u53ef\u4ee5\u4e0e\u54cd\u5e94\u88c5\u9970\u5668\u7684 type \u5c5e\u6027\u7ed3\u5408\u4f7f\u7528\u3002 @ApiTags ( 'cats' ) @Controller ( 'cats' ) export class CatsController { @Post () @ApiCreatedResponse ({ description : 'The record has been successfully created.' , type : Cat , }) async create ( @Body () createCatDto : CreateCatDto ) : Promise < Cat > { return this . catsService . create ( createCatDto ); } } \u8ba9\u6211\u4eec\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u9a8c\u8bc1\u751f\u6210\u7684 Cat \u6a21\u578b: \u6587\u4ef6\u4e0a\u4f20 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 @ApiBody \u88c5\u9970\u5668\u548c @ApiConsumes() \u6765\u542f\u7528\u7279\u5b9a\u65b9\u6cd5\u7684\u6587\u4ef6\u4e0a\u4f20\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 File Upload \u6280\u672f\u7684\u5b8c\u6574\u793a\u4f8b: @UseInterceptors ( FileInterceptor ( 'file' )) @ApiConsumes ( 'multipart/form-data' ) @ApiBody ({ description : 'List of cats' , type : FileUploadDto , }) uploadFile ( @UploadedFile () file ) {} \u5176\u4e2d FileUploadDto \u7684\u5b9a\u4e49\u5982\u4e0b: class FileUploadDto { @ApiProperty ({ type : 'string' , format : 'binary' }) file : any ; } \u8981\u5904\u7406\u591a\u4e2a\u6587\u4ef6\u4e0a\u4f20\uff0c\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b FilesUploadDto : class FilesUploadDto { @ApiProperty ({ type : 'array' , items : { type : 'string' , format : 'binary' } }) files : any []; } \u6269\u5c55 \u00b6 \u8981\u5411\u8bf7\u6c42\u6dfb\u52a0 Extension\uff0c\u8bf7\u4f7f\u7528 @ApiExtension() \u88c5\u9970\u5668\u3002 \u6269\u5c55\u540d\u5fc5\u987b\u4ee5 x- \u4f5c\u4e3a\u524d\u7f00\u3002 @ApiExtension ( 'x-foo' , { hello : 'world' }) \u9ad8\u7ea7:\u901a\u7528 ApiResponse \u00b6 \u6709\u4e86\u63d0\u4f9b Raw Definitions \u7684\u80fd\u529b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a Swagger UI \u5b9a\u4e49\u901a\u7528\u6a21\u5f0f\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b DTO: export class PaginatedDto < TData > { @ApiProperty () total : number ; @ApiProperty () limit : number ; @ApiProperty () offset : number ; results : TData []; } \u6211\u4eec\u8df3\u8fc7\u4fee\u9970 \u7ed3\u679c \uff0c\u56e0\u4e3a\u6211\u4eec\u7a0d\u540e\u5c06\u63d0\u4f9b\u5b83\u7684\u539f\u59cb\u5b9a\u4e49\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u53e6\u4e00\u4e2a DTO \u5e76\u547d\u540d\u5b83\uff0c\u4f8b\u5982\uff0c CatDto \uff0c\u5982\u4e0b\u6240\u793a: export class CatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u6709\u4e86\u8fd9\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a PaginatedDto<CatDto> \u54cd\u5e94\uff0c\u5982\u4e0b\u6240\u793a: @ApiOkResponse ({ schema : { allOf : [ { $ref : getSchemaPath ( PaginatedDto ) }, { properties : { results : { type : 'array' , items : { $ref : getSchemaPath ( CatDto ) }, }, }, }, ], }, }) async findAll () : Promise < PaginatedDto < CatDto >> {} \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u6307\u5b9a\u54cd\u5e94\u7684\u6240\u6709\u5c5e\u6027\u4e3a PaginatedDto \uff0c\u800c results \u5c5e\u6027\u7684\u7c7b\u578b\u4e3a Array<CatDto> \u3002 getSchemaPath()\u51fd\u6570\uff0c\u8fd4\u56de\u7ed9\u5b9a\u6a21\u578b OpenAPI \u89c4\u8303\u6587\u4ef6\u4e2d\u7684 OpenAPI \u67b6\u6784\u8def\u5f84\u3002 \u2014 allOf \u662f OAS 3 \u63d0\u4f9b\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u7528\u4e8e\u8986\u76d6\u5404\u79cd\u4e0e\u7ee7\u627f\u76f8\u5173\u7684\u7528\u4f8b\u3002 \u6700\u540e\uff0c\u7531\u4e8e PaginatedDto \u6ca1\u6709\u88ab\u4efb\u4f55\u63a7\u5236\u5668\u76f4\u63a5\u5f15\u7528\uff0c SwaggerModule \u8fd8\u4e0d\u80fd\u751f\u6210\u76f8\u5e94\u7684\u6a21\u578b\u5b9a\u4e49\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u5b83\u6dfb\u52a0\u4e3a Extra Model \u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u5c42\u4f7f\u7528 @ApiExtraModels() \u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @Controller ( 'cats' ) @ApiExtraModels ( PaginatedDto ) export class CatsController {} \u5982\u679c\u4f60\u73b0\u5728\u8fd0\u884c Swagger\uff0c\u751f\u6210\u7684 Swagger \u3002\u9488\u5bf9\u8fd9\u4e2a\u7279\u5b9a\u7aef\u70b9\u7684 Json \u5e94\u8be5\u5b9a\u4e49\u5982\u4e0b\u54cd\u5e94: \"responses\" : { \"200\" : { \"description\" : \"\" , \"content\" : { \"application/json\" : { \"schema\" : { \"allOf\" : [ { \"$ref\" : \"#/components/schemas/PaginatedDto\" }, { \"properties\" : { \"results\" : { \"$ref\" : \"#/components/schemas/CatDto\" } } } ] } } } } } \u4e3a\u4e86\u4f7f\u5b83\u53ef\u91cd\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a PaginatedDto \u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: export const ApiPaginatedResponse = < TModel extends Type < any >> ( model : TModel , ) => { return applyDecorators ( ApiOkResponse ({ schema : { allOf : [ { $ref : getSchemaPath ( PaginatedDto ) }, { properties : { results : { type : 'array' , items : { $ref : getSchemaPath ( model ) }, }, }, }, ], }, }), ); }; info Hint Type<any> \u63a5\u53e3\u548c applyDecorators \u51fd\u6570\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u6709\u4e86\u8fd9\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7aef\u70b9\u4e0a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 @ApiPaginatedResponse() \u88c5\u9970\u5668: @ApiPaginatedResponse ( CatDto ) async findAll () : Promise < PaginatedDto < CatDto >> {} \u5bf9\u4e8e\u5ba2\u6237\u7aef\u751f\u6210\u5de5\u5177\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5982\u4f55\u4e3a\u5ba2\u6237\u7aef\u751f\u6210 PaginatedResponse<TModel> \u65b9\u9762\u9020\u6210\u4e86\u6b67\u4e49\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u4e0a\u8ff0 GET / \u7aef\u70b9\u7684\u5ba2\u6237\u673a\u751f\u6210\u5668\u7ed3\u679c\u793a\u4f8b\u3002 // Angular findAll () : Observable < { total : number , limit : number , offset : number , results : CatDto [] } > \u5982\u60a8\u6240\u89c1\uff0c\u8fd9\u91cc\u7684 \u8fd4\u56de\u7c7b\u578b \u662f\u4e0d\u660e\u786e\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5728 ApiPaginatedResponse \u7684 schema \u4e2d\u6dfb\u52a0\u4e00\u4e2a title \u5c5e\u6027: export const ApiPaginatedResponse = < TModel extends Type < any >> ( model : TModel ) => { return applyDecorators ( ApiOkResponse ({ schema : { title : `PaginatedResponseOf ${ model . name } ` allOf : [ // ... ], }, }), ); }; \u73b0\u5728\u5ba2\u6237\u7aef\u751f\u6210\u5668\u5de5\u5177\u7684\u7ed3\u679c\u5c06\u53d8\u6210: // Angular findAll () : Observable < PaginatedResponseOfCatDto >","title":"\u64cd\u4f5c"},{"location":"openapi/operations/#_1","text":"\u5728 OpenAPI \u672f\u8bed\u4e2d\uff0c\u8def\u5f84\u662f API \u516c\u5f00\u7684\u7aef\u70b9(\u8d44\u6e90)\uff0c\u5982 /users \u6216 /reports/summary \uff0c\u64cd\u4f5c\u662f\u7528\u4e8e\u64cd\u4f5c\u8fd9\u4e9b\u8def\u5f84\u7684 HTTP \u65b9\u6cd5\uff0c\u5982 GET \uff0c POST \u6216 DELETE \u3002","title":"\u64cd\u4f5c"},{"location":"openapi/operations/#_2","text":"\u8981\u5c06\u4e00\u4e2a\u63a7\u5236\u5668\u9644\u52a0\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u6807\u7b7e\uff0c\u53ef\u4ee5\u4f7f\u7528 @ApiTags(\u2026tags) \u88c5\u9970\u5668\u3002 @ApiTags ( 'cats' ) @Controller ( 'cats' ) export class CatsController {}","title":"\u6807\u7b7e"},{"location":"openapi/operations/#_3","text":"\u8981\u5b9a\u4e49\u4f5c\u4e3a\u8bf7\u6c42\u4e00\u90e8\u5206\u7684\u81ea\u5b9a\u4e49\u5934\u6587\u4ef6\uff0c\u8bf7\u4f7f\u7528 @ApiHeader() \u3002 @ApiHeader ({ name : 'X-MyHeader' , description : 'Custom header' , }) @Controller ( 'cats' ) export class CatsController {}","title":"\u5934"},{"location":"openapi/operations/#_4","text":"\u8981\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 HTTP \u54cd\u5e94\uff0c\u4f7f\u7528 @ApiResponse() \u88c5\u9970\u5668\u3002 @Post () @ApiResponse ({ status : 201 , description : 'The record has been successfully created.' }) @ApiResponse ({ status : 403 , description : 'Forbidden.' }) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } Nest \u63d0\u4f9b\u4e86\u4e00\u7ec4\u7b80\u77ed\u7684 API \u54cd\u5e94 \u88c5\u9970\u5668\uff0c\u5b83\u4eec\u7ee7\u627f\u81ea @ApiResponse \u88c5\u9970\u5668: @ApiOkResponse() @ApiCreatedResponse() @ApiAcceptedResponse() @ApiNoContentResponse() @ApiMovedPermanentlyResponse() @ApiBadRequestResponse() @ApiUnauthorizedResponse() @ApiNotFoundResponse() @ApiForbiddenResponse() @ApiMethodNotAllowedResponse() @ApiNotAcceptableResponse() @ApiRequestTimeoutResponse() @ApiConflictResponse() @ApiTooManyRequestsResponse() @ApiGoneResponse() @ApiPayloadTooLargeResponse() @ApiUnsupportedMediaTypeResponse() @ApiUnprocessableEntityResponse() @ApiInternalServerErrorResponse() @ApiNotImplementedResponse() @ApiBadGatewayResponse() @ApiServiceUnavailableResponse() @ApiGatewayTimeoutResponse() @ApiDefaultResponse() @Post () @ApiCreatedResponse ({ description : 'The record has been successfully created.' }) @ApiForbiddenResponse ({ description : 'Forbidden.' }) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } \u4e3a\u4e86\u6307\u5b9a\u8bf7\u6c42\u7684\u8fd4\u56de\u6a21\u578b\uff0c\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u7c7b\uff0c\u5e76\u4f7f\u7528 @ApiProperty() \u88c5\u9970\u5668\u6ce8\u91ca\u6240\u6709\u5c5e\u6027\u3002 export class Cat { @ApiProperty () id : number ; @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u7136\u540e Cat \u6a21\u578b\u53ef\u4ee5\u4e0e\u54cd\u5e94\u88c5\u9970\u5668\u7684 type \u5c5e\u6027\u7ed3\u5408\u4f7f\u7528\u3002 @ApiTags ( 'cats' ) @Controller ( 'cats' ) export class CatsController { @Post () @ApiCreatedResponse ({ description : 'The record has been successfully created.' , type : Cat , }) async create ( @Body () createCatDto : CreateCatDto ) : Promise < Cat > { return this . catsService . create ( createCatDto ); } } \u8ba9\u6211\u4eec\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u9a8c\u8bc1\u751f\u6210\u7684 Cat \u6a21\u578b:","title":"\u54cd\u5e94"},{"location":"openapi/operations/#_5","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 @ApiBody \u88c5\u9970\u5668\u548c @ApiConsumes() \u6765\u542f\u7528\u7279\u5b9a\u65b9\u6cd5\u7684\u6587\u4ef6\u4e0a\u4f20\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 File Upload \u6280\u672f\u7684\u5b8c\u6574\u793a\u4f8b: @UseInterceptors ( FileInterceptor ( 'file' )) @ApiConsumes ( 'multipart/form-data' ) @ApiBody ({ description : 'List of cats' , type : FileUploadDto , }) uploadFile ( @UploadedFile () file ) {} \u5176\u4e2d FileUploadDto \u7684\u5b9a\u4e49\u5982\u4e0b: class FileUploadDto { @ApiProperty ({ type : 'string' , format : 'binary' }) file : any ; } \u8981\u5904\u7406\u591a\u4e2a\u6587\u4ef6\u4e0a\u4f20\uff0c\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b FilesUploadDto : class FilesUploadDto { @ApiProperty ({ type : 'array' , items : { type : 'string' , format : 'binary' } }) files : any []; }","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"openapi/operations/#_6","text":"\u8981\u5411\u8bf7\u6c42\u6dfb\u52a0 Extension\uff0c\u8bf7\u4f7f\u7528 @ApiExtension() \u88c5\u9970\u5668\u3002 \u6269\u5c55\u540d\u5fc5\u987b\u4ee5 x- \u4f5c\u4e3a\u524d\u7f00\u3002 @ApiExtension ( 'x-foo' , { hello : 'world' })","title":"\u6269\u5c55"},{"location":"openapi/operations/#apiresponse","text":"\u6709\u4e86\u63d0\u4f9b Raw Definitions \u7684\u80fd\u529b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a Swagger UI \u5b9a\u4e49\u901a\u7528\u6a21\u5f0f\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b DTO: export class PaginatedDto < TData > { @ApiProperty () total : number ; @ApiProperty () limit : number ; @ApiProperty () offset : number ; results : TData []; } \u6211\u4eec\u8df3\u8fc7\u4fee\u9970 \u7ed3\u679c \uff0c\u56e0\u4e3a\u6211\u4eec\u7a0d\u540e\u5c06\u63d0\u4f9b\u5b83\u7684\u539f\u59cb\u5b9a\u4e49\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u53e6\u4e00\u4e2a DTO \u5e76\u547d\u540d\u5b83\uff0c\u4f8b\u5982\uff0c CatDto \uff0c\u5982\u4e0b\u6240\u793a: export class CatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } \u6709\u4e86\u8fd9\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a PaginatedDto<CatDto> \u54cd\u5e94\uff0c\u5982\u4e0b\u6240\u793a: @ApiOkResponse ({ schema : { allOf : [ { $ref : getSchemaPath ( PaginatedDto ) }, { properties : { results : { type : 'array' , items : { $ref : getSchemaPath ( CatDto ) }, }, }, }, ], }, }) async findAll () : Promise < PaginatedDto < CatDto >> {} \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u6307\u5b9a\u54cd\u5e94\u7684\u6240\u6709\u5c5e\u6027\u4e3a PaginatedDto \uff0c\u800c results \u5c5e\u6027\u7684\u7c7b\u578b\u4e3a Array<CatDto> \u3002 getSchemaPath()\u51fd\u6570\uff0c\u8fd4\u56de\u7ed9\u5b9a\u6a21\u578b OpenAPI \u89c4\u8303\u6587\u4ef6\u4e2d\u7684 OpenAPI \u67b6\u6784\u8def\u5f84\u3002 \u2014 allOf \u662f OAS 3 \u63d0\u4f9b\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u7528\u4e8e\u8986\u76d6\u5404\u79cd\u4e0e\u7ee7\u627f\u76f8\u5173\u7684\u7528\u4f8b\u3002 \u6700\u540e\uff0c\u7531\u4e8e PaginatedDto \u6ca1\u6709\u88ab\u4efb\u4f55\u63a7\u5236\u5668\u76f4\u63a5\u5f15\u7528\uff0c SwaggerModule \u8fd8\u4e0d\u80fd\u751f\u6210\u76f8\u5e94\u7684\u6a21\u578b\u5b9a\u4e49\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u5b83\u6dfb\u52a0\u4e3a Extra Model \u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u5c42\u4f7f\u7528 @ApiExtraModels() \u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @Controller ( 'cats' ) @ApiExtraModels ( PaginatedDto ) export class CatsController {} \u5982\u679c\u4f60\u73b0\u5728\u8fd0\u884c Swagger\uff0c\u751f\u6210\u7684 Swagger \u3002\u9488\u5bf9\u8fd9\u4e2a\u7279\u5b9a\u7aef\u70b9\u7684 Json \u5e94\u8be5\u5b9a\u4e49\u5982\u4e0b\u54cd\u5e94: \"responses\" : { \"200\" : { \"description\" : \"\" , \"content\" : { \"application/json\" : { \"schema\" : { \"allOf\" : [ { \"$ref\" : \"#/components/schemas/PaginatedDto\" }, { \"properties\" : { \"results\" : { \"$ref\" : \"#/components/schemas/CatDto\" } } } ] } } } } } \u4e3a\u4e86\u4f7f\u5b83\u53ef\u91cd\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a PaginatedDto \u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: export const ApiPaginatedResponse = < TModel extends Type < any >> ( model : TModel , ) => { return applyDecorators ( ApiOkResponse ({ schema : { allOf : [ { $ref : getSchemaPath ( PaginatedDto ) }, { properties : { results : { type : 'array' , items : { $ref : getSchemaPath ( model ) }, }, }, }, ], }, }), ); }; info Hint Type<any> \u63a5\u53e3\u548c applyDecorators \u51fd\u6570\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u6709\u4e86\u8fd9\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7aef\u70b9\u4e0a\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 @ApiPaginatedResponse() \u88c5\u9970\u5668: @ApiPaginatedResponse ( CatDto ) async findAll () : Promise < PaginatedDto < CatDto >> {} \u5bf9\u4e8e\u5ba2\u6237\u7aef\u751f\u6210\u5de5\u5177\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5982\u4f55\u4e3a\u5ba2\u6237\u7aef\u751f\u6210 PaginatedResponse<TModel> \u65b9\u9762\u9020\u6210\u4e86\u6b67\u4e49\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u4e0a\u8ff0 GET / \u7aef\u70b9\u7684\u5ba2\u6237\u673a\u751f\u6210\u5668\u7ed3\u679c\u793a\u4f8b\u3002 // Angular findAll () : Observable < { total : number , limit : number , offset : number , results : CatDto [] } > \u5982\u60a8\u6240\u89c1\uff0c\u8fd9\u91cc\u7684 \u8fd4\u56de\u7c7b\u578b \u662f\u4e0d\u660e\u786e\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5728 ApiPaginatedResponse \u7684 schema \u4e2d\u6dfb\u52a0\u4e00\u4e2a title \u5c5e\u6027: export const ApiPaginatedResponse = < TModel extends Type < any >> ( model : TModel ) => { return applyDecorators ( ApiOkResponse ({ schema : { title : `PaginatedResponseOf ${ model . name } ` allOf : [ // ... ], }, }), ); }; \u73b0\u5728\u5ba2\u6237\u7aef\u751f\u6210\u5668\u5de5\u5177\u7684\u7ed3\u679c\u5c06\u53d8\u6210: // Angular findAll () : Observable < PaginatedResponseOfCatDto >","title":"\u9ad8\u7ea7:\u901a\u7528ApiResponse"},{"location":"openapi/other-features/","text":"\u5176\u4ed6\u529f\u80fd \u00b6 \u8fd9\u4e2a\u9875\u9762\u5217\u51fa\u4e86\u6240\u6709\u5176\u4ed6\u6709\u7528\u7684\u529f\u80fd\u3002 \u5168\u5c40\u524d\u7f00 \u00b6 \u8981\u5ffd\u7565\u901a\u8fc7' setGlobalPrefix() '\u8bbe\u7f6e\u7684\u8def\u7531\u7684\u5168\u5c40\u524d\u7f00\uff0c\u8bf7\u4f7f\u7528' ignoreGlobalPrefix ': const document = SwaggerModule . createDocument ( app , options , { ignoreGlobalPrefix : true , }); \u591a\u4e2a\u89c4\u8303 \u00b6 SwaggerModule \u63d0\u4f9b\u4e86\u4e00\u79cd\u652f\u6301\u591a\u4e2a\u89c4\u8303\u7684\u65b9\u6cd5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7aef\u70b9\u4e0a\u4f7f\u7528\u4e0d\u540c\u7684 ui \u63d0\u4f9b\u4e0d\u540c\u7684\u6587\u6863\u3002 \u8981\u652f\u6301\u591a\u4e2a\u89c4\u8303\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u4f7f\u7528\u6a21\u5757\u5316\u65b9\u6cd5\u7f16\u5199\u3002 ' createDocument() '\u65b9\u6cd5\u6709\u7b2c\u4e09\u4e2a\u53c2\u6570' extraOptions '\uff0c\u5b83\u662f\u4e00\u4e2a\u5e26\u6709\u540d\u4e3a' include '\u5c5e\u6027\u7684\u5bf9\u8c61\u3002 ' include '\u5c5e\u6027\u7684\u503c\u662f\u4e00\u4e2a\u6a21\u5757\u6570\u7ec4\u3002 \u60a8\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2a\u89c4\u683c\u652f\u6301\u5982\u4e0b\u6240\u793a: import { NestFactory } from '@nestjs/core' ; import { SwaggerModule , DocumentBuilder } from '@nestjs/swagger' ; import { AppModule } from './app.module' ; import { CatsModule } from './cats/cats.module' ; import { DogsModule } from './dogs/dogs.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); /** * createDocument(application, configurationOptions, extraOptions); * * createDocument method takes an optional 3rd argument \"extraOptions\" * which is an object with \"include\" property where you can pass an Array * of Modules that you want to include in that Swagger Specification * E.g: CatsModule and DogsModule will have two separate Swagger Specifications which * will be exposed on two different SwaggerUI with two different endpoints. */ const options = new DocumentBuilder () . setTitle ( 'Cats example' ) . setDescription ( 'The cats API description' ) . setVersion ( '1.0' ) . addTag ( 'cats' ) . build (); const catDocument = SwaggerModule . createDocument ( app , options , { include : [ CatsModule ], }); SwaggerModule . setup ( 'api/cats' , app , catDocument ); const secondOptions = new DocumentBuilder () . setTitle ( 'Dogs example' ) . setDescription ( 'The dogs API description' ) . setVersion ( '1.0' ) . addTag ( 'dogs' ) . build (); const dogDocument = SwaggerModule . createDocument ( app , secondOptions , { include : [ DogsModule ], }); SwaggerModule . setup ( 'api/dogs' , app , dogDocument ); await app . listen ( 3000 ); } bootstrap (); \u73b0\u5728\u4f60\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u4f60\u7684\u670d\u52a1\u5668: $ npm run start \u5bfc\u822a\u5230 http://localhost:3000/api/cats \u67e5\u770b\u732b\u7684 Swagger UI: \u53cd\u8fc7\u6765\uff0c http://localhost:3000/api/dogs \u5c06\u4e3a\u72d7\u72d7\u63d0\u4f9b Swagger \u7528\u6237\u754c\u9762:","title":"\u5176\u4ed6\u529f\u80fd"},{"location":"openapi/other-features/#_1","text":"\u8fd9\u4e2a\u9875\u9762\u5217\u51fa\u4e86\u6240\u6709\u5176\u4ed6\u6709\u7528\u7684\u529f\u80fd\u3002","title":"\u5176\u4ed6\u529f\u80fd"},{"location":"openapi/other-features/#_2","text":"\u8981\u5ffd\u7565\u901a\u8fc7' setGlobalPrefix() '\u8bbe\u7f6e\u7684\u8def\u7531\u7684\u5168\u5c40\u524d\u7f00\uff0c\u8bf7\u4f7f\u7528' ignoreGlobalPrefix ': const document = SwaggerModule . createDocument ( app , options , { ignoreGlobalPrefix : true , });","title":"\u5168\u5c40\u524d\u7f00"},{"location":"openapi/other-features/#_3","text":"SwaggerModule \u63d0\u4f9b\u4e86\u4e00\u79cd\u652f\u6301\u591a\u4e2a\u89c4\u8303\u7684\u65b9\u6cd5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7aef\u70b9\u4e0a\u4f7f\u7528\u4e0d\u540c\u7684 ui \u63d0\u4f9b\u4e0d\u540c\u7684\u6587\u6863\u3002 \u8981\u652f\u6301\u591a\u4e2a\u89c4\u8303\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u4f7f\u7528\u6a21\u5757\u5316\u65b9\u6cd5\u7f16\u5199\u3002 ' createDocument() '\u65b9\u6cd5\u6709\u7b2c\u4e09\u4e2a\u53c2\u6570' extraOptions '\uff0c\u5b83\u662f\u4e00\u4e2a\u5e26\u6709\u540d\u4e3a' include '\u5c5e\u6027\u7684\u5bf9\u8c61\u3002 ' include '\u5c5e\u6027\u7684\u503c\u662f\u4e00\u4e2a\u6a21\u5757\u6570\u7ec4\u3002 \u60a8\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2a\u89c4\u683c\u652f\u6301\u5982\u4e0b\u6240\u793a: import { NestFactory } from '@nestjs/core' ; import { SwaggerModule , DocumentBuilder } from '@nestjs/swagger' ; import { AppModule } from './app.module' ; import { CatsModule } from './cats/cats.module' ; import { DogsModule } from './dogs/dogs.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); /** * createDocument(application, configurationOptions, extraOptions); * * createDocument method takes an optional 3rd argument \"extraOptions\" * which is an object with \"include\" property where you can pass an Array * of Modules that you want to include in that Swagger Specification * E.g: CatsModule and DogsModule will have two separate Swagger Specifications which * will be exposed on two different SwaggerUI with two different endpoints. */ const options = new DocumentBuilder () . setTitle ( 'Cats example' ) . setDescription ( 'The cats API description' ) . setVersion ( '1.0' ) . addTag ( 'cats' ) . build (); const catDocument = SwaggerModule . createDocument ( app , options , { include : [ CatsModule ], }); SwaggerModule . setup ( 'api/cats' , app , catDocument ); const secondOptions = new DocumentBuilder () . setTitle ( 'Dogs example' ) . setDescription ( 'The dogs API description' ) . setVersion ( '1.0' ) . addTag ( 'dogs' ) . build (); const dogDocument = SwaggerModule . createDocument ( app , secondOptions , { include : [ DogsModule ], }); SwaggerModule . setup ( 'api/dogs' , app , dogDocument ); await app . listen ( 3000 ); } bootstrap (); \u73b0\u5728\u4f60\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u4f60\u7684\u670d\u52a1\u5668: $ npm run start \u5bfc\u822a\u5230 http://localhost:3000/api/cats \u67e5\u770b\u732b\u7684 Swagger UI: \u53cd\u8fc7\u6765\uff0c http://localhost:3000/api/dogs \u5c06\u4e3a\u72d7\u72d7\u63d0\u4f9b Swagger \u7528\u6237\u754c\u9762:","title":"\u591a\u4e2a\u89c4\u8303"},{"location":"openapi/security/","text":"\u5b89\u5168 \u00b6 \u8981\u5b9a\u4e49\u7279\u5b9a\u64cd\u4f5c\u5e94\u8be5\u4f7f\u7528\u54ea\u4e9b\u5b89\u5168\u673a\u5236\uff0c\u8bf7\u4f7f\u7528' @ apissecurity() '\u88c5\u9970\u5668\u3002 @ApiSecurity ( 'basic' ) @Controller ( 'cats' ) export class CatsController {} \u5728\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bb0\u5f97\u4f7f\u7528 DocumentBuilder \u5c06\u5b89\u5168\u5b9a\u4e49\u6dfb\u52a0\u5230\u4f60\u7684\u57fa\u7840\u6587\u6863\u4e2d: const options = new DocumentBuilder (). addSecurity ( 'basic' , { type : 'http' , scheme : 'basic' , }); \u4e00\u4e9b\u6700\u6d41\u884c\u7684\u8eab\u4efd\u9a8c\u8bc1\u6280\u672f\u662f\u5185\u7f6e\u7684(\u4f8b\u5982\uff0c\u2018basic\u2019\u548c\u2018\u627f\u8f7d\u8005\u2019)\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u50cf\u4e0a\u9762\u6240\u793a\u90a3\u6837\u624b\u52a8\u5b9a\u4e49\u5b89\u5168\u673a\u5236\u3002 \u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1 \u00b6 \u8981\u542f\u7528\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8bf7\u4f7f\u7528' @ApiBasicAuth() '\u3002 @ApiBasicAuth () @Controller ( 'cats' ) export class CatsController {} Before you run your application, remember to add the security definition to your base document using DocumentBuilder : const options = new DocumentBuilder (). addBasicAuth (); \u6301\u7968\u4eba\u8eab\u4efd\u9a8c\u8bc1 \u00b6 \u8981\u542f\u7528\u627f\u8f7d\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f7f\u7528' @ApiBearerAuth() '\u3002 @ApiBearerAuth () @Controller ( 'cats' ) export class CatsController {} \u5728\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bb0\u5f97\u4f7f\u7528 DocumentBuilder \u5c06\u5b89\u5168\u5b9a\u4e49\u6dfb\u52a0\u5230\u4f60\u7684\u57fa\u7840\u6587\u6863\u4e2d: const options = new DocumentBuilder (). addBearerAuth (); OAuth2 \u8eab\u4efd\u8ba4\u8bc1 \u00b6 To enable OAuth2, use @ApiOAuth2() . @ApiOAuth2 ([ 'pets:write' ]) @Controller ( 'cats' ) export class CatsController {} Before you run your application, remember to add the security definition to your base document using DocumentBuilder : const options = new DocumentBuilder (). addOAuth2 (); Cookie \u9a8c\u8bc1 \u00b6 To enable cookie authentication, use @ApiCookieAuth() . @ApiCookieAuth () @Controller ( 'cats' ) export class CatsController {} Before you run your application, remember to add the security definition to your base document using DocumentBuilder : const options = new DocumentBuilder (). addCookieAuth ( 'optional-session-id' );","title":"\u5b89\u5168"},{"location":"openapi/security/#_1","text":"\u8981\u5b9a\u4e49\u7279\u5b9a\u64cd\u4f5c\u5e94\u8be5\u4f7f\u7528\u54ea\u4e9b\u5b89\u5168\u673a\u5236\uff0c\u8bf7\u4f7f\u7528' @ apissecurity() '\u88c5\u9970\u5668\u3002 @ApiSecurity ( 'basic' ) @Controller ( 'cats' ) export class CatsController {} \u5728\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bb0\u5f97\u4f7f\u7528 DocumentBuilder \u5c06\u5b89\u5168\u5b9a\u4e49\u6dfb\u52a0\u5230\u4f60\u7684\u57fa\u7840\u6587\u6863\u4e2d: const options = new DocumentBuilder (). addSecurity ( 'basic' , { type : 'http' , scheme : 'basic' , }); \u4e00\u4e9b\u6700\u6d41\u884c\u7684\u8eab\u4efd\u9a8c\u8bc1\u6280\u672f\u662f\u5185\u7f6e\u7684(\u4f8b\u5982\uff0c\u2018basic\u2019\u548c\u2018\u627f\u8f7d\u8005\u2019)\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u50cf\u4e0a\u9762\u6240\u793a\u90a3\u6837\u624b\u52a8\u5b9a\u4e49\u5b89\u5168\u673a\u5236\u3002","title":"\u5b89\u5168"},{"location":"openapi/security/#_2","text":"\u8981\u542f\u7528\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8bf7\u4f7f\u7528' @ApiBasicAuth() '\u3002 @ApiBasicAuth () @Controller ( 'cats' ) export class CatsController {} Before you run your application, remember to add the security definition to your base document using DocumentBuilder : const options = new DocumentBuilder (). addBasicAuth ();","title":"\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1"},{"location":"openapi/security/#_3","text":"\u8981\u542f\u7528\u627f\u8f7d\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f7f\u7528' @ApiBearerAuth() '\u3002 @ApiBearerAuth () @Controller ( 'cats' ) export class CatsController {} \u5728\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u8bb0\u5f97\u4f7f\u7528 DocumentBuilder \u5c06\u5b89\u5168\u5b9a\u4e49\u6dfb\u52a0\u5230\u4f60\u7684\u57fa\u7840\u6587\u6863\u4e2d: const options = new DocumentBuilder (). addBearerAuth ();","title":"\u6301\u7968\u4eba\u8eab\u4efd\u9a8c\u8bc1"},{"location":"openapi/security/#oauth2","text":"To enable OAuth2, use @ApiOAuth2() . @ApiOAuth2 ([ 'pets:write' ]) @Controller ( 'cats' ) export class CatsController {} Before you run your application, remember to add the security definition to your base document using DocumentBuilder : const options = new DocumentBuilder (). addOAuth2 ();","title":"OAuth2 \u8eab\u4efd\u8ba4\u8bc1"},{"location":"openapi/security/#cookie","text":"To enable cookie authentication, use @ApiCookieAuth() . @ApiCookieAuth () @Controller ( 'cats' ) export class CatsController {} Before you run your application, remember to add the security definition to your base document using DocumentBuilder : const options = new DocumentBuilder (). addCookieAuth ( 'optional-session-id' );","title":"Cookie \u9a8c\u8bc1"},{"location":"openapi/types-and-parameters/","text":"\u7c7b\u578b\u548c\u53c2\u6570 \u00b6 \u201cSwaggerModule\u201d\u5728\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u4e2d\u641c\u7d22\u6240\u6709\u7684\u201c@Body()\u201d\u3001\u201c@Query()\u201d\u548c\u201c@Param()\u201d\u88c5\u9970\u5668\u6765\u751f\u6210 API \u6587\u6863\u3002 \u5b83\u8fd8\u901a\u8fc7\u5229\u7528\u53cd\u5c04\u521b\u5efa\u76f8\u5e94\u7684\u6a21\u578b\u5b9a\u4e49\u3002\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801: @Post () async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } info Hint \u8981\u663e\u5f0f\u8bbe\u7f6e body \u5b9a\u4e49\uff0c\u8bf7\u4f7f\u7528' @ApiBody() '\u88c5\u9970\u5668(\u4ece' @nestjs/swagger '\u5305\u5bfc\u5165)\u3002 \u57fa\u4e8e\u201cCreateCatDto\u201d\uff0c\u4e0b\u9762\u7684\u6a21\u578b\u5b9a\u4e49\u5c06\u521b\u5efa Swagger UI: \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u867d\u7136\u7c7b\u6709\u4e00\u4e9b\u58f0\u660e\u7684\u5c5e\u6027\uff0c\u4f46\u5b9a\u4e49\u662f\u7a7a\u7684\u3002 \u4e3a\u4e86\u8ba9\u7c7b\u5c5e\u6027\u5bf9\u201cSwaggerModule\u201d\u53ef\u89c1\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u4e48\u7528\u201c@ApiProperty()\u201d\u88c5\u9970\u5668\u6765\u6ce8\u91ca\u5b83\u4eec\uff0c\u8981\u4e48\u4f7f\u7528 CLI \u63d2\u4ef6(\u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb \u63d2\u4ef6 \u90e8\u5206)\uff0c\u5b83\u4f1a\u81ea\u52a8\u5b8c\u6210: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } info Hint \u4e0e\u5176\u624b\u52a8\u6ce8\u91ca\u6bcf\u4e2a\u5c5e\u6027\uff0c\u4e0d\u5982\u8003\u8651\u4f7f\u7528 Swagger \u63d2\u4ef6(\u53c2\u89c1 plugin \u90e8\u5206)\uff0c\u5b83\u4f1a\u81ea\u52a8\u4e3a\u4f60\u63d0\u4f9b\u8fd9\u4e9b\u3002 \u8ba9\u6211\u4eec\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u9a8c\u8bc1\u751f\u6210\u7684\u201cCreateCatDto\u201d\u6a21\u578b: In addition, the @ApiProperty() decorator allows setting various Schema Object properties: @ApiProperty ({ description : 'The age of a cat' , minimum : 1 , default : 1 , }) age : number ; info Hint Instead of explicitly typing the {{\"@ApiProperty({ required: false })\"}} you can use the @ApiPropertyOptional() short-hand decorator. In order to explicitly set the type of the property, use the type key: @ApiProperty ({ type : Number , }) age : number ; Arrays \u00b6 When the property is an array, we must manually indicate the array type as shown below: @ApiProperty ({ type : [ String ] }) names : string []; info Hint Consider using the Swagger plugin (see Plugin section) which will automatically detect arrays. Either include the type as the first element of an array (as shown above) or set the isArray property to true . Circular dependencies \u00b6 When you have circular dependencies between classes, use a lazy function to provide the SwaggerModule with type information: @ApiProperty ({ type : () => Node }) node : Node ; info Hint Consider using the Swagger plugin (see Plugin section) which will automatically detect circular dependencies. Generics and interfaces \u00b6 Since TypeScript does not store metadata about generics or interfaces, when you use them in your DTOs, SwaggerModule may not be able to properly generate model definitions at runtime. For instance, the following code won't be correctly inspected by the Swagger module: createBulk ( @Body () usersDto : CreateUserDto []) In order to overcome this limitation, you can set the type explicitly: @ApiBody ({ type : [ CreateUserDto ] }) createBulk ( @Body () usersDto : CreateUserDto []) Enums \u00b6 To identify an enum , we must manually set the enum property on the @ApiProperty with an array of values. @ApiProperty ({ enum : [ 'Admin' , 'Moderator' , 'User' ]}) role : UserRole ; Alternatively, define an actual TypeScript enum as follows: export enum UserRole { Admin = 'Admin' , Moderator = 'Moderator' , User = 'User' , } You can then use the enum directly with the @Query() parameter decorator in combination with the @ApiQuery() decorator. @ApiQuery ({ name : 'role' , enum : UserRole }) async filterByRole ( @Query ( 'role' ) role : UserRole = UserRole . User ) {} With isArray set to true , the enum can be selected as a multi-select : Enums schema \u00b6 By default, the enum property will add a raw definition of Enum on the parameter . - breed : type : 'string' enum : - Persian - Tabby - Siamese The above specification works fine for most cases. However, if you are utilizing a tool that takes the specification as input and generates client-side code, you might run into a problem with the generated code containing duplicated enums . Consider the following code snippet: // generated client-side code export class CatDetail { breed : CatDetailEnum ; } export class CatInformation { breed : CatInformationEnum ; } export enum CatDetailEnum { Persian = 'Persian' , Tabby = 'Tabby' , Siamese = 'Siamese' , } export enum CatInformationEnum { Persian = 'Persian' , Tabby = 'Tabby' , Siamese = 'Siamese' , } info Hint The above snippet is generated using a tool called NSwag . You can see that now you have two enums that are exactly the same. To address this issue, you can pass an enumName along with the enum property in your decorator. export class CatDetail { @ApiProperty ({ enum : CatBreed , enumName : 'CatBreed' }) breed : CatBreed ; } The enumName property enables @nestjs/swagger to turn CatBreed into its own schema which in turns makes CatBreed enum reusable. The specification will look like the following: CatDetail : type : 'object' properties : ... - breed : schema : $ref : '#/components/schemas/CatBreed' CatBreed : type : string enum : - Persian - Tabby - Siamese info Hint Any decorator that takes enum as a property will also take enumName . Raw definitions \u00b6 In some specific scenarios (e.g., deeply nested arrays, matrices), you may want to describe your type by hand. @ApiProperty ({ type : 'array' , items : { type : 'array' , items : { type : 'number' , }, }, }) coords : number [][]; Likewise, in order to define your input/output content manually in controller classes, use the schema property: @ApiBody ({ schema : { type : 'array' , items : { type : 'array' , items : { type : 'number' , }, }, }, }) async create ( @Body () coords : number [][]) {} Extra models \u00b6 To define additional models that are not directly referenced in your controllers but should be inspected by the Swagger module, use the @ApiExtraModels() decorator: @ApiExtraModels ( ExtraModel ) export class CreateCatDto {} info Hint You only need to use @ApiExtraModels() once for a specific model class. Alternatively, you can pass an options object with the extraModels property specified to the SwaggerModule#createDocument() method, as follows: const document = SwaggerModule . createDocument ( app , options , { extraModels : [ ExtraModel ], }); To get a reference ( $ref ) to your model, use the getSchemaPath(ExtraModel) function: 'application/vnd.api+json' : { schema : { $ref : getSchemaPath ( ExtraModel ) }, }, oneOf, anyOf, allOf \u00b6 To combine schemas, you can use the oneOf , anyOf or allOf keywords ( read more ). @ApiProperty ({ oneOf : [ { $ref : getSchemaPath ( Cat ) }, { $ref : getSchemaPath ( Dog ) }, ], }) pet : Cat | Dog ; If you want to define a polymorphic array (i.e., an array whose members span multiple schemas), you should use a raw definition (see above) to define your type by hand. type Pet = Cat | Dog ; @ApiProperty ({ type : 'array' , items : { oneOf : [ { $ref : getSchemaPath ( Cat ) }, { $ref : getSchemaPath ( Dog ) }, ], }, }) pets : Pet []; info Hint The getSchemaPath() function is imported from @nestjs/swagger . Both Cat and Dog must be defined as extra models using the @ApiExtraModels() decorator (at the class-level).","title":"\u7c7b\u578b\u548c\u53c2\u6570"},{"location":"openapi/types-and-parameters/#_1","text":"\u201cSwaggerModule\u201d\u5728\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u4e2d\u641c\u7d22\u6240\u6709\u7684\u201c@Body()\u201d\u3001\u201c@Query()\u201d\u548c\u201c@Param()\u201d\u88c5\u9970\u5668\u6765\u751f\u6210 API \u6587\u6863\u3002 \u5b83\u8fd8\u901a\u8fc7\u5229\u7528\u53cd\u5c04\u521b\u5efa\u76f8\u5e94\u7684\u6a21\u578b\u5b9a\u4e49\u3002\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801: @Post () async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } info Hint \u8981\u663e\u5f0f\u8bbe\u7f6e body \u5b9a\u4e49\uff0c\u8bf7\u4f7f\u7528' @ApiBody() '\u88c5\u9970\u5668(\u4ece' @nestjs/swagger '\u5305\u5bfc\u5165)\u3002 \u57fa\u4e8e\u201cCreateCatDto\u201d\uff0c\u4e0b\u9762\u7684\u6a21\u578b\u5b9a\u4e49\u5c06\u521b\u5efa Swagger UI: \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u867d\u7136\u7c7b\u6709\u4e00\u4e9b\u58f0\u660e\u7684\u5c5e\u6027\uff0c\u4f46\u5b9a\u4e49\u662f\u7a7a\u7684\u3002 \u4e3a\u4e86\u8ba9\u7c7b\u5c5e\u6027\u5bf9\u201cSwaggerModule\u201d\u53ef\u89c1\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u4e48\u7528\u201c@ApiProperty()\u201d\u88c5\u9970\u5668\u6765\u6ce8\u91ca\u5b83\u4eec\uff0c\u8981\u4e48\u4f7f\u7528 CLI \u63d2\u4ef6(\u66f4\u591a\u4fe1\u606f\u8bf7\u9605\u8bfb \u63d2\u4ef6 \u90e8\u5206)\uff0c\u5b83\u4f1a\u81ea\u52a8\u5b8c\u6210: import { ApiProperty } from '@nestjs/swagger' ; export class CreateCatDto { @ApiProperty () name : string ; @ApiProperty () age : number ; @ApiProperty () breed : string ; } info Hint \u4e0e\u5176\u624b\u52a8\u6ce8\u91ca\u6bcf\u4e2a\u5c5e\u6027\uff0c\u4e0d\u5982\u8003\u8651\u4f7f\u7528 Swagger \u63d2\u4ef6(\u53c2\u89c1 plugin \u90e8\u5206)\uff0c\u5b83\u4f1a\u81ea\u52a8\u4e3a\u4f60\u63d0\u4f9b\u8fd9\u4e9b\u3002 \u8ba9\u6211\u4eec\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u9a8c\u8bc1\u751f\u6210\u7684\u201cCreateCatDto\u201d\u6a21\u578b: In addition, the @ApiProperty() decorator allows setting various Schema Object properties: @ApiProperty ({ description : 'The age of a cat' , minimum : 1 , default : 1 , }) age : number ; info Hint Instead of explicitly typing the {{\"@ApiProperty({ required: false })\"}} you can use the @ApiPropertyOptional() short-hand decorator. In order to explicitly set the type of the property, use the type key: @ApiProperty ({ type : Number , }) age : number ;","title":"\u7c7b\u578b\u548c\u53c2\u6570"},{"location":"openapi/types-and-parameters/#arrays","text":"When the property is an array, we must manually indicate the array type as shown below: @ApiProperty ({ type : [ String ] }) names : string []; info Hint Consider using the Swagger plugin (see Plugin section) which will automatically detect arrays. Either include the type as the first element of an array (as shown above) or set the isArray property to true .","title":"Arrays"},{"location":"openapi/types-and-parameters/#circular-dependencies","text":"When you have circular dependencies between classes, use a lazy function to provide the SwaggerModule with type information: @ApiProperty ({ type : () => Node }) node : Node ; info Hint Consider using the Swagger plugin (see Plugin section) which will automatically detect circular dependencies.","title":"Circular dependencies"},{"location":"openapi/types-and-parameters/#generics-and-interfaces","text":"Since TypeScript does not store metadata about generics or interfaces, when you use them in your DTOs, SwaggerModule may not be able to properly generate model definitions at runtime. For instance, the following code won't be correctly inspected by the Swagger module: createBulk ( @Body () usersDto : CreateUserDto []) In order to overcome this limitation, you can set the type explicitly: @ApiBody ({ type : [ CreateUserDto ] }) createBulk ( @Body () usersDto : CreateUserDto [])","title":"Generics and interfaces"},{"location":"openapi/types-and-parameters/#enums","text":"To identify an enum , we must manually set the enum property on the @ApiProperty with an array of values. @ApiProperty ({ enum : [ 'Admin' , 'Moderator' , 'User' ]}) role : UserRole ; Alternatively, define an actual TypeScript enum as follows: export enum UserRole { Admin = 'Admin' , Moderator = 'Moderator' , User = 'User' , } You can then use the enum directly with the @Query() parameter decorator in combination with the @ApiQuery() decorator. @ApiQuery ({ name : 'role' , enum : UserRole }) async filterByRole ( @Query ( 'role' ) role : UserRole = UserRole . User ) {} With isArray set to true , the enum can be selected as a multi-select :","title":"Enums"},{"location":"openapi/types-and-parameters/#enums-schema","text":"By default, the enum property will add a raw definition of Enum on the parameter . - breed : type : 'string' enum : - Persian - Tabby - Siamese The above specification works fine for most cases. However, if you are utilizing a tool that takes the specification as input and generates client-side code, you might run into a problem with the generated code containing duplicated enums . Consider the following code snippet: // generated client-side code export class CatDetail { breed : CatDetailEnum ; } export class CatInformation { breed : CatInformationEnum ; } export enum CatDetailEnum { Persian = 'Persian' , Tabby = 'Tabby' , Siamese = 'Siamese' , } export enum CatInformationEnum { Persian = 'Persian' , Tabby = 'Tabby' , Siamese = 'Siamese' , } info Hint The above snippet is generated using a tool called NSwag . You can see that now you have two enums that are exactly the same. To address this issue, you can pass an enumName along with the enum property in your decorator. export class CatDetail { @ApiProperty ({ enum : CatBreed , enumName : 'CatBreed' }) breed : CatBreed ; } The enumName property enables @nestjs/swagger to turn CatBreed into its own schema which in turns makes CatBreed enum reusable. The specification will look like the following: CatDetail : type : 'object' properties : ... - breed : schema : $ref : '#/components/schemas/CatBreed' CatBreed : type : string enum : - Persian - Tabby - Siamese info Hint Any decorator that takes enum as a property will also take enumName .","title":"Enums schema"},{"location":"openapi/types-and-parameters/#raw-definitions","text":"In some specific scenarios (e.g., deeply nested arrays, matrices), you may want to describe your type by hand. @ApiProperty ({ type : 'array' , items : { type : 'array' , items : { type : 'number' , }, }, }) coords : number [][]; Likewise, in order to define your input/output content manually in controller classes, use the schema property: @ApiBody ({ schema : { type : 'array' , items : { type : 'array' , items : { type : 'number' , }, }, }, }) async create ( @Body () coords : number [][]) {}","title":"Raw definitions"},{"location":"openapi/types-and-parameters/#extra-models","text":"To define additional models that are not directly referenced in your controllers but should be inspected by the Swagger module, use the @ApiExtraModels() decorator: @ApiExtraModels ( ExtraModel ) export class CreateCatDto {} info Hint You only need to use @ApiExtraModels() once for a specific model class. Alternatively, you can pass an options object with the extraModels property specified to the SwaggerModule#createDocument() method, as follows: const document = SwaggerModule . createDocument ( app , options , { extraModels : [ ExtraModel ], }); To get a reference ( $ref ) to your model, use the getSchemaPath(ExtraModel) function: 'application/vnd.api+json' : { schema : { $ref : getSchemaPath ( ExtraModel ) }, },","title":"Extra models"},{"location":"openapi/types-and-parameters/#oneof-anyof-allof","text":"To combine schemas, you can use the oneOf , anyOf or allOf keywords ( read more ). @ApiProperty ({ oneOf : [ { $ref : getSchemaPath ( Cat ) }, { $ref : getSchemaPath ( Dog ) }, ], }) pet : Cat | Dog ; If you want to define a polymorphic array (i.e., an array whose members span multiple schemas), you should use a raw definition (see above) to define your type by hand. type Pet = Cat | Dog ; @ApiProperty ({ type : 'array' , items : { oneOf : [ { $ref : getSchemaPath ( Cat ) }, { $ref : getSchemaPath ( Dog ) }, ], }, }) pets : Pet []; info Hint The getSchemaPath() function is imported from @nestjs/swagger . Both Cat and Dog must be defined as extra models using the @ApiExtraModels() decorator (at the class-level).","title":"oneOf, anyOf, allOf"},{"location":"recipes/cqrs/","text":"CQRS \u00b6 The flow of simple CRUD (Create, Read, Update and Delete) applications can be described using the following steps: The controllers layer handles HTTP requests and delegates tasks to the services layer. The services layer is where most of the business logic lives. Services use repositories / DAOs to change / persist entities. Entities act as containers for the values, with setters and getters. In most cases, for small and medium-sized applications, this pattern is sufficient. However, when our requirements become more complex, the CQRS model may be more appropriate and scalable. To facilitate that model, Nest provides a lightweight CQRS module . This chapter describes how to use it. Installation \u00b6 First install the required package: $ npm install --save @nestjs/cqrs Commands \u00b6 In this model, each action is called a Command . When a command is dispatched, the application reacts to it. Commands can be dispatched from the services layer, or directly from controllers/gateways. Commands are consumed by Command Handlers . @ @filename ( heroes - game . service ) @Injectable () export class HeroesGameService { constructor ( private commandBus : CommandBus ) {} async killDragon ( heroId : string , killDragonDto : KillDragonDto ) { return this . commandBus . execute ( new KillDragonCommand ( heroId , killDragonDto . dragonId ) ); } } @ @switch @Injectable () @Dependencies ( CommandBus ) export class HeroesGameService { constructor ( commandBus ) { this . commandBus = commandBus ; } async killDragon ( heroId , killDragonDto ) { return this . commandBus . execute ( new KillDragonCommand ( heroId , killDragonDto . dragonId ) ); } } Here's a sample service that dispatches KillDragonCommand . Let's see how the command looks: @ @filename ( kill - dragon . command ) export class KillDragonCommand { constructor ( public readonly heroId : string , public readonly dragonId : string , ) {} } @ @switch export class KillDragonCommand { constructor ( heroId , dragonId ) { this . heroId = heroId ; this . dragonId = dragonId ; } } The CommandBus is a stream of commands. It delegates commands to the equivalent handlers. Each command must have a corresponding Command Handler : @ @filename ( kill - dragon . handler ) @CommandHandler ( KillDragonCommand ) export class KillDragonHandler implements ICommandHandler < KillDragonCommand > { constructor ( private repository : HeroRepository ) {} async execute ( command : KillDragonCommand ) { const { heroId , dragonId } = command ; const hero = this . repository . findOneById ( + heroId ); hero . killEnemy ( dragonId ); await this . repository . persist ( hero ); } } @ @switch @CommandHandler ( KillDragonCommand ) @Dependencies ( HeroRepository ) export class KillDragonHandler { constructor ( repository ) { this . repository = repository ; } async execute ( command ) { const { heroId , dragonId } = command ; const hero = this . repository . findOneById ( + heroId ); hero . killEnemy ( dragonId ); await this . repository . persist ( hero ); } } With this approach, every application state change is driven by the occurrence of a Command . The logic is encapsulated in handlers. With this approach, we can simply add behavior like logging or persisting commands in the database (e.g., for diagnostics purposes). Events \u00b6 Command handlers neatly encapsulate logic. While beneficial, the application structure is still not flexible enough, not reactive . To remedy this, we also introduce events . @ @filename ( hero - killed - dragon . event ) export class HeroKilledDragonEvent { constructor ( public readonly heroId : string , public readonly dragonId : string , ) {} } @ @switch export class HeroKilledDragonEvent { constructor ( heroId , dragonId ) { this . heroId = heroId ; this . dragonId = dragonId ; } } Events are asynchronous. They are dispatched either by models or directly using EventBus . In order to dispatch events, models have to extend the AggregateRoot class. @ @filename ( hero . model ) export class Hero extends AggregateRoot { constructor ( private id : string ) { super (); } killEnemy ( enemyId : string ) { // logic this . apply ( new HeroKilledDragonEvent ( this . id , enemyId )); } } @ @switch export class Hero extends AggregateRoot { constructor ( id ) { super (); this . id = id ; } killEnemy ( enemyId ) { // logic this . apply ( new HeroKilledDragonEvent ( this . id , enemyId )); } } The apply() method does not dispatch events yet because there's no relationship between the model and the EventPublisher class. How do we associate the model and the publisher? By using a publisher mergeObjectContext() method inside our command handler. @ @filename ( kill - dragon . handler ) @CommandHandler ( KillDragonCommand ) export class KillDragonHandler implements ICommandHandler < KillDragonCommand > { constructor ( private repository : HeroRepository , private publisher : EventPublisher , ) {} async execute ( command : KillDragonCommand ) { const { heroId , dragonId } = command ; const hero = this . publisher . mergeObjectContext ( await this . repository . findOneById ( + heroId ), ); hero . killEnemy ( dragonId ); hero . commit (); } } @ @switch @CommandHandler ( KillDragonCommand ) @Dependencies ( HeroRepository , EventPublisher ) export class KillDragonHandler { constructor ( repository , publisher ) { this . repository = repository ; this . publisher = publisher ; } async execute ( command ) { const { heroId , dragonId } = command ; const hero = this . publisher . mergeObjectContext ( await this . repository . findOneById ( + heroId ), ); hero . killEnemy ( dragonId ); hero . commit (); } } Now everything works as expected. Notice that we need to commit() events since they're not being dispatched immediately. Obviously, an object doesn't have to exist up front. We can easily merge type context as well: const HeroModel = this . publisher . mergeClassContext ( Hero ); new HeroModel ( 'id' ); Now the model has the ability to publish events. Additionally, we can emit events manually using EventBus : this . eventBus . publish ( new HeroKilledDragonEvent ()); info Hint The EventBus is an injectable class. Each event can have multiple Event Handlers . @ @filename ( hero - killed - dragon . handler ) @EventsHandler ( HeroKilledDragonEvent ) export class HeroKilledDragonHandler implements IEventHandler < HeroKilledDragonEvent > { constructor ( private repository : HeroRepository ) {} handle ( event : HeroKilledDragonEvent ) { // logic } } Now we can move the write logic into the event handlers. Sagas \u00b6 This type of Event-Driven Architecture improves application reactiveness and scalability . Now, when we have events, we can simply react to them in various ways. Sagas are the final building block from an architectural point of view. Sagas are an extremely powerful feature. A single saga may listen for 1..* events. Using the RxJS library, it can combine, merge, filter or apply other RxJS operators on the event stream. Each saga returns an Observable which contains a command. This command is dispatched asynchronously . @ @filename ( heroes - game . saga ) @Injectable () export class HeroesGameSagas { @Saga () dragonKilled = ( events$ : Observable < any > ) : Observable < ICommand > => { return events$ . pipe ( ofType ( HeroKilledDragonEvent ), map (( event ) => new DropAncientItemCommand ( event . heroId , fakeItemID )), ); } } @ @switch @Injectable () export class HeroesGameSagas { @Saga () dragonKilled = ( events$ ) => { return events$ . pipe ( ofType ( HeroKilledDragonEvent ), map (( event ) => new DropAncientItemCommand ( event . heroId , fakeItemID )), ); } } info Hint The ofType operator is exported from the @nestjs/cqrs package. We declared a rule - when any hero kills the dragon, the ancient item should be dropped. With this in place, DropAncientItemCommand will be dispatched and processed by the appropriate handler. Queries \u00b6 The CqrsModule can also be used for handling queries. The QueryBus follows the same pattern as the CommandsBus . Query handlers should implement the IQueryHandler interface and be marked with the @QueryHandler() decorator. Setup \u00b6 Finally, let's look at how to set up the whole CQRS mechanism. @ @filename ( heroes - game . module ) export const CommandHandlers = [ KillDragonHandler , DropAncientItemHandler ]; export const EventHandlers = [ HeroKilledDragonHandler , HeroFoundItemHandler ]; @Module ({ imports : [ CqrsModule ], controllers : [ HeroesGameController ], providers : [ HeroesGameService , HeroesGameSagas , ... CommandHandlers , ... EventHandlers , HeroRepository , ] }) export class HeroesGameModule {} Summary \u00b6 CommandBus , QueryBus and EventBus are Observables . This means that you can easily subscribe to the whole stream and enrich your application with Event Sourcing . Example \u00b6 A working example is available here .","title":"CQRS"},{"location":"recipes/cqrs/#cqrs","text":"The flow of simple CRUD (Create, Read, Update and Delete) applications can be described using the following steps: The controllers layer handles HTTP requests and delegates tasks to the services layer. The services layer is where most of the business logic lives. Services use repositories / DAOs to change / persist entities. Entities act as containers for the values, with setters and getters. In most cases, for small and medium-sized applications, this pattern is sufficient. However, when our requirements become more complex, the CQRS model may be more appropriate and scalable. To facilitate that model, Nest provides a lightweight CQRS module . This chapter describes how to use it.","title":"CQRS"},{"location":"recipes/cqrs/#installation","text":"First install the required package: $ npm install --save @nestjs/cqrs","title":"Installation"},{"location":"recipes/cqrs/#commands","text":"In this model, each action is called a Command . When a command is dispatched, the application reacts to it. Commands can be dispatched from the services layer, or directly from controllers/gateways. Commands are consumed by Command Handlers . @ @filename ( heroes - game . service ) @Injectable () export class HeroesGameService { constructor ( private commandBus : CommandBus ) {} async killDragon ( heroId : string , killDragonDto : KillDragonDto ) { return this . commandBus . execute ( new KillDragonCommand ( heroId , killDragonDto . dragonId ) ); } } @ @switch @Injectable () @Dependencies ( CommandBus ) export class HeroesGameService { constructor ( commandBus ) { this . commandBus = commandBus ; } async killDragon ( heroId , killDragonDto ) { return this . commandBus . execute ( new KillDragonCommand ( heroId , killDragonDto . dragonId ) ); } } Here's a sample service that dispatches KillDragonCommand . Let's see how the command looks: @ @filename ( kill - dragon . command ) export class KillDragonCommand { constructor ( public readonly heroId : string , public readonly dragonId : string , ) {} } @ @switch export class KillDragonCommand { constructor ( heroId , dragonId ) { this . heroId = heroId ; this . dragonId = dragonId ; } } The CommandBus is a stream of commands. It delegates commands to the equivalent handlers. Each command must have a corresponding Command Handler : @ @filename ( kill - dragon . handler ) @CommandHandler ( KillDragonCommand ) export class KillDragonHandler implements ICommandHandler < KillDragonCommand > { constructor ( private repository : HeroRepository ) {} async execute ( command : KillDragonCommand ) { const { heroId , dragonId } = command ; const hero = this . repository . findOneById ( + heroId ); hero . killEnemy ( dragonId ); await this . repository . persist ( hero ); } } @ @switch @CommandHandler ( KillDragonCommand ) @Dependencies ( HeroRepository ) export class KillDragonHandler { constructor ( repository ) { this . repository = repository ; } async execute ( command ) { const { heroId , dragonId } = command ; const hero = this . repository . findOneById ( + heroId ); hero . killEnemy ( dragonId ); await this . repository . persist ( hero ); } } With this approach, every application state change is driven by the occurrence of a Command . The logic is encapsulated in handlers. With this approach, we can simply add behavior like logging or persisting commands in the database (e.g., for diagnostics purposes).","title":"Commands"},{"location":"recipes/cqrs/#events","text":"Command handlers neatly encapsulate logic. While beneficial, the application structure is still not flexible enough, not reactive . To remedy this, we also introduce events . @ @filename ( hero - killed - dragon . event ) export class HeroKilledDragonEvent { constructor ( public readonly heroId : string , public readonly dragonId : string , ) {} } @ @switch export class HeroKilledDragonEvent { constructor ( heroId , dragonId ) { this . heroId = heroId ; this . dragonId = dragonId ; } } Events are asynchronous. They are dispatched either by models or directly using EventBus . In order to dispatch events, models have to extend the AggregateRoot class. @ @filename ( hero . model ) export class Hero extends AggregateRoot { constructor ( private id : string ) { super (); } killEnemy ( enemyId : string ) { // logic this . apply ( new HeroKilledDragonEvent ( this . id , enemyId )); } } @ @switch export class Hero extends AggregateRoot { constructor ( id ) { super (); this . id = id ; } killEnemy ( enemyId ) { // logic this . apply ( new HeroKilledDragonEvent ( this . id , enemyId )); } } The apply() method does not dispatch events yet because there's no relationship between the model and the EventPublisher class. How do we associate the model and the publisher? By using a publisher mergeObjectContext() method inside our command handler. @ @filename ( kill - dragon . handler ) @CommandHandler ( KillDragonCommand ) export class KillDragonHandler implements ICommandHandler < KillDragonCommand > { constructor ( private repository : HeroRepository , private publisher : EventPublisher , ) {} async execute ( command : KillDragonCommand ) { const { heroId , dragonId } = command ; const hero = this . publisher . mergeObjectContext ( await this . repository . findOneById ( + heroId ), ); hero . killEnemy ( dragonId ); hero . commit (); } } @ @switch @CommandHandler ( KillDragonCommand ) @Dependencies ( HeroRepository , EventPublisher ) export class KillDragonHandler { constructor ( repository , publisher ) { this . repository = repository ; this . publisher = publisher ; } async execute ( command ) { const { heroId , dragonId } = command ; const hero = this . publisher . mergeObjectContext ( await this . repository . findOneById ( + heroId ), ); hero . killEnemy ( dragonId ); hero . commit (); } } Now everything works as expected. Notice that we need to commit() events since they're not being dispatched immediately. Obviously, an object doesn't have to exist up front. We can easily merge type context as well: const HeroModel = this . publisher . mergeClassContext ( Hero ); new HeroModel ( 'id' ); Now the model has the ability to publish events. Additionally, we can emit events manually using EventBus : this . eventBus . publish ( new HeroKilledDragonEvent ()); info Hint The EventBus is an injectable class. Each event can have multiple Event Handlers . @ @filename ( hero - killed - dragon . handler ) @EventsHandler ( HeroKilledDragonEvent ) export class HeroKilledDragonHandler implements IEventHandler < HeroKilledDragonEvent > { constructor ( private repository : HeroRepository ) {} handle ( event : HeroKilledDragonEvent ) { // logic } } Now we can move the write logic into the event handlers.","title":"Events"},{"location":"recipes/cqrs/#sagas","text":"This type of Event-Driven Architecture improves application reactiveness and scalability . Now, when we have events, we can simply react to them in various ways. Sagas are the final building block from an architectural point of view. Sagas are an extremely powerful feature. A single saga may listen for 1..* events. Using the RxJS library, it can combine, merge, filter or apply other RxJS operators on the event stream. Each saga returns an Observable which contains a command. This command is dispatched asynchronously . @ @filename ( heroes - game . saga ) @Injectable () export class HeroesGameSagas { @Saga () dragonKilled = ( events$ : Observable < any > ) : Observable < ICommand > => { return events$ . pipe ( ofType ( HeroKilledDragonEvent ), map (( event ) => new DropAncientItemCommand ( event . heroId , fakeItemID )), ); } } @ @switch @Injectable () export class HeroesGameSagas { @Saga () dragonKilled = ( events$ ) => { return events$ . pipe ( ofType ( HeroKilledDragonEvent ), map (( event ) => new DropAncientItemCommand ( event . heroId , fakeItemID )), ); } } info Hint The ofType operator is exported from the @nestjs/cqrs package. We declared a rule - when any hero kills the dragon, the ancient item should be dropped. With this in place, DropAncientItemCommand will be dispatched and processed by the appropriate handler.","title":"Sagas"},{"location":"recipes/cqrs/#queries","text":"The CqrsModule can also be used for handling queries. The QueryBus follows the same pattern as the CommandsBus . Query handlers should implement the IQueryHandler interface and be marked with the @QueryHandler() decorator.","title":"Queries"},{"location":"recipes/cqrs/#setup","text":"Finally, let's look at how to set up the whole CQRS mechanism. @ @filename ( heroes - game . module ) export const CommandHandlers = [ KillDragonHandler , DropAncientItemHandler ]; export const EventHandlers = [ HeroKilledDragonHandler , HeroFoundItemHandler ]; @Module ({ imports : [ CqrsModule ], controllers : [ HeroesGameController ], providers : [ HeroesGameService , HeroesGameSagas , ... CommandHandlers , ... EventHandlers , HeroRepository , ] }) export class HeroesGameModule {}","title":"Setup"},{"location":"recipes/cqrs/#summary","text":"CommandBus , QueryBus and EventBus are Observables . This means that you can easily subscribe to the whole stream and enrich your application with Event Sourcing .","title":"Summary"},{"location":"recipes/cqrs/#example","text":"A working example is available here .","title":"Example"},{"location":"recipes/crud-generator/","text":"CRUD \u751f\u6210\u5668 \u00b6 \u5728\u9879\u76ee\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\uff0c\u5f53\u6211\u4eec\u6784\u5efa\u65b0\u7279\u6027\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u5411\u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u65b0\u8d44\u6e90\u3002 \u8fd9\u4e9b\u8d44\u6e90\u901a\u5e38\u9700\u8981\u591a\u6b21\u91cd\u590d\u7684\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5b9a\u4e49\u65b0\u8d44\u6e90\u65f6\u90fd\u5fc5\u987b\u91cd\u590d\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u4ecb\u7ecd \u00b6 \u8ba9\u6211\u4eec\u8bbe\u60f3\u4e00\u4e2a\u771f\u5b9e\u7684\u573a\u666f\uff0c\u5176\u4e2d\u6211\u4eec\u9700\u8981\u4e3a\u4e24\u4e2a\u5b9e\u4f53\u516c\u5f00 CRUD \u7aef\u70b9\uff0c\u6bd4\u5982 User \u548c Product \u5b9e\u4f53\u3002 \u6309\u7167\u6700\u4f73\u5b9e\u8df5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b9e\u4f53\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u4ee5\u4e0b\u51e0\u4e2a\u64cd\u4f5c: \u751f\u6210\u4e00\u4e2a\u6a21\u5757( nest g mo )\u6765\u4fdd\u6301\u4ee3\u7801\u7684\u7ec4\u7ec7\uff0c\u5e76\u5efa\u7acb\u6e05\u6670\u7684\u8fb9\u754c(\u5206\u7ec4\u76f8\u5173\u7ec4\u4ef6) \u751f\u6210\u4e00\u4e2a\u63a7\u5236\u5668( nest g co )\u6765\u5b9a\u4e49 CRUD \u8def\u7531(\u6216 GraphQL \u5e94\u7528\u7a0b\u5e8f\u7684\u67e5\u8be2/\u7a81\u53d8) \u751f\u6210\u670d\u52a1( nest g s )\u6765\u5b9e\u73b0\u548c\u9694\u79bb\u4e1a\u52a1\u903b\u8f91 \u751f\u6210\u4e00\u4e2a\u5b9e\u4f53\u7c7b/\u63a5\u53e3\u6765\u8868\u793a\u8d44\u6e90\u6570\u636e\u5f62\u72b6 \u751f\u6210\u6570\u636e\u4f20\u8f93\u5bf9\u8c61(\u6216 GraphQL \u5e94\u7528\u7a0b\u5e8f\u7684\u8f93\u5165)\uff0c\u4ee5\u5b9a\u4e49\u6570\u636e\u5c06\u5982\u4f55\u901a\u8fc7\u7f51\u7edc\u53d1\u9001 \u8fd9\u662f\u5f88\u591a\u6b65\u9aa4! \u4e3a\u4e86\u5e2e\u52a9\u52a0\u5feb\u8fd9\u4e2a\u91cd\u590d\u7684\u8fc7\u7a0b\uff0c Nest CLI \u63d0\u4f9b\u4e86\u4e00\u4e2a\u751f\u6210\u5668(\u793a\u610f\u56fe)\uff0c\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u6240\u6709\u7684\u6837\u677f\u4ee3\u7801\uff0c\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u505a\u6240\u6709\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u5e76\u8ba9\u5f00\u53d1\u4eba\u5458\u7684\u4f53\u9a8c\u66f4\u7b80\u5355\u3002 info Note \u539f\u7406\u56fe\u652f\u6301\u751f\u6210 HTTP \u63a7\u5236\u5668\u3001 Microservice \u63a7\u5236\u5668\u3001 GraphQL \u89e3\u6790\u5668(\u4ee3\u7801\u4f18\u5148\u548c\u6a21\u5f0f\u4f18\u5148)\u548c WebSocket \u7f51\u5173\u3002 \u751f\u6210\u65b0\u8d44\u6e90 \u00b6 \u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d44\u6e90\uff0c\u53ea\u9700\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4: $ nest g resource nest g resource command not only generates all the NestJS building blocks (module, service, controller classes) but also an entity class, DTO classes as well as the testing ( .spec ) files. Below you can see the generated controller file (for REST API): @Controller ( 'users' ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post () create ( @Body () createUserDto : CreateUserDto ) { return this . usersService . create ( createUserDto ); } @Get () findAll () { return this . usersService . findAll (); } @Get ( ':id' ) findOne ( @Param ( 'id' ) id : string ) { return this . usersService . findOne ( + id ); } @Patch ( ':id' ) update ( @Param ( 'id' ) id : string , @Body () updateUserDto : UpdateUserDto ) { return this . usersService . update ( + id , updateUserDto ); } @Delete ( ':id' ) remove ( @Param ( 'id' ) id : string ) { return this . usersService . remove ( + id ); } } \u6b64\u5916\uff0c\u5b83\u8fd8\u81ea\u52a8\u4e3a\u6240\u6709 CRUD \u7aef\u70b9\u521b\u5efa\u5360\u4f4d\u7b26(REST api \u7684\u8def\u7531\u3001GraphQL \u7684\u67e5\u8be2\u548c\u7a81\u53d8\u3001\u5fae\u670d\u52a1\u548c WebSocket \u7f51\u5173\u7684\u6d88\u606f\u8ba2\u9605)\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u90fd\u4e0d\u9700\u8981\u52a8\u4e00\u6839\u624b\u6307\u3002 warning Note \u751f\u6210\u7684\u670d\u52a1\u7c7b \u4e0d \u4e0e\u4efb\u4f55\u7279\u5b9a\u7684 ORM(\u6216\u6570\u636e\u6e90) \u7ed1\u5b9a\u3002 \u8fd9\u4f7f\u5f97\u751f\u6210\u5668\u8db3\u591f\u901a\u7528\uff0c\u53ef\u4ee5\u6ee1\u8db3\u4efb\u4f55\u9879\u76ee\u7684\u9700\u8981\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u65b9\u6cd5\u90fd\u5c06\u5305\u542b\u5360\u4f4d\u7b26\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528\u7279\u5b9a\u4e8e\u9879\u76ee\u7684\u6570\u636e\u6e90\u586b\u5145\u5360\u4f4d\u7b26\u3002 \u540c\u6837\uff0c\u5982\u679c\u4f60\u60f3\u4e3a\u4e00\u4e2a GraphQL \u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u89e3\u6790\u5668\uff0c\u53ea\u9700\u9009\u62e9 GraphQL(\u4ee3\u7801\u4f18\u5148) (\u6216 GraphQL(\u6a21\u5f0f\u4f18\u5148) )\u4f5c\u4e3a\u4f60\u7684\u4f20\u8f93\u5c42\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cNestJS \u4f1a\u751f\u6210\u4e00\u4e2a\u89e3\u6790\u5668\u7c7b\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a REST API \u63a7\u5236\u5668: $ nest g resource users > ? What transport layer do you use? GraphQL ( code first ) > ? Would you like to generate CRUD entry points? Yes > CREATE src/users/users.module.ts ( 224 bytes ) > CREATE src/users/users.resolver.spec.ts ( 525 bytes ) > CREATE src/users/users.resolver.ts ( 1109 bytes ) > CREATE src/users/users.service.spec.ts ( 453 bytes ) > CREATE src/users/users.service.ts ( 625 bytes ) > CREATE src/users/dto/create-user.input.ts ( 195 bytes ) > CREATE src/users/dto/update-user.input.ts ( 281 bytes ) > CREATE src/users/entities/user.entity.ts ( 187 bytes ) > UPDATE src/app.module.ts ( 312 bytes ) info Hint \u4e3a\u4e86\u907f\u514d\u751f\u6210\u6d4b\u8bd5\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012 --no-spec \u6807\u5fd7\uff0c\u5982\u4e0b\u6240\u793a: nest g resource users --no-spec \u6211\u4eec\u53ef\u4ee5\u5728\u4e0b\u9762\u770b\u5230\uff0c\u4e0d\u4ec5\u521b\u5efa\u4e86\u6240\u6709\u7684\u6837\u677f\u7a81\u53d8\u548c\u67e5\u8be2\uff0c\u800c\u4e14\u6240\u6709\u7684\u4e1c\u897f\u90fd\u8054\u7cfb\u5728\u4e00\u8d77\u3002 \u6211\u4eec\u6b63\u5728\u4f7f\u7528 UsersService , User Entity,\u6211\u4eec\u7684 DTO\u3002 import { Resolver , Query , Mutation , Args , Int } from '@nestjs/graphql' ; import { UsersService } from './users.service' ; import { User } from './entities/user.entity' ; import { CreateUserInput } from './dto/create-user.input' ; import { UpdateUserInput } from './dto/update-user.input' ; @Resolver (() => User ) export class UsersResolver { constructor ( private readonly usersService : UsersService ) {} @Mutation (() => User ) createUser ( @Args ( 'createUserInput' ) createUserInput : CreateUserInput ) { return this . usersService . create ( createUserInput ); } @Query (() => [ User ], { name : 'users`}) findAll() { return this.usersService.findAll(); } @Query(() => User, { name: ' user `}) findOne(@Args('id', { type: () => Int }) id: number) { return this.usersService.findOne(id); } @Mutation(() => User) updateUser(@Args('updateUserInput') updateUserInput: UpdateUserInput) { return this.usersService.update(updateUserInput.id, updateUserInput); } @Mutation(() => User) removeUser(@Args('id', { type: () => Int }) id: number) { return this.usersService.remove(id); } }","title":"CRUD \u751f\u6210\u5668"},{"location":"recipes/crud-generator/#crud","text":"\u5728\u9879\u76ee\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\uff0c\u5f53\u6211\u4eec\u6784\u5efa\u65b0\u7279\u6027\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u5411\u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u65b0\u8d44\u6e90\u3002 \u8fd9\u4e9b\u8d44\u6e90\u901a\u5e38\u9700\u8981\u591a\u6b21\u91cd\u590d\u7684\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5b9a\u4e49\u65b0\u8d44\u6e90\u65f6\u90fd\u5fc5\u987b\u91cd\u590d\u8fd9\u4e9b\u64cd\u4f5c\u3002","title":"CRUD \u751f\u6210\u5668"},{"location":"recipes/crud-generator/#_1","text":"\u8ba9\u6211\u4eec\u8bbe\u60f3\u4e00\u4e2a\u771f\u5b9e\u7684\u573a\u666f\uff0c\u5176\u4e2d\u6211\u4eec\u9700\u8981\u4e3a\u4e24\u4e2a\u5b9e\u4f53\u516c\u5f00 CRUD \u7aef\u70b9\uff0c\u6bd4\u5982 User \u548c Product \u5b9e\u4f53\u3002 \u6309\u7167\u6700\u4f73\u5b9e\u8df5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b9e\u4f53\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u4ee5\u4e0b\u51e0\u4e2a\u64cd\u4f5c: \u751f\u6210\u4e00\u4e2a\u6a21\u5757( nest g mo )\u6765\u4fdd\u6301\u4ee3\u7801\u7684\u7ec4\u7ec7\uff0c\u5e76\u5efa\u7acb\u6e05\u6670\u7684\u8fb9\u754c(\u5206\u7ec4\u76f8\u5173\u7ec4\u4ef6) \u751f\u6210\u4e00\u4e2a\u63a7\u5236\u5668( nest g co )\u6765\u5b9a\u4e49 CRUD \u8def\u7531(\u6216 GraphQL \u5e94\u7528\u7a0b\u5e8f\u7684\u67e5\u8be2/\u7a81\u53d8) \u751f\u6210\u670d\u52a1( nest g s )\u6765\u5b9e\u73b0\u548c\u9694\u79bb\u4e1a\u52a1\u903b\u8f91 \u751f\u6210\u4e00\u4e2a\u5b9e\u4f53\u7c7b/\u63a5\u53e3\u6765\u8868\u793a\u8d44\u6e90\u6570\u636e\u5f62\u72b6 \u751f\u6210\u6570\u636e\u4f20\u8f93\u5bf9\u8c61(\u6216 GraphQL \u5e94\u7528\u7a0b\u5e8f\u7684\u8f93\u5165)\uff0c\u4ee5\u5b9a\u4e49\u6570\u636e\u5c06\u5982\u4f55\u901a\u8fc7\u7f51\u7edc\u53d1\u9001 \u8fd9\u662f\u5f88\u591a\u6b65\u9aa4! \u4e3a\u4e86\u5e2e\u52a9\u52a0\u5feb\u8fd9\u4e2a\u91cd\u590d\u7684\u8fc7\u7a0b\uff0c Nest CLI \u63d0\u4f9b\u4e86\u4e00\u4e2a\u751f\u6210\u5668(\u793a\u610f\u56fe)\uff0c\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u6240\u6709\u7684\u6837\u677f\u4ee3\u7801\uff0c\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u505a\u6240\u6709\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u5e76\u8ba9\u5f00\u53d1\u4eba\u5458\u7684\u4f53\u9a8c\u66f4\u7b80\u5355\u3002 info Note \u539f\u7406\u56fe\u652f\u6301\u751f\u6210 HTTP \u63a7\u5236\u5668\u3001 Microservice \u63a7\u5236\u5668\u3001 GraphQL \u89e3\u6790\u5668(\u4ee3\u7801\u4f18\u5148\u548c\u6a21\u5f0f\u4f18\u5148)\u548c WebSocket \u7f51\u5173\u3002","title":"\u4ecb\u7ecd"},{"location":"recipes/crud-generator/#_2","text":"\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d44\u6e90\uff0c\u53ea\u9700\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4: $ nest g resource nest g resource command not only generates all the NestJS building blocks (module, service, controller classes) but also an entity class, DTO classes as well as the testing ( .spec ) files. Below you can see the generated controller file (for REST API): @Controller ( 'users' ) export class UsersController { constructor ( private readonly usersService : UsersService ) {} @Post () create ( @Body () createUserDto : CreateUserDto ) { return this . usersService . create ( createUserDto ); } @Get () findAll () { return this . usersService . findAll (); } @Get ( ':id' ) findOne ( @Param ( 'id' ) id : string ) { return this . usersService . findOne ( + id ); } @Patch ( ':id' ) update ( @Param ( 'id' ) id : string , @Body () updateUserDto : UpdateUserDto ) { return this . usersService . update ( + id , updateUserDto ); } @Delete ( ':id' ) remove ( @Param ( 'id' ) id : string ) { return this . usersService . remove ( + id ); } } \u6b64\u5916\uff0c\u5b83\u8fd8\u81ea\u52a8\u4e3a\u6240\u6709 CRUD \u7aef\u70b9\u521b\u5efa\u5360\u4f4d\u7b26(REST api \u7684\u8def\u7531\u3001GraphQL \u7684\u67e5\u8be2\u548c\u7a81\u53d8\u3001\u5fae\u670d\u52a1\u548c WebSocket \u7f51\u5173\u7684\u6d88\u606f\u8ba2\u9605)\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u90fd\u4e0d\u9700\u8981\u52a8\u4e00\u6839\u624b\u6307\u3002 warning Note \u751f\u6210\u7684\u670d\u52a1\u7c7b \u4e0d \u4e0e\u4efb\u4f55\u7279\u5b9a\u7684 ORM(\u6216\u6570\u636e\u6e90) \u7ed1\u5b9a\u3002 \u8fd9\u4f7f\u5f97\u751f\u6210\u5668\u8db3\u591f\u901a\u7528\uff0c\u53ef\u4ee5\u6ee1\u8db3\u4efb\u4f55\u9879\u76ee\u7684\u9700\u8981\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u65b9\u6cd5\u90fd\u5c06\u5305\u542b\u5360\u4f4d\u7b26\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528\u7279\u5b9a\u4e8e\u9879\u76ee\u7684\u6570\u636e\u6e90\u586b\u5145\u5360\u4f4d\u7b26\u3002 \u540c\u6837\uff0c\u5982\u679c\u4f60\u60f3\u4e3a\u4e00\u4e2a GraphQL \u5e94\u7528\u7a0b\u5e8f\u751f\u6210\u89e3\u6790\u5668\uff0c\u53ea\u9700\u9009\u62e9 GraphQL(\u4ee3\u7801\u4f18\u5148) (\u6216 GraphQL(\u6a21\u5f0f\u4f18\u5148) )\u4f5c\u4e3a\u4f60\u7684\u4f20\u8f93\u5c42\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cNestJS \u4f1a\u751f\u6210\u4e00\u4e2a\u89e3\u6790\u5668\u7c7b\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a REST API \u63a7\u5236\u5668: $ nest g resource users > ? What transport layer do you use? GraphQL ( code first ) > ? Would you like to generate CRUD entry points? Yes > CREATE src/users/users.module.ts ( 224 bytes ) > CREATE src/users/users.resolver.spec.ts ( 525 bytes ) > CREATE src/users/users.resolver.ts ( 1109 bytes ) > CREATE src/users/users.service.spec.ts ( 453 bytes ) > CREATE src/users/users.service.ts ( 625 bytes ) > CREATE src/users/dto/create-user.input.ts ( 195 bytes ) > CREATE src/users/dto/update-user.input.ts ( 281 bytes ) > CREATE src/users/entities/user.entity.ts ( 187 bytes ) > UPDATE src/app.module.ts ( 312 bytes ) info Hint \u4e3a\u4e86\u907f\u514d\u751f\u6210\u6d4b\u8bd5\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012 --no-spec \u6807\u5fd7\uff0c\u5982\u4e0b\u6240\u793a: nest g resource users --no-spec \u6211\u4eec\u53ef\u4ee5\u5728\u4e0b\u9762\u770b\u5230\uff0c\u4e0d\u4ec5\u521b\u5efa\u4e86\u6240\u6709\u7684\u6837\u677f\u7a81\u53d8\u548c\u67e5\u8be2\uff0c\u800c\u4e14\u6240\u6709\u7684\u4e1c\u897f\u90fd\u8054\u7cfb\u5728\u4e00\u8d77\u3002 \u6211\u4eec\u6b63\u5728\u4f7f\u7528 UsersService , User Entity,\u6211\u4eec\u7684 DTO\u3002 import { Resolver , Query , Mutation , Args , Int } from '@nestjs/graphql' ; import { UsersService } from './users.service' ; import { User } from './entities/user.entity' ; import { CreateUserInput } from './dto/create-user.input' ; import { UpdateUserInput } from './dto/update-user.input' ; @Resolver (() => User ) export class UsersResolver { constructor ( private readonly usersService : UsersService ) {} @Mutation (() => User ) createUser ( @Args ( 'createUserInput' ) createUserInput : CreateUserInput ) { return this . usersService . create ( createUserInput ); } @Query (() => [ User ], { name : 'users`}) findAll() { return this.usersService.findAll(); } @Query(() => User, { name: ' user `}) findOne(@Args('id', { type: () => Int }) id: number) { return this.usersService.findOne(id); } @Mutation(() => User) updateUser(@Args('updateUserInput') updateUserInput: UpdateUserInput) { return this.usersService.update(updateUserInput.id, updateUserInput); } @Mutation(() => User) removeUser(@Args('id', { type: () => Int }) id: number) { return this.usersService.remove(id); } }","title":"\u751f\u6210\u65b0\u8d44\u6e90"},{"location":"recipes/documentation/","text":"\u6587\u6863 \u00b6 Compodoc \u662f\u4e00\u4e2a Angular \u5e94\u7528\u7684\u6587\u6863\u5de5\u5177\u3002 \u7531\u4e8e Nest \u548c Angular \u5171\u4eab\u76f8\u4f3c\u7684\u9879\u76ee\u548c\u4ee3\u7801\u7ed3\u6784\uff0c Compodoc \u4e5f\u9002\u7528\u4e8e Nest \u5e94\u7528\u7a0b\u5e8f\u3002 \u8bbe\u7f6e \u00b6 \u5728\u73b0\u6709\u7684 Nest \u9879\u76ee\u4e2d\u8bbe\u7f6e Compodoc \u975e\u5e38\u7b80\u5355\u3002 \u9996\u5148\u5728\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ec8\u7aef\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6dfb\u52a0 dev-dependency: $ npm i -D @compodoc/compodoc \u751f\u6210 \u00b6 \u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u751f\u6210\u9879\u76ee\u6587\u6863(\u4e3a\u4e86\u652f\u6301 npx\uff0c\u9700\u8981 npm 6)\u3002 \u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \u4ee5\u83b7\u5f97\u66f4\u591a\u9009\u9879\u3002 $ npx @compodoc/compodoc -p tsconfig.json -s \u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230 http://localhost:8080 \u3002 \u4f60\u5e94\u8be5\u770b\u5230\u4e00\u4e2a\u521d\u59cb\u7684 Nest CLI \u9879\u76ee: \u8d21\u732e \u00b6 \u60a8\u53ef\u4ee5\u53c2\u4e0e Compodoc \u9879\u76ee \u6b64\u5904 \u5e76\u4e3a\u5176\u505a\u51fa\u8d21\u732e\u3002","title":"Compodoc"},{"location":"recipes/documentation/#_1","text":"Compodoc \u662f\u4e00\u4e2a Angular \u5e94\u7528\u7684\u6587\u6863\u5de5\u5177\u3002 \u7531\u4e8e Nest \u548c Angular \u5171\u4eab\u76f8\u4f3c\u7684\u9879\u76ee\u548c\u4ee3\u7801\u7ed3\u6784\uff0c Compodoc \u4e5f\u9002\u7528\u4e8e Nest \u5e94\u7528\u7a0b\u5e8f\u3002","title":"\u6587\u6863"},{"location":"recipes/documentation/#_2","text":"\u5728\u73b0\u6709\u7684 Nest \u9879\u76ee\u4e2d\u8bbe\u7f6e Compodoc \u975e\u5e38\u7b80\u5355\u3002 \u9996\u5148\u5728\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ec8\u7aef\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6dfb\u52a0 dev-dependency: $ npm i -D @compodoc/compodoc","title":"\u8bbe\u7f6e"},{"location":"recipes/documentation/#_3","text":"\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u751f\u6210\u9879\u76ee\u6587\u6863(\u4e3a\u4e86\u652f\u6301 npx\uff0c\u9700\u8981 npm 6)\u3002 \u8bf7\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \u4ee5\u83b7\u5f97\u66f4\u591a\u9009\u9879\u3002 $ npx @compodoc/compodoc -p tsconfig.json -s \u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u5bfc\u822a\u5230 http://localhost:8080 \u3002 \u4f60\u5e94\u8be5\u770b\u5230\u4e00\u4e2a\u521d\u59cb\u7684 Nest CLI \u9879\u76ee:","title":"\u751f\u6210"},{"location":"recipes/documentation/#_4","text":"\u60a8\u53ef\u4ee5\u53c2\u4e0e Compodoc \u9879\u76ee \u6b64\u5904 \u5e76\u4e3a\u5176\u505a\u51fa\u8d21\u732e\u3002","title":"\u8d21\u732e"},{"location":"recipes/hot-reload/","text":"\u70ed\u91cd\u8f7d \u00b6 \u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u5f15\u5bfc\u8fc7\u7a0b\u5f71\u54cd\u6700\u5927\u7684\u662f TypeScript \u7f16\u8bd1 \u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u4f7f\u7528 webpack HMR(\u70ed\u6a21\u5757\u66ff\u6362)\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u53d1\u751f\u66f4\u6539\u65f6\u91cd\u65b0\u7f16\u8bd1\u6574\u4e2a\u9879\u76ee\u3002 \u8fd9\u5927\u5927\u51cf\u5c11\u4e86\u5b9e\u4f8b\u5316\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u65f6\u95f4\uff0c\u5e76\u4f7f\u8fed\u4ee3\u5f00\u53d1\u53d8\u5f97\u66f4\u5bb9\u6613\u3002 warning Warning \u6ce8\u610f' webpack '\u4e0d\u4f1a\u81ea\u52a8\u590d\u5236\u4f60\u7684\u8d44\u6e90(\u4f8b\u5982:' graphql '\u6587\u4ef6)\u5230' dist '\u6587\u4ef6\u5939\u3002 \u7c7b\u4f3c\u5730\uff0c' webpack '\u4e0d\u517c\u5bb9 glob \u7684\u9759\u6001\u8def\u5f84(\u4f8b\u5982\uff0c' TypeOrmModule '\u4e2d\u7684' entities '\u5c5e\u6027)\u3002 \u4f7f\u7528 CLI \u00b6 \u5982\u679c\u4f7f\u7528 Nest CLI \uff0c\u914d\u7f6e\u8fc7\u7a0b\u975e\u5e38\u7b80\u5355\u3002 CLI \u5305\u88c5\u4e86' webpack '\uff0c\u5b83\u5141\u8bb8\u4f7f\u7528' HotModuleReplacementPlugin '\u3002 \u5b89\u88c5 \u00b6 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack info Hint If you use Yarn Berry (not classic Yarn), install the webpack-pnp-externals package instead of the webpack-node-externals . \u914d\u7f6e \u00b6 Once the installation is complete, create a webpack-hmr.config.js file in the root directory of your application. const nodeExternals = require ( 'webpack-node-externals' ); const { RunScriptWebpackPlugin } = require ( 'run-script-webpack-plugin' ); module .exports = function ( options , webpack ) { return { ... options , entry : [ 'webpack/hot/poll?100' , options . entry ], externals : [ nodeExternals ({ allowlist : [ 'webpack/hot/poll?100' ], }), ], plugins : [ ... options . plugins , new webpack . HotModuleReplacementPlugin (), new webpack . WatchIgnorePlugin ({ paths : [ /\\.js$/ , /\\.d\\.ts$/ ], }), new RunScriptWebpackPlugin ({ name : options.output.filename }), ], }; }; info Hint With Yarn Berry (not classic Yarn), instead of using the nodeExternals in the externals configuration property, use the WebpackPnpExternals from webpack-pnp-externals package: WebpackPnpExternals({{ '{' }} exclude: ['webpack/hot/poll?100'] {{ '}' }}) . This function takes the original object containing the default webpack configuration as a first argument, and the reference to the underlying webpack package used by the Nest CLI as the second one. Also, it returns a modified webpack configuration with the HotModuleReplacementPlugin , WatchIgnorePlugin , and RunScriptWebpackPlugin plugins. Hot-Module Replacement \u00b6 To enable HMR , open the application entry file ( main.ts ) and add the following webpack-related instructions: declare const module : any ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); await app . listen ( 3000 ); if ( module .hot ) { module .hot.accept (); module .hot.dispose (() => app . close ()); } } bootstrap (); To simplify the execution process, add a script to your package.json file. \"start:dev\" : \"nest build --webpack --webpackPath webpack-hmr.config.js --watch\" Now simply open your command line and run the following command: $ npm run start:dev \u4e0d\u5b9e\u7528 CLI \u00b6 \u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528 Nest CLI \uff0c\u914d\u7f6e\u4f1a\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b(\u9700\u8981\u66f4\u591a\u7684\u624b\u52a8\u6b65\u9aa4)\u3002 \u5b89\u88c5 \u00b6 First install the required packages: $ npm i --save-dev webpack webpack-cli webpack-node-externals ts-loader run-script-webpack-plugin info Hint If you use Yarn Berry (not classic Yarn), install the webpack-pnp-externals package instead of the webpack-node-externals . \u914d\u7f6e \u00b6 Once the installation is complete, create a webpack.config.js file in the root directory of your application. const webpack = require ( 'webpack' ); const path = require ( 'path' ); const nodeExternals = require ( 'webpack-node-externals' ); const { RunScriptWebpackPlugin } = require ( 'run-script-webpack-plugin' ); module .exports = { entry : [ 'webpack/hot/poll?100' , './src/main.ts' ], target : 'node' , externals : [ nodeExternals ({ allowlist : [ 'webpack/hot/poll?100' ], }), ], module : { rules : [ { test : /.tsx?$/ , use : 'ts-loader' , exclude : /node_modules/ , }, ], }, mode : 'development' , resolve : { extensions : [ '.tsx' , '.ts' , '.js' ], }, plugins : [ new webpack . HotModuleReplacementPlugin (), new RunScriptWebpackPlugin ({ name : 'server.js' }), ], output : { path : path.join ( __dirname , 'dist' ), filename : 'server.js' , }, }; info Hint With Yarn Berry (not classic Yarn), instead of using the nodeExternals in the externals configuration property, use the WebpackPnpExternals from webpack-pnp-externals package: WebpackPnpExternals({{ '{' }} exclude: ['webpack/hot/poll?100'] {{ '}' }}) . This configuration tells webpack a few essential things about your application: location of the entry file, which directory should be used to hold compiled files, and what kind of loader we want to use to compile source files. Generally, you should be able to use this file as-is, even if you don't fully understand all of the options. Hot-Module Replacement \u00b6 To enable HMR , open the application entry file ( main.ts ) and add the following webpack-related instructions: declare const module : any ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); await app . listen ( 3000 ); if ( module .hot ) { module .hot.accept (); module .hot.dispose (() => app . close ()); } } bootstrap (); To simplify the execution process, add a script to your package.json file. \"start:dev\" : \"webpack --config webpack.config.js --watch\" Now simply open your command line and run the following command: $ npm run start:dev \u793a\u4f8b \u00b6 A working example is available here . TypeORM \u00b6 If you're using @nestjs/typeorm , you'll need to add keepConnectionAlive: true to your TypeORM configuration.","title":"Hot \u91cd\u8f7d"},{"location":"recipes/hot-reload/#_1","text":"\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7684\u5f15\u5bfc\u8fc7\u7a0b\u5f71\u54cd\u6700\u5927\u7684\u662f TypeScript \u7f16\u8bd1 \u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u4f7f\u7528 webpack HMR(\u70ed\u6a21\u5757\u66ff\u6362)\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u53d1\u751f\u66f4\u6539\u65f6\u91cd\u65b0\u7f16\u8bd1\u6574\u4e2a\u9879\u76ee\u3002 \u8fd9\u5927\u5927\u51cf\u5c11\u4e86\u5b9e\u4f8b\u5316\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u65f6\u95f4\uff0c\u5e76\u4f7f\u8fed\u4ee3\u5f00\u53d1\u53d8\u5f97\u66f4\u5bb9\u6613\u3002 warning Warning \u6ce8\u610f' webpack '\u4e0d\u4f1a\u81ea\u52a8\u590d\u5236\u4f60\u7684\u8d44\u6e90(\u4f8b\u5982:' graphql '\u6587\u4ef6)\u5230' dist '\u6587\u4ef6\u5939\u3002 \u7c7b\u4f3c\u5730\uff0c' webpack '\u4e0d\u517c\u5bb9 glob \u7684\u9759\u6001\u8def\u5f84(\u4f8b\u5982\uff0c' TypeOrmModule '\u4e2d\u7684' entities '\u5c5e\u6027)\u3002","title":"\u70ed\u91cd\u8f7d"},{"location":"recipes/hot-reload/#cli","text":"\u5982\u679c\u4f7f\u7528 Nest CLI \uff0c\u914d\u7f6e\u8fc7\u7a0b\u975e\u5e38\u7b80\u5355\u3002 CLI \u5305\u88c5\u4e86' webpack '\uff0c\u5b83\u5141\u8bb8\u4f7f\u7528' HotModuleReplacementPlugin '\u3002","title":"\u4f7f\u7528 CLI"},{"location":"recipes/hot-reload/#_2","text":"\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack info Hint If you use Yarn Berry (not classic Yarn), install the webpack-pnp-externals package instead of the webpack-node-externals .","title":"\u5b89\u88c5"},{"location":"recipes/hot-reload/#_3","text":"Once the installation is complete, create a webpack-hmr.config.js file in the root directory of your application. const nodeExternals = require ( 'webpack-node-externals' ); const { RunScriptWebpackPlugin } = require ( 'run-script-webpack-plugin' ); module .exports = function ( options , webpack ) { return { ... options , entry : [ 'webpack/hot/poll?100' , options . entry ], externals : [ nodeExternals ({ allowlist : [ 'webpack/hot/poll?100' ], }), ], plugins : [ ... options . plugins , new webpack . HotModuleReplacementPlugin (), new webpack . WatchIgnorePlugin ({ paths : [ /\\.js$/ , /\\.d\\.ts$/ ], }), new RunScriptWebpackPlugin ({ name : options.output.filename }), ], }; }; info Hint With Yarn Berry (not classic Yarn), instead of using the nodeExternals in the externals configuration property, use the WebpackPnpExternals from webpack-pnp-externals package: WebpackPnpExternals({{ '{' }} exclude: ['webpack/hot/poll?100'] {{ '}' }}) . This function takes the original object containing the default webpack configuration as a first argument, and the reference to the underlying webpack package used by the Nest CLI as the second one. Also, it returns a modified webpack configuration with the HotModuleReplacementPlugin , WatchIgnorePlugin , and RunScriptWebpackPlugin plugins.","title":"\u914d\u7f6e"},{"location":"recipes/hot-reload/#hot-module-replacement","text":"To enable HMR , open the application entry file ( main.ts ) and add the following webpack-related instructions: declare const module : any ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); await app . listen ( 3000 ); if ( module .hot ) { module .hot.accept (); module .hot.dispose (() => app . close ()); } } bootstrap (); To simplify the execution process, add a script to your package.json file. \"start:dev\" : \"nest build --webpack --webpackPath webpack-hmr.config.js --watch\" Now simply open your command line and run the following command: $ npm run start:dev","title":"Hot-Module Replacement"},{"location":"recipes/hot-reload/#cli_1","text":"\u5982\u679c\u4f60\u6ca1\u6709\u4f7f\u7528 Nest CLI \uff0c\u914d\u7f6e\u4f1a\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b(\u9700\u8981\u66f4\u591a\u7684\u624b\u52a8\u6b65\u9aa4)\u3002","title":"\u4e0d\u5b9e\u7528 CLI"},{"location":"recipes/hot-reload/#_4","text":"First install the required packages: $ npm i --save-dev webpack webpack-cli webpack-node-externals ts-loader run-script-webpack-plugin info Hint If you use Yarn Berry (not classic Yarn), install the webpack-pnp-externals package instead of the webpack-node-externals .","title":"\u5b89\u88c5"},{"location":"recipes/hot-reload/#_5","text":"Once the installation is complete, create a webpack.config.js file in the root directory of your application. const webpack = require ( 'webpack' ); const path = require ( 'path' ); const nodeExternals = require ( 'webpack-node-externals' ); const { RunScriptWebpackPlugin } = require ( 'run-script-webpack-plugin' ); module .exports = { entry : [ 'webpack/hot/poll?100' , './src/main.ts' ], target : 'node' , externals : [ nodeExternals ({ allowlist : [ 'webpack/hot/poll?100' ], }), ], module : { rules : [ { test : /.tsx?$/ , use : 'ts-loader' , exclude : /node_modules/ , }, ], }, mode : 'development' , resolve : { extensions : [ '.tsx' , '.ts' , '.js' ], }, plugins : [ new webpack . HotModuleReplacementPlugin (), new RunScriptWebpackPlugin ({ name : 'server.js' }), ], output : { path : path.join ( __dirname , 'dist' ), filename : 'server.js' , }, }; info Hint With Yarn Berry (not classic Yarn), instead of using the nodeExternals in the externals configuration property, use the WebpackPnpExternals from webpack-pnp-externals package: WebpackPnpExternals({{ '{' }} exclude: ['webpack/hot/poll?100'] {{ '}' }}) . This configuration tells webpack a few essential things about your application: location of the entry file, which directory should be used to hold compiled files, and what kind of loader we want to use to compile source files. Generally, you should be able to use this file as-is, even if you don't fully understand all of the options.","title":"\u914d\u7f6e"},{"location":"recipes/hot-reload/#hot-module-replacement_1","text":"To enable HMR , open the application entry file ( main.ts ) and add the following webpack-related instructions: declare const module : any ; async function bootstrap () { const app = await NestFactory . create ( AppModule ); await app . listen ( 3000 ); if ( module .hot ) { module .hot.accept (); module .hot.dispose (() => app . close ()); } } bootstrap (); To simplify the execution process, add a script to your package.json file. \"start:dev\" : \"webpack --config webpack.config.js --watch\" Now simply open your command line and run the following command: $ npm run start:dev","title":"Hot-Module Replacement"},{"location":"recipes/hot-reload/#_6","text":"A working example is available here .","title":"\u793a\u4f8b"},{"location":"recipes/hot-reload/#typeorm","text":"If you're using @nestjs/typeorm , you'll need to add keepConnectionAlive: true to your TypeORM configuration.","title":"TypeORM"},{"location":"recipes/mikroorm/","text":"MikroORM \u00b6 This recipe is here to help users getting started with MikroORM in Nest. MikroORM is the TypeScript ORM for Node.js based on Data Mapper, Unit of Work and Identity Map patterns. It is a great alternative to TypeORM and migration from TypeORM should be fairly easy. The complete documentation on MikroORM can be found here . info info @mikro-orm/nestjs is a third party package and is not managed by the NestJS core team. Please, report any issues found with the library in the appropriate repository . Installation \u00b6 Easiest way to integrate MikroORM to Nest is via @mikro-orm/nestjs module . Simply install it next to Nest, MikroORM and underlying driver: $ npm i @mikro-orm/core @mikro-orm/nestjs @mikro-orm/mysql # for mysql/mariadb MikroORM also supports postgres , sqlite , and mongo . See the official docs for all drivers. Once the installation process is completed, we can import the MikroOrmModule into the root AppModule . @Module ({ imports : [ MikroOrmModule . forRoot ({ entities : [ './dist/entities' ], entitiesTs : [ './src/entities' ], dbName : 'my-db-name.sqlite3' , type : 'sqlite' , }), ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} The forRoot() method accepts the same configuration object as init() from the MikroORM package. Check this page for the complete configuration documentation. Alternatively we can configure the CLI by creating a configuration file mikro-orm.config.ts and then call the forRoot() without any arguments. This won't work when you use a build tools that use tree shaking. @Module ({ imports : [ MikroOrmModule . forRoot (), ], ... }) export class AppModule {} Afterward, the EntityManager will be available to inject across entire project (without importing any module elsewhere). import { MikroORM } from '@mikro-orm/core' ; // Import EntityManager from your driver package or `@mikro-orm/knex` import { EntityManager } from '@mikro-orm/mysql' ; @Injectable () export class MyService { constructor ( private readonly orm : MikroORM , private readonly em : EntityManager , ) {} } info info Notice that the EntityManager is imported from the @mikro-orm/driver package, where driver is mysql , sqlite , postgres or what driver you are using. In case you have @mikro-orm/knex installed as a dependency, you can also import the EntityManager from there. Repositories \u00b6 MikroORM supports the repository design pattern. For every entity we can create a repository. Read the complete documentation on repositories here . To define which repositories should be registered in the current scope you can use the forFeature() method. For example, in this way: info info You should not register your base entities via forFeature() , as there are no repositories for those. On the other hand, base entities need to be part of the list in forRoot() (or in the ORM config in general). // photo.module.ts @Module ({ imports : [ MikroOrmModule . forFeature ([ Photo ])], providers : [ PhotoService ], controllers : [ PhotoController ], }) export class PhotoModule {} and import it into the root AppModule : // app.module.ts @Module ({ imports : [ MikroOrmModule . forRoot (...), PhotoModule ], }) export class AppModule {} In this way we can inject the PhotoRepository to the PhotoService using the @InjectRepository() decorator: @Injectable () export class PhotoService { constructor ( @InjectRepository ( Photo ) private readonly photoRepository : EntityRepository < Photo > , ) {} } Using custom repositories \u00b6 When using custom repositories, we can get around the need for @InjectRepository() decorator by naming our repositories the same way as getRepositoryToken() method do: export const getRepositoryToken = < T > ( entity : EntityName < T > ) => ` ${ Utils . className ( entity ) } Repository` ; In other words, as long as we name the repository same was as the entity is called, appending Repository suffix, the repository will be registered automatically in the Nest DI container. // `**./author.entity.ts**` @Entity () export class Author { // to allow inference in `em.getRepository()` [ EntityRepositoryType ] ? : AuthorRepository ; } // `**./author.repository.ts**` @Repository ( Author ) export class AuthorRepository extends EntityRepository < Author > { // your custom methods... } As the custom repository name is the same as what getRepositoryToken() would return, we do not need the @InjectRepository() decorator anymore: @Injectable () export class MyService { constructor ( private readonly repo : AuthorRepository ) {} } Load entities automatically \u00b6 info info autoLoadEntities option was added in v4.1.0 Manually adding entities to the entities array of the connection options can be tedious. In addition, referencing entities from the root module breaks application domain boundaries and causes leaking implementation details to other parts of the application. To solve this issue, static glob paths can be used. Note, however, that glob paths are not supported by webpack, so if you are building your application within a monorepo, you won't be able to use them. To address this issue, an alternative solution is provided. To automatically load entities, set the autoLoadEntities property of the configuration object (passed into the forRoot() method) to true , as shown below: @Module ({ imports : [ MikroOrmModule . forRoot ({ ... autoLoadEntities : true , }), ], }) export class AppModule {} With that option specified, every entity registered through the forFeature() method will be automatically added to the entities array of the configuration object. info info Note that entities that aren't registered through the forFeature() method, but are only referenced from the entity (via a relationship), won't be included by way of the autoLoadEntities setting. info info Using autoLoadEntities also has no effect on the MikroORM CLI - for that we still need CLI config with the full list of entities. On the other hand, we can use globs there, as the CLI won't go thru webpack. Request scoped handlers in queues \u00b6 info info @UseRequestContext() decorator was added in v4.1.0 As mentioned in the docs , we need a clean state for each request. That is handled automatically thanks to the RequestContext helper registered via middleware. But middlewares are executed only for regular HTTP request handles, what if we need a request scoped method outside of that? One example of that is queue handlers or scheduled tasks. We can use the @UseRequestContext() decorator. It requires you to first inject the MikroORM instance to current context, it will be then used to create the context for you. Under the hood, the decorator will register new request context for your method and execute it inside the context. @Injectable () export class MyService { constructor ( private readonly orm : MikroORM ) {} @UseRequestContext () async doSomething () { // this will be executed in a separate context } } Using AsyncLocalStorage for request context \u00b6 By default, the domain api is used in the RequestContext helper. Since @mikro-orm/core@4.0.3 , you can use the new AsyncLocalStorage too, if you are on up to date node version: // create new (global) storage instance const storage = new AsyncLocalStorage < EntityManager > (); @Module ({ imports : [ MikroOrmModule . forRoot ({ // ... registerRequestContext : false , // disable automatatic middleware context : () => storage . getStore (), // use our AsyncLocalStorage instance }), ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} // register the request context middleware const app = await NestFactory . create ( AppModule , { ... }); const orm = app . get ( MikroORM ); app . use (( req , res , next ) => { storage . run ( orm . em . fork ( true , true ), next ); }); Testing \u00b6 The @mikro-orm/nestjs package exposes getRepositoryToken() function that returns prepared token based on a given entity to allow mocking the repository. @Module ({ providers : [ PhotoService , { provide : getRepositoryToken ( Photo ), useValue : mockedRepository , }, ], }) export class PhotoModule {} Example \u00b6 A real world example of NestJS with MikroORM can be found here","title":"MikroORM"},{"location":"recipes/mikroorm/#mikroorm","text":"This recipe is here to help users getting started with MikroORM in Nest. MikroORM is the TypeScript ORM for Node.js based on Data Mapper, Unit of Work and Identity Map patterns. It is a great alternative to TypeORM and migration from TypeORM should be fairly easy. The complete documentation on MikroORM can be found here . info info @mikro-orm/nestjs is a third party package and is not managed by the NestJS core team. Please, report any issues found with the library in the appropriate repository .","title":"MikroORM"},{"location":"recipes/mikroorm/#installation","text":"Easiest way to integrate MikroORM to Nest is via @mikro-orm/nestjs module . Simply install it next to Nest, MikroORM and underlying driver: $ npm i @mikro-orm/core @mikro-orm/nestjs @mikro-orm/mysql # for mysql/mariadb MikroORM also supports postgres , sqlite , and mongo . See the official docs for all drivers. Once the installation process is completed, we can import the MikroOrmModule into the root AppModule . @Module ({ imports : [ MikroOrmModule . forRoot ({ entities : [ './dist/entities' ], entitiesTs : [ './src/entities' ], dbName : 'my-db-name.sqlite3' , type : 'sqlite' , }), ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} The forRoot() method accepts the same configuration object as init() from the MikroORM package. Check this page for the complete configuration documentation. Alternatively we can configure the CLI by creating a configuration file mikro-orm.config.ts and then call the forRoot() without any arguments. This won't work when you use a build tools that use tree shaking. @Module ({ imports : [ MikroOrmModule . forRoot (), ], ... }) export class AppModule {} Afterward, the EntityManager will be available to inject across entire project (without importing any module elsewhere). import { MikroORM } from '@mikro-orm/core' ; // Import EntityManager from your driver package or `@mikro-orm/knex` import { EntityManager } from '@mikro-orm/mysql' ; @Injectable () export class MyService { constructor ( private readonly orm : MikroORM , private readonly em : EntityManager , ) {} } info info Notice that the EntityManager is imported from the @mikro-orm/driver package, where driver is mysql , sqlite , postgres or what driver you are using. In case you have @mikro-orm/knex installed as a dependency, you can also import the EntityManager from there.","title":"Installation"},{"location":"recipes/mikroorm/#repositories","text":"MikroORM supports the repository design pattern. For every entity we can create a repository. Read the complete documentation on repositories here . To define which repositories should be registered in the current scope you can use the forFeature() method. For example, in this way: info info You should not register your base entities via forFeature() , as there are no repositories for those. On the other hand, base entities need to be part of the list in forRoot() (or in the ORM config in general). // photo.module.ts @Module ({ imports : [ MikroOrmModule . forFeature ([ Photo ])], providers : [ PhotoService ], controllers : [ PhotoController ], }) export class PhotoModule {} and import it into the root AppModule : // app.module.ts @Module ({ imports : [ MikroOrmModule . forRoot (...), PhotoModule ], }) export class AppModule {} In this way we can inject the PhotoRepository to the PhotoService using the @InjectRepository() decorator: @Injectable () export class PhotoService { constructor ( @InjectRepository ( Photo ) private readonly photoRepository : EntityRepository < Photo > , ) {} }","title":"Repositories"},{"location":"recipes/mikroorm/#using-custom-repositories","text":"When using custom repositories, we can get around the need for @InjectRepository() decorator by naming our repositories the same way as getRepositoryToken() method do: export const getRepositoryToken = < T > ( entity : EntityName < T > ) => ` ${ Utils . className ( entity ) } Repository` ; In other words, as long as we name the repository same was as the entity is called, appending Repository suffix, the repository will be registered automatically in the Nest DI container. // `**./author.entity.ts**` @Entity () export class Author { // to allow inference in `em.getRepository()` [ EntityRepositoryType ] ? : AuthorRepository ; } // `**./author.repository.ts**` @Repository ( Author ) export class AuthorRepository extends EntityRepository < Author > { // your custom methods... } As the custom repository name is the same as what getRepositoryToken() would return, we do not need the @InjectRepository() decorator anymore: @Injectable () export class MyService { constructor ( private readonly repo : AuthorRepository ) {} }","title":"Using custom repositories"},{"location":"recipes/mikroorm/#load-entities-automatically","text":"info info autoLoadEntities option was added in v4.1.0 Manually adding entities to the entities array of the connection options can be tedious. In addition, referencing entities from the root module breaks application domain boundaries and causes leaking implementation details to other parts of the application. To solve this issue, static glob paths can be used. Note, however, that glob paths are not supported by webpack, so if you are building your application within a monorepo, you won't be able to use them. To address this issue, an alternative solution is provided. To automatically load entities, set the autoLoadEntities property of the configuration object (passed into the forRoot() method) to true , as shown below: @Module ({ imports : [ MikroOrmModule . forRoot ({ ... autoLoadEntities : true , }), ], }) export class AppModule {} With that option specified, every entity registered through the forFeature() method will be automatically added to the entities array of the configuration object. info info Note that entities that aren't registered through the forFeature() method, but are only referenced from the entity (via a relationship), won't be included by way of the autoLoadEntities setting. info info Using autoLoadEntities also has no effect on the MikroORM CLI - for that we still need CLI config with the full list of entities. On the other hand, we can use globs there, as the CLI won't go thru webpack.","title":"Load entities automatically"},{"location":"recipes/mikroorm/#request-scoped-handlers-in-queues","text":"info info @UseRequestContext() decorator was added in v4.1.0 As mentioned in the docs , we need a clean state for each request. That is handled automatically thanks to the RequestContext helper registered via middleware. But middlewares are executed only for regular HTTP request handles, what if we need a request scoped method outside of that? One example of that is queue handlers or scheduled tasks. We can use the @UseRequestContext() decorator. It requires you to first inject the MikroORM instance to current context, it will be then used to create the context for you. Under the hood, the decorator will register new request context for your method and execute it inside the context. @Injectable () export class MyService { constructor ( private readonly orm : MikroORM ) {} @UseRequestContext () async doSomething () { // this will be executed in a separate context } }","title":"Request scoped handlers in queues"},{"location":"recipes/mikroorm/#using-asynclocalstorage-for-request-context","text":"By default, the domain api is used in the RequestContext helper. Since @mikro-orm/core@4.0.3 , you can use the new AsyncLocalStorage too, if you are on up to date node version: // create new (global) storage instance const storage = new AsyncLocalStorage < EntityManager > (); @Module ({ imports : [ MikroOrmModule . forRoot ({ // ... registerRequestContext : false , // disable automatatic middleware context : () => storage . getStore (), // use our AsyncLocalStorage instance }), ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} // register the request context middleware const app = await NestFactory . create ( AppModule , { ... }); const orm = app . get ( MikroORM ); app . use (( req , res , next ) => { storage . run ( orm . em . fork ( true , true ), next ); });","title":"Using AsyncLocalStorage for request context"},{"location":"recipes/mikroorm/#testing","text":"The @mikro-orm/nestjs package exposes getRepositoryToken() function that returns prepared token based on a given entity to allow mocking the repository. @Module ({ providers : [ PhotoService , { provide : getRepositoryToken ( Photo ), useValue : mockedRepository , }, ], }) export class PhotoModule {}","title":"Testing"},{"location":"recipes/mikroorm/#example","text":"A real world example of NestJS with MikroORM can be found here","title":"Example"},{"location":"recipes/mongodb/","text":"MongoDB (Mongoose) \u00b6 \u8b66\u544a \u5728\u672c\u6587\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u521b\u5efa\u57fa\u4e8e Mongoose \u5305\u7684 DatabaseModule \u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u5305\u542b\u4e86\u5927\u91cf\u7684\u5f00\u9500\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u73b0\u6210\u53ef\u7528\u7684\u4e13\u7528 @nestjs/mongoose \u5305\u6765\u7701\u7565\u8fd9\u4e9b\u5f00\u9500\u3002 \u8981\u4e86\u89e3\u66f4\u591a\uff0c\u8bf7\u53c2\u89c1 \u6b64\u5904 . Mongoose \u662f\u76ee\u524d\u6700\u6d41\u884c\u7684 MongoDB \u5bf9\u8c61\u5efa\u6a21\u5de5\u5177\u3002 \u5f00\u59cb \u00b6 \u8981\u5f00\u59cb\u8fd9\u4e2a\u5e93\u7684\u5192\u9669\uff0c\u6211\u4eec\u5fc5\u987b\u5b89\u88c5\u6240\u6709\u5fc5\u9700\u7684\u4f9d\u8d56: $ npm install -- save mongoose \u6211\u4eec\u9700\u8981\u505a\u7684\u7b2c\u4e00\u6b65\u662f\u4f7f\u7528 connect() \u51fd\u6570\u5efa\u7acb\u4e0e\u6570\u636e\u5e93\u7684\u8fde\u63a5\u3002 connect() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Promise \uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a async provider . @ @filename ( database . providers ) import * as mongoose from 'mongoose' ; export const databaseProviders = [ { provide : 'DATABASE_CONNECTION' , useFactory : () : Promise < typeof mongoose > => mongoose . connect ( 'mongodb://localhost/nest' ), }, ]; @ @switch import * as mongoose from 'mongoose' ; export const databaseProviders = [ { provide : 'DATABASE_CONNECTION' , useFactory : () => mongoose . connect ( 'mongodb://localhost/nest' ), }, ]; info \u63d0\u793a \u6309\u7167\u6700\u4f73\u5b9e\u8df5\uff0c\u6211\u4eec\u5728\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u58f0\u660e\u4e86\u5b9a\u5236\u7684\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u8be5\u6587\u4ef6\u6709\u4e00\u4e2a *.providers.ts \u7684\u540e\u7f00\u3002 \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5bfc\u51fa\u8fd9\u4e9b\u63d0\u4f9b\u5668\uff0c\u4f7f\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u80fd\u591f\u8bbf\u95ee\u5b83\u4eec\u3002 @ @filename ( database . module ) import { Module } from '@nestjs/common' ; import { databaseProviders } from './database.providers' ; @Module ({ providers : [... databaseProviders ], exports : [... databaseProviders ], }) export class DatabaseModule {} \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u6765\u6ce8\u5165 Connection \u5bf9\u8c61\u3002 \u6bcf\u4e2a\u4f9d\u8d56\u4e8e Connection \u5f02\u6b65\u63d0\u4f9b\u7a0b\u5e8f\u7684\u7c7b\u5c06\u7b49\u5f85\uff0c\u76f4\u5230 Promise \u88ab\u89e3\u6790\u3002 \u6a21\u578b\u6ce8\u5165 \u00b6 \u4f7f\u7528 Mongoose\uff0c\u4e00\u5207\u90fd\u662f\u4ece Schema \u6d3e\u751f\u51fa\u6765\u7684\u3002\u8ba9\u6211\u4eec\u5b9a\u4e49 CatSchema : @ @filename ( schemas / cat . schema ) import * as mongoose from 'mongoose' ; export const CatSchema = new mongoose . Schema ({ name : String , age : Number , breed : String , }); CatsSchema \u5c5e\u4e8e cats \u76ee\u5f55\u3002\u8fd9\u4e2a\u76ee\u5f55\u8868\u793a CatsModule \u3002 \u73b0\u5728\u662f\u65f6\u5019\u521b\u5efa\u4e00\u4e2a Model provider \u4e86: @ @filename ( cats . providers ) import { Connection } from 'mongoose' ; import { CatSchema } from './schemas/cat.schema' ; export const catsProviders = [ { provide : 'CAT_MODEL' , useFactory : ( connection : Connection ) => connection . model ( 'Cat' , CatSchema ), inject : [ 'DATABASE_CONNECTION' ], }, ]; @ @switch import { CatSchema } from './schemas/cat.schema' ; export const catsProviders = [ { provide : 'CAT_MODEL' , useFactory : ( connection ) => connection . model ( 'Cat' , CatSchema ), inject : [ 'DATABASE_CONNECTION' ], }, ]; warning \u8b66\u544a \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4f60\u5e94\u8be5\u907f\u514d\u4f7f\u7528 \u9b54\u6cd5\u5b57\u7b26\u4e32 \u3002 CAT_MODEL \u548c DATABASE_CONNECTION \u90fd\u5e94\u8be5\u4fdd\u5b58\u5728\u5206\u5f00\u7684 constants.ts \u6587\u4ef6\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u5c06 CAT_MODEL \u6ce8\u5165\u5230 CatsService \u4e2d: @ @filename ( cats . service ) import { Model } from 'mongoose' ; import { Injectable , Inject } from '@nestjs/common' ; import { Cat } from './interfaces/cat.interface' ; import { CreateCatDto } from './dto/create-cat.dto' ; @Injectable () export class CatsService { constructor ( @Inject ( 'CAT_MODEL' ) private catModel : Model < Cat > , ) {} async create ( createCatDto : CreateCatDto ) : Promise < Cat > { const createdCat = new this . catModel ( createCatDto ); return createdCat . save (); } async findAll () : Promise < Cat [] > { return this . catModel . find (). exec (); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; @Injectable () @Dependencies ( 'CAT_MODEL' ) export class CatsService { constructor ( catModel ) { this . catModel = catModel ; } async create ( createCatDto ) { const createdCat = new this . catModel ( createCatDto ); return createdCat . save (); } async findAll () { return this . catModel . find (). exec (); } } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Cat \u63a5\u53e3\u3002\u8fd9\u4e2a\u63a5\u53e3\u6269\u5c55\u4e86 mongoose \u5305\u4e2d\u7684 Document : import { Document } from 'mongoose' ; export interface Cat extends Document { readonly name : string ; readonly age : number ; readonly breed : string ; } The database connection is asynchronous , but Nest makes this process completely invisible for the end-user. The CatModel class is waiting for the db connection, and the CatsService is delayed until model is ready to use. The entire application can start when each class is instantiated. \u6570\u636e\u5e93\u8fde\u63a5\u662f \u5f02\u6b65 \u7684\uff0c\u4f46\u662f Nest \u4f7f\u8fd9\u4e2a\u8fc7\u7a0b\u5bf9\u6700\u7ec8\u7528\u6237\u5b8c\u5168\u4e0d\u53ef\u89c1\u3002 CatModel \u7c7b\u6b63\u5728\u7b49\u5f85\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u800c CatsService \u88ab\u5ef6\u8fdf\u5230\u6a21\u578b\u51c6\u5907\u597d\u4f7f\u7528\u3002 \u5f53\u6bcf\u4e2a\u7c7b\u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u542f\u52a8\u4e86\u3002 \u8fd9\u662f\u6700\u540e\u4e00\u4e2a CatsModule : @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; import { catsProviders } from './cats.providers' ; import { DatabaseModule } from '../database/database.module' ; @Module ({ imports : [ DatabaseModule ], controllers : [ CatsController ], providers : [ CatsService , ... catsProviders , ], }) export class CatsModule {} info \u63d0\u793a \u4e0d\u8981\u5fd8\u8bb0\u5c06 CatsModule \u5bfc\u5165\u5230\u6839\u6a21\u5757 AppModule \u4e2d\u3002","title":"Mongoose"},{"location":"recipes/mongodb/#mongodb-mongoose","text":"\u8b66\u544a \u5728\u672c\u6587\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u521b\u5efa\u57fa\u4e8e Mongoose \u5305\u7684 DatabaseModule \u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u5305\u542b\u4e86\u5927\u91cf\u7684\u5f00\u9500\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u73b0\u6210\u53ef\u7528\u7684\u4e13\u7528 @nestjs/mongoose \u5305\u6765\u7701\u7565\u8fd9\u4e9b\u5f00\u9500\u3002 \u8981\u4e86\u89e3\u66f4\u591a\uff0c\u8bf7\u53c2\u89c1 \u6b64\u5904 . Mongoose \u662f\u76ee\u524d\u6700\u6d41\u884c\u7684 MongoDB \u5bf9\u8c61\u5efa\u6a21\u5de5\u5177\u3002","title":"MongoDB (Mongoose)"},{"location":"recipes/mongodb/#_1","text":"\u8981\u5f00\u59cb\u8fd9\u4e2a\u5e93\u7684\u5192\u9669\uff0c\u6211\u4eec\u5fc5\u987b\u5b89\u88c5\u6240\u6709\u5fc5\u9700\u7684\u4f9d\u8d56: $ npm install -- save mongoose \u6211\u4eec\u9700\u8981\u505a\u7684\u7b2c\u4e00\u6b65\u662f\u4f7f\u7528 connect() \u51fd\u6570\u5efa\u7acb\u4e0e\u6570\u636e\u5e93\u7684\u8fde\u63a5\u3002 connect() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Promise \uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a async provider . @ @filename ( database . providers ) import * as mongoose from 'mongoose' ; export const databaseProviders = [ { provide : 'DATABASE_CONNECTION' , useFactory : () : Promise < typeof mongoose > => mongoose . connect ( 'mongodb://localhost/nest' ), }, ]; @ @switch import * as mongoose from 'mongoose' ; export const databaseProviders = [ { provide : 'DATABASE_CONNECTION' , useFactory : () => mongoose . connect ( 'mongodb://localhost/nest' ), }, ]; info \u63d0\u793a \u6309\u7167\u6700\u4f73\u5b9e\u8df5\uff0c\u6211\u4eec\u5728\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u58f0\u660e\u4e86\u5b9a\u5236\u7684\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u8be5\u6587\u4ef6\u6709\u4e00\u4e2a *.providers.ts \u7684\u540e\u7f00\u3002 \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u5bfc\u51fa\u8fd9\u4e9b\u63d0\u4f9b\u5668\uff0c\u4f7f\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u80fd\u591f\u8bbf\u95ee\u5b83\u4eec\u3002 @ @filename ( database . module ) import { Module } from '@nestjs/common' ; import { databaseProviders } from './database.providers' ; @Module ({ providers : [... databaseProviders ], exports : [... databaseProviders ], }) export class DatabaseModule {} \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u6765\u6ce8\u5165 Connection \u5bf9\u8c61\u3002 \u6bcf\u4e2a\u4f9d\u8d56\u4e8e Connection \u5f02\u6b65\u63d0\u4f9b\u7a0b\u5e8f\u7684\u7c7b\u5c06\u7b49\u5f85\uff0c\u76f4\u5230 Promise \u88ab\u89e3\u6790\u3002","title":"\u5f00\u59cb"},{"location":"recipes/mongodb/#_2","text":"\u4f7f\u7528 Mongoose\uff0c\u4e00\u5207\u90fd\u662f\u4ece Schema \u6d3e\u751f\u51fa\u6765\u7684\u3002\u8ba9\u6211\u4eec\u5b9a\u4e49 CatSchema : @ @filename ( schemas / cat . schema ) import * as mongoose from 'mongoose' ; export const CatSchema = new mongoose . Schema ({ name : String , age : Number , breed : String , }); CatsSchema \u5c5e\u4e8e cats \u76ee\u5f55\u3002\u8fd9\u4e2a\u76ee\u5f55\u8868\u793a CatsModule \u3002 \u73b0\u5728\u662f\u65f6\u5019\u521b\u5efa\u4e00\u4e2a Model provider \u4e86: @ @filename ( cats . providers ) import { Connection } from 'mongoose' ; import { CatSchema } from './schemas/cat.schema' ; export const catsProviders = [ { provide : 'CAT_MODEL' , useFactory : ( connection : Connection ) => connection . model ( 'Cat' , CatSchema ), inject : [ 'DATABASE_CONNECTION' ], }, ]; @ @switch import { CatSchema } from './schemas/cat.schema' ; export const catsProviders = [ { provide : 'CAT_MODEL' , useFactory : ( connection ) => connection . model ( 'Cat' , CatSchema ), inject : [ 'DATABASE_CONNECTION' ], }, ]; warning \u8b66\u544a \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4f60\u5e94\u8be5\u907f\u514d\u4f7f\u7528 \u9b54\u6cd5\u5b57\u7b26\u4e32 \u3002 CAT_MODEL \u548c DATABASE_CONNECTION \u90fd\u5e94\u8be5\u4fdd\u5b58\u5728\u5206\u5f00\u7684 constants.ts \u6587\u4ef6\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @Inject() \u88c5\u9970\u5668\u5c06 CAT_MODEL \u6ce8\u5165\u5230 CatsService \u4e2d: @ @filename ( cats . service ) import { Model } from 'mongoose' ; import { Injectable , Inject } from '@nestjs/common' ; import { Cat } from './interfaces/cat.interface' ; import { CreateCatDto } from './dto/create-cat.dto' ; @Injectable () export class CatsService { constructor ( @Inject ( 'CAT_MODEL' ) private catModel : Model < Cat > , ) {} async create ( createCatDto : CreateCatDto ) : Promise < Cat > { const createdCat = new this . catModel ( createCatDto ); return createdCat . save (); } async findAll () : Promise < Cat [] > { return this . catModel . find (). exec (); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; @Injectable () @Dependencies ( 'CAT_MODEL' ) export class CatsService { constructor ( catModel ) { this . catModel = catModel ; } async create ( createCatDto ) { const createdCat = new this . catModel ( createCatDto ); return createdCat . save (); } async findAll () { return this . catModel . find (). exec (); } } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Cat \u63a5\u53e3\u3002\u8fd9\u4e2a\u63a5\u53e3\u6269\u5c55\u4e86 mongoose \u5305\u4e2d\u7684 Document : import { Document } from 'mongoose' ; export interface Cat extends Document { readonly name : string ; readonly age : number ; readonly breed : string ; } The database connection is asynchronous , but Nest makes this process completely invisible for the end-user. The CatModel class is waiting for the db connection, and the CatsService is delayed until model is ready to use. The entire application can start when each class is instantiated. \u6570\u636e\u5e93\u8fde\u63a5\u662f \u5f02\u6b65 \u7684\uff0c\u4f46\u662f Nest \u4f7f\u8fd9\u4e2a\u8fc7\u7a0b\u5bf9\u6700\u7ec8\u7528\u6237\u5b8c\u5168\u4e0d\u53ef\u89c1\u3002 CatModel \u7c7b\u6b63\u5728\u7b49\u5f85\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u800c CatsService \u88ab\u5ef6\u8fdf\u5230\u6a21\u578b\u51c6\u5907\u597d\u4f7f\u7528\u3002 \u5f53\u6bcf\u4e2a\u7c7b\u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u542f\u52a8\u4e86\u3002 \u8fd9\u662f\u6700\u540e\u4e00\u4e2a CatsModule : @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; import { catsProviders } from './cats.providers' ; import { DatabaseModule } from '../database/database.module' ; @Module ({ imports : [ DatabaseModule ], controllers : [ CatsController ], providers : [ CatsService , ... catsProviders , ], }) export class CatsModule {} info \u63d0\u793a \u4e0d\u8981\u5fd8\u8bb0\u5c06 CatsModule \u5bfc\u5165\u5230\u6839\u6a21\u5757 AppModule \u4e2d\u3002","title":"\u6a21\u578b\u6ce8\u5165"},{"location":"recipes/nest-commander/","text":"Nest Commander \u00b6 Expanding on the standalone application docs there's also the nest-commander package for writing command line applications in a structure similar to your typical Nest application. info info nest-commander is a third party package and is not managed by the entirety of the NestJS core team. Please, report any issues found with the library in the appropriate repository Installation \u00b6 Just like any other package, you've got to install it before you can use it. $ npm i nest-commander A Command file \u00b6 nest-commander makes it easy to write new command-line applications with decorators via the @Command() decorator for classes and the @Option() decorator for methods of that class. Every command file should implement the CommandRunner interface and should be decorated with a @Command() decorator. Every command is seen as an @Injectable() by Nest, so your normal Dependency Injection still works as you would expect it to. The only thing to take note of is the interface CommandRunner , which should be implemented by each command. The CommandRunner interface ensures that all commands have a run method that returns a Promise<void> and takes in the parameters string[], Record<string, any> . The run command is where you can kick all of your logic off from, it will take in whatever parameters did not match option flags and pass them in as an array, just in case you are really meaning to work with multiple parameters. As for the options, the Record<string, any> , the names of these properties match the name property given to the @Option() decorators, while their value matches the return of the option handler. If you'd like better type safety, you are welcome to create an interface for your options as well. Running the Command \u00b6 Similar to how in a NestJS application we can use the NestFactory to create a server for us, and run it using listen , the nest-commander package exposes a simple to use API to run your server. Import the CommandFactory and use the static method run and pass in the root module of your application. This would probably look like below import { CommandFactory } from 'nest-commander' ; import { AppModule } from './app.module' ; async function bootstrap () { await CommandFactory . run ( AppModule ); } bootstrap (); By default, Nest's logger is disabled when using the CommandFactory . It's possible to provide it though, as the second argument to the run function. You can either provide a custom NestJS logger, or an array of log levels you want to keep - it might be useful to at least provide ['error'] here, if you only want to print out Nest's error logs. import { CommandFactory } from 'nest-commander' ; import { AppModule } from './app.module' ; import { LogService } './log.service' ; async function bootstrap () { await CommandFactory . run ( AppModule , new LogService ()); // or, if you only want to print Nest's warnings and errors await CommandFactory . run ( AppModule , [ 'warn' , 'error' ]); } bootstrap (); And that's it. Under the hood, CommandFactory will worry about calling NestFactory for you and calling app.close() when necessary, so you shouldn't need to worry about memory leaks there. If you need to add in some error handling, there's always try/catch wrapping the run command, or you can chain on some .catch() method to the bootstrap() call. Testing \u00b6 So what's the use of writing a super awesome command line script if you can't test it super easily, right? Fortunately, nest-commander has some utilities you can make use of that fits in perfectly with the NestJS ecosystem, it'll feel right at home to any Nestlings out there. Instead of using the CommandFactory for building the command in test mode, you can use CommandTestFactory and pass in your metadata, very similarly to how Test.createTestingModule from @nestjs/testing works. In fact, it uses this package under the hood. You're also still able to chain on the overrideProvider methods before calling compile() so you can swap out DI pieces right in the test. Putting it all together \u00b6 The following class would equate to having a CLI command that can take in the subcommand basic or be called directly, with -n , -s , and -b (along with their long flags) all being supported and with custom parsers for each option. The --help flag is also supported, as is customary with commander. import { Command , CommandRunner , Option } from 'nest-commander' ; import { LogService } from './log.service' ; interface BasicCommandOptions { string ? : string ; boolean ? : boolean ; number ? : number ; } @Command ({ name : 'basic' , description : 'A parameter parse' }) export class BasicCommand implements CommandRunner { constructor ( private readonly logService : LogService ) {} async run ( passedParam : string [], options? : BasicCommandOptions , ) : Promise < void > { if ( options ? . boolean !== undefined && options ? . boolean !== null ) { this . runWithBoolean ( passedParam , options . boolean ); } else if ( options ? . number ) { this . runWithNumber ( passedParam , options . number ); } else if ( options ? . string ) { this . runWithString ( passedParam , options . string ); } else { this . runWithNone ( passedParam ); } } @Option ({ flags : '-n, --number [number]' , description : 'A basic number parser' , }) parseNumber ( val : string ) : number { return Number ( val ); } @Option ({ flags : '-s, --string [string]' , description : 'A string return' , }) parseString ( val : string ) : string { return val ; } @Option ({ flags : '-b, --boolean [boolean]' , description : 'A boolean parser' , }) parseBoolean ( val : string ) : boolean { return JSON . parse ( val ); } runWithString ( param : string [], option : string ) : void { this . logService . log ({ param , string : option }); } runWithNumber ( param : string [], option : number ) : void { this . logService . log ({ param , number : option }); } runWithBoolean ( param : string [], option : boolean ) : void { this . logService . log ({ param , boolean : option }); } runWithNone ( param : string []) : void { this . logService . log ({ param }); } } Make sure the command class is added to a module @Module ({ providers : [ LogService , BasicCommand ], }) export class AppModule {} And now to be able to run the CLI in your main.ts you can do the following async function bootstrap () { await CommandFactory . run ( AppModule ); } bootstrap (); And just like that, you've got a command line application. More Information \u00b6 Visit the nest-commander docs site for more information, examples, and API documentation.","title":"Commander"},{"location":"recipes/nest-commander/#nest-commander","text":"Expanding on the standalone application docs there's also the nest-commander package for writing command line applications in a structure similar to your typical Nest application. info info nest-commander is a third party package and is not managed by the entirety of the NestJS core team. Please, report any issues found with the library in the appropriate repository","title":"Nest Commander"},{"location":"recipes/nest-commander/#installation","text":"Just like any other package, you've got to install it before you can use it. $ npm i nest-commander","title":"Installation"},{"location":"recipes/nest-commander/#a-command-file","text":"nest-commander makes it easy to write new command-line applications with decorators via the @Command() decorator for classes and the @Option() decorator for methods of that class. Every command file should implement the CommandRunner interface and should be decorated with a @Command() decorator. Every command is seen as an @Injectable() by Nest, so your normal Dependency Injection still works as you would expect it to. The only thing to take note of is the interface CommandRunner , which should be implemented by each command. The CommandRunner interface ensures that all commands have a run method that returns a Promise<void> and takes in the parameters string[], Record<string, any> . The run command is where you can kick all of your logic off from, it will take in whatever parameters did not match option flags and pass them in as an array, just in case you are really meaning to work with multiple parameters. As for the options, the Record<string, any> , the names of these properties match the name property given to the @Option() decorators, while their value matches the return of the option handler. If you'd like better type safety, you are welcome to create an interface for your options as well.","title":"A Command file"},{"location":"recipes/nest-commander/#running-the-command","text":"Similar to how in a NestJS application we can use the NestFactory to create a server for us, and run it using listen , the nest-commander package exposes a simple to use API to run your server. Import the CommandFactory and use the static method run and pass in the root module of your application. This would probably look like below import { CommandFactory } from 'nest-commander' ; import { AppModule } from './app.module' ; async function bootstrap () { await CommandFactory . run ( AppModule ); } bootstrap (); By default, Nest's logger is disabled when using the CommandFactory . It's possible to provide it though, as the second argument to the run function. You can either provide a custom NestJS logger, or an array of log levels you want to keep - it might be useful to at least provide ['error'] here, if you only want to print out Nest's error logs. import { CommandFactory } from 'nest-commander' ; import { AppModule } from './app.module' ; import { LogService } './log.service' ; async function bootstrap () { await CommandFactory . run ( AppModule , new LogService ()); // or, if you only want to print Nest's warnings and errors await CommandFactory . run ( AppModule , [ 'warn' , 'error' ]); } bootstrap (); And that's it. Under the hood, CommandFactory will worry about calling NestFactory for you and calling app.close() when necessary, so you shouldn't need to worry about memory leaks there. If you need to add in some error handling, there's always try/catch wrapping the run command, or you can chain on some .catch() method to the bootstrap() call.","title":"Running the Command"},{"location":"recipes/nest-commander/#testing","text":"So what's the use of writing a super awesome command line script if you can't test it super easily, right? Fortunately, nest-commander has some utilities you can make use of that fits in perfectly with the NestJS ecosystem, it'll feel right at home to any Nestlings out there. Instead of using the CommandFactory for building the command in test mode, you can use CommandTestFactory and pass in your metadata, very similarly to how Test.createTestingModule from @nestjs/testing works. In fact, it uses this package under the hood. You're also still able to chain on the overrideProvider methods before calling compile() so you can swap out DI pieces right in the test.","title":"Testing"},{"location":"recipes/nest-commander/#putting-it-all-together","text":"The following class would equate to having a CLI command that can take in the subcommand basic or be called directly, with -n , -s , and -b (along with their long flags) all being supported and with custom parsers for each option. The --help flag is also supported, as is customary with commander. import { Command , CommandRunner , Option } from 'nest-commander' ; import { LogService } from './log.service' ; interface BasicCommandOptions { string ? : string ; boolean ? : boolean ; number ? : number ; } @Command ({ name : 'basic' , description : 'A parameter parse' }) export class BasicCommand implements CommandRunner { constructor ( private readonly logService : LogService ) {} async run ( passedParam : string [], options? : BasicCommandOptions , ) : Promise < void > { if ( options ? . boolean !== undefined && options ? . boolean !== null ) { this . runWithBoolean ( passedParam , options . boolean ); } else if ( options ? . number ) { this . runWithNumber ( passedParam , options . number ); } else if ( options ? . string ) { this . runWithString ( passedParam , options . string ); } else { this . runWithNone ( passedParam ); } } @Option ({ flags : '-n, --number [number]' , description : 'A basic number parser' , }) parseNumber ( val : string ) : number { return Number ( val ); } @Option ({ flags : '-s, --string [string]' , description : 'A string return' , }) parseString ( val : string ) : string { return val ; } @Option ({ flags : '-b, --boolean [boolean]' , description : 'A boolean parser' , }) parseBoolean ( val : string ) : boolean { return JSON . parse ( val ); } runWithString ( param : string [], option : string ) : void { this . logService . log ({ param , string : option }); } runWithNumber ( param : string [], option : number ) : void { this . logService . log ({ param , number : option }); } runWithBoolean ( param : string [], option : boolean ) : void { this . logService . log ({ param , boolean : option }); } runWithNone ( param : string []) : void { this . logService . log ({ param }); } } Make sure the command class is added to a module @Module ({ providers : [ LogService , BasicCommand ], }) export class AppModule {} And now to be able to run the CLI in your main.ts you can do the following async function bootstrap () { await CommandFactory . run ( AppModule ); } bootstrap (); And just like that, you've got a command line application.","title":"Putting it all together"},{"location":"recipes/nest-commander/#more-information","text":"Visit the nest-commander docs site for more information, examples, and API documentation.","title":"More Information"},{"location":"recipes/prisma/","text":"Prisma \u00b6 Prisma is an open-source ORM for Node.js and TypeScript. It is used as an alternative to writing plain SQL, or using another database access tool such as SQL query builders (like knex.js ) or ORMs (like TypeORM and Sequelize ). Prisma currently supports PostgreSQL, MySQL, SQL Server, SQLite and MongoDB (preview). While Prisma can be used with plain JavaScript, it embraces TypeScript and provides a level to type-safety that goes beyond the guarantees other ORMs in the TypeScript ecosystem. You can find an in-depth comparison of the type-safety guarantees of Prisma and TypeORM here . info Note If you want to get a quick overview of how Prisma works, you can follow the Quickstart or read the Introduction in the documentation . There also are ready-to-run examples for REST and GraphQL in the prisma-examples repo. Getting started \u00b6 In this recipe, you'll learn how to get started with NestJS and Prisma from scratch. You are going to build a sample NestJS application with a REST API that can read and write data in a database. For the purpose of this guide, you'll use a SQLite database to save the overhead of setting up a database server. Note that you can still follow this guide, even if you're using PostgreSQL or MySQL \u2013 you'll get extra instructions for using these databases at the right places. info Note If you already have an existing project and consider migrating to Prisma, you can follow the guide for adding Prisma to an existing project . If you are migrating from TypeORM, you can read the guide Migrating from TypeORM to Prisma . Create your NestJS project \u00b6 To get started, install the NestJS CLI and create your app skeleton with the following commands: $ npm install -g @nestjs/cli $ nest new hello-prisma See the First steps page to learn more about the project files created by this command. Note also that you can now run npm start to start your application. The REST API running at http://localhost:3000/ currently serves a single route that's implemented in src/app.controller.ts . Over the course of this guide, you'll implement additional routes to store and retrieve data about users and posts . Set up Prisma \u00b6 Start by installing the Prisma CLI as a development dependency in your project: $ cd hello-prisma $ npm install prisma --save-dev In the following steps, we'll be utilizing the Prisma CLI . As a best practice, it's recommended to invoke the CLI locally by prefixing it with npx : $ npx prisma Expand if you're using Yarn If you're using Yarn, then you can install the Prisma CLI as follows: $ yarn add prisma --dev Once installed, you can invoke it by prefixing it with `yarn`: $ yarn prisma Now create your initial Prisma setup using the init command of the Prisma CLI: $ npx prisma init This command creates a new prisma directory with the following contents: schema.prisma : Specifies your database connection and contains the database schema .env : A dotenv file, typically used to store your database credentials in a group of environment variables Set the database connection \u00b6 Your database connection is configured in the datasource block in your schema.prisma file. By default it's set to postgresql , but since you're using a SQLite database in this guide you need to adjust the provider field of the datasource block to sqlite : datasource db { provider = \"sqlite\" url = env ( \"DATABASE_URL\" ) } generator client { provider = \"prisma-client-js\" } Now, open up .env and adjust the DATABASE_URL environment variable to look as follows: DATABASE_URL = \"file:./dev.db\" SQLite databases are simple files; no server is required to use a SQLite database. So instead of configuring a connection URL with a host and port , you can just point it to a local file which in this case is called dev.db . This file will be created in the next step. Expand if you're using PostgreSQL or MySQL With PostgreSQL and MySQL, you need to configure the connection URL to point to the _database server_. You can learn more about the required connection URL format [here](https://www.prisma.io/docs/reference/database-reference/connection-urls). **PostgreSQL** If you're using PostgreSQL, you have to adjust the `schema.prisma` and `.env` files as follows: **`schema.prisma`** datasource db { provider = \"postgresql\" url = env ( \"DATABASE_URL\" ) } generator client { provider = \"prisma-client-js\" } **`.env`** DATABASE_URL = \"postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA\" Replace the placeholders spelled in all uppercase letters with your database credentials. Note that if you're unsure what to provide for the `SCHEMA` placeholder, it's most likely the default value `public`: DATABASE_URL = \"postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public\" If you want to learn how to set up a PostgreSQL database, you can follow this guide on [setting up a free PostgreSQL database on Heroku](https://dev.to/prisma/how-to-setup-a-free-postgresql-database-on-heroku-1dc1). **MySQL** If you're using MySQL, you have to adjust the `schema.prisma` and `.env` files as follows: **`schema.prisma`** datasource db { provider = \"mysql\" url = env ( \"DATABASE_URL\" ) } generator client { provider = \"prisma-client-js\" } **`.env`** DATABASE_URL = \"mysql://USER:PASSWORD@HOST:PORT/DATABASE\" Replace the placeholders spelled in all uppercase letters with your database credentials. Create two database tables with Prisma Migrate \u00b6 In this section, you'll create two new tables in your database using Prisma Migrate . Prisma Migrate generates SQL migration files for your declarative data model definition in the Prisma schema. These migration files are fully customizable so that you can configure any additional features of the underlying database or include additional commands, e.g. for seeding. Add the following two models to your schema.prisma file: model User { id Int @default ( autoincrement ()) @id email String @unique name String ? posts Post [] } model Post { id Int @default ( autoincrement ()) @id title String content String ? published Boolean ? @default ( false ) author User ? @relation ( fields: [ authorId ], references: [ id ]) authorId Int ? } With your Prisma models in place, you can generate your SQL migration files and run them against the database. Run the following commands in your terminal: $ npx prisma migrate dev --name init This prisma migrate dev command generates SQL files and directly runs them against the database. In this case, the following migration files was created in the existing prisma directory: $ tree prisma prisma \u251c\u2500\u2500 dev.db \u251c\u2500\u2500 migrations \u2502 \u2514\u2500\u2500 20201207100915_init \u2502 \u2514\u2500\u2500 migration.sql \u2514\u2500\u2500 schema.prisma Expand to view the generated SQL statements The following tables were created in your SQLite database: -- CreateTable CREATE TABLE \"User\" ( \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT , \"email\" TEXT NOT NULL , \"name\" TEXT ); -- CreateTable CREATE TABLE \"Post\" ( \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT , \"title\" TEXT NOT NULL , \"content\" TEXT , \"published\" BOOLEAN DEFAULT false , \"authorId\" INTEGER , FOREIGN KEY ( \"authorId\" ) REFERENCES \"User\" ( \"id\" ) ON DELETE SET NULL ON UPDATE CASCADE ); -- CreateIndex CREATE UNIQUE INDEX \"User.email_unique\" ON \"User\" ( \"email\" ); Install and generate Prisma Client \u00b6 Prisma Client is a type-safe database client that's generated from your Prisma model definition. Because of this approach, Prisma Client can expose CRUD operations that are tailored specifically to your models. To install Prisma Client in your project, run the following command in your terminal: $ npm install @prisma/client Note that during installation, Prisma automatically invokes the prisma generate command for you. In the future, you need to run this command after every change to your Prisma models to update your generated Prisma Client. info Note The prisma generate command reads your Prisma schema and updates the generated Prisma Client library inside node_modules/@prisma/client . Use Prisma Client in your NestJS services \u00b6 You're now able to send database queries with Prisma Client. If you want to learn more about building queries with Prisma Client, check out the API documentation . When setting up your NestJS application, you'll want to abstract away the Prisma Client API for database queries within a service. To get started, you can create a new PrismaService that takes care of instantiating PrismaClient and connecting to your database. Inside the src directory, create a new file called prisma.service.ts and add the following code to it: import { INestApplication , Injectable , OnModuleInit } from '@nestjs/common' ; import { PrismaClient } from '@prisma/client' ; @Injectable () export class PrismaService extends PrismaClient implements OnModuleInit { async onModuleInit () { await this . $connect (); } async enableShutdownHooks ( app : INestApplication ) { this . $on ( 'beforeExit' , async () => { await app . close (); }); } } info Note The onModuleInit is optional \u2014 if you leave it out, Prisma will connect lazily on its first call to the database. We don't bother with onModuleDestroy , since Prisma has its own shutdown hooks where it will destroy the connection. For more info on enableShutdownHooks , please see Issues with enableShutdownHooks Next, you can write services that you can use to make database calls for the User and Post models from your Prisma schema. Still inside the src directory, create a new file called user.service.ts and add the following code to it: import { Injectable } from '@nestjs/common' ; import { PrismaService } from './prisma.service' ; import { User , Prisma } from '@prisma/client' ; @Injectable () export class UserService { constructor ( private prisma : PrismaService ) {} async user ( userWhereUniqueInput : Prisma.UserWhereUniqueInput ) : Promise < User | null > { return this . prisma . user . findUnique ({ where : userWhereUniqueInput , }); } async users ( params : { skip? : number ; take? : number ; cursor? : Prisma.UserWhereUniqueInput ; where? : Prisma.UserWhereInput ; orderBy? : Prisma.UserOrderByWithRelationInput ; }) : Promise < User [] > { const { skip , take , cursor , where , orderBy } = params ; return this . prisma . user . findMany ({ skip , take , cursor , where , orderBy , }); } async createUser ( data : Prisma.UserCreateInput ) : Promise < User > { return this . prisma . user . create ({ data , }); } async updateUser ( params : { where : Prisma.UserWhereUniqueInput ; data : Prisma.UserUpdateInput ; }) : Promise < User > { const { where , data } = params ; return this . prisma . user . update ({ data , where , }); } async deleteUser ( where : Prisma.UserWhereUniqueInput ) : Promise < User > { return this . prisma . user . delete ({ where , }); } } Notice how you're using Prisma Client's generated types to ensure that the methods that are exposed by your service are properly typed. You therefore save the boilerplate of typing your models and creating additional interface or DTO files. Now do the same for the Post model. Still inside the src directory, create a new file called post.service.ts and add the following code to it: import { Injectable } from '@nestjs/common' ; import { PrismaService } from './prisma.service' ; import { Post , Prisma , } from '@prisma/client' ; @Injectable () export class PostService { constructor ( private prisma : PrismaService ) {} async post ( postWhereUniqueInput : Prisma.PostWhereUniqueInput ) : Promise < Post | null > { return this . prisma . post . findUnique ({ where : postWhereUniqueInput , }); } async posts ( params : { skip? : number ; take? : number ; cursor? : Prisma.PostWhereUniqueInput ; where? : Prisma.PostWhereInput ; orderBy? : Prisma.PostOrderByWithRelationInput ; }) : Promise < Post [] > { const { skip , take , cursor , where , orderBy } = params ; return this . prisma . post . findMany ({ skip , take , cursor , where , orderBy , }); } async createPost ( data : Prisma.PostCreateInput ) : Promise < Post > { return this . prisma . post . create ({ data , }); } async updatePost ( params : { where : Prisma.PostWhereUniqueInput ; data : Prisma.PostUpdateInput ; }) : Promise < Post > { const { data , where } = params ; return this . prisma . post . update ({ data , where , }); } async deletePost ( where : Prisma.PostWhereUniqueInput ) : Promise < Post > { return this . prisma . post . delete ({ where , }); } } Your UserService and PostService currently wrap the CRUD queries that are available in Prisma Client. In a real world application, the service would also be the place to add business logic to your application. For example, you could have a method called updatePassword inside the UserService that would be responsible for updating the password of a user. Implement your REST API routes in the main app controller \u00b6 Finally, you'll use the services you created in the previous sections to implement the different routes of your app. For the purpose of this guide, you'll put all your routes into the already existing AppController class. Replace the contents of the app.controller.ts file with the following code: import { Controller , Get , Param , Post , Body , Put , Delete , } from '@nestjs/common' ; import { UserService } from './user.service' ; import { PostService } from './post.service' ; import { User as UserModel , Post as PostModel } from '@prisma/client' ; @Controller () export class AppController { constructor ( private readonly userService : UserService , private readonly postService : PostService , ) {} @Get ( 'post/:id' ) async getPostById ( @Param ( 'id' ) id : string ) : Promise < PostModel > { return this . postService . post ({ id : Number ( id ) }); } @Get ( 'feed' ) async getPublishedPosts () : Promise < PostModel [] > { return this . postService . posts ({ where : { published : true }, }); } @Get ( 'filtered-posts/:searchString' ) async getFilteredPosts ( @Param ( 'searchString' ) searchString : string , ) : Promise < PostModel [] > { return this . postService . posts ({ where : { OR : [ { title : { contains : searchString }, }, { content : { contains : searchString }, }, ], }, }); } @Post ( 'post' ) async createDraft ( @Body () postData : { title : string ; content? : string ; authorEmail : string }, ) : Promise < PostModel > { const { title , content , authorEmail } = postData ; return this . postService . createPost ({ title , content , author : { connect : { email : authorEmail }, }, }); } @Post ( 'user' ) async signupUser ( @Body () userData : { name? : string ; email : string }, ) : Promise < UserModel > { return this . userService . createUser ( userData ); } @Put ( 'publish/:id' ) async publishPost ( @Param ( 'id' ) id : string ) : Promise < PostModel > { return this . postService . updatePost ({ where : { id : Number ( id ) }, data : { published : true }, }); } @Delete ( 'post/:id' ) async deletePost ( @Param ( 'id' ) id : string ) : Promise < PostModel > { return this . postService . deletePost ({ id : Number ( id ) }); } } This controller implements the following routes: GET \u00b6 /post/:id : Fetch a single post by its id /feed : Fetch all published posts /filter-posts/:searchString : Filter posts by title or content POST \u00b6 /post : Create a new post Body: title: String (required): The title of the post content: String (optional): The content of the post authorEmail: String (required): The email of the user that creates the post /user : Create a new user Body: email: String (required): The email address of the user name: String (optional): The name of the user PUT \u00b6 /publish/:id : Publish a post by its id DELETE \u00b6 /post/:id : Delete a post by its id Issues with enableShutdownHooks \u00b6 Prisma interferes with NestJS enableShutdownHooks . Prisma listens for shutdown signals and will call process.exit() before your application shutdown hooks fire. To deal with this, you would need to add a listener for Prisma beforeExit event. // main.ts ... import { PrismaService } from './services/prisma/prisma.service' ; ... async function bootstrap () { ... const prismaService : PrismaService = app . get ( PrismaService ); prismaService . enableShutdownHooks ( app ) ... } bootstrap () You can read more about Prisma handling of shutdown signal, and beforeExit event. Summary \u00b6 In this recipe, you learned how to use Prisma along with NestJS to implement a REST API. The controller that implements the routes of the API is calling a PrismaService which in turn uses Prisma Client to send queries to a database to fulfill the data needs of incoming requests. If you want to learn more about using NestJS with Prisma, be sure to check out the following resources: NestJS & Prisma Ready-to-run example projects for REST & GraphQL Production-ready starter kit Video: Accessing Databases using NestJS with Prisma (5min) by Marc Stammerjohann","title":"Prisma"},{"location":"recipes/prisma/#prisma","text":"Prisma is an open-source ORM for Node.js and TypeScript. It is used as an alternative to writing plain SQL, or using another database access tool such as SQL query builders (like knex.js ) or ORMs (like TypeORM and Sequelize ). Prisma currently supports PostgreSQL, MySQL, SQL Server, SQLite and MongoDB (preview). While Prisma can be used with plain JavaScript, it embraces TypeScript and provides a level to type-safety that goes beyond the guarantees other ORMs in the TypeScript ecosystem. You can find an in-depth comparison of the type-safety guarantees of Prisma and TypeORM here . info Note If you want to get a quick overview of how Prisma works, you can follow the Quickstart or read the Introduction in the documentation . There also are ready-to-run examples for REST and GraphQL in the prisma-examples repo.","title":"Prisma"},{"location":"recipes/prisma/#getting-started","text":"In this recipe, you'll learn how to get started with NestJS and Prisma from scratch. You are going to build a sample NestJS application with a REST API that can read and write data in a database. For the purpose of this guide, you'll use a SQLite database to save the overhead of setting up a database server. Note that you can still follow this guide, even if you're using PostgreSQL or MySQL \u2013 you'll get extra instructions for using these databases at the right places. info Note If you already have an existing project and consider migrating to Prisma, you can follow the guide for adding Prisma to an existing project . If you are migrating from TypeORM, you can read the guide Migrating from TypeORM to Prisma .","title":"Getting started"},{"location":"recipes/prisma/#create-your-nestjs-project","text":"To get started, install the NestJS CLI and create your app skeleton with the following commands: $ npm install -g @nestjs/cli $ nest new hello-prisma See the First steps page to learn more about the project files created by this command. Note also that you can now run npm start to start your application. The REST API running at http://localhost:3000/ currently serves a single route that's implemented in src/app.controller.ts . Over the course of this guide, you'll implement additional routes to store and retrieve data about users and posts .","title":"Create your NestJS project"},{"location":"recipes/prisma/#set-up-prisma","text":"Start by installing the Prisma CLI as a development dependency in your project: $ cd hello-prisma $ npm install prisma --save-dev In the following steps, we'll be utilizing the Prisma CLI . As a best practice, it's recommended to invoke the CLI locally by prefixing it with npx : $ npx prisma Expand if you're using Yarn If you're using Yarn, then you can install the Prisma CLI as follows: $ yarn add prisma --dev Once installed, you can invoke it by prefixing it with `yarn`: $ yarn prisma Now create your initial Prisma setup using the init command of the Prisma CLI: $ npx prisma init This command creates a new prisma directory with the following contents: schema.prisma : Specifies your database connection and contains the database schema .env : A dotenv file, typically used to store your database credentials in a group of environment variables","title":"Set up Prisma"},{"location":"recipes/prisma/#set-the-database-connection","text":"Your database connection is configured in the datasource block in your schema.prisma file. By default it's set to postgresql , but since you're using a SQLite database in this guide you need to adjust the provider field of the datasource block to sqlite : datasource db { provider = \"sqlite\" url = env ( \"DATABASE_URL\" ) } generator client { provider = \"prisma-client-js\" } Now, open up .env and adjust the DATABASE_URL environment variable to look as follows: DATABASE_URL = \"file:./dev.db\" SQLite databases are simple files; no server is required to use a SQLite database. So instead of configuring a connection URL with a host and port , you can just point it to a local file which in this case is called dev.db . This file will be created in the next step. Expand if you're using PostgreSQL or MySQL With PostgreSQL and MySQL, you need to configure the connection URL to point to the _database server_. You can learn more about the required connection URL format [here](https://www.prisma.io/docs/reference/database-reference/connection-urls). **PostgreSQL** If you're using PostgreSQL, you have to adjust the `schema.prisma` and `.env` files as follows: **`schema.prisma`** datasource db { provider = \"postgresql\" url = env ( \"DATABASE_URL\" ) } generator client { provider = \"prisma-client-js\" } **`.env`** DATABASE_URL = \"postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA\" Replace the placeholders spelled in all uppercase letters with your database credentials. Note that if you're unsure what to provide for the `SCHEMA` placeholder, it's most likely the default value `public`: DATABASE_URL = \"postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public\" If you want to learn how to set up a PostgreSQL database, you can follow this guide on [setting up a free PostgreSQL database on Heroku](https://dev.to/prisma/how-to-setup-a-free-postgresql-database-on-heroku-1dc1). **MySQL** If you're using MySQL, you have to adjust the `schema.prisma` and `.env` files as follows: **`schema.prisma`** datasource db { provider = \"mysql\" url = env ( \"DATABASE_URL\" ) } generator client { provider = \"prisma-client-js\" } **`.env`** DATABASE_URL = \"mysql://USER:PASSWORD@HOST:PORT/DATABASE\" Replace the placeholders spelled in all uppercase letters with your database credentials.","title":"Set the database connection"},{"location":"recipes/prisma/#create-two-database-tables-with-prisma-migrate","text":"In this section, you'll create two new tables in your database using Prisma Migrate . Prisma Migrate generates SQL migration files for your declarative data model definition in the Prisma schema. These migration files are fully customizable so that you can configure any additional features of the underlying database or include additional commands, e.g. for seeding. Add the following two models to your schema.prisma file: model User { id Int @default ( autoincrement ()) @id email String @unique name String ? posts Post [] } model Post { id Int @default ( autoincrement ()) @id title String content String ? published Boolean ? @default ( false ) author User ? @relation ( fields: [ authorId ], references: [ id ]) authorId Int ? } With your Prisma models in place, you can generate your SQL migration files and run them against the database. Run the following commands in your terminal: $ npx prisma migrate dev --name init This prisma migrate dev command generates SQL files and directly runs them against the database. In this case, the following migration files was created in the existing prisma directory: $ tree prisma prisma \u251c\u2500\u2500 dev.db \u251c\u2500\u2500 migrations \u2502 \u2514\u2500\u2500 20201207100915_init \u2502 \u2514\u2500\u2500 migration.sql \u2514\u2500\u2500 schema.prisma Expand to view the generated SQL statements The following tables were created in your SQLite database: -- CreateTable CREATE TABLE \"User\" ( \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT , \"email\" TEXT NOT NULL , \"name\" TEXT ); -- CreateTable CREATE TABLE \"Post\" ( \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT , \"title\" TEXT NOT NULL , \"content\" TEXT , \"published\" BOOLEAN DEFAULT false , \"authorId\" INTEGER , FOREIGN KEY ( \"authorId\" ) REFERENCES \"User\" ( \"id\" ) ON DELETE SET NULL ON UPDATE CASCADE ); -- CreateIndex CREATE UNIQUE INDEX \"User.email_unique\" ON \"User\" ( \"email\" );","title":"Create two database tables with Prisma Migrate"},{"location":"recipes/prisma/#install-and-generate-prisma-client","text":"Prisma Client is a type-safe database client that's generated from your Prisma model definition. Because of this approach, Prisma Client can expose CRUD operations that are tailored specifically to your models. To install Prisma Client in your project, run the following command in your terminal: $ npm install @prisma/client Note that during installation, Prisma automatically invokes the prisma generate command for you. In the future, you need to run this command after every change to your Prisma models to update your generated Prisma Client. info Note The prisma generate command reads your Prisma schema and updates the generated Prisma Client library inside node_modules/@prisma/client .","title":"Install and generate Prisma Client"},{"location":"recipes/prisma/#use-prisma-client-in-your-nestjs-services","text":"You're now able to send database queries with Prisma Client. If you want to learn more about building queries with Prisma Client, check out the API documentation . When setting up your NestJS application, you'll want to abstract away the Prisma Client API for database queries within a service. To get started, you can create a new PrismaService that takes care of instantiating PrismaClient and connecting to your database. Inside the src directory, create a new file called prisma.service.ts and add the following code to it: import { INestApplication , Injectable , OnModuleInit } from '@nestjs/common' ; import { PrismaClient } from '@prisma/client' ; @Injectable () export class PrismaService extends PrismaClient implements OnModuleInit { async onModuleInit () { await this . $connect (); } async enableShutdownHooks ( app : INestApplication ) { this . $on ( 'beforeExit' , async () => { await app . close (); }); } } info Note The onModuleInit is optional \u2014 if you leave it out, Prisma will connect lazily on its first call to the database. We don't bother with onModuleDestroy , since Prisma has its own shutdown hooks where it will destroy the connection. For more info on enableShutdownHooks , please see Issues with enableShutdownHooks Next, you can write services that you can use to make database calls for the User and Post models from your Prisma schema. Still inside the src directory, create a new file called user.service.ts and add the following code to it: import { Injectable } from '@nestjs/common' ; import { PrismaService } from './prisma.service' ; import { User , Prisma } from '@prisma/client' ; @Injectable () export class UserService { constructor ( private prisma : PrismaService ) {} async user ( userWhereUniqueInput : Prisma.UserWhereUniqueInput ) : Promise < User | null > { return this . prisma . user . findUnique ({ where : userWhereUniqueInput , }); } async users ( params : { skip? : number ; take? : number ; cursor? : Prisma.UserWhereUniqueInput ; where? : Prisma.UserWhereInput ; orderBy? : Prisma.UserOrderByWithRelationInput ; }) : Promise < User [] > { const { skip , take , cursor , where , orderBy } = params ; return this . prisma . user . findMany ({ skip , take , cursor , where , orderBy , }); } async createUser ( data : Prisma.UserCreateInput ) : Promise < User > { return this . prisma . user . create ({ data , }); } async updateUser ( params : { where : Prisma.UserWhereUniqueInput ; data : Prisma.UserUpdateInput ; }) : Promise < User > { const { where , data } = params ; return this . prisma . user . update ({ data , where , }); } async deleteUser ( where : Prisma.UserWhereUniqueInput ) : Promise < User > { return this . prisma . user . delete ({ where , }); } } Notice how you're using Prisma Client's generated types to ensure that the methods that are exposed by your service are properly typed. You therefore save the boilerplate of typing your models and creating additional interface or DTO files. Now do the same for the Post model. Still inside the src directory, create a new file called post.service.ts and add the following code to it: import { Injectable } from '@nestjs/common' ; import { PrismaService } from './prisma.service' ; import { Post , Prisma , } from '@prisma/client' ; @Injectable () export class PostService { constructor ( private prisma : PrismaService ) {} async post ( postWhereUniqueInput : Prisma.PostWhereUniqueInput ) : Promise < Post | null > { return this . prisma . post . findUnique ({ where : postWhereUniqueInput , }); } async posts ( params : { skip? : number ; take? : number ; cursor? : Prisma.PostWhereUniqueInput ; where? : Prisma.PostWhereInput ; orderBy? : Prisma.PostOrderByWithRelationInput ; }) : Promise < Post [] > { const { skip , take , cursor , where , orderBy } = params ; return this . prisma . post . findMany ({ skip , take , cursor , where , orderBy , }); } async createPost ( data : Prisma.PostCreateInput ) : Promise < Post > { return this . prisma . post . create ({ data , }); } async updatePost ( params : { where : Prisma.PostWhereUniqueInput ; data : Prisma.PostUpdateInput ; }) : Promise < Post > { const { data , where } = params ; return this . prisma . post . update ({ data , where , }); } async deletePost ( where : Prisma.PostWhereUniqueInput ) : Promise < Post > { return this . prisma . post . delete ({ where , }); } } Your UserService and PostService currently wrap the CRUD queries that are available in Prisma Client. In a real world application, the service would also be the place to add business logic to your application. For example, you could have a method called updatePassword inside the UserService that would be responsible for updating the password of a user.","title":"Use Prisma Client in your NestJS services"},{"location":"recipes/prisma/#implement-your-rest-api-routes-in-the-main-app-controller","text":"Finally, you'll use the services you created in the previous sections to implement the different routes of your app. For the purpose of this guide, you'll put all your routes into the already existing AppController class. Replace the contents of the app.controller.ts file with the following code: import { Controller , Get , Param , Post , Body , Put , Delete , } from '@nestjs/common' ; import { UserService } from './user.service' ; import { PostService } from './post.service' ; import { User as UserModel , Post as PostModel } from '@prisma/client' ; @Controller () export class AppController { constructor ( private readonly userService : UserService , private readonly postService : PostService , ) {} @Get ( 'post/:id' ) async getPostById ( @Param ( 'id' ) id : string ) : Promise < PostModel > { return this . postService . post ({ id : Number ( id ) }); } @Get ( 'feed' ) async getPublishedPosts () : Promise < PostModel [] > { return this . postService . posts ({ where : { published : true }, }); } @Get ( 'filtered-posts/:searchString' ) async getFilteredPosts ( @Param ( 'searchString' ) searchString : string , ) : Promise < PostModel [] > { return this . postService . posts ({ where : { OR : [ { title : { contains : searchString }, }, { content : { contains : searchString }, }, ], }, }); } @Post ( 'post' ) async createDraft ( @Body () postData : { title : string ; content? : string ; authorEmail : string }, ) : Promise < PostModel > { const { title , content , authorEmail } = postData ; return this . postService . createPost ({ title , content , author : { connect : { email : authorEmail }, }, }); } @Post ( 'user' ) async signupUser ( @Body () userData : { name? : string ; email : string }, ) : Promise < UserModel > { return this . userService . createUser ( userData ); } @Put ( 'publish/:id' ) async publishPost ( @Param ( 'id' ) id : string ) : Promise < PostModel > { return this . postService . updatePost ({ where : { id : Number ( id ) }, data : { published : true }, }); } @Delete ( 'post/:id' ) async deletePost ( @Param ( 'id' ) id : string ) : Promise < PostModel > { return this . postService . deletePost ({ id : Number ( id ) }); } } This controller implements the following routes:","title":"Implement your REST API routes in the main app controller"},{"location":"recipes/prisma/#get","text":"/post/:id : Fetch a single post by its id /feed : Fetch all published posts /filter-posts/:searchString : Filter posts by title or content","title":"GET"},{"location":"recipes/prisma/#post","text":"/post : Create a new post Body: title: String (required): The title of the post content: String (optional): The content of the post authorEmail: String (required): The email of the user that creates the post /user : Create a new user Body: email: String (required): The email address of the user name: String (optional): The name of the user","title":"POST"},{"location":"recipes/prisma/#put","text":"/publish/:id : Publish a post by its id","title":"PUT"},{"location":"recipes/prisma/#delete","text":"/post/:id : Delete a post by its id","title":"DELETE"},{"location":"recipes/prisma/#issues-with-enableshutdownhooks","text":"Prisma interferes with NestJS enableShutdownHooks . Prisma listens for shutdown signals and will call process.exit() before your application shutdown hooks fire. To deal with this, you would need to add a listener for Prisma beforeExit event. // main.ts ... import { PrismaService } from './services/prisma/prisma.service' ; ... async function bootstrap () { ... const prismaService : PrismaService = app . get ( PrismaService ); prismaService . enableShutdownHooks ( app ) ... } bootstrap () You can read more about Prisma handling of shutdown signal, and beforeExit event.","title":"Issues with enableShutdownHooks"},{"location":"recipes/prisma/#summary","text":"In this recipe, you learned how to use Prisma along with NestJS to implement a REST API. The controller that implements the routes of the API is calling a PrismaService which in turn uses Prisma Client to send queries to a database to fulfill the data needs of incoming requests. If you want to learn more about using NestJS with Prisma, be sure to check out the following resources: NestJS & Prisma Ready-to-run example projects for REST & GraphQL Production-ready starter kit Video: Accessing Databases using NestJS with Prisma (5min) by Marc Stammerjohann","title":"Summary"},{"location":"recipes/router-module/","text":"Router module \u00b6 info Hint This chapter is only relevant to HTTP-based applications. In an HTTP application (for example, REST API), the route path for a handler is determined by concatenating the (optional) prefix declared for the controller (inside the @Controller decorator), and any path specified in the method's decorator (e.g, @Get('users') ). You can learn more about that in this section . Additionally, you can define a global prefix for all routes registered in your application, or enable versioning . Also, there are edge-cases when defining a prefix at a module-level (and so for all controllers registered inside that module) may come in handy. For example, imagine a REST application that exposes several different endpoints being used by a specific portion of your application called \"Dashboard\". In such a case, instead of repeating the /dashboard prefix within each controller, you could use a utility RouterModule module, as follows: @Module ({ imports : [ DashboardModule , RouterModule . register ([ { path : 'dashboard' , module : DashboardModule , }, ]), ], }) export class AppModule {} info Hint The RouterModule class is exported from the @nestjs/core package. In addition, you can define hierarchical structures. This means each module can have children modules. The children modules will inherit their parent's prefix. In the following example, we'll register the AdminModule as a parent module of DashboardModule and MetricsModule . RouterModule . register ([ { path : 'admin' , module : AdminModule , children : [ { path : 'dashboard' , module : DashboardModule , }, { path : 'metrics' , module : MetricsModule , }, ], }, ]); info Hint This feature should be used very carefully, as overusing it can make code difficult to maintain over time. In the example above, any controller registered inside the DashboardModule will have an extra /admin/dashboard prefix (as the module concatenates paths from top to bottom - recursively - parent to children). Likewise, each controller defined inside the MetricsModule will have an additional module-level prefix /admin/metrics .","title":"\u8def\u7531\u5668\u6a21\u5757"},{"location":"recipes/router-module/#router-module","text":"info Hint This chapter is only relevant to HTTP-based applications. In an HTTP application (for example, REST API), the route path for a handler is determined by concatenating the (optional) prefix declared for the controller (inside the @Controller decorator), and any path specified in the method's decorator (e.g, @Get('users') ). You can learn more about that in this section . Additionally, you can define a global prefix for all routes registered in your application, or enable versioning . Also, there are edge-cases when defining a prefix at a module-level (and so for all controllers registered inside that module) may come in handy. For example, imagine a REST application that exposes several different endpoints being used by a specific portion of your application called \"Dashboard\". In such a case, instead of repeating the /dashboard prefix within each controller, you could use a utility RouterModule module, as follows: @Module ({ imports : [ DashboardModule , RouterModule . register ([ { path : 'dashboard' , module : DashboardModule , }, ]), ], }) export class AppModule {} info Hint The RouterModule class is exported from the @nestjs/core package. In addition, you can define hierarchical structures. This means each module can have children modules. The children modules will inherit their parent's prefix. In the following example, we'll register the AdminModule as a parent module of DashboardModule and MetricsModule . RouterModule . register ([ { path : 'admin' , module : AdminModule , children : [ { path : 'dashboard' , module : DashboardModule , }, { path : 'metrics' , module : MetricsModule , }, ], }, ]); info Hint This feature should be used very carefully, as overusing it can make code difficult to maintain over time. In the example above, any controller registered inside the DashboardModule will have an extra /admin/dashboard prefix (as the module concatenates paths from top to bottom - recursively - parent to children). Likewise, each controller defined inside the MetricsModule will have an additional module-level prefix /admin/metrics .","title":"Router module"},{"location":"recipes/serve-static/","text":"Serve Static \u00b6 In order to serve static content like a Single Page Application (SPA) we can use the ServeStaticModule from the @nestjs/serve-static package. Installation \u00b6 First we need to install the required package: $ npm install --save @nestjs/serve-static Bootstrap \u00b6 Once the installation process is done, we can import the ServeStaticModule into the root AppModule and configure it by passing in a configuration object to the forRoot() method. import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { ServeStaticModule } from '@nestjs/serve-static' ; import { join } from 'path' ; @Module ({ imports : [ ServeStaticModule . forRoot ({ rootPath : join ( __dirname , '..' , 'client' ), }), ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} With this in place, build the static website and place its content in the location specified by the rootPath property. Configuration \u00b6 ServeStaticModule can be configured with a variety of options to customize its behavior. You can set the path to render your static app, specify excluded paths, enable or disable setting Cache-Control response header, etc. See the full list of options here . warning Notice The default renderPath of the Static App is * (all paths), and the module will send \"index.html\" files in response. It lets you create Client-Side routing for your SPA. Paths, specified in your controllers will fallback to the server. You can change this behavior setting serveRoot , renderPath combining them with other options. Example \u00b6 A working example is available here .","title":"\u670d\u52a1\u9759\u6001"},{"location":"recipes/serve-static/#serve-static","text":"In order to serve static content like a Single Page Application (SPA) we can use the ServeStaticModule from the @nestjs/serve-static package.","title":"Serve Static"},{"location":"recipes/serve-static/#installation","text":"First we need to install the required package: $ npm install --save @nestjs/serve-static","title":"Installation"},{"location":"recipes/serve-static/#bootstrap","text":"Once the installation process is done, we can import the ServeStaticModule into the root AppModule and configure it by passing in a configuration object to the forRoot() method. import { Module } from '@nestjs/common' ; import { AppController } from './app.controller' ; import { AppService } from './app.service' ; import { ServeStaticModule } from '@nestjs/serve-static' ; import { join } from 'path' ; @Module ({ imports : [ ServeStaticModule . forRoot ({ rootPath : join ( __dirname , '..' , 'client' ), }), ], controllers : [ AppController ], providers : [ AppService ], }) export class AppModule {} With this in place, build the static website and place its content in the location specified by the rootPath property.","title":"Bootstrap"},{"location":"recipes/serve-static/#configuration","text":"ServeStaticModule can be configured with a variety of options to customize its behavior. You can set the path to render your static app, specify excluded paths, enable or disable setting Cache-Control response header, etc. See the full list of options here . warning Notice The default renderPath of the Static App is * (all paths), and the module will send \"index.html\" files in response. It lets you create Client-Side routing for your SPA. Paths, specified in your controllers will fallback to the server. You can change this behavior setting serveRoot , renderPath combining them with other options.","title":"Configuration"},{"location":"recipes/serve-static/#example","text":"A working example is available here .","title":"Example"},{"location":"recipes/sql-sequelize/","text":"SQL (Sequelize) \u00b6 This chapter applies only to TypeScript \u00b6 Warning In this article, you'll learn how to create a DatabaseModule based on the Sequelize package from scratch using custom components. As a consequence, this technique contains a lot of overhead that you can avoid by using the dedicated, out-of-the-box @nestjs/sequelize package. To learn more, see here . Sequelize is a popular Object Relational Mapper (ORM) written in a vanilla JavaScript, but there is a sequelize-typescript TypeScript wrapper which provides a set of decorators and other extras for the base sequelize. Getting started \u00b6 To start the adventure with this library we have to install the following dependencies: $ npm install --save sequelize sequelize-typescript mysql2 $ npm install --save-dev @types/sequelize The first step we need to do is create a Sequelize instance with an options object passed into the constructor. Also, we need to add all models (the alternative is to use modelPaths property) and sync() our database tables. @ @filename ( database . providers ) import { Sequelize } from 'sequelize-typescript' ; import { Cat } from '../cats/cat.entity' ; export const databaseProviders = [ { provide : 'SEQUELIZE' , useFactory : async () => { const sequelize = new Sequelize ({ dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'password' , database : 'nest' , }); sequelize . addModels ([ Cat ]); await sequelize . sync (); return sequelize ; }, }, ]; info Hint Following best practices, we declared the custom provider in the separated file which has a *.providers.ts suffix. Then, we need to export these providers to make them accessible for the rest part of the application. import { Module } from '@nestjs/common' ; import { databaseProviders } from './database.providers' ; @Module ({ providers : [... databaseProviders ], exports : [... databaseProviders ], }) export class DatabaseModule {} Now we can inject the Sequelize object using @Inject() decorator. Each class that would depend on the Sequelize async provider will wait until a Promise is resolved. Model injection \u00b6 In Sequelize the Model defines a table in the database. Instances of this class represent a database row. Firstly, we need at least one entity: @ @filename ( cat . entity ) import { Table , Column , Model } from 'sequelize-typescript' ; @Table export class Cat extends Model { @Column name : string ; @Column age : number ; @Column breed : string ; } The Cat entity belongs to the cats directory. This directory represents the CatsModule . Now it's time to create a Repository provider: @ @filename ( cats . providers ) import { Cat } from './cat.entity' ; export const catsProviders = [ { provide : 'CATS_REPOSITORY' , useValue : Cat , }, ]; warning Warning In the real-world applications you should avoid magic strings . Both CATS_REPOSITORY and SEQUELIZE should be kept in the separated constants.ts file. In Sequelize, we use static methods to manipulate the data, and thus we created an alias here. Now we can inject the CATS_REPOSITORY to the CatsService using the @Inject() decorator: @ @filename ( cats . service ) import { Injectable , Inject } from '@nestjs/common' ; import { CreateCatDto } from './dto/create-cat.dto' ; import { Cat } from './cat.entity' ; @Injectable () export class CatsService { constructor ( @Inject ( 'CATS_REPOSITORY' ) private catsRepository : typeof Cat ) {} async findAll () : Promise < Cat [] > { return this . catsRepository . findAll < Cat > (); } } The database connection is asynchronous , but Nest makes this process completely invisible for the end-user. The CATS_REPOSITORY provider is waiting for the db connection, and the CatsService is delayed until repository is ready to use. The entire application can start when each class is instantiated. Here is a final CatsModule : @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; import { catsProviders } from './cats.providers' ; import { DatabaseModule } from '../database/database.module' ; @Module ({ imports : [ DatabaseModule ], controllers : [ CatsController ], providers : [ CatsService , ... catsProviders , ], }) export class CatsModule {} info Hint Do not forget to import the CatsModule into the root AppModule .","title":"Sequelize"},{"location":"recipes/sql-sequelize/#sql-sequelize","text":"","title":"SQL (Sequelize)"},{"location":"recipes/sql-sequelize/#this-chapter-applies-only-to-typescript","text":"Warning In this article, you'll learn how to create a DatabaseModule based on the Sequelize package from scratch using custom components. As a consequence, this technique contains a lot of overhead that you can avoid by using the dedicated, out-of-the-box @nestjs/sequelize package. To learn more, see here . Sequelize is a popular Object Relational Mapper (ORM) written in a vanilla JavaScript, but there is a sequelize-typescript TypeScript wrapper which provides a set of decorators and other extras for the base sequelize.","title":"This chapter applies only to TypeScript"},{"location":"recipes/sql-sequelize/#getting-started","text":"To start the adventure with this library we have to install the following dependencies: $ npm install --save sequelize sequelize-typescript mysql2 $ npm install --save-dev @types/sequelize The first step we need to do is create a Sequelize instance with an options object passed into the constructor. Also, we need to add all models (the alternative is to use modelPaths property) and sync() our database tables. @ @filename ( database . providers ) import { Sequelize } from 'sequelize-typescript' ; import { Cat } from '../cats/cat.entity' ; export const databaseProviders = [ { provide : 'SEQUELIZE' , useFactory : async () => { const sequelize = new Sequelize ({ dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'password' , database : 'nest' , }); sequelize . addModels ([ Cat ]); await sequelize . sync (); return sequelize ; }, }, ]; info Hint Following best practices, we declared the custom provider in the separated file which has a *.providers.ts suffix. Then, we need to export these providers to make them accessible for the rest part of the application. import { Module } from '@nestjs/common' ; import { databaseProviders } from './database.providers' ; @Module ({ providers : [... databaseProviders ], exports : [... databaseProviders ], }) export class DatabaseModule {} Now we can inject the Sequelize object using @Inject() decorator. Each class that would depend on the Sequelize async provider will wait until a Promise is resolved.","title":"Getting started"},{"location":"recipes/sql-sequelize/#model-injection","text":"In Sequelize the Model defines a table in the database. Instances of this class represent a database row. Firstly, we need at least one entity: @ @filename ( cat . entity ) import { Table , Column , Model } from 'sequelize-typescript' ; @Table export class Cat extends Model { @Column name : string ; @Column age : number ; @Column breed : string ; } The Cat entity belongs to the cats directory. This directory represents the CatsModule . Now it's time to create a Repository provider: @ @filename ( cats . providers ) import { Cat } from './cat.entity' ; export const catsProviders = [ { provide : 'CATS_REPOSITORY' , useValue : Cat , }, ]; warning Warning In the real-world applications you should avoid magic strings . Both CATS_REPOSITORY and SEQUELIZE should be kept in the separated constants.ts file. In Sequelize, we use static methods to manipulate the data, and thus we created an alias here. Now we can inject the CATS_REPOSITORY to the CatsService using the @Inject() decorator: @ @filename ( cats . service ) import { Injectable , Inject } from '@nestjs/common' ; import { CreateCatDto } from './dto/create-cat.dto' ; import { Cat } from './cat.entity' ; @Injectable () export class CatsService { constructor ( @Inject ( 'CATS_REPOSITORY' ) private catsRepository : typeof Cat ) {} async findAll () : Promise < Cat [] > { return this . catsRepository . findAll < Cat > (); } } The database connection is asynchronous , but Nest makes this process completely invisible for the end-user. The CATS_REPOSITORY provider is waiting for the db connection, and the CatsService is delayed until repository is ready to use. The entire application can start when each class is instantiated. Here is a final CatsModule : @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; import { catsProviders } from './cats.providers' ; import { DatabaseModule } from '../database/database.module' ; @Module ({ imports : [ DatabaseModule ], controllers : [ CatsController ], providers : [ CatsService , ... catsProviders , ], }) export class CatsModule {} info Hint Do not forget to import the CatsModule into the root AppModule .","title":"Model injection"},{"location":"recipes/sql-typeorm/","text":"SQL (TypeORM) \u00b6 This chapter applies only to TypeScript \u00b6 Warning In this article, you'll learn how to create a DatabaseModule based on the TypeORM package from scratch using custom providers mechanism. As a consequence, this solution contains a lot of overhead that you can omit using ready to use and available out-of-the-box dedicated @nestjs/typeorm package. To learn more, see here . TypeORM is definitely the most mature Object Relational Mapper (ORM) available in the node.js world. Since it's written in TypeScript, it works pretty well with the Nest framework. Getting started \u00b6 To start the adventure with this library we have to install all required dependencies: $ npm install --save typeorm mysql2 The first step we need to do is to establish the connection with our database using createConnection() function imported from the typeorm package. The createConnection() function returns a Promise , and therefore we have to create an async provider . @ @filename ( database . providers ) import { createConnection } from 'typeorm' ; export const databaseProviders = [ { provide : 'DATABASE_CONNECTION' , useFactory : async () => await createConnection ({ type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [ __dirname + '/../**/*.entity{.ts,.js}' , ], synchronize : true , }), }, ]; warning Warning Setting synchronize: true shouldn't be used in production - otherwise you can lose production data. info Hint Following best practices, we declared the custom provider in the separated file which has a *.providers.ts suffix. Then, we need to export these providers to make them accessible for the rest of the application. @ @filename ( database . module ) import { Module } from '@nestjs/common' ; import { databaseProviders } from './database.providers' ; @Module ({ providers : [... databaseProviders ], exports : [... databaseProviders ], }) export class DatabaseModule {} Now we can inject the Connection object using @Inject() decorator. Each class that would depend on the Connection async provider will wait until a Promise is resolved. Repository pattern \u00b6 The TypeORM supports the repository design pattern, thus each entity has its own Repository. These repositories can be obtained from the database connection. But firstly, we need at least one entity. We are going to reuse the Photo entity from the official documentation. @ @filename ( photo . entity ) import { Entity , Column , PrimaryGeneratedColumn } from 'typeorm' ; @Entity () export class Photo { @PrimaryGeneratedColumn () id : number ; @Column ({ length : 500 }) name : string ; @Column ( 'text' ) description : string ; @Column () filename : string ; @Column ( 'int' ) views : number ; @Column () isPublished : boolean ; } The Photo entity belongs to the photo directory. This directory represents the PhotoModule . Now, let's create a Repository provider: @ @filename ( photo . providers ) import { Connection } from 'typeorm' ; import { Photo } from './photo.entity' ; export const photoProviders = [ { provide : 'PHOTO_REPOSITORY' , useFactory : ( connection : Connection ) => connection . getRepository ( Photo ), inject : [ 'DATABASE_CONNECTION' ], }, ]; warning Warning In the real-world applications you should avoid magic strings . Both PHOTO_REPOSITORY and DATABASE_CONNECTION should be kept in the separated constants.ts file. Now we can inject the Repository<Photo> to the PhotoService using the @Inject() decorator: @ @filename ( photo . service ) import { Injectable , Inject } from '@nestjs/common' ; import { Repository } from 'typeorm' ; import { Photo } from './photo.entity' ; @Injectable () export class PhotoService { constructor ( @Inject ( 'PHOTO_REPOSITORY' ) private photoRepository : Repository < Photo > , ) {} async findAll () : Promise < Photo [] > { return this . photoRepository . find (); } } The database connection is asynchronous , but Nest makes this process completely invisible for the end-user. The PhotoRepository is waiting for the db connection, and the PhotoService is delayed until repository is ready to use. The entire application can start when each class is instantiated. Here is a final PhotoModule : @ @filename ( photo . module ) import { Module } from '@nestjs/common' ; import { DatabaseModule } from '../database/database.module' ; import { photoProviders } from './photo.providers' ; import { PhotoService } from './photo.service' ; @Module ({ imports : [ DatabaseModule ], providers : [ ... photoProviders , PhotoService , ], }) export class PhotoModule {} info Hint Do not forget to import the PhotoModule into the root AppModule .","title":"TypeORM"},{"location":"recipes/sql-typeorm/#sql-typeorm","text":"","title":"SQL (TypeORM)"},{"location":"recipes/sql-typeorm/#this-chapter-applies-only-to-typescript","text":"Warning In this article, you'll learn how to create a DatabaseModule based on the TypeORM package from scratch using custom providers mechanism. As a consequence, this solution contains a lot of overhead that you can omit using ready to use and available out-of-the-box dedicated @nestjs/typeorm package. To learn more, see here . TypeORM is definitely the most mature Object Relational Mapper (ORM) available in the node.js world. Since it's written in TypeScript, it works pretty well with the Nest framework.","title":"This chapter applies only to TypeScript"},{"location":"recipes/sql-typeorm/#getting-started","text":"To start the adventure with this library we have to install all required dependencies: $ npm install --save typeorm mysql2 The first step we need to do is to establish the connection with our database using createConnection() function imported from the typeorm package. The createConnection() function returns a Promise , and therefore we have to create an async provider . @ @filename ( database . providers ) import { createConnection } from 'typeorm' ; export const databaseProviders = [ { provide : 'DATABASE_CONNECTION' , useFactory : async () => await createConnection ({ type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [ __dirname + '/../**/*.entity{.ts,.js}' , ], synchronize : true , }), }, ]; warning Warning Setting synchronize: true shouldn't be used in production - otherwise you can lose production data. info Hint Following best practices, we declared the custom provider in the separated file which has a *.providers.ts suffix. Then, we need to export these providers to make them accessible for the rest of the application. @ @filename ( database . module ) import { Module } from '@nestjs/common' ; import { databaseProviders } from './database.providers' ; @Module ({ providers : [... databaseProviders ], exports : [... databaseProviders ], }) export class DatabaseModule {} Now we can inject the Connection object using @Inject() decorator. Each class that would depend on the Connection async provider will wait until a Promise is resolved.","title":"Getting started"},{"location":"recipes/sql-typeorm/#repository-pattern","text":"The TypeORM supports the repository design pattern, thus each entity has its own Repository. These repositories can be obtained from the database connection. But firstly, we need at least one entity. We are going to reuse the Photo entity from the official documentation. @ @filename ( photo . entity ) import { Entity , Column , PrimaryGeneratedColumn } from 'typeorm' ; @Entity () export class Photo { @PrimaryGeneratedColumn () id : number ; @Column ({ length : 500 }) name : string ; @Column ( 'text' ) description : string ; @Column () filename : string ; @Column ( 'int' ) views : number ; @Column () isPublished : boolean ; } The Photo entity belongs to the photo directory. This directory represents the PhotoModule . Now, let's create a Repository provider: @ @filename ( photo . providers ) import { Connection } from 'typeorm' ; import { Photo } from './photo.entity' ; export const photoProviders = [ { provide : 'PHOTO_REPOSITORY' , useFactory : ( connection : Connection ) => connection . getRepository ( Photo ), inject : [ 'DATABASE_CONNECTION' ], }, ]; warning Warning In the real-world applications you should avoid magic strings . Both PHOTO_REPOSITORY and DATABASE_CONNECTION should be kept in the separated constants.ts file. Now we can inject the Repository<Photo> to the PhotoService using the @Inject() decorator: @ @filename ( photo . service ) import { Injectable , Inject } from '@nestjs/common' ; import { Repository } from 'typeorm' ; import { Photo } from './photo.entity' ; @Injectable () export class PhotoService { constructor ( @Inject ( 'PHOTO_REPOSITORY' ) private photoRepository : Repository < Photo > , ) {} async findAll () : Promise < Photo [] > { return this . photoRepository . find (); } } The database connection is asynchronous , but Nest makes this process completely invisible for the end-user. The PhotoRepository is waiting for the db connection, and the PhotoService is delayed until repository is ready to use. The entire application can start when each class is instantiated. Here is a final PhotoModule : @ @filename ( photo . module ) import { Module } from '@nestjs/common' ; import { DatabaseModule } from '../database/database.module' ; import { photoProviders } from './photo.providers' ; import { PhotoService } from './photo.service' ; @Module ({ imports : [ DatabaseModule ], providers : [ ... photoProviders , PhotoService , ], }) export class PhotoModule {} info Hint Do not forget to import the PhotoModule into the root AppModule .","title":"Repository pattern"},{"location":"recipes/terminus/","text":"Healthchecks (Terminus) \u00b6 Terminus \u96c6\u6210\u4e3a\u60a8\u63d0\u4f9b \u5c31\u7eea/\u6d3b\u52a8 \u5065\u5eb7\u68c0\u67e5\u3002 \u5f53\u6d89\u53ca\u5230\u590d\u6742\u7684\u540e\u7aef\u8bbe\u7f6e\u65f6\uff0c\u5065\u5eb7\u68c0\u67e5\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002 \u7b80\u800c\u8a00\u4e4b\uff0cweb \u5f00\u53d1\u9886\u57df\u7684\u5065\u5eb7\u68c0\u67e5\u901a\u5e38\u5305\u62ec\u4e00\u4e2a\u7279\u6b8a\u7684\u5730\u5740\uff0c\u4f8b\u5982\u201chttps://my-website.com/health/readiness\u201d\u3002 \u57fa\u7840\u8bbe\u65bd\u7684\u4e00\u4e2a\u670d\u52a1\u6216\u7ec4\u4ef6(\u4f8b\u5982\uff0cKubernetes)\u4f1a\u4e0d\u65ad\u5730\u68c0\u67e5\u8fd9\u4e2a\u5730\u5740\u3002 \u6839\u636e\u4ece\u201cGET\u201d\u8bf7\u6c42\u8fd4\u56de\u5230\u8be5\u5730\u5740\u7684 HTTP \u72b6\u6001\u7801\uff0c\u670d\u52a1\u5728\u6536\u5230\u201c\u4e0d\u5065\u5eb7\u201d\u54cd\u5e94\u65f6\u5c06\u91c7\u53d6\u884c\u52a8\u3002 \u7531\u4e8e\u201c\u6b63\u5e38\u201d\u6216\u201c\u4e0d\u6b63\u5e38\u201d\u7684\u5b9a\u4e49\u56e0\u60a8\u63d0\u4f9b\u7684\u670d\u52a1\u7c7b\u578b\u800c\u5f02\uff0c Terminus \u96c6\u6210\u652f\u6301\u60a8\u4f7f\u7528\u4e00\u7ec4 \u8fd0\u884c\u72b6\u51b5\u6307\u793a\u5668 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u7684 web \u670d\u52a1\u5668\u4f7f\u7528 MongoDB \u6765\u5b58\u50a8\u6570\u636e\uff0c\u90a3\u4e48 MongoDB \u662f\u5426\u4ecd\u7136\u5728\u8fd0\u884c\u662f\u975e\u5e38\u91cd\u8981\u7684\u4fe1\u606f\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u201cMongooseHealthIndicator\u201d\u3002 \u5982\u679c\u914d\u7f6e\u6b63\u786e(\u7a0d\u540e\u8be6\u7ec6\u4ecb\u7ecd)\uff0c\u60a8\u7684\u5065\u5eb7\u68c0\u67e5\u5730\u5740\u5c06\u8fd4\u56de\u5065\u5eb7\u6216\u4e0d\u5065\u5eb7\u7684 HTTP \u72b6\u6001\u7801\uff0c\u8fd9\u53d6\u51b3\u4e8e MongoDB \u662f\u5426\u8fd0\u884c\u3002 Getting started \u00b6 To get started with @nestjs/terminus we need to install the required dependency. $ npm install --save @nestjs/terminus Setting up a Healthcheck \u00b6 A health check represents a summary of health indicators . A health indicator executes a check of a service, whether it is in a healthy or unhealthy state. A health check is positive if all the assigned health indicators are up and running. Because a lot of applications will need similar health indicators, @nestjs/terminus provides a set of predefined indicators, such as: HttpHealthIndicator TypeOrmHealthIndicator MongooseHealthIndicator SequelizeHealthIndicator MicroserviceHealthIndicator GRPCHealthIndicator MemoryHealthIndicator DiskHealthIndicator To get started with our first health check, we need to import the TerminusModule into our AppModule . @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TerminusModule } from '@nestjs/terminus' ; @Module ({ imports : [ TerminusModule ] }) export class AppModule {} Our healthcheck(s) can be executed using a controller , which can be easily set up using the Nest CLI . $ nest g controller health info Info It is highly recommended to enable shutdown hooks in your application. Terminus integration makes use of this lifecycle event if enabled. Read more about shutdown hooks here . HTTP Healthcheck \u00b6 Once we have installed @nestjs/terminus , imported our TerminusModule and created a new controller, we are ready to create a health check. @ @filename ( health . controller ) import { Controller , Get } from '@nestjs/common' ; import { HealthCheckService , HttpHealthIndicator , HealthCheck } from '@nestjs/terminus' ; @Controller ( 'health' ) export class HealthController { constructor ( private health : HealthCheckService , private http : HttpHealthIndicator , ) {} @Get () @HealthCheck () check () { return this . health . check ([ () => this . http . pingCheck ( 'nestjs-docs' , 'https://docs.nestjs.com' ), ]); } } @ @switch import { Controller , Get } from '@nestjs/common' ; import { HealthCheckService , HttpHealthIndicator , HealthCheck } from '@nestjs/terminus' ; @Controller ( 'health' ) @Dependencies ( HealthCheckService , HttpHealthIndicator ) export class HealthController { constructor ( private health , private http , ) { } @Get () @HealthCheck () healthCheck () { return this . health . check ([ async () => this . http . pingCheck ( 'nestjs-docs' , 'https://docs.nestjs.com' ), ]) } } warning Warning HttpHealthIndicator requires the installation of the @nestjs/axios package and the import of HttpModule . Our health check will now send a GET -request to the https://docs.nestjs.com address. If we get a healthy response from that address, our route at http://localhost:3000/health will return the following object with a 200 status code. { \"status\" : \"ok\" , \"info\" : { \"nestjs-docs\" : { \"status\" : \"up\" } }, \"error\" : {}, \"details\" : { \"nestjs-docs\" : { \"status\" : \"up\" } } } The interface of this response object can be accessed from the @nestjs/terminus package with the HealthCheckResult interface. status If any health indicator failed the status will be 'error' . If the NestJS app is shutting down but still accepting HTTP requests, the health check will have the 'shutting_down' status. | 'error' \\| 'ok' \\| 'shutting_down' | | info | Object containing information of each health indicator which is of status 'up' , or in other words \"healthy\". | object | | error | Object containing information of each health indicator which is of status 'down' , or in other words \"unhealthy\". | object | | details | Object containing all information of each health indicator | object | TypeOrm health indicator \u00b6 Terminus offers the capability to add database checks to your health check. In order to get started with this health indicator, you should check out the Database chapter and make sure your database connection within your application is established. info Hint Behind the scenes the TypeOrmHealthIndicator simply executes a SELECT 1 -SQL command which is often used to verify whether the database still alive. In case you are using an Oracle database it uses SELECT 1 FROM DUAL . @ @filename ( health . controller ) @Controller ( 'health' ) export class HealthController { constructor ( private health : HealthCheckService , private db : TypeOrmHealthIndicator , ) {} @Get () @HealthCheck () check () { return this . health . check ([ () => this . db . pingCheck ( 'database' ), ]); } } @ @switch @Controller ( 'health' ) @Dependencies ( HealthCheckService , TypeOrmHealthIndicator ) export class HealthController { constructor ( private health , private db , ) { } @Get () @HealthCheck () healthCheck () { return this . health . check ([ async () => this . db . pingCheck ( 'database' ), ]) } } If your database is reachable, you should now see the following JSON-result when requesting http://localhost:3000 with a GET request: { \"status\" : \"ok\" , \"info\" : { \"database\" : { \"status\" : \"up\" } }, \"error\" : {}, \"details\" : { \"database\" : { \"status\" : \"up\" } } } In case your app uses multiple databases , you need to inject each connection into your HealthController . Then, you can simply pass the connection reference to the TypeOrmHealthIndicator . @ @filename ( health . controller ) @Controller ( 'health' ) export class HealthController { constructor ( private health : HealthCheckService , private db : TypeOrmHealthIndicator , @InjectConnection ( 'albumsConnection' ) private albumsConnection : Connection , @InjectConnection () private defaultConnection : Connection , ) {} @Get () @HealthCheck () check () { return this . health . check ([ () => this . db . pingCheck ( 'albums-database' , { connection : this.albumsConnection }), () => this . db . pingCheck ( 'database' , { connection : this.defaultConnection }), ]); } } Custom health indicator \u00b6 In some cases, the predefined health indicators provided by @nestjs/terminus do not cover all of your health check requirements. In that case, you can set up a custom health indicator according to your needs. Let's get started by creating a service that will represent our custom indicator. To get a basic understanding of how an indicator is structured, we will create an example DogHealthIndicator . This service should have the state 'up' if every Dog object has the type 'goodboy' . If that condition is not satisfied then it should throw an error. @ @filename ( dog . health ) import { Injectable } from '@nestjs/common' ; import { HealthIndicator , HealthIndicatorResult , HealthCheckError } from '@nestjs/terminus' ; export interface Dog { name : string ; type : string ; } @Injectable () export class DogHealthIndicator extends HealthIndicator { private dogs : Dog [] = [ { name : 'Fido' , type : 'goodboy' }, { name : 'Rex' , type : 'badboy' }, ]; async isHealthy ( key : string ) : Promise < HealthIndicatorResult > { const badboys = this . dogs . filter ( dog => dog . type === 'badboy' ); const isHealthy = badboys . length === 0 ; const result = this . getStatus ( key , isHealthy , { badboys : badboys.length }); if ( isHealthy ) { return result ; } throw new HealthCheckError ( 'Dogcheck failed' , result ); } } @ @switch import { Injectable } from '@nestjs/common' ; import { HealthCheckError } from '@godaddy/terminus' ; @Injectable () export class DogHealthIndicator extends HealthIndicator { dogs = [ { name : 'Fido' , type : 'goodboy' }, { name : 'Rex' , type : 'badboy' }, ]; async isHealthy ( key ) { const badboys = this . dogs . filter ( dog => dog . type === 'badboy' ); const isHealthy = badboys . length === 0 ; const result = this . getStatus ( key , isHealthy , { badboys : badboys.length }); if ( isHealthy ) { return result ; } throw new HealthCheckError ( 'Dogcheck failed' , result ); } } The next thing we need to do is register the health indicator as a provider. @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TerminusModule } from '@nestjs/terminus' ; import { DogHealthIndicator } from './dog.health' ; @Module ({ controllers : [ HealthController ], imports : [ TerminusModule ], providers : [ DogHealthIndicator ] }) export class AppModule { } info Hint In a real-world application the DogHealthIndicator should be provided in a separate module, for example, DogModule , which then will be imported by the AppModule . The last required step is to add the now available health indicator in the required health check endpoint. For that, we go back to our HealthController and add it to our check function. @ @filename ( health . controller ) import { HealthCheckService } from '@nestjs/terminus' ; import { Injectable } from '@nestjs/common' ; import { DogHealthIndicator } from './dog.health' ; @Injectable () export class HealthController { constructor ( private health : HealthCheckService , private dogHealthIndicator : DogHealthIndicator ) {} @Get () @HealthCheck () healthCheck () { return this . health . check ([ async () => this . dogHealthIndicator . isHealthy ( 'dog' ), ]) } } @ @switch import { HealthCheckService } from '@nestjs/terminus' ; import { Injectable } from '@nestjs/common' ; import { DogHealthIndicator } from './dog.health' ; @Injectable () @Dependencies ( HealthCheckService , DogHealthIndicator ) export class HealthController { constructor ( private health , private dogHealthIndicator ) {} @Get () @HealthCheck () healthCheck () { return this . health . check ([ async () => this . dogHealthIndicator . isHealthy ( 'dog' ), ]) } } Examples \u00b6 Some working examples are available here .","title":"\u5065\u5eb7\u68c0\u67e5"},{"location":"recipes/terminus/#healthchecks-terminus","text":"Terminus \u96c6\u6210\u4e3a\u60a8\u63d0\u4f9b \u5c31\u7eea/\u6d3b\u52a8 \u5065\u5eb7\u68c0\u67e5\u3002 \u5f53\u6d89\u53ca\u5230\u590d\u6742\u7684\u540e\u7aef\u8bbe\u7f6e\u65f6\uff0c\u5065\u5eb7\u68c0\u67e5\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002 \u7b80\u800c\u8a00\u4e4b\uff0cweb \u5f00\u53d1\u9886\u57df\u7684\u5065\u5eb7\u68c0\u67e5\u901a\u5e38\u5305\u62ec\u4e00\u4e2a\u7279\u6b8a\u7684\u5730\u5740\uff0c\u4f8b\u5982\u201chttps://my-website.com/health/readiness\u201d\u3002 \u57fa\u7840\u8bbe\u65bd\u7684\u4e00\u4e2a\u670d\u52a1\u6216\u7ec4\u4ef6(\u4f8b\u5982\uff0cKubernetes)\u4f1a\u4e0d\u65ad\u5730\u68c0\u67e5\u8fd9\u4e2a\u5730\u5740\u3002 \u6839\u636e\u4ece\u201cGET\u201d\u8bf7\u6c42\u8fd4\u56de\u5230\u8be5\u5730\u5740\u7684 HTTP \u72b6\u6001\u7801\uff0c\u670d\u52a1\u5728\u6536\u5230\u201c\u4e0d\u5065\u5eb7\u201d\u54cd\u5e94\u65f6\u5c06\u91c7\u53d6\u884c\u52a8\u3002 \u7531\u4e8e\u201c\u6b63\u5e38\u201d\u6216\u201c\u4e0d\u6b63\u5e38\u201d\u7684\u5b9a\u4e49\u56e0\u60a8\u63d0\u4f9b\u7684\u670d\u52a1\u7c7b\u578b\u800c\u5f02\uff0c Terminus \u96c6\u6210\u652f\u6301\u60a8\u4f7f\u7528\u4e00\u7ec4 \u8fd0\u884c\u72b6\u51b5\u6307\u793a\u5668 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u7684 web \u670d\u52a1\u5668\u4f7f\u7528 MongoDB \u6765\u5b58\u50a8\u6570\u636e\uff0c\u90a3\u4e48 MongoDB \u662f\u5426\u4ecd\u7136\u5728\u8fd0\u884c\u662f\u975e\u5e38\u91cd\u8981\u7684\u4fe1\u606f\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u201cMongooseHealthIndicator\u201d\u3002 \u5982\u679c\u914d\u7f6e\u6b63\u786e(\u7a0d\u540e\u8be6\u7ec6\u4ecb\u7ecd)\uff0c\u60a8\u7684\u5065\u5eb7\u68c0\u67e5\u5730\u5740\u5c06\u8fd4\u56de\u5065\u5eb7\u6216\u4e0d\u5065\u5eb7\u7684 HTTP \u72b6\u6001\u7801\uff0c\u8fd9\u53d6\u51b3\u4e8e MongoDB \u662f\u5426\u8fd0\u884c\u3002","title":"Healthchecks (Terminus)"},{"location":"recipes/terminus/#getting-started","text":"To get started with @nestjs/terminus we need to install the required dependency. $ npm install --save @nestjs/terminus","title":"Getting started"},{"location":"recipes/terminus/#setting-up-a-healthcheck","text":"A health check represents a summary of health indicators . A health indicator executes a check of a service, whether it is in a healthy or unhealthy state. A health check is positive if all the assigned health indicators are up and running. Because a lot of applications will need similar health indicators, @nestjs/terminus provides a set of predefined indicators, such as: HttpHealthIndicator TypeOrmHealthIndicator MongooseHealthIndicator SequelizeHealthIndicator MicroserviceHealthIndicator GRPCHealthIndicator MemoryHealthIndicator DiskHealthIndicator To get started with our first health check, we need to import the TerminusModule into our AppModule . @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TerminusModule } from '@nestjs/terminus' ; @Module ({ imports : [ TerminusModule ] }) export class AppModule {} Our healthcheck(s) can be executed using a controller , which can be easily set up using the Nest CLI . $ nest g controller health info Info It is highly recommended to enable shutdown hooks in your application. Terminus integration makes use of this lifecycle event if enabled. Read more about shutdown hooks here .","title":"Setting up a Healthcheck"},{"location":"recipes/terminus/#http-healthcheck","text":"Once we have installed @nestjs/terminus , imported our TerminusModule and created a new controller, we are ready to create a health check. @ @filename ( health . controller ) import { Controller , Get } from '@nestjs/common' ; import { HealthCheckService , HttpHealthIndicator , HealthCheck } from '@nestjs/terminus' ; @Controller ( 'health' ) export class HealthController { constructor ( private health : HealthCheckService , private http : HttpHealthIndicator , ) {} @Get () @HealthCheck () check () { return this . health . check ([ () => this . http . pingCheck ( 'nestjs-docs' , 'https://docs.nestjs.com' ), ]); } } @ @switch import { Controller , Get } from '@nestjs/common' ; import { HealthCheckService , HttpHealthIndicator , HealthCheck } from '@nestjs/terminus' ; @Controller ( 'health' ) @Dependencies ( HealthCheckService , HttpHealthIndicator ) export class HealthController { constructor ( private health , private http , ) { } @Get () @HealthCheck () healthCheck () { return this . health . check ([ async () => this . http . pingCheck ( 'nestjs-docs' , 'https://docs.nestjs.com' ), ]) } } warning Warning HttpHealthIndicator requires the installation of the @nestjs/axios package and the import of HttpModule . Our health check will now send a GET -request to the https://docs.nestjs.com address. If we get a healthy response from that address, our route at http://localhost:3000/health will return the following object with a 200 status code. { \"status\" : \"ok\" , \"info\" : { \"nestjs-docs\" : { \"status\" : \"up\" } }, \"error\" : {}, \"details\" : { \"nestjs-docs\" : { \"status\" : \"up\" } } } The interface of this response object can be accessed from the @nestjs/terminus package with the HealthCheckResult interface. status If any health indicator failed the status will be 'error' . If the NestJS app is shutting down but still accepting HTTP requests, the health check will have the 'shutting_down' status. | 'error' \\| 'ok' \\| 'shutting_down' | | info | Object containing information of each health indicator which is of status 'up' , or in other words \"healthy\". | object | | error | Object containing information of each health indicator which is of status 'down' , or in other words \"unhealthy\". | object | | details | Object containing all information of each health indicator | object |","title":"HTTP Healthcheck"},{"location":"recipes/terminus/#typeorm-health-indicator","text":"Terminus offers the capability to add database checks to your health check. In order to get started with this health indicator, you should check out the Database chapter and make sure your database connection within your application is established. info Hint Behind the scenes the TypeOrmHealthIndicator simply executes a SELECT 1 -SQL command which is often used to verify whether the database still alive. In case you are using an Oracle database it uses SELECT 1 FROM DUAL . @ @filename ( health . controller ) @Controller ( 'health' ) export class HealthController { constructor ( private health : HealthCheckService , private db : TypeOrmHealthIndicator , ) {} @Get () @HealthCheck () check () { return this . health . check ([ () => this . db . pingCheck ( 'database' ), ]); } } @ @switch @Controller ( 'health' ) @Dependencies ( HealthCheckService , TypeOrmHealthIndicator ) export class HealthController { constructor ( private health , private db , ) { } @Get () @HealthCheck () healthCheck () { return this . health . check ([ async () => this . db . pingCheck ( 'database' ), ]) } } If your database is reachable, you should now see the following JSON-result when requesting http://localhost:3000 with a GET request: { \"status\" : \"ok\" , \"info\" : { \"database\" : { \"status\" : \"up\" } }, \"error\" : {}, \"details\" : { \"database\" : { \"status\" : \"up\" } } } In case your app uses multiple databases , you need to inject each connection into your HealthController . Then, you can simply pass the connection reference to the TypeOrmHealthIndicator . @ @filename ( health . controller ) @Controller ( 'health' ) export class HealthController { constructor ( private health : HealthCheckService , private db : TypeOrmHealthIndicator , @InjectConnection ( 'albumsConnection' ) private albumsConnection : Connection , @InjectConnection () private defaultConnection : Connection , ) {} @Get () @HealthCheck () check () { return this . health . check ([ () => this . db . pingCheck ( 'albums-database' , { connection : this.albumsConnection }), () => this . db . pingCheck ( 'database' , { connection : this.defaultConnection }), ]); } }","title":"TypeOrm health indicator"},{"location":"recipes/terminus/#custom-health-indicator","text":"In some cases, the predefined health indicators provided by @nestjs/terminus do not cover all of your health check requirements. In that case, you can set up a custom health indicator according to your needs. Let's get started by creating a service that will represent our custom indicator. To get a basic understanding of how an indicator is structured, we will create an example DogHealthIndicator . This service should have the state 'up' if every Dog object has the type 'goodboy' . If that condition is not satisfied then it should throw an error. @ @filename ( dog . health ) import { Injectable } from '@nestjs/common' ; import { HealthIndicator , HealthIndicatorResult , HealthCheckError } from '@nestjs/terminus' ; export interface Dog { name : string ; type : string ; } @Injectable () export class DogHealthIndicator extends HealthIndicator { private dogs : Dog [] = [ { name : 'Fido' , type : 'goodboy' }, { name : 'Rex' , type : 'badboy' }, ]; async isHealthy ( key : string ) : Promise < HealthIndicatorResult > { const badboys = this . dogs . filter ( dog => dog . type === 'badboy' ); const isHealthy = badboys . length === 0 ; const result = this . getStatus ( key , isHealthy , { badboys : badboys.length }); if ( isHealthy ) { return result ; } throw new HealthCheckError ( 'Dogcheck failed' , result ); } } @ @switch import { Injectable } from '@nestjs/common' ; import { HealthCheckError } from '@godaddy/terminus' ; @Injectable () export class DogHealthIndicator extends HealthIndicator { dogs = [ { name : 'Fido' , type : 'goodboy' }, { name : 'Rex' , type : 'badboy' }, ]; async isHealthy ( key ) { const badboys = this . dogs . filter ( dog => dog . type === 'badboy' ); const isHealthy = badboys . length === 0 ; const result = this . getStatus ( key , isHealthy , { badboys : badboys.length }); if ( isHealthy ) { return result ; } throw new HealthCheckError ( 'Dogcheck failed' , result ); } } The next thing we need to do is register the health indicator as a provider. @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TerminusModule } from '@nestjs/terminus' ; import { DogHealthIndicator } from './dog.health' ; @Module ({ controllers : [ HealthController ], imports : [ TerminusModule ], providers : [ DogHealthIndicator ] }) export class AppModule { } info Hint In a real-world application the DogHealthIndicator should be provided in a separate module, for example, DogModule , which then will be imported by the AppModule . The last required step is to add the now available health indicator in the required health check endpoint. For that, we go back to our HealthController and add it to our check function. @ @filename ( health . controller ) import { HealthCheckService } from '@nestjs/terminus' ; import { Injectable } from '@nestjs/common' ; import { DogHealthIndicator } from './dog.health' ; @Injectable () export class HealthController { constructor ( private health : HealthCheckService , private dogHealthIndicator : DogHealthIndicator ) {} @Get () @HealthCheck () healthCheck () { return this . health . check ([ async () => this . dogHealthIndicator . isHealthy ( 'dog' ), ]) } } @ @switch import { HealthCheckService } from '@nestjs/terminus' ; import { Injectable } from '@nestjs/common' ; import { DogHealthIndicator } from './dog.health' ; @Injectable () @Dependencies ( HealthCheckService , DogHealthIndicator ) export class HealthController { constructor ( private health , private dogHealthIndicator ) {} @Get () @HealthCheck () healthCheck () { return this . health . check ([ async () => this . dogHealthIndicator . isHealthy ( 'dog' ), ]) } }","title":"Custom health indicator"},{"location":"recipes/terminus/#examples","text":"Some working examples are available here .","title":"Examples"},{"location":"security/authentication/","text":"\u8eab\u4efd\u9a8c\u8bc1 \u00b6 \u8eab\u4efd\u9a8c\u8bc1\u662f\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4e2d \u5fc5\u4e0d\u53ef\u5c11 \u7684\u4e00\u90e8\u5206\u3002 \u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u548c\u7b56\u7565\u6765\u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4efb\u4f55\u9879\u76ee\u6240\u91c7\u7528\u7684\u65b9\u6cd5\u53d6\u51b3\u4e8e\u5176\u7279\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u672c\u7ae0\u4ecb\u7ecd\u4e86\u51e0\u79cd\u53ef\u4ee5\u9002\u5e94\u5404\u79cd\u4e0d\u540c\u9700\u6c42\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6cd5\u3002 Passport \u662f\u6700\u6d41\u884c\u7684 node.js \u8eab\u4efd\u9a8c\u8bc1\u5e93\uff0c\u88ab\u793e\u533a\u6240\u719f\u77e5\uff0c\u5e76\u6210\u529f\u5730\u5e94\u7528\u4e8e\u8bb8\u591a\u751f\u4ea7\u5e94\u7528\u7a0b\u5e8f\u3002 \u4f7f\u7528 @nestjs/passport \u6a21\u5757\u5c06\u8fd9\u4e2a\u5e93\u4e0e Nest \u5e94\u7528\u7a0b\u5e8f\u96c6\u6210\u8d77\u6765\u662f\u5f88\u7b80\u5355\u7684\u3002 \u5728\u9ad8\u5c42\uff0cPassport \u6267\u884c\u4e00\u7cfb\u5217\u6b65\u9aa4: \u901a\u8fc7\u9a8c\u8bc1\u7528\u6237\u7684\u201c\u51ed\u8bc1\u201d(\u4f8b\u5982\u7528\u6237\u540d/\u5bc6\u7801\u3001JSON Web \u4ee4\u724c( JWT )\u6216\u6765\u81ea\u8eab\u4efd\u63d0\u4f9b\u5668\u7684\u8eab\u4efd\u4ee4\u724c)\u6765\u9a8c\u8bc1\u7528\u6237\u3002 \u7ba1\u7406\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u72b6\u6001(\u901a\u8fc7\u53d1\u51fa\u53ef\u79fb\u690d\u4ee4\u724c\uff0c\u5982 JWT\uff0c\u6216\u521b\u5efa Express \u4f1a\u8bdd ) \u5c06\u6709\u5173\u5df2\u9a8c\u8bc1\u7528\u6237\u7684\u4fe1\u606f\u9644\u52a0\u5230 Request \u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5728\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u4e2d\u8fdb\u4e00\u6b65\u4f7f\u7528 Passport \u6709\u4e00\u4e2a\u4e30\u5bcc\u7684 \u7b56\u7565 \u751f\u6001\u7cfb\u7edf\uff0c\u5b9e\u73b0\u5404\u79cd\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u3002 \u867d\u7136\u5728\u6982\u5ff5\u4e0a\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u60a8\u53ef\u4ee5\u9009\u62e9\u7684 Passport \u7b56\u7565\u96c6\u975e\u5e38\u591a\uff0c\u800c\u4e14\u79cd\u7c7b\u7e41\u591a\u3002 Passport \u5c06\u8fd9\u4e9b\u4e0d\u540c\u7684\u6b65\u9aa4\u62bd\u8c61\u4e3a\u4e00\u4e2a\u6807\u51c6\u6a21\u5f0f\uff0c\u800c @nestjs/passport \u6a21\u5757\u5c06\u8be5\u6a21\u5f0f\u5305\u88c5\u5e76\u6807\u51c6\u5316\u4e3a\u719f\u6089\u7684 Nest \u7ed3\u6784\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e9b\u5f3a\u5927\u800c\u7075\u6d3b\u7684\u6a21\u5757\u4e3a RESTful API \u670d\u52a1\u5668\u5b9e\u73b0\u5b8c\u6574\u7684\u7aef\u5230\u7aef\u8eab\u4efd\u9a8c\u8bc1\u89e3\u51b3\u65b9\u6848\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u63cf\u8ff0\u7684\u6982\u5ff5\u6765\u5b9e\u73b0\u4efb\u4f55 Passport \u7b56\u7565\uff0c\u4ee5\u5b9a\u5236\u60a8\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002 \u60a8\u53ef\u4ee5\u6309\u7167\u672c\u7ae0\u4e2d\u7684\u6b65\u9aa4\u6765\u6784\u5efa\u8fd9\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u5e93. \u8eab\u4efd\u9a8c\u8bc1\u9700\u6c42 \u00b6 \u8ba9\u6211\u4eec\u5145\u5b9e\u6211\u4eec\u7684\u8981\u6c42\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u7528\u4f8b\uff0c\u5ba2\u6237\u7aef\u5c06\u9996\u5148\u4f7f\u7528\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4e00\u65e6\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u670d\u52a1\u5668\u5c06\u53d1\u51fa\u4e00\u4e2a JWT\uff0c\u8be5 JWT \u53ef\u4ee5\u5728\u968f\u540e\u7684\u8bf7\u6c42\u4e2d\u4f5c\u4e3a \u6388\u6743\u5934\u4e2d\u7684\u627f\u8f7d\u4ee4\u724c \u53d1\u9001\uff0c\u4ee5\u8bc1\u660e\u8eab\u4efd\u9a8c\u8bc1\u3002 \u6211\u4eec\u8fd8\u5c06\u521b\u5efa\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684\u8def\u7531\uff0c\u8be5\u8def\u7531\u4ec5\u5bf9\u5305\u542b\u6709\u6548 JWT \u7684\u8bf7\u6c42\u53ef\u8bbf\u95ee\u3002 \u6211\u4eec\u5c06\u4ece\u7b2c\u4e00\u4e2a\u9700\u6c42\u5f00\u59cb:\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u53d1\u5e03 JWT \u5bf9\u5176\u8fdb\u884c\u6269\u5c55\u3002 \u6700\u540e\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684\u8def\u7531\uff0c\u7528\u4e8e\u68c0\u67e5\u8bf7\u6c42\u4e2d\u7684\u6709\u6548 JWT\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305\u3002 Passport \u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3a passport-local \u7684\u7b56\u7565\uff0c\u8be5\u7b56\u7565\u5b9e\u73b0\u4e86\u7528\u6237\u540d/\u5bc6\u7801\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\uff0c\u5b83\u9002\u5408\u6211\u4eec\u5bf9\u8fd9\u90e8\u5206\u7528\u4f8b\u7684\u9700\u6c42\u3002 $ npm install --save @nestjs/passport passport passport-local $ npm install --save-dev @types/passport-local warning Notice \u5bf9\u4e8e\u4f60\u9009\u62e9\u7684 \u4efb\u4f55 Passport \u7b56\u7565\uff0c\u4f60\u603b\u662f\u9700\u8981 @nestjs/passport \u548c passport \u5305\u3002 \u7136\u540e\uff0c\u60a8\u9700\u8981\u5b89\u88c5\u7279\u5b9a\u4e8e\u7b56\u7565\u7684\u5305(\u4f8b\u5982\uff0c passport-jwt \u6216 passport-local )\uff0c\u5b83\u5b9e\u73b0\u4e86\u60a8\u6b63\u5728\u6784\u5efa\u7684\u7279\u5b9a\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002 \u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4e3a\u4efb\u4f55 Passport \u7b56\u7565\u5b89\u88c5\u7c7b\u578b\u5b9a\u4e49\uff0c\u5982\u4e0a\u9762 @types/assport-local \u6240\u793a\uff0c\u5b83\u5728\u7f16\u5199 TypeScript \u4ee3\u7801\u65f6\u63d0\u4f9b\u4e86\u5e2e\u52a9\u3002 \u5b9e\u73b0\u8ba4\u8bc1\u7b56\u7565 \u00b6 \u73b0\u5728\u6211\u4eec\u51c6\u5907\u5b9e\u73b0\u8eab\u4efd\u9a8c\u8bc1\u7279\u6027\u3002 \u6211\u4eec\u5c06\u9996\u5148\u6982\u8ff0\u7528\u4e8e \u4efb\u4f55 passport \u7b56\u7565\u7684\u6d41\u7a0b\u3002 \u5c06 Passport \u672c\u8eab\u770b\u4f5c\u4e00\u4e2a\u8ff7\u4f60\u6846\u67b6\u662f\u6709\u5e2e\u52a9\u7684\u3002 \u8be5\u6846\u67b6\u7684\u4f18\u96c5\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u5c06\u8eab\u4efd\u9a8c\u8bc1\u8fc7\u7a0b\u62bd\u8c61\u4e3a\u51e0\u4e2a\u57fa\u672c\u6b65\u9aa4\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u6b63\u5728\u5b9e\u73b0\u7684\u7b56\u7565\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u6b65\u9aa4\u3002 \u5b83\u5f88\u50cf\u4e00\u4e2a\u6846\u67b6\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u56de\u8c03\u51fd\u6570\u7684\u5f62\u5f0f\u63d0\u4f9b\u5b9a\u5236\u53c2\u6570(\u4f5c\u4e3a\u666e\u901a\u7684 JSON \u5bf9\u8c61)\u548c\u5b9a\u5236\u4ee3\u7801\u6765\u914d\u7f6e\u5b83\uff0cPassport \u4f1a\u5728\u9002\u5f53\u7684\u65f6\u5019\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002 @nestjs/passport \u6a21\u5757\u5c06\u8fd9\u4e2a\u6846\u67b6\u5c01\u88c5\u5728\u4e00\u4e2a Nest \u98ce\u683c\u7684\u5305\u4e2d\uff0c\u4f7f\u5f97\u5b83\u5f88\u5bb9\u6613\u96c6\u6210\u5230\u4e00\u4e2a Nest \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u4f7f\u7528 @nestjs/passport \uff0c\u4f46\u9996\u5148\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b vanilla Passport \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5728 vanilla Passport \u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e24\u4ef6\u4e8b\u6765\u914d\u7f6e\u7b56\u7565: \u4e00\u7ec4\u7279\u5b9a\u4e8e\u8be5\u7b56\u7565\u7684\u9009\u9879\u3002\u4f8b\u5982\uff0c\u5728 JWT \u7b56\u7565\u4e2d\uff0c\u60a8\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u5bc6\u94a5\u6765\u4e3a\u4ee4\u724c\u7b7e\u540d\u3002 \u4e00\u4e2a\u201c\u9a8c\u8bc1\u56de\u8c03\u201d\uff0c\u5728\u8fd9\u91cc\u60a8\u53ef\u4ee5\u544a\u8bc9 Passport \u5982\u4f55\u4e0e\u60a8\u7684\u7528\u6237\u5b58\u50a8(\u60a8\u5728\u5176\u4e2d\u7ba1\u7406\u7528\u6237\u5e10\u6237)\u4ea4\u4e92\u3002 \u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u9a8c\u8bc1\u4e00\u4e2a\u7528\u6237\u662f\u5426\u5b58\u5728(\u548c/\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7528\u6237)\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u51ed\u8bc1\u662f\u5426\u6709\u6548\u3002 \u5982\u679c\u9a8c\u8bc1\u6210\u529f\uff0cPassport \u5e93\u671f\u671b\u8fd9\u4e2a\u56de\u8c03\u8fd4\u56de\u4e00\u4e2a\u5b8c\u6574\u7684\u7528\u6237\uff0c\u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a null(\u5931\u8d25\u5b9a\u4e49\u4e3a\u6ca1\u6709\u627e\u5230\u7528\u6237\uff0c\u6216\u8005\u5728 passport-local \u7684\u60c5\u51b5\u4e0b\uff0c\u5bc6\u7801\u4e0d\u5339\u914d)\u3002 \u4f7f\u7528 @nestjs/passport \uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55 PassportStrategy \u7c7b\u6765\u914d\u7f6e passport \u7b56\u7565\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684 super() \u65b9\u6cd5\u6765\u4f20\u9012\u7b56\u7565\u9009\u9879(\u4e0a\u9762\u7684\u7b2c 1 \u9879)\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u5b50\u7c7b\u4e2d\u5b9e\u73b0 validate() \u65b9\u6cd5\u6765\u63d0\u4f9b\u9a8c\u8bc1\u56de\u8c03(\u4e0a\u9762\u7684\u7b2c 2 \u9879)\u3002 \u6211\u4eec\u9996\u5148\u751f\u6210\u4e00\u4e2a AuthModule \uff0c\u5e76\u5728\u5176\u4e2d\u751f\u6210\u4e00\u4e2a AuthService : $ nest g module auth $ nest g service auth \u5f53\u6211\u4eec\u5b9e\u73b0 AuthService \u65f6\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5728 UsersService \u4e2d\u5c01\u88c5\u7528\u6237\u64cd\u4f5c\u662f\u5f88\u6709\u7528\u7684\uff0c\u6240\u4ee5\u73b0\u5728\u8ba9\u6211\u4eec\u751f\u6210\u8be5\u6a21\u5757\u548c\u670d\u52a1: $ nest g module users $ nest g service users \u66ff\u6362\u8fd9\u4e9b\u751f\u6210\u6587\u4ef6\u7684\u9ed8\u8ba4\u5185\u5bb9\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5bf9\u4e8e\u6211\u4eec\u7684\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\uff0c UsersService \u53ea\u662f\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u7528\u6237\u5217\u8868\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6309\u7528\u6237\u540d\u68c0\u7d22\u7528\u6237\u7684 find \u65b9\u6cd5\u3002 \u5728\u771f\u6b63\u7684\u5e94\u7528\u4e2d\uff0c\u8fd9\u662f\u4f60\u6784\u5efa\u7528\u6237\u6a21\u578b\u548c\u6301\u4e45\u5c42\u7684\u5730\u65b9\uff0c\u4f7f\u7528\u4f60\u7684\u5e93(\u5982 TypeORM, Sequelize, Mongoose \u7b49)\u3002 @ @filename ( users / users . service ) import { Injectable } from '@nestjs/common' ; // This should be a real class/interface representing a user entity export type User = any ; @Injectable () export class UsersService { private readonly users = [ { userId : 1 , username : 'john' , password : 'changeme' , }, { userId : 2 , username : 'maria' , password : 'guess' , }, ]; async findOne ( username : string ) : Promise < User | undefined > { return this . users . find ( user => user . username === username ); } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class UsersService { constructor () { this . users = [ { userId : 1 , username : 'john' , password : 'changeme' , }, { userId : 2 , username : 'maria' , password : 'guess' , }, ]; } async findOne ( username ) { return this . users . find ( user => user . username === username ); } } \u5728 UsersModule \u4e2d\uff0c\u552f\u4e00\u9700\u8981\u4fee\u6539\u7684\u662f\u5c06 UsersService \u6dfb\u52a0\u5230 @Module \u88c5\u9970\u5668\u7684 exports \u6570\u7ec4\u4e2d\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u5728\u6a21\u5757\u5916\u770b\u5230\u4e86(\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u5728 AuthService \u4e2d\u4f7f\u7528\u5b83)\u3002 @ @filename ( users / users . module ) import { Module } from '@nestjs/common' ; import { UsersService } from './users.service' ; @Module ({ providers : [ UsersService ], exports : [ UsersService ], }) export class UsersModule {} @ @switch import { Module } from '@nestjs/common' ; import { UsersService } from './users.service' ; @Module ({ providers : [ UsersService ], exports : [ UsersService ], }) export class UsersModule {} \u6211\u4eec\u7684 AuthService \u8d1f\u8d23\u68c0\u7d22\u7528\u6237\u5e76\u9a8c\u8bc1\u5bc6\u7801\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a validateUser() \u65b9\u6cd5\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u65b9\u4fbf\u7684 ES6 \u6269\u5c55\u64cd\u4f5c\u7b26\u5728\u8fd4\u56de\u7528\u6237\u5bf9\u8c61\u4e4b\u524d\u4ece\u8be5\u5bf9\u8c61\u4e2d\u5265\u79bb\u5bc6\u7801\u5c5e\u6027\u3002 \u6211\u4eec\u7a0d\u540e\u5c06\u4ece passport-local \u7b56\u7565\u8c03\u7528 validateUser() \u65b9\u6cd5\u3002 @ @filename ( auth / auth . service ) import { Injectable } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; @Injectable () export class AuthService { constructor ( private usersService : UsersService ) {} async validateUser ( username : string , pass : string ) : Promise < any > { const user = await this . usersService . findOne ( username ); if ( user && user . password === pass ) { const { password , ... result } = user ; return result ; } return null ; } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; @Injectable () @Dependencies ( UsersService ) export class AuthService { constructor ( usersService ) { this . usersService = usersService ; } async validateUser ( username , pass ) { const user = await this . usersService . findOne ( username ); if ( user && user . password === pass ) { const { password , ... result } = user ; return result ; } return null ; } } Warning Warning \u5f53\u7136\uff0c\u5728\u5b9e\u9645\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u60a8\u4e0d\u4f1a\u5c06\u5bc6\u7801\u5b58\u50a8\u4e3a\u7eaf\u6587\u672c\u3002 \u76f8\u53cd\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528\u50cf bcrypt \u8fd9\u6837\u7684\u5e93\uff0c\u5e76\u4f7f\u7528\u52a0\u76d0\u7684\u5355\u5411\u54c8\u5e0c\u7b97\u6cd5\u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u60a8\u53ea\u9700\u5b58\u50a8\u7ecf\u8fc7\u6563\u5217\u5904\u7406\u7684\u5bc6\u7801\uff0c\u7136\u540e\u5c06\u5b58\u50a8\u7684\u5bc6\u7801\u4e0e\u4f20\u5165\u7684 \u5bc6\u7801 \u7684\u6563\u5217\u7248\u672c\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u4e0d\u4f1a\u4ee5\u7eaf\u6587\u672c\u5b58\u50a8\u6216\u516c\u5f00\u7528\u6237\u5bc6\u7801\u3002 \u4e3a\u4e86\u4fdd\u6301\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u7684\u7b80\u5355\u6027\uff0c\u6211\u4eec\u8fdd\u53cd\u4e86\u8fd9\u4e00\u7edd\u5bf9\u89c4\u5b9a\uff0c\u4f7f\u7528\u7eaf\u6587\u672c\u3002 \u4e0d\u8981\u5728\u771f\u6b63\u7684\u5e94\u7528\u4e2d\u8fd9\u4e48\u505a! \u73b0\u5728\uff0c\u6211\u4eec\u66f4\u65b0 AuthModule \u6765\u5bfc\u5165 UsersModule \u3002 @ @filename ( auth / auth . module ) import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; @Module ({ imports : [ UsersModule ], providers : [ AuthService ], }) export class AuthModule {} @ @switch import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; @Module ({ imports : [ UsersModule ], providers : [ AuthService ], }) export class AuthModule {} \u6267\u884c local \u8ba4\u8bc1 \u00b6 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u6211\u4eec\u7684 passport-local \u8ba4\u8bc1\u7b56\u7565 \u3002 \u5728 auth \u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a local.strategy.ts \u7684\u6587\u4ef6\uff0c\u5e76\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801: @ @filename ( auth / local . strategy ) import { Strategy } from 'passport-local' ; import { PassportStrategy } from '@nestjs/passport' ; import { Injectable , UnauthorizedException } from '@nestjs/common' ; import { AuthService } from './auth.service' ; @Injectable () export class LocalStrategy extends PassportStrategy ( Strategy ) { constructor ( private authService : AuthService ) { super (); } async validate ( username : string , password : string ) : Promise < any > { const user = await this . authService . validateUser ( username , password ); if ( ! user ) { throw new UnauthorizedException (); } return user ; } } @ @switch import { Strategy } from 'passport-local' ; import { PassportStrategy } from '@nestjs/passport' ; import { Injectable , UnauthorizedException , Dependencies } from '@nestjs/common' ; import { AuthService } from './auth.service' ; @Injectable () @Dependencies ( AuthService ) export class LocalStrategy extends PassportStrategy ( Strategy ) { constructor ( authService ) { super (); this . authService = authService ; } async validate ( username , password ) { const user = await this . authService . validateUser ( username , password ); if ( ! user ) { throw new UnauthorizedException (); } return user ; } } \u5bf9\u4e8e\u6240\u6709\u7684 Passport \u7b56\u7565\uff0c\u6211\u4eec\u90fd\u9075\u5faa\u4e86\u524d\u9762\u63cf\u8ff0\u7684\u65b9\u6cd5\u3002 \u5728\u6211\u4eec\u7684 passport-local \u7528\u4f8b\u4e2d\uff0c\u6ca1\u6709\u914d\u7f6e\u9009\u9879\uff0c\u6240\u4ee5\u6784\u9020\u51fd\u6570\u53ea\u662f\u8c03\u7528 super() \uff0c\u6ca1\u6709\u9009\u9879\u5bf9\u8c61\u3002 info Hint \u6211\u4eec\u53ef\u4ee5\u5728\u8c03\u7528 super() \u65f6\u4f20\u9012\u4e00\u4e2a options \u5bf9\u8c61\u6765\u5b9a\u5236 passport \u7b56\u7565\u7684\u884c\u4e3a\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpassport-local \u7b56\u7565\u5728\u8bf7\u6c42\u4f53\u4e2d\u8981\u6c42\u540d\u4e3a username \u548c password \u7684\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u4f20\u9012\u4e00\u4e2a options \u5bf9\u8c61\u6765\u6307\u5b9a\u4e0d\u540c\u7684\u5c5e\u6027\u540d: super({{ '{' }} usernameField: 'email' {{ '}' }}) . \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605 Passport \u6587\u6863 \u3002 \u6211\u4eec\u8fd8\u5b9e\u73b0\u4e86 validate() \u65b9\u6cd5\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u7b56\u7565\uff0cPassport \u5c06\u4f7f\u7528\u4e00\u7ec4\u7279\u5b9a\u4e8e\u7b56\u7565\u7684\u53c2\u6570\u8c03\u7528 verify \u51fd\u6570(\u5728 @nestjs/passport \u4e2d\u4f7f\u7528 validate() \u65b9\u6cd5\u5b9e\u73b0)\u3002 \u5bf9\u4e8e local \u7b56\u7565\uff0cPassport \u9700\u8981\u4e00\u4e2a\u5e26\u6709\u4ee5\u4e0b\u7b7e\u540d\u7684 validate() \u65b9\u6cd5: validate(username: string, password:string): any . \u5927\u591a\u6570\u9a8c\u8bc1\u5de5\u4f5c\u90fd\u662f\u5728\u6211\u4eec\u7684 AuthService \u4e2d\u5b8c\u6210\u7684(\u5728 UsersService \u7684\u5e2e\u52a9\u4e0b)\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\u3002 \u4efb\u4f55 Passport \u7b56\u7565\u7684 validate() \u65b9\u6cd5\u90fd\u5c06\u9075\u5faa\u7c7b\u4f3c\u7684\u6a21\u5f0f\uff0c\u53ea\u662f\u5728\u5982\u4f55\u8868\u793a\u51ed\u636e\u7684\u7ec6\u8282\u4e0a\u6709\u6240\u4e0d\u540c\u3002 \u5982\u679c\u627e\u5230\u4e86\u7528\u6237\uff0c\u4e14\u51ed\u636e\u6709\u6548\uff0c\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4ee5\u4fbf Passport \u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1(\u4f8b\u5982\uff0c\u5728 Request \u5bf9\u8c61\u4e0a\u521b\u5efa user \u5c5e\u6027)\uff0c\u5e76\u4e14\u8bf7\u6c42\u5904\u7406\u7ba1\u9053\u53ef\u4ee5\u7ee7\u7eed\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u6211\u4eec\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u5e76\u8ba9 \u5f02\u5e38\u5c42 \u5904\u7406\u5b83\u3002 \u901a\u5e38\uff0c\u6bcf\u79cd\u7b56\u7565\u7684 validate() \u65b9\u6cd5\u7684\u552f\u4e00\u663e\u8457\u533a\u522b\u662f\u5982\u4f55\u786e\u5b9a\u7528\u6237\u662f\u5426\u5b58\u5728\u5e76\u6709\u6548\u3002 \u4f8b\u5982\uff0c\u5728 JWT \u7b56\u7565\u4e2d\uff0c\u6839\u636e\u9700\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc4\u4f30\u5728\u5df2\u89e3\u7801\u4ee4\u724c\u4e2d\u643a\u5e26\u7684 userId \u662f\u5426\u4e0e\u6211\u4eec\u7684\u7528\u6237\u6570\u636e\u5e93\u4e2d\u7684\u8bb0\u5f55\u76f8\u5339\u914d\uff0c\u6216\u8005\u4e0e\u5df2\u64a4\u9500\u4ee4\u724c\u7684\u5217\u8868\u76f8\u5339\u914d\u3002 \u56e0\u6b64\uff0c\u8fd9\u79cd\u5b50\u7c7b\u5316\u548c\u5b9e\u73b0\u7279\u5b9a\u7b56\u7565\u9a8c\u8bc1\u7684\u6a21\u5f0f\u662f\u4e00\u81f4\u7684\u3001\u4f18\u96c5\u7684\u548c\u53ef\u6269\u5c55\u7684\u3002 \u6211\u4eec\u9700\u8981\u914d\u7f6e\u6211\u4eec\u7684 AuthModule \u6765\u4f7f\u7528\u6211\u4eec\u521a\u521a\u5b9a\u4e49\u7684 Passport \u7279\u6027\u3002 \u66f4\u65b0 auth.module.ts \uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( auth / auth . module ) import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { LocalStrategy } from './local.strategy' ; @Module ({ imports : [ UsersModule , PassportModule ], providers : [ AuthService , LocalStrategy ], }) export class AuthModule {} @ @switch import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { LocalStrategy } from './local.strategy' ; @Module ({ imports : [ UsersModule , PassportModule ], providers : [ AuthService , LocalStrategy ], }) export class AuthModule {} \u5185\u7f6e\u7684\u8ba4\u8bc1\u5b88\u536b \u00b6 Guards \u4e00\u7ae0\u63cf\u8ff0\u4e86 Guards \u7684\u4e3b\u8981\u529f\u80fd:\u51b3\u5b9a\u4e00\u4e2a\u8bf7\u6c42\u662f\u5426\u4f1a\u88ab\u8def\u7531\u5904\u7406\u5668\u5904\u7406\u3002 \u8fd9\u662f\u4e8b\u5b9e\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u4f7f\u7528\u6807\u51c6\u529f\u80fd\u3002 \u7136\u800c\uff0c\u5728\u4f7f\u7528 @nestjs/passport \u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u8fd8\u5c06\u5f15\u5165\u4e00\u4e2a\u8f7b\u5fae\u7684\u65b0\u65b9\u6cd5\uff0c\u8fd9\u5728\u4e00\u5f00\u59cb\u53ef\u80fd\u4f1a\u4ee4\u4eba\u56f0\u60d1\uff0c\u6240\u4ee5\u73b0\u5728\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u3002 \u4ece\u8ba4\u8bc1\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b58\u5728\u4e24\u79cd\u72b6\u6001: \u7528\u6237/\u5ba2\u6237\u7aef \u672a \u767b\u5f55(\u672a\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1) \u7528\u6237/\u5ba2\u6237\u7aef \u5df2 \u767b\u5f55(\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1) \u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b(\u7528\u6237\u672a\u767b\u5f55)\uff0c\u6211\u4eec\u9700\u8981\u6267\u884c\u4e24\u4e2a\u4e0d\u540c\u7684\u51fd\u6570: \u9650\u5236\u672a\u7ecf\u8ba4\u8bc1\u7684\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u7684\u8def\u7531(\u5373\u62d2\u7edd\u8bbf\u95ee\u53d7\u9650\u5236\u7684\u8def\u7531)\u3002 \u901a\u8fc7\u5728\u53d7\u4fdd\u62a4\u7684\u8def\u7531\u4e0a\u653e\u7f6e\u4e00\u4e2a Guard\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u4eec\u719f\u6089\u7684\u529f\u80fd\u6765\u5904\u7406\u8fd9\u4e2a\u529f\u80fd\u3002 \u6b63\u5982\u60a8\u6240\u9884\u671f\u7684\uff0c\u6211\u4eec\u5c06\u68c0\u67e5\u8fd9\u4e2a\u5b88\u536b\u4e2d\u662f\u5426\u5b58\u5728\u6709\u6548\u7684 JWT\uff0c\u56e0\u6b64\uff0c\u4e00\u65e6\u6211\u4eec\u6210\u529f\u5730\u53d1\u5e03\u4e86 JWT\uff0c\u6211\u4eec\u5c06\u5728\u7a0d\u540e\u5904\u7406\u8fd9\u4e2a\u5b88\u536b\u3002 \u5f53\u5148\u524d\u672a\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8bd5\u56fe\u767b\u5f55\u65f6\uff0c\u521d\u59cb\u5316 \u8eab\u4efd\u9a8c\u8bc1\u6b65\u9aa4 \u672c\u8eab\u3002 \u8fd9\u662f\u6211\u4eec\u5411\u6709\u6548\u7528\u6237 \u53d1\u9001 JWT \u7684\u6b65\u9aa4\u3002 \u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u9700\u8981 POST \u7528\u6237\u540d/\u5bc6\u7801\u51ed\u636e\u6765\u542f\u52a8\u8eab\u4efd\u9a8c\u8bc1\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u8bbe\u7f6e\u4e00\u4e2a POST /auth/login \u8def\u7531\u6765\u5904\u7406\u5b83\u3002 \u8fd9\u5c31\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898:\u5728\u8fd9\u6761\u8def\u7531\u4e0a\uff0c\u6211\u4eec\u7a76\u7adf\u5982\u4f55\u8c03\u7528 passport-local \u7b56\u7565? \u7b54\u6848\u5f88\u7b80\u5355:\u4f7f\u7528\u53e6\u4e00\u79cd\u7a0d\u5fae\u4e0d\u540c\u7684 Guard\u3002 @nestjs/passport \u6a21\u5757\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684 Guard \u6765\u5b8c\u6210\u8fd9\u4e00\u4efb\u52a1\u3002 \u8fd9\u4e2a Guard \u8c03\u7528 Passport \u7b56\u7565\u5e76\u542f\u52a8\u4e0a\u9762\u63cf\u8ff0\u7684\u6b65\u9aa4(\u68c0\u7d22\u51ed\u8bc1\u3001\u8fd0\u884c\u9a8c\u8bc1\u51fd\u6570\u3001\u521b\u5efa\u201c\u7528\u6237\u201d\u5c5e\u6027\u7b49)\u3002 \u4e0a\u9762\u5217\u4e3e\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5(\u767b\u5f55\u7684\u7528\u6237)\u53ea\u662f\u4f9d\u8d56\u4e8e\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u7684\u6807\u51c6\u7c7b\u578b\u7684 Guard\uff0c\u4ee5\u5141\u8bb8\u767b\u5f55\u7684\u7528\u6237\u8bbf\u95ee\u53d7\u4fdd\u62a4\u7684\u8def\u7531\u3002 \u767b\u5f55\u8def\u7531 \u00b6 \u6709\u4e86\u7b56\u7565\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684 /auth/login \u8def\u7531\uff0c\u5e76\u5e94\u7528\u5185\u7f6e\u7684 Guard \u6765\u542f\u52a8 passport-local \u6d41\u3002 \u6253\u5f00 app.controller.ts \u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u5185\u5bb9\u66ff\u6362\u4e3a\u4ee5\u4e0b\u5185\u5bb9: @ @filename ( app . controller ) import { Controller , Request , Post , UseGuards } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Controller () export class AppController { @UseGuards ( AuthGuard ( 'local' )) @Post ( 'auth/login' ) async login ( @Request () req ) { return req . user ; } } @ @switch import { Controller , Bind , Request , Post , UseGuards } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Controller () export class AppController { @UseGuards ( AuthGuard ( 'local' )) @Post ( 'auth/login' ) @Bind ( Request ()) async login ( req ) { return req . user ; } } \u5728\u4f7f\u7528 @UseGuards(AuthGuard('local')) \u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 @nestjs/passport \u81ea\u52a8\u63d0\u4f9b \u7684 AuthGuard \uff0c\u8fd9\u662f\u6211\u4eec\u5728\u6269\u5c55 passport-local \u7b56\u7565\u65f6\u81ea\u52a8\u63d0\u4f9b\u7684\u3002 \u8ba9\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u3002 \u6211\u4eec\u7684 passport-local \u7b56\u7565\u7684\u9ed8\u8ba4\u540d\u79f0\u662f local \u3002 \u6211\u4eec\u5728 @UseGuards() \u88c5\u9970\u5668\u4e2d\u5f15\u7528\u8be5\u540d\u79f0\uff0c\u5c06\u5176\u4e0e passport-local \u5305\u63d0\u4f9b\u7684\u4ee3\u7801\u5173\u8054\u8d77\u6765\u3002 \u8fd9\u662f\u7528\u6765\u6d88\u9664\u6b67\u4e49\uff0c\u5728\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6709\u591a\u4e2a Passport \u7b56\u7565(\u6bcf\u4e00\u4e2a\u53ef\u80fd\u63d0\u4f9b\u4e00\u4e2a\u7279\u5b9a\u7684\u7b56\u7565 AuthGuard )\u3002 \u867d\u7136\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u7b56\u7565\uff0c\u4f46\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\uff0c\u6240\u4ee5\u8fd9\u662f\u6d88\u9664\u6b67\u4e49\u6240\u5fc5\u9700\u7684\u3002 \u4e3a\u4e86\u6d4b\u8bd5\u6211\u4eec\u7684\u8def\u7531\uff0c\u6211\u4eec\u7684 /auth/login \u8def\u7531\u73b0\u5728\u53ea\u8fd4\u56de\u7528\u6237\u3002 \u8fd9\u4e5f\u8ba9\u6211\u4eec\u6f14\u793a\u4e86 Passport \u7684\u53e6\u4e00\u4e2a\u7279\u6027:Passport \u6839\u636e validate() \u65b9\u6cd5\u8fd4\u56de\u7684\u503c\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a user \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a req.user \u5206\u914d\u7ed9 Request \u5bf9\u8c61\u3002 \u7a0d\u540e\uff0c\u6211\u4eec\u5c06\u7528\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a JWT \u7684\u4ee3\u7801\u6765\u66ff\u6362\u5b83\u3002 \u7531\u4e8e\u8fd9\u4e9b\u662f API \u8def\u7531\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5e38\u7528\u7684 cURL \u5e93\u5bf9\u5b83\u4eec\u8fdb\u884c\u6d4b\u8bd5\u3002 \u4f60\u53ef\u4ee5\u7528 UsersService \u4e2d\u786c\u7f16\u7801\u7684\u4efb\u4f55 user \u5bf9\u8c61\u8fdb\u884c\u6d4b\u8bd5\u3002 $ # POST to /auth/login $ curl -X POST http://localhost:3000/auth/login -d '{\"username\": \"john\", \"password\": \"changeme\"}' -H \"Content-Type: application/json\" $ # result -> {\"userId\":1,\"username\":\"john\"} \u5f53\u8fd9\u5de5\u4f5c\u65f6\uff0c\u5c06\u7b56\u7565\u540d\u79f0\u76f4\u63a5\u4f20\u9012\u7ed9 AuthGuard() \u4f1a\u5728\u4ee3\u7801\u5e93\u4e2d\u5f15\u5165\u9b54\u672f\u5b57\u7b26\u4e32\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5efa\u8bae\u521b\u5efa\u81ea\u5df1\u7684\u7c7b\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( auth / local - auth . guard ) import { Injectable } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Injectable () export class LocalAuthGuard extends AuthGuard ( 'local' ) {} \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0 /auth/login \u8def\u7531\u5904\u7406\u7a0b\u5e8f\uff0c\u4f7f\u7528 LocalAuthGuard \u4ee3\u66ff: @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) async login ( @Request () req ) { return req . user ; } JWT \u529f\u80fd \u00b6 \u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u8f6c\u79fb\u5230\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\u7684 JWT \u90e8\u5206\u3002\u8ba9\u6211\u4eec\u56de\u987e\u548c\u5b8c\u5584\u6211\u4eec\u7684\u8981\u6c42: \u5141\u8bb8\u7528\u6237\u4f7f\u7528\u7528\u6237\u540d/\u5bc6\u7801\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8fd4\u56de\u4e00\u4e2a JWT\uff0c\u4ee5\u4fbf\u5728\u968f\u540e\u8c03\u7528\u53d7\u4fdd\u62a4\u7684 API \u7aef\u70b9\u65f6\u4f7f\u7528\u3002 \u6211\u4eec\u6b63\u5728\u987a\u5229\u5730\u8fbe\u5230\u8fd9\u4e00\u8981\u6c42\u3002 \u4e3a\u4e86\u5b8c\u6210\u5b83\uff0c\u6211\u4eec\u9700\u8981\u7f16\u5199\u53d1\u51fa JWT \u7684\u4ee3\u7801\u3002 \u521b\u5efa\u57fa\u4e8e\u6709\u6548 JWT \u4f5c\u4e3a\u627f\u8f7d\u4ee4\u724c\u7684\u5b58\u5728\u800c\u53d7\u5230\u4fdd\u62a4\u7684 API \u8def\u7531 \u6211\u4eec\u9700\u8981\u5b89\u88c5\u66f4\u591a\u7684\u8f6f\u4ef6\u5305\u6765\u652f\u6301\u6211\u4eec\u7684 JWT \u9700\u6c42: $ npm install --save @nestjs/jwt passport-jwt $ npm install --save-dev @types/passport-jwt @nestjs/jwt \u5305(\u53c2\u89c1\u66f4\u591a \u8fd9\u91cc )\u662f\u4e00\u4e2a\u5b9e\u7528\u7a0b\u5e8f\u5305\uff0c\u53ef\u4ee5\u5e2e\u52a9\u8fdb\u884c jwt \u64cd\u4f5c\u3002 passport-jwt \u5305\u662f\u5b9e\u73b0\u4e86 JWT \u7b56\u7565\u7684 Passport \u5305\uff0c\u800c @types/passport-jwt \u5305\u63d0\u4f9b\u4e86 TypeScript \u7c7b\u578b\u5b9a\u4e49\u3002 \u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b POST /auth/login \u8bf7\u6c42\u662f\u5982\u4f55\u5904\u7406\u7684\u3002 \u6211\u4eec\u4f7f\u7528 passport-local \u7b56\u7565\u63d0\u4f9b\u7684\u5185\u7f6e AuthGuard \u6765\u88c5\u9970\u8def\u7531\u3002 \u8fd9\u610f\u5473\u7740: \u8def\u7531\u5904\u7406\u7a0b\u5e8f \u53ea\u4f1a\u5728\u7528\u6237\u5df2\u7ecf\u9a8c\u8bc1 \u7684\u60c5\u51b5\u4e0b\u88ab\u8c03\u7528 req \u53c2\u6570\u5c06\u5305\u542b\u4e00\u4e2a user \u5c5e\u6027(\u5728 passport-local \u8eab\u4efd\u9a8c\u8bc1\u6d41\u7a0b\u4e2d\u7531 Passport \u586b\u5145) \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u73b0\u5728\u7ec8\u4e8e\u53ef\u4ee5\u751f\u6210\u771f\u6b63\u7684 JWT\uff0c\u5e76\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fd4\u56de\u5b83\u3002 \u4e3a\u4e86\u4fdd\u6301\u670d\u52a1\u7684\u6574\u6d01\u6a21\u5757\u5316\uff0c\u6211\u4eec\u5c06\u5728 authService \u4e2d\u5904\u7406 JWT \u7684\u751f\u6210\u3002 \u6253\u5f00 auth \u6587\u4ef6\u5939\u4e2d\u7684 auth.service.ts \u6587\u4ef6\uff0c\u6dfb\u52a0 login() \u65b9\u6cd5\uff0c\u5e76\u5bfc\u5165 JwtService \uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( auth / auth . service ) import { Injectable } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; import { JwtService } from '@nestjs/jwt' ; @Injectable () export class AuthService { constructor ( private usersService : UsersService , private jwtService : JwtService ) {} async validateUser ( username : string , pass : string ) : Promise < any > { const user = await this . usersService . findOne ( username ); if ( user && user . password === pass ) { const { password , ... result } = user ; return result ; } return null ; } async login ( user : any ) { const payload = { username : user.username , sub : user.userId }; return { access_token : this.jwtService.sign ( payload ), }; } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; import { JwtService } from '@nestjs/jwt' ; @Dependencies ( UsersService , JwtService ) @Injectable () export class AuthService { constructor ( usersService , jwtService ) { this . usersService = usersService ; this . jwtService = jwtService ; } async validateUser ( username , pass ) { const user = await this . usersService . findOne ( username ); if ( user && user . password === pass ) { const { password , ... result } = user ; return result ; } return null ; } async login ( user ) { const payload = { username : user.username , sub : user.userId }; return { access_token : this.jwtService.sign ( payload ), }; } } \u6211\u4eec\u4f7f\u7528 @nestjs/jwt \u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a sign() \u51fd\u6570\u6765\u4ece user \u5bf9\u8c61\u5c5e\u6027\u7684\u5b50\u96c6\u751f\u6210\u6211\u4eec\u7684 jwt\uff0c\u7136\u540e\u6211\u4eec\u8fd4\u56de\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\uff0c\u5e26\u6709\u4e00\u4e2a access_token \u5c5e\u6027\u3002 \u6ce8\u610f:\u6211\u4eec\u9009\u62e9\u5c5e\u6027\u540d sub \u6765\u4fdd\u5b58\u6211\u4eec\u7684 userId \u503c\uff0c\u4ee5\u4e0e JWT \u6807\u51c6\u4fdd\u6301\u4e00\u81f4\u3002 \u4e0d\u8981\u5fd8\u8bb0\u5c06 JwtService \u63d0\u4f9b\u5668\u6ce8\u5165\u5230 AuthService \u4e2d\u3002 \u73b0\u5728\u6211\u4eec\u9700\u8981\u66f4\u65b0 AuthModule \u6765\u5bfc\u5165\u65b0\u7684\u4f9d\u8d56\u9879\uff0c\u5e76\u914d\u7f6e JwtModule \u3002 \u9996\u5148,\u521b\u5efa\u7684\u5e38\u6570\u3002\u5728 auth \u6587\u4ef6\u5939\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801: @ @filename ( auth / constants ) export const jwtConstants = { secret : 'secretKey' , }; @ @switch export const jwtConstants = { secret : 'secretKey' , }; \u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u5728 JWT \u7b7e\u540d\u548c\u9a8c\u8bc1\u6b65\u9aa4\u4e4b\u95f4\u5171\u4eab\u5bc6\u94a5\u3002 Warning Warning \u4e0d\u8981\u516c\u5f00\u6b64\u5bc6\u94a5 \u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u660e\u786e\u4ee3\u7801\u5728\u505a\u4ec0\u4e48\uff0c\u4f46\u662f\u5728\u751f\u4ea7\u7cfb\u7edf\u4e2d\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528\u9002\u5f53\u7684\u63aa\u65bd\u6765\u4fdd\u62a4\u8fd9\u4e2a\u5bc6\u94a5\uff0c\u4f8b\u5982\u5bc6\u94a5\u5e93\u3001\u73af\u5883\u53d8\u91cf\u6216\u914d\u7f6e\u670d\u52a1\u3002 \u73b0\u5728\uff0c\u6253\u5f00 auth.module.ts \u6587\u4ef6\u5939\u4e2d\u7684 auth \uff0c\u5e76\u5c06\u5176\u66f4\u65b0\u4e3a\u5982\u4e0b\u6240\u793a: @ @filename ( auth / auth . module ) import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { LocalStrategy } from './local.strategy' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { JwtModule } from '@nestjs/jwt' ; import { jwtConstants } from './constants' ; @Module ({ imports : [ UsersModule , PassportModule , JwtModule . register ({ secret : jwtConstants.secret , signOptions : { expiresIn : '60s' }, }), ], providers : [ AuthService , LocalStrategy ], exports : [ AuthService ], }) export class AuthModule {} @ @switch import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { LocalStrategy } from './local.strategy' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { JwtModule } from '@nestjs/jwt' ; import { jwtConstants } from './constants' ; @Module ({ imports : [ UsersModule , PassportModule , JwtModule . register ({ secret : jwtConstants.secret , signOptions : { expiresIn : '60s' }, }), ], providers : [ AuthService , LocalStrategy ], exports : [ AuthService ], }) export class AuthModule {} \u6211\u4eec\u4f7f\u7528 register() \u6765\u914d\u7f6e JwtModule \uff0c\u4f20\u5165\u4e00\u4e2a\u914d\u7f6e\u5bf9\u8c61\u3002 \u6709\u5173 Nest JwtModule \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u8fd9\u91cc \uff0c\u6709\u5173\u53ef\u7528\u914d\u7f6e\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u8fd9\u91cc \u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0 /auth/login \u8def\u7531\u4ee5\u8fd4\u56de\u4e00\u4e2a JWT\u3002 @ @filename ( app . controller ) import { Controller , Request , Post , UseGuards } from '@nestjs/common' ; import { LocalAuthGuard } from './auth/local-auth.guard' ; import { AuthService } from './auth/auth.service' ; @Controller () export class AppController { constructor ( private authService : AuthService ) {} @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) async login ( @Request () req ) { return this . authService . login ( req . user ); } } @ @switch import { Controller , Bind , Request , Post , UseGuards } from '@nestjs/common' ; import { LocalAuthGuard } from './auth/local-auth.guard' ; import { AuthService } from './auth/auth.service' ; @Controller () export class AppController { constructor ( private authService : AuthService ) {} @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) @Bind ( Request ()) async login ( req ) { return this . authService . login ( req . user ); } } \u8ba9\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528 cURL \u6d4b\u8bd5\u6211\u4eec\u7684\u8def\u7531\u3002 \u4f60\u53ef\u4ee5\u7528 UsersService \u4e2d\u786c\u7f16\u7801\u7684\u4efb\u4f55 user \u5bf9\u8c61\u8fdb\u884c\u6d4b\u8bd5\u3002 $ # POST to /auth/login $ curl -X POST http://localhost:3000/auth/login -d '{\"username\": \"john\", \"password\": \"changeme\"}' -H \"Content-Type: application/json\" $ # result -> {\"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"} $ # Note: above JWT truncated \u5b9e\u65bd\u8ba4\u8bc1 JWT \u00b6 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u6211\u4eec\u7684\u6700\u7ec8\u9700\u6c42:\u901a\u8fc7\u8981\u6c42\u5728\u8bf7\u6c42\u4e2d\u63d0\u4f9b\u6709\u6548\u7684 JWT \u6765\u4fdd\u62a4\u7aef\u70b9\u3002 passport \u4e5f\u80fd\u5e2e\u5230\u6211\u4eec\u3002 \u5b83\u63d0\u4f9b\u4e86 passport-jwt \u7b56\u7565\u6765\u4f7f\u7528 JSON Web token \u4fdd\u62a4 RESTful \u7aef\u70b9\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a jwt.strategy \u7684\u6587\u4ef6\u3002\u5728 auth \u6587\u4ef6\u5939\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801: @ @filename ( auth / jwt . strategy ) import { ExtractJwt , Strategy } from 'passport-jwt' ; import { PassportStrategy } from '@nestjs/passport' ; import { Injectable } from '@nestjs/common' ; import { jwtConstants } from './constants' ; @Injectable () export class JwtStrategy extends PassportStrategy ( Strategy ) { constructor () { super ({ jwtFromRequest : ExtractJwt.fromAuthHeaderAsBearerToken (), ignoreExpiration : false , secretOrKey : jwtConstants.secret , }); } async validate ( payload : any ) { return { userId : payload.sub , username : payload.username }; } } @ @switch import { ExtractJwt , Strategy } from 'passport-jwt' ; import { PassportStrategy } from '@nestjs/passport' ; import { Injectable } from '@nestjs/common' ; import { jwtConstants } from './constants' ; @Injectable () export class JwtStrategy extends PassportStrategy ( Strategy ) { constructor () { super ({ jwtFromRequest : ExtractJwt.fromAuthHeaderAsBearerToken (), ignoreExpiration : false , secretOrKey : jwtConstants.secret , }); } async validate ( payload ) { return { userId : payload.sub , username : payload.username }; } } \u5728\u6211\u4eec\u7684 JwtStrategy \u4e2d\uff0c\u6211\u4eec\u9075\u5faa\u4e86\u524d\u9762\u63cf\u8ff0\u7684\u6240\u6709 Passport \u7b56\u7565\u7684\u76f8\u540c\u914d\u65b9\u3002 \u8fd9\u4e2a\u7b56\u7565\u9700\u8981\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u5728 super() \u8c03\u7528\u4e2d\u4f20\u5165\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u6765\u5b9e\u73b0\u3002 \u4f60\u53ef\u4ee5\u9605\u8bfb\u66f4\u591a\u53ef\u7528\u9009\u9879 \u8fd9\u91cc . \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e9b\u9009\u9879\u662f: jwtFromRequest : \u63d0\u4f9b\u4e86\u4ece Request \u4e2d\u63d0\u53d6 JWT \u7684\u65b9\u6cd5\u3002 \u6211\u4eec\u5c06\u4f7f\u7528\u6807\u51c6\u65b9\u6cd5\uff0c\u5728 API \u8bf7\u6c42\u7684 Authorization \u5934\u4e2d\u63d0\u4f9b\u627f\u8f7d\u4ee4\u724c\u3002 \u5176\u4ed6\u9009\u9879\u63cf\u8ff0 \u6b64\u5904 . ignoreExpiration : \u4e3a\u4e86\u660e\u786e\u8d77\u89c1\uff0c\u6211\u4eec\u9009\u62e9\u9ed8\u8ba4\u7684 false \u8bbe\u7f6e\uff0c\u5b83\u5c06\u786e\u4fdd JWT \u6ca1\u6709\u8fc7\u671f\u7684\u8d23\u4efb\u59d4\u6258\u7ed9 Passport \u6a21\u5757\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u7684\u8def\u7531\u4f7f\u7528\u8fc7\u671f\u7684 JWT \u63d0\u4f9b\uff0c\u5219\u8bf7\u6c42\u5c06\u88ab\u62d2\u7edd\uff0c\u5e76\u53d1\u9001 401 Unauthorized \u54cd\u5e94\u3002 passport \u65b9\u4fbf\u5730\u81ea\u52a8\u4e3a\u6211\u4eec\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002 secretOrKey : \u6211\u4eec\u4f7f\u7528\u6743\u5b9c\u4e4b\u8ba1\u6765\u4e3a\u4ee4\u724c\u7b7e\u540d\u63d0\u4f9b\u5bf9\u79f0\u5bc6\u94a5\u3002 \u5176\u4ed6\u9009\u9879\uff0c\u5982 pem \u7f16\u7801\u7684\u516c\u94a5\uff0c\u53ef\u80fd\u66f4\u9002\u5408\u4e8e\u751f\u4ea7\u5e94\u7528\u7a0b\u5e8f(\u8bf7\u53c2\u9605 \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u4fe1\u606f)\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u6b63\u5982\u524d\u9762\u6240\u8b66\u544a\u7684\uff0c \u4e0d\u8981\u516c\u5f00\u63ed\u9732\u8fd9\u4e2a\u5bc6\u94a5 \u3002 validate() \u65b9\u6cd5\u503c\u5f97\u8ba8\u8bba\u3002 \u5bf9\u4e8e jwt-strategy \uff0cPassport \u9996\u5148\u9a8c\u8bc1 JWT \u7684\u7b7e\u540d\u5e76\u89e3\u7801 JSON\u3002 \u7136\u540e\u5b83\u8c03\u7528\u6211\u4eec\u7684 validate() \u65b9\u6cd5\uff0c\u5c06\u89e3\u7801\u540e\u7684 JSON \u4f5c\u4e3a\u5b83\u7684\u5355\u4e2a\u53c2\u6570\u4f20\u9012\u3002 \u57fa\u4e8e JWT \u7b7e\u540d\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c \u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u63a5\u6536\u5230\u4e00\u4e2a\u6709\u6548\u7684\u4ee4\u724c \uff0c\u8fd9\u4e2a\u4ee4\u724c\u4e4b\u524d\u5df2\u7ecf\u7b7e\u540d\u5e76\u53d1\u7ed9\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u7528\u6237\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5bf9 validate() \u56de\u8c03\u51fd\u6570\u7684\u54cd\u5e94\u5f88\u7b80\u5355:\u6211\u4eec\u53ea\u8fd4\u56de\u4e00\u4e2a\u5305\u542b userId \u548c username \u5c5e\u6027\u7684\u5bf9\u8c61\u3002 \u518d\u56de\u60f3\u4e00\u4e0b\uff0cPassport \u5c06\u57fa\u4e8e validate() \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u6784\u5efa\u4e00\u4e2a user \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u5c5e\u6027\u9644\u52a0\u5230 Request \u5bf9\u8c61\u4e0a\u3002 \u540c\u6837\u503c\u5f97\u6307\u51fa\u7684\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86\u5c06\u5176\u4ed6\u4e1a\u52a1\u903b\u8f91\u6ce8\u5165\u6d41\u7a0b\u7684\u7a7a\u95f4(\u53ef\u4ee5\u8bf4\u662f \u94a9\u5b50 )\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 validate() \u65b9\u6cd5\u4e2d\u8fdb\u884c\u6570\u636e\u5e93\u67e5\u627e\uff0c\u4ee5\u63d0\u53d6\u7528\u6237\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u4ece\u800c\u5728 Request \u4e2d\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684 user \u5bf9\u8c61\u3002 \u8fd9\u4e5f\u662f\u6211\u4eec\u53ef\u4ee5\u51b3\u5b9a\u8fdb\u884c\u8fdb\u4e00\u6b65\u4ee4\u724c\u9a8c\u8bc1\u7684\u5730\u65b9\uff0c\u4f8b\u5982\u5728\u5df2\u64a4\u9500\u4ee4\u724c\u5217\u8868\u4e2d\u67e5\u627e userId \uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u6267\u884c\u4ee4\u724c\u64a4\u9500\u3002 \u6211\u4eec\u5728\u793a\u4f8b\u4ee3\u7801\u4e2d\u5b9e\u73b0\u7684\u6a21\u578b\u662f\u4e00\u4e2a\u5feb\u901f\u7684\u3001 \u65e0\u72b6\u6001\u7684 JWT \u6a21\u578b\uff0c\u5176\u4e2d\u6bcf\u4e2a API \u8c03\u7528\u90fd\u7acb\u5373\u6839\u636e\u6709\u6548\u7684 JWT \u7684\u5b58\u5728\u8fdb\u884c\u6388\u6743\uff0c\u5e76\u4e14\u8bf7\u6c42\u8005\u7684\u5c11\u91cf\u4fe1\u606f(\u5b83\u7684 userId \u548c \u7528\u6237\u540d )\u5728\u6211\u4eec\u7684\u8bf7\u6c42\u7ba1\u9053\u4e2d\u53ef\u7528\u3002 \u5728 AuthModule \u4e2d\u6dfb\u52a0\u65b0\u7684 JwtStrategy \u4f5c\u4e3a\u63d0\u4f9b\u5668: @ @filename ( auth / auth . module ) import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { LocalStrategy } from './local.strategy' ; import { JwtStrategy } from './jwt.strategy' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { JwtModule } from '@nestjs/jwt' ; import { jwtConstants } from './constants' ; @Module ({ imports : [ UsersModule , PassportModule , JwtModule . register ({ secret : jwtConstants.secret , signOptions : { expiresIn : '60s' }, }), ], providers : [ AuthService , LocalStrategy , JwtStrategy ], exports : [ AuthService ], }) export class AuthModule {} @ @switch import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { LocalStrategy } from './local.strategy' ; import { JwtStrategy } from './jwt.strategy' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { JwtModule } from '@nestjs/jwt' ; import { jwtConstants } from './constants' ; @Module ({ imports : [ UsersModule , PassportModule , JwtModule . register ({ secret : jwtConstants.secret , signOptions : { expiresIn : '60s' }, }), ], providers : [ AuthService , LocalStrategy , JwtStrategy ], exports : [ AuthService ], }) export class AuthModule {} \u901a\u8fc7\u5bfc\u5165\u6211\u4eec\u7b7e\u7f72 JWT \u65f6\u4f7f\u7528\u7684\u76f8\u540c\u5bc6\u94a5\uff0c\u6211\u4eec\u786e\u4fdd Passport \u6267\u884c\u7684 \u9a8c\u8bc1 \u9636\u6bb5\u548c AuthService \u6267\u884c\u7684 \u7b7e\u540d \u9636\u6bb5\u4f7f\u7528\u4e00\u4e2a\u516c\u5171\u5bc6\u94a5\u3002 \u6700\u540e\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 JwtAuthGuard \u7c7b\uff0c\u5b83\u6269\u5c55\u4e86\u5185\u7f6e\u7684 AuthGuard : @ @filename ( auth / jwt - auth . guard ) import { Injectable } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Injectable () export class JwtAuthGuard extends AuthGuard ( 'jwt' ) {} \u5b9e\u65bd\u4fdd\u62a4\u8def\u7531\u548c JWT \u7b56\u7565\u5b88\u536b \u00b6 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u53d7\u4fdd\u62a4\u7684\u8def\u7531\u53ca\u5176\u76f8\u5173\u7684 Guard\u3002 \u6253\u5f00 app.controller.ts \u6587\u4ef6\u5e76\u66f4\u65b0\u5b83\uff0c\u5982\u4e0b\u56fe\u6240\u793a: @ @filename ( app . controller ) import { Controller , Get , Request , Post , UseGuards } from '@nestjs/common' ; import { JwtAuthGuard } from './auth/jwt-auth.guard' ; import { LocalAuthGuard } from './auth/local-auth.guard' ; import { AuthService } from './auth/auth.service' ; @Controller () export class AppController { constructor ( private authService : AuthService ) {} @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) async login ( @Request () req ) { return this . authService . login ( req . user ); } @UseGuards ( JwtAuthGuard ) @Get ( 'profile' ) getProfile ( @Request () req ) { return req . user ; } } @ @switch import { Controller , Dependencies , Bind , Get , Request , Post , UseGuards } from '@nestjs/common' ; import { JwtAuthGuard } from './auth/jwt-auth.guard' ; import { LocalAuthGuard } from './auth/local-auth.guard' ; import { AuthService } from './auth/auth.service' ; @Dependencies ( AuthService ) @Controller () export class AppController { constructor ( authService ) { this . authService = authService ; } @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) @Bind ( Request ()) async login ( req ) { return this . authService . login ( req . user ); } @UseGuards ( JwtAuthGuard ) @Get ( 'profile' ) @Bind ( Request ()) getProfile ( req ) { return req . user ; } } \u518d\u4e00\u6b21\uff0c\u6211\u4eec\u5e94\u7528\u4e86 @nestjs/passport \u6a21\u5757\u5728\u914d\u7f6e passport-jwt \u6a21\u5757\u65f6\u81ea\u52a8\u4e3a\u6211\u4eec\u63d0\u4f9b\u7684 AuthGuard \u3002 \u8fd9\u4e2a\u5b88\u536b\u88ab\u5b83\u7684\u9ed8\u8ba4\u540d\u79f0 jwt \u5f15\u7528\u3002 \u5f53\u6211\u4eec\u7684 GET /profile \u8def\u7531\u88ab\u547d\u4e2d\u65f6\uff0cGuard \u5c06\u81ea\u52a8\u8c03\u7528\u6211\u4eec\u7684 passport-jwt \u81ea\u5b9a\u4e49\u914d\u7f6e\u903b\u8f91\uff0c\u9a8c\u8bc1 JWT\uff0c\u5e76\u5c06 user \u5c5e\u6027\u5206\u914d\u7ed9 Request \u5bf9\u8c61\u3002 \u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\uff0c\u5e76\u4f7f\u7528 cURL \u6d4b\u8bd5\u8def\u7531\u3002 $ # GET /profile $ curl http://localhost:3000/profile $ # result -> {\"statusCode\":401,\"error\":\"Unauthorized\"} $ # POST /auth/login $ curl -X POST http://localhost:3000/auth/login -d '{\"username\": \"john\", \"password\": \"changeme\"}' -H \"Content-Type: application/json\" $ # result -> {\"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm... } $ # GET /profile using access_token returned from previous step as bearer code $ curl http://localhost:3000/profile -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm...\" $ # result -> {\"userId\":1,\"username\":\"john\"} \u6ce8\u610f\uff0c\u5728 AuthModule \u4e2d\uff0c\u6211\u4eec\u5c06 JWT \u914d\u7f6e\u4e3a\u201c60 \u79d2\u201d\u8fc7\u671f\u3002 \u8fd9\u4e2a\u8fc7\u671f\u65f6\u95f4\u53ef\u80fd\u592a\u77ed\u4e86\uff0c\u5904\u7406\u4ee4\u724c\u8fc7\u671f\u548c\u5237\u65b0\u7684\u8be6\u7ec6\u4fe1\u606f\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\u3002 \u7136\u800c\uff0c\u6211\u4eec\u9009\u62e9\u5b83\u662f\u4e3a\u4e86\u5c55\u793a jwt \u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u4ee5\u53ca passport-jwt \u7b56\u7565\u3002 \u5982\u679c\u4f60\u5728\u9a8c\u8bc1\u540e\u7b49\u5f85 60 \u79d2\u518d\u5c1d\u8bd5 GET /profile \u8bf7\u6c42\uff0c\u4f60\u4f1a\u6536\u5230\u4e00\u4e2a 401 Unauthorized \u7684\u54cd\u5e94\u3002 \u8fd9\u662f\u56e0\u4e3a Passport \u4f1a\u81ea\u52a8\u68c0\u67e5 JWT \u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u4ece\u800c\u4e3a\u60a8\u8282\u7701\u4e86\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8fd9\u6837\u505a\u7684\u9ebb\u70e6\u3002 \u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5b8c\u6210\u4e86 JWT \u8eab\u4efd\u9a8c\u8bc1\u5b9e\u73b0\u3002 JavaScript \u5ba2\u6237\u7aef(\u5982 Angular/React/Vue)\u548c\u5176\u4ed6 JavaScript \u5e94\u7528\uff0c\u73b0\u5728\u53ef\u4ee5\u5b89\u5168\u5730\u4e0e\u6211\u4eec\u7684 API Server \u8fdb\u884c\u8ba4\u8bc1\u548c\u901a\u4fe1\u4e86\u3002 \u793a\u4f8b \u00b6 \u4f60\u53ef\u4ee5\u5728\u672c\u7ae0\u627e\u5230\u5b8c\u6574\u7684\u4ee3\u7801\u7248\u672c \u8fd9\u91cc . \u6269\u5c55\u5b88\u536b \u00b6 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u63d0\u4f9b\u7684 AuthGuard \u7c7b\u5c31\u8db3\u591f\u4e86\u3002 \u7136\u800c\uff0c\u5f53\u60a8\u60f3\u7b80\u5355\u5730\u6269\u5c55\u9ed8\u8ba4\u9519\u8bef\u5904\u7406\u6216\u8eab\u4efd\u9a8c\u8bc1\u903b\u8f91\u65f6\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u7528\u4f8b\u3002 \u4e3a\u6b64\uff0c\u60a8\u53ef\u4ee5\u6269\u5c55\u5185\u7f6e\u7c7b\u5e76\u5728\u5b50\u7c7b\u4e2d\u91cd\u5199\u65b9\u6cd5\u3002 import { ExecutionContext , Injectable , UnauthorizedException , } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Injectable () export class JwtAuthGuard extends AuthGuard ( 'jwt' ) { canActivate ( context : ExecutionContext ) { // Add your custom authentication logic here // for example, call super.logIn(request) to establish a session. return super . canActivate ( context ); } handleRequest ( err , user , info ) { // You can throw an exception based on either \"info\" or \"err\" arguments if ( err || ! user ) { throw err || new UnauthorizedException (); } return user ; } } \u9664\u4e86\u6269\u5c55\u9ed8\u8ba4\u7684\u9519\u8bef\u5904\u7406\u548c\u8eab\u4efd\u9a8c\u8bc1\u903b\u8f91\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5141\u8bb8\u8eab\u4efd\u9a8c\u8bc1\u901a\u8fc7\u4e00\u7cfb\u5217\u7b56\u7565\u3002 \u7b2c\u4e00\u4e2a\u6210\u529f\u7684\u7b56\u7565\uff0c\u91cd\u5b9a\u5411\uff0c\u6216\u9519\u8bef\u5c06\u505c\u6b62\u94fe\u3002 \u8eab\u4efd\u9a8c\u8bc1\u5931\u8d25\u5c06\u4f9d\u6b21\u901a\u8fc7\u6bcf\u4e2a\u7b56\u7565\uff0c\u5982\u679c\u6240\u6709\u7b56\u7565\u90fd\u5931\u8d25\uff0c\u5219\u6700\u7ec8\u5931\u8d25\u3002 export class JwtAuthGuard extends AuthGuard ([ 'strategy_jwt_1' , 'strategy_jwt_2' , '...' ]) { ... } \u4f7f\u5168\u5c40\u8ba4\u8bc1 \u00b6 \u5982\u679c\u4f60\u7684\u5927\u591a\u6570\u7aef\u70b9\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u88ab\u4fdd\u62a4\uff0c\u4f60\u53ef\u4ee5\u5c06\u8ba4\u8bc1\u5b88\u536b\u6ce8\u518c\u4e3a \u5168\u5c40\u5b88\u536b \uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u63a7\u5236\u5668\u4e0a\u4f7f\u7528 @UseGuards() \u88c5\u9970\u5668\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u6807\u8bb0\u54ea\u4e9b\u8def\u7531\u5e94\u8be5\u662f\u516c\u5171\u7684\u3002 \u9996\u5148\uff0c\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020(\u5728\u4efb\u4f55\u6a21\u5757\u4e2d)\u5c06 JwtAuthGuard \u6ce8\u518c\u4e3a\u5168\u5c40\u4fdd\u62a4: providers : [ { provide : APP_GUARD , useClass : JwtAuthGuard , }, ], \u6709\u4e86\u8fd9\u4e2a\uff0cNest \u4f1a\u81ea\u52a8\u7ed1\u5b9a JwtAuthGuard \u5230\u6240\u6709\u7684\u7aef\u70b9\u3002 \u73b0\u5728\u6211\u4eec\u5fc5\u987b\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\u6765\u5c06\u8def\u7531\u58f0\u660e\u4e3a\u516c\u5171\u7684\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 SetMetadata \u88c5\u9970\u5668\u5de5\u5382\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\u3002 import { SetMetadata } from '@nestjs/common' ; export const IS_PUBLIC_KEY = 'isPublic' ; export const Public = () => SetMetadata ( IS_PUBLIC_KEY , true ); \u5728\u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5bfc\u51fa\u4e86\u4e24\u4e2a\u5e38\u91cf\u3002 \u4e00\u4e2a\u662f\u6211\u4eec\u7684\u5143\u6570\u636e\u952e IS_PUBLIC_KEY\uff0c\u53e6\u4e00\u4e2a\u662f\u6211\u4eec\u7684\u65b0\u88c5\u9970\u5668\u672c\u8eab\uff0c\u6211\u4eec\u5c06\u79f0\u4e4b\u4e3a Public (\u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u547d\u540d\u4e3a SkipAuth \u6216 AllowAnon \uff0c\u53ea\u8981\u9002\u5408\u4f60\u7684\u9879\u76ee)\u3002 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 @Public() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u88c5\u9970\u4efb\u4f55\u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: @Public () @Get () findAll () { return []; } \u6700\u540e\uff0c\u5f53 isPublic \u5143\u6570\u636e\u88ab\u53d1\u73b0\u65f6\uff0c\u6211\u4eec\u9700\u8981 JwtAuthGuard \u8fd4\u56de true \u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Reflector \u7c7b(\u9605\u8bfb\u66f4\u591a \u5728\u8fd9\u91cc ). @Injectable () export class JwtAuthGuard extends AuthGuard ( 'jwt' ) { constructor ( private reflector : Reflector ) { super (); } canActivate ( context : ExecutionContext ) { const isPublic = this . reflector . getAllAndOverride < boolean > ( IS_PUBLIC_KEY , [ context . getHandler (), context . getClass (), ]); if ( isPublic ) { return true ; } return super . canActivate ( context ); } } \u8bf7\u6c42\u8303\u56f4\u5185\u7684\u7b56\u7565 \u00b6 passport API \u57fa\u4e8e\u5c06\u7b56\u7565\u6ce8\u518c\u5230\u5e93\u7684\u5168\u5c40\u5b9e\u4f8b\u3002 \u56e0\u6b64\uff0c\u7b56\u7565\u7684\u8bbe\u8ba1\u5e76\u4e0d\u662f\u4e3a\u4e86\u62e5\u6709\u4e0e\u8bf7\u6c42\u76f8\u5173\u7684\u9009\u9879\uff0c\u6216\u8005\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u52a8\u6001\u5b9e\u4f8b\u5316(\u9605\u8bfb\u66f4\u591a\u5173\u4e8e \u8bf7\u6c42\u4f5c\u7528\u57df \u63d0\u4f9b\u5668\u7684\u4fe1\u606f)\u3002 \u5f53\u4f60\u5c06\u7b56\u7565\u914d\u7f6e\u4e3a\u8bf7\u6c42\u4f5c\u7528\u57df\u65f6\uff0cNest \u5c06\u4e0d\u4f1a\u5b9e\u4f8b\u5316\u5b83\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u7ed1\u5b9a\u5230\u4efb\u4f55\u7279\u5b9a\u7684\u8def\u7531\u3002 \u6ca1\u6709\u7269\u7406\u65b9\u6cd5\u6765\u786e\u5b9a\u6bcf\u4e2a\u8bf7\u6c42\u5e94\u8be5\u6267\u884c\u54ea\u4e9b\u201c\u8bf7\u6c42\u8303\u56f4\u201d\u7684\u7b56\u7565\u3002 \u4f46\u662f\uff0c\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5728\u7b56\u7565\u4e2d\u52a8\u6001\u5730\u89e3\u6790\u8bf7\u6c42\u8303\u56f4\u7684\u63d0\u4f9b\u5668\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5229\u7528\u4e86 module reference \u7279\u6027\u3002 \u9996\u5148\uff0c\u6253\u5f00 local.strategy.ts \u6587\u4ef6\uff0c\u4ee5\u6b63\u5e38\u65b9\u5f0f\u6ce8\u5165 ModuleRef : constructor ( private module Ref : ModuleRef ) { super ({ passReqToCallback : true , }); } info Hint ModuleRef \u7c7b\u662f\u4ece @nestjs/core \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u786e\u4fdd\u5c06 passReqToCallback \u914d\u7f6e\u5c5e\u6027\u8bbe\u7f6e\u4e3a true \uff0c\u5982\u4e0a\u6240\u793a\u3002 \u5728\u4e0b\u4e00\u6b65\u4e2d\uff0c\u8bf7\u6c42\u5b9e\u4f8b\u5c06\u88ab\u7528\u6765\u83b7\u53d6\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\uff0c\u800c\u4e0d\u662f\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26(\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8bf7\u6c42\u4e0a\u4e0b\u6587\u7684\u4fe1\u606f here )\u3002 \u73b0\u5728\uff0c\u5728 LocalStrategy \u7c7b\u7684 validate() \u65b9\u6cd5\u4e2d\uff0c\u4f7f\u7528 ContextIdFactory \u7c7b\u7684 getByRequest() \u65b9\u6cd5\u521b\u5efa\u57fa\u4e8e\u8bf7\u6c42\u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587 id\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 resolve() \u8c03\u7528: async validate ( request : Request , username : string , password : string , ) { const contextId = ContextIdFactory . getByRequest ( request ); // \"AuthService\" is a request-scoped provider const authService = await this . module Ref.resolve ( AuthService , contextId ); ... } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c resolve() \u65b9\u6cd5\u5c06\u5f02\u6b65\u8fd4\u56de AuthService \u63d0\u4f9b\u5668\u7684\u8bf7\u6c42\u8303\u56f4\u7684\u5b9e\u4f8b(\u6211\u4eec\u5047\u8bbe AuthService \u88ab\u6807\u8bb0\u4e3a\u8bf7\u6c42\u8303\u56f4\u7684\u63d0\u4f9b\u5668)\u3002 \u5b9a\u5236\u7684 Passport \u00b6 \u4efb\u4f55\u6807\u51c6\u7684 Passport \u5b9a\u5236\u9009\u9879\u90fd\u53ef\u4ee5\u901a\u8fc7\u540c\u6837\u7684\u65b9\u5f0f\u4f20\u9012\uff0c\u4f7f\u7528 register() \u65b9\u6cd5\u3002 \u53ef\u7528\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u6b63\u5728\u5b9e\u65bd\u7684\u6218\u7565\u3002 \u4f8b\u5982: PassportModule . register ({ session : true }); \u60a8\u8fd8\u53ef\u4ee5\u5728\u7b56\u7565\u7684\u6784\u9020\u51fd\u6570\u4e2d\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u6765\u914d\u7f6e\u5b83\u4eec\u3002 \u5bf9\u4e8e local \u7b56\u7565\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f8b\u5982: constructor ( private authService : AuthService ) { super ({ usernameField : 'email' , passwordField : 'password' , }); } \u67e5\u770b\u5b98\u65b9 Passport \u7f51\u7ad9 \u7684\u5c5e\u6027\u540d\u79f0\u3002 \u547d\u540d\u7b56\u7565 \u00b6 \u5f53\u5b9e\u73b0\u4e00\u4e2a\u7b56\u7565\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed9\u00b7 PassportStrategy \u00b7\u51fd\u6570\u6765\u4e3a\u5b83\u63d0\u4f9b\u4e00\u4e2a\u540d\u79f0\u3002 \u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u6bcf\u4e2a\u7b56\u7565\u5c06\u6709\u4e00\u4e2a\u9ed8\u8ba4\u540d\u79f0(\u4f8b\u5982\uff0c jwt \u4e3a jwt-strategy ): export class JwtStrategy extends PassportStrategy ( Strategy , 'myjwt' ) \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u88c5\u9970\u5668\u6765\u5f15\u7528\u5b83\uff0c\u6bd4\u5982 @UseGuards(AuthGuard('myjwt')) \u3002 GraphQL \u00b6 \u4e3a\u4e86\u5728 GraphQL \u4e2d\u4f7f\u7528 AuthGuard\uff0c\u6269\u5c55\u5185\u7f6e\u7684 AuthGuard \u7c7b\u5e76\u8986\u76d6 getRequest()\u65b9\u6cd5\u3002 @Injectable () export class GqlAuthGuard extends AuthGuard ( 'jwt' ) { getRequest ( context : ExecutionContext ) { const ctx = GqlExecutionContext . create ( context ); return ctx . getContext (). req ; } } \u8981\u5728\u4f60\u7684 graphql \u89e3\u6790\u5668\u4e2d\u83b7\u53d6\u5f53\u524d\u8ba4\u8bc1\u7684\u7528\u6237\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a @CurrentUser() \u88c5\u9970\u5668: import { createParamDecorator , ExecutionContext } from '@nestjs/common' ; import { GqlExecutionContext } from '@nestjs/graphql' ; export const CurrentUser = createParamDecorator ( ( data : unknown , context : ExecutionContext ) => { const ctx = GqlExecutionContext . create ( context ); return ctx . getContext (). req . user ; }, ); \u8981\u5728\u4f60\u7684\u89e3\u6790\u5668\u4e2d\u4f7f\u7528\u4e0a\u8ff0\u88c5\u9970\u5668\uff0c\u8bf7\u786e\u4fdd\u5c06\u5176\u4f5c\u4e3a\u4f60\u7684\u67e5\u8be2\u6216\u53d8\u5f02\u7684\u53c2\u6570: @Query ( returns => User ) @UseGuards ( GqlAuthGuard ) whoAmI ( @CurrentUser () user : User ) { return this . usersService . findById ( user . id ); }","title":"\u8eab\u4efd\u9a8c\u8bc1"},{"location":"security/authentication/#_1","text":"\u8eab\u4efd\u9a8c\u8bc1\u662f\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4e2d \u5fc5\u4e0d\u53ef\u5c11 \u7684\u4e00\u90e8\u5206\u3002 \u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u548c\u7b56\u7565\u6765\u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4efb\u4f55\u9879\u76ee\u6240\u91c7\u7528\u7684\u65b9\u6cd5\u53d6\u51b3\u4e8e\u5176\u7279\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u672c\u7ae0\u4ecb\u7ecd\u4e86\u51e0\u79cd\u53ef\u4ee5\u9002\u5e94\u5404\u79cd\u4e0d\u540c\u9700\u6c42\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6cd5\u3002 Passport \u662f\u6700\u6d41\u884c\u7684 node.js \u8eab\u4efd\u9a8c\u8bc1\u5e93\uff0c\u88ab\u793e\u533a\u6240\u719f\u77e5\uff0c\u5e76\u6210\u529f\u5730\u5e94\u7528\u4e8e\u8bb8\u591a\u751f\u4ea7\u5e94\u7528\u7a0b\u5e8f\u3002 \u4f7f\u7528 @nestjs/passport \u6a21\u5757\u5c06\u8fd9\u4e2a\u5e93\u4e0e Nest \u5e94\u7528\u7a0b\u5e8f\u96c6\u6210\u8d77\u6765\u662f\u5f88\u7b80\u5355\u7684\u3002 \u5728\u9ad8\u5c42\uff0cPassport \u6267\u884c\u4e00\u7cfb\u5217\u6b65\u9aa4: \u901a\u8fc7\u9a8c\u8bc1\u7528\u6237\u7684\u201c\u51ed\u8bc1\u201d(\u4f8b\u5982\u7528\u6237\u540d/\u5bc6\u7801\u3001JSON Web \u4ee4\u724c( JWT )\u6216\u6765\u81ea\u8eab\u4efd\u63d0\u4f9b\u5668\u7684\u8eab\u4efd\u4ee4\u724c)\u6765\u9a8c\u8bc1\u7528\u6237\u3002 \u7ba1\u7406\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u72b6\u6001(\u901a\u8fc7\u53d1\u51fa\u53ef\u79fb\u690d\u4ee4\u724c\uff0c\u5982 JWT\uff0c\u6216\u521b\u5efa Express \u4f1a\u8bdd ) \u5c06\u6709\u5173\u5df2\u9a8c\u8bc1\u7528\u6237\u7684\u4fe1\u606f\u9644\u52a0\u5230 Request \u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5728\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u4e2d\u8fdb\u4e00\u6b65\u4f7f\u7528 Passport \u6709\u4e00\u4e2a\u4e30\u5bcc\u7684 \u7b56\u7565 \u751f\u6001\u7cfb\u7edf\uff0c\u5b9e\u73b0\u5404\u79cd\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u3002 \u867d\u7136\u5728\u6982\u5ff5\u4e0a\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u60a8\u53ef\u4ee5\u9009\u62e9\u7684 Passport \u7b56\u7565\u96c6\u975e\u5e38\u591a\uff0c\u800c\u4e14\u79cd\u7c7b\u7e41\u591a\u3002 Passport \u5c06\u8fd9\u4e9b\u4e0d\u540c\u7684\u6b65\u9aa4\u62bd\u8c61\u4e3a\u4e00\u4e2a\u6807\u51c6\u6a21\u5f0f\uff0c\u800c @nestjs/passport \u6a21\u5757\u5c06\u8be5\u6a21\u5f0f\u5305\u88c5\u5e76\u6807\u51c6\u5316\u4e3a\u719f\u6089\u7684 Nest \u7ed3\u6784\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e9b\u5f3a\u5927\u800c\u7075\u6d3b\u7684\u6a21\u5757\u4e3a RESTful API \u670d\u52a1\u5668\u5b9e\u73b0\u5b8c\u6574\u7684\u7aef\u5230\u7aef\u8eab\u4efd\u9a8c\u8bc1\u89e3\u51b3\u65b9\u6848\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u63cf\u8ff0\u7684\u6982\u5ff5\u6765\u5b9e\u73b0\u4efb\u4f55 Passport \u7b56\u7565\uff0c\u4ee5\u5b9a\u5236\u60a8\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6848\u3002 \u60a8\u53ef\u4ee5\u6309\u7167\u672c\u7ae0\u4e2d\u7684\u6b65\u9aa4\u6765\u6784\u5efa\u8fd9\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u5e93.","title":"\u8eab\u4efd\u9a8c\u8bc1"},{"location":"security/authentication/#_2","text":"\u8ba9\u6211\u4eec\u5145\u5b9e\u6211\u4eec\u7684\u8981\u6c42\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u7528\u4f8b\uff0c\u5ba2\u6237\u7aef\u5c06\u9996\u5148\u4f7f\u7528\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4e00\u65e6\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u670d\u52a1\u5668\u5c06\u53d1\u51fa\u4e00\u4e2a JWT\uff0c\u8be5 JWT \u53ef\u4ee5\u5728\u968f\u540e\u7684\u8bf7\u6c42\u4e2d\u4f5c\u4e3a \u6388\u6743\u5934\u4e2d\u7684\u627f\u8f7d\u4ee4\u724c \u53d1\u9001\uff0c\u4ee5\u8bc1\u660e\u8eab\u4efd\u9a8c\u8bc1\u3002 \u6211\u4eec\u8fd8\u5c06\u521b\u5efa\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684\u8def\u7531\uff0c\u8be5\u8def\u7531\u4ec5\u5bf9\u5305\u542b\u6709\u6548 JWT \u7684\u8bf7\u6c42\u53ef\u8bbf\u95ee\u3002 \u6211\u4eec\u5c06\u4ece\u7b2c\u4e00\u4e2a\u9700\u6c42\u5f00\u59cb:\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u53d1\u5e03 JWT \u5bf9\u5176\u8fdb\u884c\u6269\u5c55\u3002 \u6700\u540e\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u53d7\u4fdd\u62a4\u7684\u8def\u7531\uff0c\u7528\u4e8e\u68c0\u67e5\u8bf7\u6c42\u4e2d\u7684\u6709\u6548 JWT\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305\u3002 Passport \u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3a passport-local \u7684\u7b56\u7565\uff0c\u8be5\u7b56\u7565\u5b9e\u73b0\u4e86\u7528\u6237\u540d/\u5bc6\u7801\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\uff0c\u5b83\u9002\u5408\u6211\u4eec\u5bf9\u8fd9\u90e8\u5206\u7528\u4f8b\u7684\u9700\u6c42\u3002 $ npm install --save @nestjs/passport passport passport-local $ npm install --save-dev @types/passport-local warning Notice \u5bf9\u4e8e\u4f60\u9009\u62e9\u7684 \u4efb\u4f55 Passport \u7b56\u7565\uff0c\u4f60\u603b\u662f\u9700\u8981 @nestjs/passport \u548c passport \u5305\u3002 \u7136\u540e\uff0c\u60a8\u9700\u8981\u5b89\u88c5\u7279\u5b9a\u4e8e\u7b56\u7565\u7684\u5305(\u4f8b\u5982\uff0c passport-jwt \u6216 passport-local )\uff0c\u5b83\u5b9e\u73b0\u4e86\u60a8\u6b63\u5728\u6784\u5efa\u7684\u7279\u5b9a\u8eab\u4efd\u9a8c\u8bc1\u7b56\u7565\u3002 \u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4e3a\u4efb\u4f55 Passport \u7b56\u7565\u5b89\u88c5\u7c7b\u578b\u5b9a\u4e49\uff0c\u5982\u4e0a\u9762 @types/assport-local \u6240\u793a\uff0c\u5b83\u5728\u7f16\u5199 TypeScript \u4ee3\u7801\u65f6\u63d0\u4f9b\u4e86\u5e2e\u52a9\u3002","title":"\u8eab\u4efd\u9a8c\u8bc1\u9700\u6c42"},{"location":"security/authentication/#_3","text":"\u73b0\u5728\u6211\u4eec\u51c6\u5907\u5b9e\u73b0\u8eab\u4efd\u9a8c\u8bc1\u7279\u6027\u3002 \u6211\u4eec\u5c06\u9996\u5148\u6982\u8ff0\u7528\u4e8e \u4efb\u4f55 passport \u7b56\u7565\u7684\u6d41\u7a0b\u3002 \u5c06 Passport \u672c\u8eab\u770b\u4f5c\u4e00\u4e2a\u8ff7\u4f60\u6846\u67b6\u662f\u6709\u5e2e\u52a9\u7684\u3002 \u8be5\u6846\u67b6\u7684\u4f18\u96c5\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u5c06\u8eab\u4efd\u9a8c\u8bc1\u8fc7\u7a0b\u62bd\u8c61\u4e3a\u51e0\u4e2a\u57fa\u672c\u6b65\u9aa4\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u6b63\u5728\u5b9e\u73b0\u7684\u7b56\u7565\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u6b65\u9aa4\u3002 \u5b83\u5f88\u50cf\u4e00\u4e2a\u6846\u67b6\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u56de\u8c03\u51fd\u6570\u7684\u5f62\u5f0f\u63d0\u4f9b\u5b9a\u5236\u53c2\u6570(\u4f5c\u4e3a\u666e\u901a\u7684 JSON \u5bf9\u8c61)\u548c\u5b9a\u5236\u4ee3\u7801\u6765\u914d\u7f6e\u5b83\uff0cPassport \u4f1a\u5728\u9002\u5f53\u7684\u65f6\u5019\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002 @nestjs/passport \u6a21\u5757\u5c06\u8fd9\u4e2a\u6846\u67b6\u5c01\u88c5\u5728\u4e00\u4e2a Nest \u98ce\u683c\u7684\u5305\u4e2d\uff0c\u4f7f\u5f97\u5b83\u5f88\u5bb9\u6613\u96c6\u6210\u5230\u4e00\u4e2a Nest \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u4f7f\u7528 @nestjs/passport \uff0c\u4f46\u9996\u5148\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b vanilla Passport \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5728 vanilla Passport \u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e24\u4ef6\u4e8b\u6765\u914d\u7f6e\u7b56\u7565: \u4e00\u7ec4\u7279\u5b9a\u4e8e\u8be5\u7b56\u7565\u7684\u9009\u9879\u3002\u4f8b\u5982\uff0c\u5728 JWT \u7b56\u7565\u4e2d\uff0c\u60a8\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u5bc6\u94a5\u6765\u4e3a\u4ee4\u724c\u7b7e\u540d\u3002 \u4e00\u4e2a\u201c\u9a8c\u8bc1\u56de\u8c03\u201d\uff0c\u5728\u8fd9\u91cc\u60a8\u53ef\u4ee5\u544a\u8bc9 Passport \u5982\u4f55\u4e0e\u60a8\u7684\u7528\u6237\u5b58\u50a8(\u60a8\u5728\u5176\u4e2d\u7ba1\u7406\u7528\u6237\u5e10\u6237)\u4ea4\u4e92\u3002 \u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u9a8c\u8bc1\u4e00\u4e2a\u7528\u6237\u662f\u5426\u5b58\u5728(\u548c/\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u7528\u6237)\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u51ed\u8bc1\u662f\u5426\u6709\u6548\u3002 \u5982\u679c\u9a8c\u8bc1\u6210\u529f\uff0cPassport \u5e93\u671f\u671b\u8fd9\u4e2a\u56de\u8c03\u8fd4\u56de\u4e00\u4e2a\u5b8c\u6574\u7684\u7528\u6237\uff0c\u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a null(\u5931\u8d25\u5b9a\u4e49\u4e3a\u6ca1\u6709\u627e\u5230\u7528\u6237\uff0c\u6216\u8005\u5728 passport-local \u7684\u60c5\u51b5\u4e0b\uff0c\u5bc6\u7801\u4e0d\u5339\u914d)\u3002 \u4f7f\u7528 @nestjs/passport \uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55 PassportStrategy \u7c7b\u6765\u914d\u7f6e passport \u7b56\u7565\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684 super() \u65b9\u6cd5\u6765\u4f20\u9012\u7b56\u7565\u9009\u9879(\u4e0a\u9762\u7684\u7b2c 1 \u9879)\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u5b50\u7c7b\u4e2d\u5b9e\u73b0 validate() \u65b9\u6cd5\u6765\u63d0\u4f9b\u9a8c\u8bc1\u56de\u8c03(\u4e0a\u9762\u7684\u7b2c 2 \u9879)\u3002 \u6211\u4eec\u9996\u5148\u751f\u6210\u4e00\u4e2a AuthModule \uff0c\u5e76\u5728\u5176\u4e2d\u751f\u6210\u4e00\u4e2a AuthService : $ nest g module auth $ nest g service auth \u5f53\u6211\u4eec\u5b9e\u73b0 AuthService \u65f6\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5728 UsersService \u4e2d\u5c01\u88c5\u7528\u6237\u64cd\u4f5c\u662f\u5f88\u6709\u7528\u7684\uff0c\u6240\u4ee5\u73b0\u5728\u8ba9\u6211\u4eec\u751f\u6210\u8be5\u6a21\u5757\u548c\u670d\u52a1: $ nest g module users $ nest g service users \u66ff\u6362\u8fd9\u4e9b\u751f\u6210\u6587\u4ef6\u7684\u9ed8\u8ba4\u5185\u5bb9\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5bf9\u4e8e\u6211\u4eec\u7684\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\uff0c UsersService \u53ea\u662f\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u7528\u6237\u5217\u8868\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6309\u7528\u6237\u540d\u68c0\u7d22\u7528\u6237\u7684 find \u65b9\u6cd5\u3002 \u5728\u771f\u6b63\u7684\u5e94\u7528\u4e2d\uff0c\u8fd9\u662f\u4f60\u6784\u5efa\u7528\u6237\u6a21\u578b\u548c\u6301\u4e45\u5c42\u7684\u5730\u65b9\uff0c\u4f7f\u7528\u4f60\u7684\u5e93(\u5982 TypeORM, Sequelize, Mongoose \u7b49)\u3002 @ @filename ( users / users . service ) import { Injectable } from '@nestjs/common' ; // This should be a real class/interface representing a user entity export type User = any ; @Injectable () export class UsersService { private readonly users = [ { userId : 1 , username : 'john' , password : 'changeme' , }, { userId : 2 , username : 'maria' , password : 'guess' , }, ]; async findOne ( username : string ) : Promise < User | undefined > { return this . users . find ( user => user . username === username ); } } @ @switch import { Injectable } from '@nestjs/common' ; @Injectable () export class UsersService { constructor () { this . users = [ { userId : 1 , username : 'john' , password : 'changeme' , }, { userId : 2 , username : 'maria' , password : 'guess' , }, ]; } async findOne ( username ) { return this . users . find ( user => user . username === username ); } } \u5728 UsersModule \u4e2d\uff0c\u552f\u4e00\u9700\u8981\u4fee\u6539\u7684\u662f\u5c06 UsersService \u6dfb\u52a0\u5230 @Module \u88c5\u9970\u5668\u7684 exports \u6570\u7ec4\u4e2d\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u5728\u6a21\u5757\u5916\u770b\u5230\u4e86(\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u5728 AuthService \u4e2d\u4f7f\u7528\u5b83)\u3002 @ @filename ( users / users . module ) import { Module } from '@nestjs/common' ; import { UsersService } from './users.service' ; @Module ({ providers : [ UsersService ], exports : [ UsersService ], }) export class UsersModule {} @ @switch import { Module } from '@nestjs/common' ; import { UsersService } from './users.service' ; @Module ({ providers : [ UsersService ], exports : [ UsersService ], }) export class UsersModule {} \u6211\u4eec\u7684 AuthService \u8d1f\u8d23\u68c0\u7d22\u7528\u6237\u5e76\u9a8c\u8bc1\u5bc6\u7801\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a validateUser() \u65b9\u6cd5\u3002 \u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u65b9\u4fbf\u7684 ES6 \u6269\u5c55\u64cd\u4f5c\u7b26\u5728\u8fd4\u56de\u7528\u6237\u5bf9\u8c61\u4e4b\u524d\u4ece\u8be5\u5bf9\u8c61\u4e2d\u5265\u79bb\u5bc6\u7801\u5c5e\u6027\u3002 \u6211\u4eec\u7a0d\u540e\u5c06\u4ece passport-local \u7b56\u7565\u8c03\u7528 validateUser() \u65b9\u6cd5\u3002 @ @filename ( auth / auth . service ) import { Injectable } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; @Injectable () export class AuthService { constructor ( private usersService : UsersService ) {} async validateUser ( username : string , pass : string ) : Promise < any > { const user = await this . usersService . findOne ( username ); if ( user && user . password === pass ) { const { password , ... result } = user ; return result ; } return null ; } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; @Injectable () @Dependencies ( UsersService ) export class AuthService { constructor ( usersService ) { this . usersService = usersService ; } async validateUser ( username , pass ) { const user = await this . usersService . findOne ( username ); if ( user && user . password === pass ) { const { password , ... result } = user ; return result ; } return null ; } } Warning Warning \u5f53\u7136\uff0c\u5728\u5b9e\u9645\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u60a8\u4e0d\u4f1a\u5c06\u5bc6\u7801\u5b58\u50a8\u4e3a\u7eaf\u6587\u672c\u3002 \u76f8\u53cd\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528\u50cf bcrypt \u8fd9\u6837\u7684\u5e93\uff0c\u5e76\u4f7f\u7528\u52a0\u76d0\u7684\u5355\u5411\u54c8\u5e0c\u7b97\u6cd5\u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u60a8\u53ea\u9700\u5b58\u50a8\u7ecf\u8fc7\u6563\u5217\u5904\u7406\u7684\u5bc6\u7801\uff0c\u7136\u540e\u5c06\u5b58\u50a8\u7684\u5bc6\u7801\u4e0e\u4f20\u5165\u7684 \u5bc6\u7801 \u7684\u6563\u5217\u7248\u672c\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u4e0d\u4f1a\u4ee5\u7eaf\u6587\u672c\u5b58\u50a8\u6216\u516c\u5f00\u7528\u6237\u5bc6\u7801\u3002 \u4e3a\u4e86\u4fdd\u6301\u793a\u4f8b\u5e94\u7528\u7a0b\u5e8f\u7684\u7b80\u5355\u6027\uff0c\u6211\u4eec\u8fdd\u53cd\u4e86\u8fd9\u4e00\u7edd\u5bf9\u89c4\u5b9a\uff0c\u4f7f\u7528\u7eaf\u6587\u672c\u3002 \u4e0d\u8981\u5728\u771f\u6b63\u7684\u5e94\u7528\u4e2d\u8fd9\u4e48\u505a! \u73b0\u5728\uff0c\u6211\u4eec\u66f4\u65b0 AuthModule \u6765\u5bfc\u5165 UsersModule \u3002 @ @filename ( auth / auth . module ) import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; @Module ({ imports : [ UsersModule ], providers : [ AuthService ], }) export class AuthModule {} @ @switch import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; @Module ({ imports : [ UsersModule ], providers : [ AuthService ], }) export class AuthModule {}","title":"\u5b9e\u73b0\u8ba4\u8bc1\u7b56\u7565"},{"location":"security/authentication/#local","text":"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u6211\u4eec\u7684 passport-local \u8ba4\u8bc1\u7b56\u7565 \u3002 \u5728 auth \u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a local.strategy.ts \u7684\u6587\u4ef6\uff0c\u5e76\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801: @ @filename ( auth / local . strategy ) import { Strategy } from 'passport-local' ; import { PassportStrategy } from '@nestjs/passport' ; import { Injectable , UnauthorizedException } from '@nestjs/common' ; import { AuthService } from './auth.service' ; @Injectable () export class LocalStrategy extends PassportStrategy ( Strategy ) { constructor ( private authService : AuthService ) { super (); } async validate ( username : string , password : string ) : Promise < any > { const user = await this . authService . validateUser ( username , password ); if ( ! user ) { throw new UnauthorizedException (); } return user ; } } @ @switch import { Strategy } from 'passport-local' ; import { PassportStrategy } from '@nestjs/passport' ; import { Injectable , UnauthorizedException , Dependencies } from '@nestjs/common' ; import { AuthService } from './auth.service' ; @Injectable () @Dependencies ( AuthService ) export class LocalStrategy extends PassportStrategy ( Strategy ) { constructor ( authService ) { super (); this . authService = authService ; } async validate ( username , password ) { const user = await this . authService . validateUser ( username , password ); if ( ! user ) { throw new UnauthorizedException (); } return user ; } } \u5bf9\u4e8e\u6240\u6709\u7684 Passport \u7b56\u7565\uff0c\u6211\u4eec\u90fd\u9075\u5faa\u4e86\u524d\u9762\u63cf\u8ff0\u7684\u65b9\u6cd5\u3002 \u5728\u6211\u4eec\u7684 passport-local \u7528\u4f8b\u4e2d\uff0c\u6ca1\u6709\u914d\u7f6e\u9009\u9879\uff0c\u6240\u4ee5\u6784\u9020\u51fd\u6570\u53ea\u662f\u8c03\u7528 super() \uff0c\u6ca1\u6709\u9009\u9879\u5bf9\u8c61\u3002 info Hint \u6211\u4eec\u53ef\u4ee5\u5728\u8c03\u7528 super() \u65f6\u4f20\u9012\u4e00\u4e2a options \u5bf9\u8c61\u6765\u5b9a\u5236 passport \u7b56\u7565\u7684\u884c\u4e3a\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cpassport-local \u7b56\u7565\u5728\u8bf7\u6c42\u4f53\u4e2d\u8981\u6c42\u540d\u4e3a username \u548c password \u7684\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u4f20\u9012\u4e00\u4e2a options \u5bf9\u8c61\u6765\u6307\u5b9a\u4e0d\u540c\u7684\u5c5e\u6027\u540d: super({{ '{' }} usernameField: 'email' {{ '}' }}) . \u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605 Passport \u6587\u6863 \u3002 \u6211\u4eec\u8fd8\u5b9e\u73b0\u4e86 validate() \u65b9\u6cd5\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u7b56\u7565\uff0cPassport \u5c06\u4f7f\u7528\u4e00\u7ec4\u7279\u5b9a\u4e8e\u7b56\u7565\u7684\u53c2\u6570\u8c03\u7528 verify \u51fd\u6570(\u5728 @nestjs/passport \u4e2d\u4f7f\u7528 validate() \u65b9\u6cd5\u5b9e\u73b0)\u3002 \u5bf9\u4e8e local \u7b56\u7565\uff0cPassport \u9700\u8981\u4e00\u4e2a\u5e26\u6709\u4ee5\u4e0b\u7b7e\u540d\u7684 validate() \u65b9\u6cd5: validate(username: string, password:string): any . \u5927\u591a\u6570\u9a8c\u8bc1\u5de5\u4f5c\u90fd\u662f\u5728\u6211\u4eec\u7684 AuthService \u4e2d\u5b8c\u6210\u7684(\u5728 UsersService \u7684\u5e2e\u52a9\u4e0b)\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\u3002 \u4efb\u4f55 Passport \u7b56\u7565\u7684 validate() \u65b9\u6cd5\u90fd\u5c06\u9075\u5faa\u7c7b\u4f3c\u7684\u6a21\u5f0f\uff0c\u53ea\u662f\u5728\u5982\u4f55\u8868\u793a\u51ed\u636e\u7684\u7ec6\u8282\u4e0a\u6709\u6240\u4e0d\u540c\u3002 \u5982\u679c\u627e\u5230\u4e86\u7528\u6237\uff0c\u4e14\u51ed\u636e\u6709\u6548\uff0c\u5219\u8fd4\u56de\u7528\u6237\uff0c\u4ee5\u4fbf Passport \u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1(\u4f8b\u5982\uff0c\u5728 Request \u5bf9\u8c61\u4e0a\u521b\u5efa user \u5c5e\u6027)\uff0c\u5e76\u4e14\u8bf7\u6c42\u5904\u7406\u7ba1\u9053\u53ef\u4ee5\u7ee7\u7eed\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u6211\u4eec\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u5e76\u8ba9 \u5f02\u5e38\u5c42 \u5904\u7406\u5b83\u3002 \u901a\u5e38\uff0c\u6bcf\u79cd\u7b56\u7565\u7684 validate() \u65b9\u6cd5\u7684\u552f\u4e00\u663e\u8457\u533a\u522b\u662f\u5982\u4f55\u786e\u5b9a\u7528\u6237\u662f\u5426\u5b58\u5728\u5e76\u6709\u6548\u3002 \u4f8b\u5982\uff0c\u5728 JWT \u7b56\u7565\u4e2d\uff0c\u6839\u636e\u9700\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc4\u4f30\u5728\u5df2\u89e3\u7801\u4ee4\u724c\u4e2d\u643a\u5e26\u7684 userId \u662f\u5426\u4e0e\u6211\u4eec\u7684\u7528\u6237\u6570\u636e\u5e93\u4e2d\u7684\u8bb0\u5f55\u76f8\u5339\u914d\uff0c\u6216\u8005\u4e0e\u5df2\u64a4\u9500\u4ee4\u724c\u7684\u5217\u8868\u76f8\u5339\u914d\u3002 \u56e0\u6b64\uff0c\u8fd9\u79cd\u5b50\u7c7b\u5316\u548c\u5b9e\u73b0\u7279\u5b9a\u7b56\u7565\u9a8c\u8bc1\u7684\u6a21\u5f0f\u662f\u4e00\u81f4\u7684\u3001\u4f18\u96c5\u7684\u548c\u53ef\u6269\u5c55\u7684\u3002 \u6211\u4eec\u9700\u8981\u914d\u7f6e\u6211\u4eec\u7684 AuthModule \u6765\u4f7f\u7528\u6211\u4eec\u521a\u521a\u5b9a\u4e49\u7684 Passport \u7279\u6027\u3002 \u66f4\u65b0 auth.module.ts \uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( auth / auth . module ) import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { LocalStrategy } from './local.strategy' ; @Module ({ imports : [ UsersModule , PassportModule ], providers : [ AuthService , LocalStrategy ], }) export class AuthModule {} @ @switch import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { LocalStrategy } from './local.strategy' ; @Module ({ imports : [ UsersModule , PassportModule ], providers : [ AuthService , LocalStrategy ], }) export class AuthModule {}","title":"\u6267\u884c local \u8ba4\u8bc1"},{"location":"security/authentication/#_4","text":"Guards \u4e00\u7ae0\u63cf\u8ff0\u4e86 Guards \u7684\u4e3b\u8981\u529f\u80fd:\u51b3\u5b9a\u4e00\u4e2a\u8bf7\u6c42\u662f\u5426\u4f1a\u88ab\u8def\u7531\u5904\u7406\u5668\u5904\u7406\u3002 \u8fd9\u662f\u4e8b\u5b9e\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u4f7f\u7528\u6807\u51c6\u529f\u80fd\u3002 \u7136\u800c\uff0c\u5728\u4f7f\u7528 @nestjs/passport \u6a21\u5757\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u8fd8\u5c06\u5f15\u5165\u4e00\u4e2a\u8f7b\u5fae\u7684\u65b0\u65b9\u6cd5\uff0c\u8fd9\u5728\u4e00\u5f00\u59cb\u53ef\u80fd\u4f1a\u4ee4\u4eba\u56f0\u60d1\uff0c\u6240\u4ee5\u73b0\u5728\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u3002 \u4ece\u8ba4\u8bc1\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b58\u5728\u4e24\u79cd\u72b6\u6001: \u7528\u6237/\u5ba2\u6237\u7aef \u672a \u767b\u5f55(\u672a\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1) \u7528\u6237/\u5ba2\u6237\u7aef \u5df2 \u767b\u5f55(\u5df2\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1) \u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b(\u7528\u6237\u672a\u767b\u5f55)\uff0c\u6211\u4eec\u9700\u8981\u6267\u884c\u4e24\u4e2a\u4e0d\u540c\u7684\u51fd\u6570: \u9650\u5236\u672a\u7ecf\u8ba4\u8bc1\u7684\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u7684\u8def\u7531(\u5373\u62d2\u7edd\u8bbf\u95ee\u53d7\u9650\u5236\u7684\u8def\u7531)\u3002 \u901a\u8fc7\u5728\u53d7\u4fdd\u62a4\u7684\u8def\u7531\u4e0a\u653e\u7f6e\u4e00\u4e2a Guard\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u4eec\u719f\u6089\u7684\u529f\u80fd\u6765\u5904\u7406\u8fd9\u4e2a\u529f\u80fd\u3002 \u6b63\u5982\u60a8\u6240\u9884\u671f\u7684\uff0c\u6211\u4eec\u5c06\u68c0\u67e5\u8fd9\u4e2a\u5b88\u536b\u4e2d\u662f\u5426\u5b58\u5728\u6709\u6548\u7684 JWT\uff0c\u56e0\u6b64\uff0c\u4e00\u65e6\u6211\u4eec\u6210\u529f\u5730\u53d1\u5e03\u4e86 JWT\uff0c\u6211\u4eec\u5c06\u5728\u7a0d\u540e\u5904\u7406\u8fd9\u4e2a\u5b88\u536b\u3002 \u5f53\u5148\u524d\u672a\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u8bd5\u56fe\u767b\u5f55\u65f6\uff0c\u521d\u59cb\u5316 \u8eab\u4efd\u9a8c\u8bc1\u6b65\u9aa4 \u672c\u8eab\u3002 \u8fd9\u662f\u6211\u4eec\u5411\u6709\u6548\u7528\u6237 \u53d1\u9001 JWT \u7684\u6b65\u9aa4\u3002 \u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u9700\u8981 POST \u7528\u6237\u540d/\u5bc6\u7801\u51ed\u636e\u6765\u542f\u52a8\u8eab\u4efd\u9a8c\u8bc1\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u8bbe\u7f6e\u4e00\u4e2a POST /auth/login \u8def\u7531\u6765\u5904\u7406\u5b83\u3002 \u8fd9\u5c31\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898:\u5728\u8fd9\u6761\u8def\u7531\u4e0a\uff0c\u6211\u4eec\u7a76\u7adf\u5982\u4f55\u8c03\u7528 passport-local \u7b56\u7565? \u7b54\u6848\u5f88\u7b80\u5355:\u4f7f\u7528\u53e6\u4e00\u79cd\u7a0d\u5fae\u4e0d\u540c\u7684 Guard\u3002 @nestjs/passport \u6a21\u5757\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684 Guard \u6765\u5b8c\u6210\u8fd9\u4e00\u4efb\u52a1\u3002 \u8fd9\u4e2a Guard \u8c03\u7528 Passport \u7b56\u7565\u5e76\u542f\u52a8\u4e0a\u9762\u63cf\u8ff0\u7684\u6b65\u9aa4(\u68c0\u7d22\u51ed\u8bc1\u3001\u8fd0\u884c\u9a8c\u8bc1\u51fd\u6570\u3001\u521b\u5efa\u201c\u7528\u6237\u201d\u5c5e\u6027\u7b49)\u3002 \u4e0a\u9762\u5217\u4e3e\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5(\u767b\u5f55\u7684\u7528\u6237)\u53ea\u662f\u4f9d\u8d56\u4e8e\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u7684\u6807\u51c6\u7c7b\u578b\u7684 Guard\uff0c\u4ee5\u5141\u8bb8\u767b\u5f55\u7684\u7528\u6237\u8bbf\u95ee\u53d7\u4fdd\u62a4\u7684\u8def\u7531\u3002","title":"\u5185\u7f6e\u7684\u8ba4\u8bc1\u5b88\u536b"},{"location":"security/authentication/#_5","text":"\u6709\u4e86\u7b56\u7565\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684 /auth/login \u8def\u7531\uff0c\u5e76\u5e94\u7528\u5185\u7f6e\u7684 Guard \u6765\u542f\u52a8 passport-local \u6d41\u3002 \u6253\u5f00 app.controller.ts \u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u5185\u5bb9\u66ff\u6362\u4e3a\u4ee5\u4e0b\u5185\u5bb9: @ @filename ( app . controller ) import { Controller , Request , Post , UseGuards } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Controller () export class AppController { @UseGuards ( AuthGuard ( 'local' )) @Post ( 'auth/login' ) async login ( @Request () req ) { return req . user ; } } @ @switch import { Controller , Bind , Request , Post , UseGuards } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Controller () export class AppController { @UseGuards ( AuthGuard ( 'local' )) @Post ( 'auth/login' ) @Bind ( Request ()) async login ( req ) { return req . user ; } } \u5728\u4f7f\u7528 @UseGuards(AuthGuard('local')) \u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 @nestjs/passport \u81ea\u52a8\u63d0\u4f9b \u7684 AuthGuard \uff0c\u8fd9\u662f\u6211\u4eec\u5728\u6269\u5c55 passport-local \u7b56\u7565\u65f6\u81ea\u52a8\u63d0\u4f9b\u7684\u3002 \u8ba9\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u3002 \u6211\u4eec\u7684 passport-local \u7b56\u7565\u7684\u9ed8\u8ba4\u540d\u79f0\u662f local \u3002 \u6211\u4eec\u5728 @UseGuards() \u88c5\u9970\u5668\u4e2d\u5f15\u7528\u8be5\u540d\u79f0\uff0c\u5c06\u5176\u4e0e passport-local \u5305\u63d0\u4f9b\u7684\u4ee3\u7801\u5173\u8054\u8d77\u6765\u3002 \u8fd9\u662f\u7528\u6765\u6d88\u9664\u6b67\u4e49\uff0c\u5728\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6709\u591a\u4e2a Passport \u7b56\u7565(\u6bcf\u4e00\u4e2a\u53ef\u80fd\u63d0\u4f9b\u4e00\u4e2a\u7279\u5b9a\u7684\u7b56\u7565 AuthGuard )\u3002 \u867d\u7136\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u7b56\u7565\uff0c\u4f46\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\uff0c\u6240\u4ee5\u8fd9\u662f\u6d88\u9664\u6b67\u4e49\u6240\u5fc5\u9700\u7684\u3002 \u4e3a\u4e86\u6d4b\u8bd5\u6211\u4eec\u7684\u8def\u7531\uff0c\u6211\u4eec\u7684 /auth/login \u8def\u7531\u73b0\u5728\u53ea\u8fd4\u56de\u7528\u6237\u3002 \u8fd9\u4e5f\u8ba9\u6211\u4eec\u6f14\u793a\u4e86 Passport \u7684\u53e6\u4e00\u4e2a\u7279\u6027:Passport \u6839\u636e validate() \u65b9\u6cd5\u8fd4\u56de\u7684\u503c\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a user \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a req.user \u5206\u914d\u7ed9 Request \u5bf9\u8c61\u3002 \u7a0d\u540e\uff0c\u6211\u4eec\u5c06\u7528\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a JWT \u7684\u4ee3\u7801\u6765\u66ff\u6362\u5b83\u3002 \u7531\u4e8e\u8fd9\u4e9b\u662f API \u8def\u7531\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5e38\u7528\u7684 cURL \u5e93\u5bf9\u5b83\u4eec\u8fdb\u884c\u6d4b\u8bd5\u3002 \u4f60\u53ef\u4ee5\u7528 UsersService \u4e2d\u786c\u7f16\u7801\u7684\u4efb\u4f55 user \u5bf9\u8c61\u8fdb\u884c\u6d4b\u8bd5\u3002 $ # POST to /auth/login $ curl -X POST http://localhost:3000/auth/login -d '{\"username\": \"john\", \"password\": \"changeme\"}' -H \"Content-Type: application/json\" $ # result -> {\"userId\":1,\"username\":\"john\"} \u5f53\u8fd9\u5de5\u4f5c\u65f6\uff0c\u5c06\u7b56\u7565\u540d\u79f0\u76f4\u63a5\u4f20\u9012\u7ed9 AuthGuard() \u4f1a\u5728\u4ee3\u7801\u5e93\u4e2d\u5f15\u5165\u9b54\u672f\u5b57\u7b26\u4e32\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5efa\u8bae\u521b\u5efa\u81ea\u5df1\u7684\u7c7b\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( auth / local - auth . guard ) import { Injectable } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Injectable () export class LocalAuthGuard extends AuthGuard ( 'local' ) {} \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0 /auth/login \u8def\u7531\u5904\u7406\u7a0b\u5e8f\uff0c\u4f7f\u7528 LocalAuthGuard \u4ee3\u66ff: @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) async login ( @Request () req ) { return req . user ; }","title":"\u767b\u5f55\u8def\u7531"},{"location":"security/authentication/#jwt","text":"\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u8f6c\u79fb\u5230\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\u7684 JWT \u90e8\u5206\u3002\u8ba9\u6211\u4eec\u56de\u987e\u548c\u5b8c\u5584\u6211\u4eec\u7684\u8981\u6c42: \u5141\u8bb8\u7528\u6237\u4f7f\u7528\u7528\u6237\u540d/\u5bc6\u7801\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8fd4\u56de\u4e00\u4e2a JWT\uff0c\u4ee5\u4fbf\u5728\u968f\u540e\u8c03\u7528\u53d7\u4fdd\u62a4\u7684 API \u7aef\u70b9\u65f6\u4f7f\u7528\u3002 \u6211\u4eec\u6b63\u5728\u987a\u5229\u5730\u8fbe\u5230\u8fd9\u4e00\u8981\u6c42\u3002 \u4e3a\u4e86\u5b8c\u6210\u5b83\uff0c\u6211\u4eec\u9700\u8981\u7f16\u5199\u53d1\u51fa JWT \u7684\u4ee3\u7801\u3002 \u521b\u5efa\u57fa\u4e8e\u6709\u6548 JWT \u4f5c\u4e3a\u627f\u8f7d\u4ee4\u724c\u7684\u5b58\u5728\u800c\u53d7\u5230\u4fdd\u62a4\u7684 API \u8def\u7531 \u6211\u4eec\u9700\u8981\u5b89\u88c5\u66f4\u591a\u7684\u8f6f\u4ef6\u5305\u6765\u652f\u6301\u6211\u4eec\u7684 JWT \u9700\u6c42: $ npm install --save @nestjs/jwt passport-jwt $ npm install --save-dev @types/passport-jwt @nestjs/jwt \u5305(\u53c2\u89c1\u66f4\u591a \u8fd9\u91cc )\u662f\u4e00\u4e2a\u5b9e\u7528\u7a0b\u5e8f\u5305\uff0c\u53ef\u4ee5\u5e2e\u52a9\u8fdb\u884c jwt \u64cd\u4f5c\u3002 passport-jwt \u5305\u662f\u5b9e\u73b0\u4e86 JWT \u7b56\u7565\u7684 Passport \u5305\uff0c\u800c @types/passport-jwt \u5305\u63d0\u4f9b\u4e86 TypeScript \u7c7b\u578b\u5b9a\u4e49\u3002 \u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b POST /auth/login \u8bf7\u6c42\u662f\u5982\u4f55\u5904\u7406\u7684\u3002 \u6211\u4eec\u4f7f\u7528 passport-local \u7b56\u7565\u63d0\u4f9b\u7684\u5185\u7f6e AuthGuard \u6765\u88c5\u9970\u8def\u7531\u3002 \u8fd9\u610f\u5473\u7740: \u8def\u7531\u5904\u7406\u7a0b\u5e8f \u53ea\u4f1a\u5728\u7528\u6237\u5df2\u7ecf\u9a8c\u8bc1 \u7684\u60c5\u51b5\u4e0b\u88ab\u8c03\u7528 req \u53c2\u6570\u5c06\u5305\u542b\u4e00\u4e2a user \u5c5e\u6027(\u5728 passport-local \u8eab\u4efd\u9a8c\u8bc1\u6d41\u7a0b\u4e2d\u7531 Passport \u586b\u5145) \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u73b0\u5728\u7ec8\u4e8e\u53ef\u4ee5\u751f\u6210\u771f\u6b63\u7684 JWT\uff0c\u5e76\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fd4\u56de\u5b83\u3002 \u4e3a\u4e86\u4fdd\u6301\u670d\u52a1\u7684\u6574\u6d01\u6a21\u5757\u5316\uff0c\u6211\u4eec\u5c06\u5728 authService \u4e2d\u5904\u7406 JWT \u7684\u751f\u6210\u3002 \u6253\u5f00 auth \u6587\u4ef6\u5939\u4e2d\u7684 auth.service.ts \u6587\u4ef6\uff0c\u6dfb\u52a0 login() \u65b9\u6cd5\uff0c\u5e76\u5bfc\u5165 JwtService \uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( auth / auth . service ) import { Injectable } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; import { JwtService } from '@nestjs/jwt' ; @Injectable () export class AuthService { constructor ( private usersService : UsersService , private jwtService : JwtService ) {} async validateUser ( username : string , pass : string ) : Promise < any > { const user = await this . usersService . findOne ( username ); if ( user && user . password === pass ) { const { password , ... result } = user ; return result ; } return null ; } async login ( user : any ) { const payload = { username : user.username , sub : user.userId }; return { access_token : this.jwtService.sign ( payload ), }; } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { UsersService } from '../users/users.service' ; import { JwtService } from '@nestjs/jwt' ; @Dependencies ( UsersService , JwtService ) @Injectable () export class AuthService { constructor ( usersService , jwtService ) { this . usersService = usersService ; this . jwtService = jwtService ; } async validateUser ( username , pass ) { const user = await this . usersService . findOne ( username ); if ( user && user . password === pass ) { const { password , ... result } = user ; return result ; } return null ; } async login ( user ) { const payload = { username : user.username , sub : user.userId }; return { access_token : this.jwtService.sign ( payload ), }; } } \u6211\u4eec\u4f7f\u7528 @nestjs/jwt \u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a sign() \u51fd\u6570\u6765\u4ece user \u5bf9\u8c61\u5c5e\u6027\u7684\u5b50\u96c6\u751f\u6210\u6211\u4eec\u7684 jwt\uff0c\u7136\u540e\u6211\u4eec\u8fd4\u56de\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\uff0c\u5e26\u6709\u4e00\u4e2a access_token \u5c5e\u6027\u3002 \u6ce8\u610f:\u6211\u4eec\u9009\u62e9\u5c5e\u6027\u540d sub \u6765\u4fdd\u5b58\u6211\u4eec\u7684 userId \u503c\uff0c\u4ee5\u4e0e JWT \u6807\u51c6\u4fdd\u6301\u4e00\u81f4\u3002 \u4e0d\u8981\u5fd8\u8bb0\u5c06 JwtService \u63d0\u4f9b\u5668\u6ce8\u5165\u5230 AuthService \u4e2d\u3002 \u73b0\u5728\u6211\u4eec\u9700\u8981\u66f4\u65b0 AuthModule \u6765\u5bfc\u5165\u65b0\u7684\u4f9d\u8d56\u9879\uff0c\u5e76\u914d\u7f6e JwtModule \u3002 \u9996\u5148,\u521b\u5efa\u7684\u5e38\u6570\u3002\u5728 auth \u6587\u4ef6\u5939\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801: @ @filename ( auth / constants ) export const jwtConstants = { secret : 'secretKey' , }; @ @switch export const jwtConstants = { secret : 'secretKey' , }; \u6211\u4eec\u5c06\u4f7f\u7528\u5b83\u5728 JWT \u7b7e\u540d\u548c\u9a8c\u8bc1\u6b65\u9aa4\u4e4b\u95f4\u5171\u4eab\u5bc6\u94a5\u3002 Warning Warning \u4e0d\u8981\u516c\u5f00\u6b64\u5bc6\u94a5 \u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u660e\u786e\u4ee3\u7801\u5728\u505a\u4ec0\u4e48\uff0c\u4f46\u662f\u5728\u751f\u4ea7\u7cfb\u7edf\u4e2d\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528\u9002\u5f53\u7684\u63aa\u65bd\u6765\u4fdd\u62a4\u8fd9\u4e2a\u5bc6\u94a5\uff0c\u4f8b\u5982\u5bc6\u94a5\u5e93\u3001\u73af\u5883\u53d8\u91cf\u6216\u914d\u7f6e\u670d\u52a1\u3002 \u73b0\u5728\uff0c\u6253\u5f00 auth.module.ts \u6587\u4ef6\u5939\u4e2d\u7684 auth \uff0c\u5e76\u5c06\u5176\u66f4\u65b0\u4e3a\u5982\u4e0b\u6240\u793a: @ @filename ( auth / auth . module ) import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { LocalStrategy } from './local.strategy' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { JwtModule } from '@nestjs/jwt' ; import { jwtConstants } from './constants' ; @Module ({ imports : [ UsersModule , PassportModule , JwtModule . register ({ secret : jwtConstants.secret , signOptions : { expiresIn : '60s' }, }), ], providers : [ AuthService , LocalStrategy ], exports : [ AuthService ], }) export class AuthModule {} @ @switch import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { LocalStrategy } from './local.strategy' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { JwtModule } from '@nestjs/jwt' ; import { jwtConstants } from './constants' ; @Module ({ imports : [ UsersModule , PassportModule , JwtModule . register ({ secret : jwtConstants.secret , signOptions : { expiresIn : '60s' }, }), ], providers : [ AuthService , LocalStrategy ], exports : [ AuthService ], }) export class AuthModule {} \u6211\u4eec\u4f7f\u7528 register() \u6765\u914d\u7f6e JwtModule \uff0c\u4f20\u5165\u4e00\u4e2a\u914d\u7f6e\u5bf9\u8c61\u3002 \u6709\u5173 Nest JwtModule \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u8fd9\u91cc \uff0c\u6709\u5173\u53ef\u7528\u914d\u7f6e\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u8fd9\u91cc \u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0 /auth/login \u8def\u7531\u4ee5\u8fd4\u56de\u4e00\u4e2a JWT\u3002 @ @filename ( app . controller ) import { Controller , Request , Post , UseGuards } from '@nestjs/common' ; import { LocalAuthGuard } from './auth/local-auth.guard' ; import { AuthService } from './auth/auth.service' ; @Controller () export class AppController { constructor ( private authService : AuthService ) {} @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) async login ( @Request () req ) { return this . authService . login ( req . user ); } } @ @switch import { Controller , Bind , Request , Post , UseGuards } from '@nestjs/common' ; import { LocalAuthGuard } from './auth/local-auth.guard' ; import { AuthService } from './auth/auth.service' ; @Controller () export class AppController { constructor ( private authService : AuthService ) {} @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) @Bind ( Request ()) async login ( req ) { return this . authService . login ( req . user ); } } \u8ba9\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528 cURL \u6d4b\u8bd5\u6211\u4eec\u7684\u8def\u7531\u3002 \u4f60\u53ef\u4ee5\u7528 UsersService \u4e2d\u786c\u7f16\u7801\u7684\u4efb\u4f55 user \u5bf9\u8c61\u8fdb\u884c\u6d4b\u8bd5\u3002 $ # POST to /auth/login $ curl -X POST http://localhost:3000/auth/login -d '{\"username\": \"john\", \"password\": \"changeme\"}' -H \"Content-Type: application/json\" $ # result -> {\"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"} $ # Note: above JWT truncated","title":"JWT \u529f\u80fd"},{"location":"security/authentication/#jwt_1","text":"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u6211\u4eec\u7684\u6700\u7ec8\u9700\u6c42:\u901a\u8fc7\u8981\u6c42\u5728\u8bf7\u6c42\u4e2d\u63d0\u4f9b\u6709\u6548\u7684 JWT \u6765\u4fdd\u62a4\u7aef\u70b9\u3002 passport \u4e5f\u80fd\u5e2e\u5230\u6211\u4eec\u3002 \u5b83\u63d0\u4f9b\u4e86 passport-jwt \u7b56\u7565\u6765\u4f7f\u7528 JSON Web token \u4fdd\u62a4 RESTful \u7aef\u70b9\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a jwt.strategy \u7684\u6587\u4ef6\u3002\u5728 auth \u6587\u4ef6\u5939\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801: @ @filename ( auth / jwt . strategy ) import { ExtractJwt , Strategy } from 'passport-jwt' ; import { PassportStrategy } from '@nestjs/passport' ; import { Injectable } from '@nestjs/common' ; import { jwtConstants } from './constants' ; @Injectable () export class JwtStrategy extends PassportStrategy ( Strategy ) { constructor () { super ({ jwtFromRequest : ExtractJwt.fromAuthHeaderAsBearerToken (), ignoreExpiration : false , secretOrKey : jwtConstants.secret , }); } async validate ( payload : any ) { return { userId : payload.sub , username : payload.username }; } } @ @switch import { ExtractJwt , Strategy } from 'passport-jwt' ; import { PassportStrategy } from '@nestjs/passport' ; import { Injectable } from '@nestjs/common' ; import { jwtConstants } from './constants' ; @Injectable () export class JwtStrategy extends PassportStrategy ( Strategy ) { constructor () { super ({ jwtFromRequest : ExtractJwt.fromAuthHeaderAsBearerToken (), ignoreExpiration : false , secretOrKey : jwtConstants.secret , }); } async validate ( payload ) { return { userId : payload.sub , username : payload.username }; } } \u5728\u6211\u4eec\u7684 JwtStrategy \u4e2d\uff0c\u6211\u4eec\u9075\u5faa\u4e86\u524d\u9762\u63cf\u8ff0\u7684\u6240\u6709 Passport \u7b56\u7565\u7684\u76f8\u540c\u914d\u65b9\u3002 \u8fd9\u4e2a\u7b56\u7565\u9700\u8981\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u5728 super() \u8c03\u7528\u4e2d\u4f20\u5165\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u6765\u5b9e\u73b0\u3002 \u4f60\u53ef\u4ee5\u9605\u8bfb\u66f4\u591a\u53ef\u7528\u9009\u9879 \u8fd9\u91cc . \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e9b\u9009\u9879\u662f: jwtFromRequest : \u63d0\u4f9b\u4e86\u4ece Request \u4e2d\u63d0\u53d6 JWT \u7684\u65b9\u6cd5\u3002 \u6211\u4eec\u5c06\u4f7f\u7528\u6807\u51c6\u65b9\u6cd5\uff0c\u5728 API \u8bf7\u6c42\u7684 Authorization \u5934\u4e2d\u63d0\u4f9b\u627f\u8f7d\u4ee4\u724c\u3002 \u5176\u4ed6\u9009\u9879\u63cf\u8ff0 \u6b64\u5904 . ignoreExpiration : \u4e3a\u4e86\u660e\u786e\u8d77\u89c1\uff0c\u6211\u4eec\u9009\u62e9\u9ed8\u8ba4\u7684 false \u8bbe\u7f6e\uff0c\u5b83\u5c06\u786e\u4fdd JWT \u6ca1\u6709\u8fc7\u671f\u7684\u8d23\u4efb\u59d4\u6258\u7ed9 Passport \u6a21\u5757\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u7684\u8def\u7531\u4f7f\u7528\u8fc7\u671f\u7684 JWT \u63d0\u4f9b\uff0c\u5219\u8bf7\u6c42\u5c06\u88ab\u62d2\u7edd\uff0c\u5e76\u53d1\u9001 401 Unauthorized \u54cd\u5e94\u3002 passport \u65b9\u4fbf\u5730\u81ea\u52a8\u4e3a\u6211\u4eec\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002 secretOrKey : \u6211\u4eec\u4f7f\u7528\u6743\u5b9c\u4e4b\u8ba1\u6765\u4e3a\u4ee4\u724c\u7b7e\u540d\u63d0\u4f9b\u5bf9\u79f0\u5bc6\u94a5\u3002 \u5176\u4ed6\u9009\u9879\uff0c\u5982 pem \u7f16\u7801\u7684\u516c\u94a5\uff0c\u53ef\u80fd\u66f4\u9002\u5408\u4e8e\u751f\u4ea7\u5e94\u7528\u7a0b\u5e8f(\u8bf7\u53c2\u9605 \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u4fe1\u606f)\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u6b63\u5982\u524d\u9762\u6240\u8b66\u544a\u7684\uff0c \u4e0d\u8981\u516c\u5f00\u63ed\u9732\u8fd9\u4e2a\u5bc6\u94a5 \u3002 validate() \u65b9\u6cd5\u503c\u5f97\u8ba8\u8bba\u3002 \u5bf9\u4e8e jwt-strategy \uff0cPassport \u9996\u5148\u9a8c\u8bc1 JWT \u7684\u7b7e\u540d\u5e76\u89e3\u7801 JSON\u3002 \u7136\u540e\u5b83\u8c03\u7528\u6211\u4eec\u7684 validate() \u65b9\u6cd5\uff0c\u5c06\u89e3\u7801\u540e\u7684 JSON \u4f5c\u4e3a\u5b83\u7684\u5355\u4e2a\u53c2\u6570\u4f20\u9012\u3002 \u57fa\u4e8e JWT \u7b7e\u540d\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c \u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u63a5\u6536\u5230\u4e00\u4e2a\u6709\u6548\u7684\u4ee4\u724c \uff0c\u8fd9\u4e2a\u4ee4\u724c\u4e4b\u524d\u5df2\u7ecf\u7b7e\u540d\u5e76\u53d1\u7ed9\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u7528\u6237\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5bf9 validate() \u56de\u8c03\u51fd\u6570\u7684\u54cd\u5e94\u5f88\u7b80\u5355:\u6211\u4eec\u53ea\u8fd4\u56de\u4e00\u4e2a\u5305\u542b userId \u548c username \u5c5e\u6027\u7684\u5bf9\u8c61\u3002 \u518d\u56de\u60f3\u4e00\u4e0b\uff0cPassport \u5c06\u57fa\u4e8e validate() \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u6784\u5efa\u4e00\u4e2a user \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u5c5e\u6027\u9644\u52a0\u5230 Request \u5bf9\u8c61\u4e0a\u3002 \u540c\u6837\u503c\u5f97\u6307\u51fa\u7684\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7ed9\u6211\u4eec\u7559\u4e0b\u4e86\u5c06\u5176\u4ed6\u4e1a\u52a1\u903b\u8f91\u6ce8\u5165\u6d41\u7a0b\u7684\u7a7a\u95f4(\u53ef\u4ee5\u8bf4\u662f \u94a9\u5b50 )\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 validate() \u65b9\u6cd5\u4e2d\u8fdb\u884c\u6570\u636e\u5e93\u67e5\u627e\uff0c\u4ee5\u63d0\u53d6\u7528\u6237\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u4ece\u800c\u5728 Request \u4e2d\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684 user \u5bf9\u8c61\u3002 \u8fd9\u4e5f\u662f\u6211\u4eec\u53ef\u4ee5\u51b3\u5b9a\u8fdb\u884c\u8fdb\u4e00\u6b65\u4ee4\u724c\u9a8c\u8bc1\u7684\u5730\u65b9\uff0c\u4f8b\u5982\u5728\u5df2\u64a4\u9500\u4ee4\u724c\u5217\u8868\u4e2d\u67e5\u627e userId \uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u6267\u884c\u4ee4\u724c\u64a4\u9500\u3002 \u6211\u4eec\u5728\u793a\u4f8b\u4ee3\u7801\u4e2d\u5b9e\u73b0\u7684\u6a21\u578b\u662f\u4e00\u4e2a\u5feb\u901f\u7684\u3001 \u65e0\u72b6\u6001\u7684 JWT \u6a21\u578b\uff0c\u5176\u4e2d\u6bcf\u4e2a API \u8c03\u7528\u90fd\u7acb\u5373\u6839\u636e\u6709\u6548\u7684 JWT \u7684\u5b58\u5728\u8fdb\u884c\u6388\u6743\uff0c\u5e76\u4e14\u8bf7\u6c42\u8005\u7684\u5c11\u91cf\u4fe1\u606f(\u5b83\u7684 userId \u548c \u7528\u6237\u540d )\u5728\u6211\u4eec\u7684\u8bf7\u6c42\u7ba1\u9053\u4e2d\u53ef\u7528\u3002 \u5728 AuthModule \u4e2d\u6dfb\u52a0\u65b0\u7684 JwtStrategy \u4f5c\u4e3a\u63d0\u4f9b\u5668: @ @filename ( auth / auth . module ) import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { LocalStrategy } from './local.strategy' ; import { JwtStrategy } from './jwt.strategy' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { JwtModule } from '@nestjs/jwt' ; import { jwtConstants } from './constants' ; @Module ({ imports : [ UsersModule , PassportModule , JwtModule . register ({ secret : jwtConstants.secret , signOptions : { expiresIn : '60s' }, }), ], providers : [ AuthService , LocalStrategy , JwtStrategy ], exports : [ AuthService ], }) export class AuthModule {} @ @switch import { Module } from '@nestjs/common' ; import { AuthService } from './auth.service' ; import { LocalStrategy } from './local.strategy' ; import { JwtStrategy } from './jwt.strategy' ; import { UsersModule } from '../users/users.module' ; import { PassportModule } from '@nestjs/passport' ; import { JwtModule } from '@nestjs/jwt' ; import { jwtConstants } from './constants' ; @Module ({ imports : [ UsersModule , PassportModule , JwtModule . register ({ secret : jwtConstants.secret , signOptions : { expiresIn : '60s' }, }), ], providers : [ AuthService , LocalStrategy , JwtStrategy ], exports : [ AuthService ], }) export class AuthModule {} \u901a\u8fc7\u5bfc\u5165\u6211\u4eec\u7b7e\u7f72 JWT \u65f6\u4f7f\u7528\u7684\u76f8\u540c\u5bc6\u94a5\uff0c\u6211\u4eec\u786e\u4fdd Passport \u6267\u884c\u7684 \u9a8c\u8bc1 \u9636\u6bb5\u548c AuthService \u6267\u884c\u7684 \u7b7e\u540d \u9636\u6bb5\u4f7f\u7528\u4e00\u4e2a\u516c\u5171\u5bc6\u94a5\u3002 \u6700\u540e\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 JwtAuthGuard \u7c7b\uff0c\u5b83\u6269\u5c55\u4e86\u5185\u7f6e\u7684 AuthGuard : @ @filename ( auth / jwt - auth . guard ) import { Injectable } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Injectable () export class JwtAuthGuard extends AuthGuard ( 'jwt' ) {}","title":"\u5b9e\u65bd\u8ba4\u8bc1 JWT"},{"location":"security/authentication/#jwt_2","text":"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u53d7\u4fdd\u62a4\u7684\u8def\u7531\u53ca\u5176\u76f8\u5173\u7684 Guard\u3002 \u6253\u5f00 app.controller.ts \u6587\u4ef6\u5e76\u66f4\u65b0\u5b83\uff0c\u5982\u4e0b\u56fe\u6240\u793a: @ @filename ( app . controller ) import { Controller , Get , Request , Post , UseGuards } from '@nestjs/common' ; import { JwtAuthGuard } from './auth/jwt-auth.guard' ; import { LocalAuthGuard } from './auth/local-auth.guard' ; import { AuthService } from './auth/auth.service' ; @Controller () export class AppController { constructor ( private authService : AuthService ) {} @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) async login ( @Request () req ) { return this . authService . login ( req . user ); } @UseGuards ( JwtAuthGuard ) @Get ( 'profile' ) getProfile ( @Request () req ) { return req . user ; } } @ @switch import { Controller , Dependencies , Bind , Get , Request , Post , UseGuards } from '@nestjs/common' ; import { JwtAuthGuard } from './auth/jwt-auth.guard' ; import { LocalAuthGuard } from './auth/local-auth.guard' ; import { AuthService } from './auth/auth.service' ; @Dependencies ( AuthService ) @Controller () export class AppController { constructor ( authService ) { this . authService = authService ; } @UseGuards ( LocalAuthGuard ) @Post ( 'auth/login' ) @Bind ( Request ()) async login ( req ) { return this . authService . login ( req . user ); } @UseGuards ( JwtAuthGuard ) @Get ( 'profile' ) @Bind ( Request ()) getProfile ( req ) { return req . user ; } } \u518d\u4e00\u6b21\uff0c\u6211\u4eec\u5e94\u7528\u4e86 @nestjs/passport \u6a21\u5757\u5728\u914d\u7f6e passport-jwt \u6a21\u5757\u65f6\u81ea\u52a8\u4e3a\u6211\u4eec\u63d0\u4f9b\u7684 AuthGuard \u3002 \u8fd9\u4e2a\u5b88\u536b\u88ab\u5b83\u7684\u9ed8\u8ba4\u540d\u79f0 jwt \u5f15\u7528\u3002 \u5f53\u6211\u4eec\u7684 GET /profile \u8def\u7531\u88ab\u547d\u4e2d\u65f6\uff0cGuard \u5c06\u81ea\u52a8\u8c03\u7528\u6211\u4eec\u7684 passport-jwt \u81ea\u5b9a\u4e49\u914d\u7f6e\u903b\u8f91\uff0c\u9a8c\u8bc1 JWT\uff0c\u5e76\u5c06 user \u5c5e\u6027\u5206\u914d\u7ed9 Request \u5bf9\u8c61\u3002 \u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\uff0c\u5e76\u4f7f\u7528 cURL \u6d4b\u8bd5\u8def\u7531\u3002 $ # GET /profile $ curl http://localhost:3000/profile $ # result -> {\"statusCode\":401,\"error\":\"Unauthorized\"} $ # POST /auth/login $ curl -X POST http://localhost:3000/auth/login -d '{\"username\": \"john\", \"password\": \"changeme\"}' -H \"Content-Type: application/json\" $ # result -> {\"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm... } $ # GET /profile using access_token returned from previous step as bearer code $ curl http://localhost:3000/profile -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm...\" $ # result -> {\"userId\":1,\"username\":\"john\"} \u6ce8\u610f\uff0c\u5728 AuthModule \u4e2d\uff0c\u6211\u4eec\u5c06 JWT \u914d\u7f6e\u4e3a\u201c60 \u79d2\u201d\u8fc7\u671f\u3002 \u8fd9\u4e2a\u8fc7\u671f\u65f6\u95f4\u53ef\u80fd\u592a\u77ed\u4e86\uff0c\u5904\u7406\u4ee4\u724c\u8fc7\u671f\u548c\u5237\u65b0\u7684\u8be6\u7ec6\u4fe1\u606f\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\u3002 \u7136\u800c\uff0c\u6211\u4eec\u9009\u62e9\u5b83\u662f\u4e3a\u4e86\u5c55\u793a jwt \u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u4ee5\u53ca passport-jwt \u7b56\u7565\u3002 \u5982\u679c\u4f60\u5728\u9a8c\u8bc1\u540e\u7b49\u5f85 60 \u79d2\u518d\u5c1d\u8bd5 GET /profile \u8bf7\u6c42\uff0c\u4f60\u4f1a\u6536\u5230\u4e00\u4e2a 401 Unauthorized \u7684\u54cd\u5e94\u3002 \u8fd9\u662f\u56e0\u4e3a Passport \u4f1a\u81ea\u52a8\u68c0\u67e5 JWT \u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u4ece\u800c\u4e3a\u60a8\u8282\u7701\u4e86\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8fd9\u6837\u505a\u7684\u9ebb\u70e6\u3002 \u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5b8c\u6210\u4e86 JWT \u8eab\u4efd\u9a8c\u8bc1\u5b9e\u73b0\u3002 JavaScript \u5ba2\u6237\u7aef(\u5982 Angular/React/Vue)\u548c\u5176\u4ed6 JavaScript \u5e94\u7528\uff0c\u73b0\u5728\u53ef\u4ee5\u5b89\u5168\u5730\u4e0e\u6211\u4eec\u7684 API Server \u8fdb\u884c\u8ba4\u8bc1\u548c\u901a\u4fe1\u4e86\u3002","title":"\u5b9e\u65bd\u4fdd\u62a4\u8def\u7531\u548c JWT \u7b56\u7565\u5b88\u536b"},{"location":"security/authentication/#_6","text":"\u4f60\u53ef\u4ee5\u5728\u672c\u7ae0\u627e\u5230\u5b8c\u6574\u7684\u4ee3\u7801\u7248\u672c \u8fd9\u91cc .","title":"\u793a\u4f8b"},{"location":"security/authentication/#_7","text":"\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u63d0\u4f9b\u7684 AuthGuard \u7c7b\u5c31\u8db3\u591f\u4e86\u3002 \u7136\u800c\uff0c\u5f53\u60a8\u60f3\u7b80\u5355\u5730\u6269\u5c55\u9ed8\u8ba4\u9519\u8bef\u5904\u7406\u6216\u8eab\u4efd\u9a8c\u8bc1\u903b\u8f91\u65f6\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u7528\u4f8b\u3002 \u4e3a\u6b64\uff0c\u60a8\u53ef\u4ee5\u6269\u5c55\u5185\u7f6e\u7c7b\u5e76\u5728\u5b50\u7c7b\u4e2d\u91cd\u5199\u65b9\u6cd5\u3002 import { ExecutionContext , Injectable , UnauthorizedException , } from '@nestjs/common' ; import { AuthGuard } from '@nestjs/passport' ; @Injectable () export class JwtAuthGuard extends AuthGuard ( 'jwt' ) { canActivate ( context : ExecutionContext ) { // Add your custom authentication logic here // for example, call super.logIn(request) to establish a session. return super . canActivate ( context ); } handleRequest ( err , user , info ) { // You can throw an exception based on either \"info\" or \"err\" arguments if ( err || ! user ) { throw err || new UnauthorizedException (); } return user ; } } \u9664\u4e86\u6269\u5c55\u9ed8\u8ba4\u7684\u9519\u8bef\u5904\u7406\u548c\u8eab\u4efd\u9a8c\u8bc1\u903b\u8f91\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5141\u8bb8\u8eab\u4efd\u9a8c\u8bc1\u901a\u8fc7\u4e00\u7cfb\u5217\u7b56\u7565\u3002 \u7b2c\u4e00\u4e2a\u6210\u529f\u7684\u7b56\u7565\uff0c\u91cd\u5b9a\u5411\uff0c\u6216\u9519\u8bef\u5c06\u505c\u6b62\u94fe\u3002 \u8eab\u4efd\u9a8c\u8bc1\u5931\u8d25\u5c06\u4f9d\u6b21\u901a\u8fc7\u6bcf\u4e2a\u7b56\u7565\uff0c\u5982\u679c\u6240\u6709\u7b56\u7565\u90fd\u5931\u8d25\uff0c\u5219\u6700\u7ec8\u5931\u8d25\u3002 export class JwtAuthGuard extends AuthGuard ([ 'strategy_jwt_1' , 'strategy_jwt_2' , '...' ]) { ... }","title":"\u6269\u5c55\u5b88\u536b"},{"location":"security/authentication/#_8","text":"\u5982\u679c\u4f60\u7684\u5927\u591a\u6570\u7aef\u70b9\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u88ab\u4fdd\u62a4\uff0c\u4f60\u53ef\u4ee5\u5c06\u8ba4\u8bc1\u5b88\u536b\u6ce8\u518c\u4e3a \u5168\u5c40\u5b88\u536b \uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u63a7\u5236\u5668\u4e0a\u4f7f\u7528 @UseGuards() \u88c5\u9970\u5668\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u6807\u8bb0\u54ea\u4e9b\u8def\u7531\u5e94\u8be5\u662f\u516c\u5171\u7684\u3002 \u9996\u5148\uff0c\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020(\u5728\u4efb\u4f55\u6a21\u5757\u4e2d)\u5c06 JwtAuthGuard \u6ce8\u518c\u4e3a\u5168\u5c40\u4fdd\u62a4: providers : [ { provide : APP_GUARD , useClass : JwtAuthGuard , }, ], \u6709\u4e86\u8fd9\u4e2a\uff0cNest \u4f1a\u81ea\u52a8\u7ed1\u5b9a JwtAuthGuard \u5230\u6240\u6709\u7684\u7aef\u70b9\u3002 \u73b0\u5728\u6211\u4eec\u5fc5\u987b\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\u6765\u5c06\u8def\u7531\u58f0\u660e\u4e3a\u516c\u5171\u7684\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 SetMetadata \u88c5\u9970\u5668\u5de5\u5382\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\u3002 import { SetMetadata } from '@nestjs/common' ; export const IS_PUBLIC_KEY = 'isPublic' ; export const Public = () => SetMetadata ( IS_PUBLIC_KEY , true ); \u5728\u4e0a\u9762\u7684\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5bfc\u51fa\u4e86\u4e24\u4e2a\u5e38\u91cf\u3002 \u4e00\u4e2a\u662f\u6211\u4eec\u7684\u5143\u6570\u636e\u952e IS_PUBLIC_KEY\uff0c\u53e6\u4e00\u4e2a\u662f\u6211\u4eec\u7684\u65b0\u88c5\u9970\u5668\u672c\u8eab\uff0c\u6211\u4eec\u5c06\u79f0\u4e4b\u4e3a Public (\u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u547d\u540d\u4e3a SkipAuth \u6216 AllowAnon \uff0c\u53ea\u8981\u9002\u5408\u4f60\u7684\u9879\u76ee)\u3002 \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 @Public() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u88c5\u9970\u4efb\u4f55\u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: @Public () @Get () findAll () { return []; } \u6700\u540e\uff0c\u5f53 isPublic \u5143\u6570\u636e\u88ab\u53d1\u73b0\u65f6\uff0c\u6211\u4eec\u9700\u8981 JwtAuthGuard \u8fd4\u56de true \u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Reflector \u7c7b(\u9605\u8bfb\u66f4\u591a \u5728\u8fd9\u91cc ). @Injectable () export class JwtAuthGuard extends AuthGuard ( 'jwt' ) { constructor ( private reflector : Reflector ) { super (); } canActivate ( context : ExecutionContext ) { const isPublic = this . reflector . getAllAndOverride < boolean > ( IS_PUBLIC_KEY , [ context . getHandler (), context . getClass (), ]); if ( isPublic ) { return true ; } return super . canActivate ( context ); } }","title":"\u4f7f\u5168\u5c40\u8ba4\u8bc1"},{"location":"security/authentication/#_9","text":"passport API \u57fa\u4e8e\u5c06\u7b56\u7565\u6ce8\u518c\u5230\u5e93\u7684\u5168\u5c40\u5b9e\u4f8b\u3002 \u56e0\u6b64\uff0c\u7b56\u7565\u7684\u8bbe\u8ba1\u5e76\u4e0d\u662f\u4e3a\u4e86\u62e5\u6709\u4e0e\u8bf7\u6c42\u76f8\u5173\u7684\u9009\u9879\uff0c\u6216\u8005\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u52a8\u6001\u5b9e\u4f8b\u5316(\u9605\u8bfb\u66f4\u591a\u5173\u4e8e \u8bf7\u6c42\u4f5c\u7528\u57df \u63d0\u4f9b\u5668\u7684\u4fe1\u606f)\u3002 \u5f53\u4f60\u5c06\u7b56\u7565\u914d\u7f6e\u4e3a\u8bf7\u6c42\u4f5c\u7528\u57df\u65f6\uff0cNest \u5c06\u4e0d\u4f1a\u5b9e\u4f8b\u5316\u5b83\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u7ed1\u5b9a\u5230\u4efb\u4f55\u7279\u5b9a\u7684\u8def\u7531\u3002 \u6ca1\u6709\u7269\u7406\u65b9\u6cd5\u6765\u786e\u5b9a\u6bcf\u4e2a\u8bf7\u6c42\u5e94\u8be5\u6267\u884c\u54ea\u4e9b\u201c\u8bf7\u6c42\u8303\u56f4\u201d\u7684\u7b56\u7565\u3002 \u4f46\u662f\uff0c\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5728\u7b56\u7565\u4e2d\u52a8\u6001\u5730\u89e3\u6790\u8bf7\u6c42\u8303\u56f4\u7684\u63d0\u4f9b\u5668\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5229\u7528\u4e86 module reference \u7279\u6027\u3002 \u9996\u5148\uff0c\u6253\u5f00 local.strategy.ts \u6587\u4ef6\uff0c\u4ee5\u6b63\u5e38\u65b9\u5f0f\u6ce8\u5165 ModuleRef : constructor ( private module Ref : ModuleRef ) { super ({ passReqToCallback : true , }); } info Hint ModuleRef \u7c7b\u662f\u4ece @nestjs/core \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u786e\u4fdd\u5c06 passReqToCallback \u914d\u7f6e\u5c5e\u6027\u8bbe\u7f6e\u4e3a true \uff0c\u5982\u4e0a\u6240\u793a\u3002 \u5728\u4e0b\u4e00\u6b65\u4e2d\uff0c\u8bf7\u6c42\u5b9e\u4f8b\u5c06\u88ab\u7528\u6765\u83b7\u53d6\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u6807\u8bc6\u7b26\uff0c\u800c\u4e0d\u662f\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26(\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u8bf7\u6c42\u4e0a\u4e0b\u6587\u7684\u4fe1\u606f here )\u3002 \u73b0\u5728\uff0c\u5728 LocalStrategy \u7c7b\u7684 validate() \u65b9\u6cd5\u4e2d\uff0c\u4f7f\u7528 ContextIdFactory \u7c7b\u7684 getByRequest() \u65b9\u6cd5\u521b\u5efa\u57fa\u4e8e\u8bf7\u6c42\u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587 id\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 resolve() \u8c03\u7528: async validate ( request : Request , username : string , password : string , ) { const contextId = ContextIdFactory . getByRequest ( request ); // \"AuthService\" is a request-scoped provider const authService = await this . module Ref.resolve ( AuthService , contextId ); ... } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c resolve() \u65b9\u6cd5\u5c06\u5f02\u6b65\u8fd4\u56de AuthService \u63d0\u4f9b\u5668\u7684\u8bf7\u6c42\u8303\u56f4\u7684\u5b9e\u4f8b(\u6211\u4eec\u5047\u8bbe AuthService \u88ab\u6807\u8bb0\u4e3a\u8bf7\u6c42\u8303\u56f4\u7684\u63d0\u4f9b\u5668)\u3002","title":"\u8bf7\u6c42\u8303\u56f4\u5185\u7684\u7b56\u7565"},{"location":"security/authentication/#passport","text":"\u4efb\u4f55\u6807\u51c6\u7684 Passport \u5b9a\u5236\u9009\u9879\u90fd\u53ef\u4ee5\u901a\u8fc7\u540c\u6837\u7684\u65b9\u5f0f\u4f20\u9012\uff0c\u4f7f\u7528 register() \u65b9\u6cd5\u3002 \u53ef\u7528\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u6b63\u5728\u5b9e\u65bd\u7684\u6218\u7565\u3002 \u4f8b\u5982: PassportModule . register ({ session : true }); \u60a8\u8fd8\u53ef\u4ee5\u5728\u7b56\u7565\u7684\u6784\u9020\u51fd\u6570\u4e2d\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u6765\u914d\u7f6e\u5b83\u4eec\u3002 \u5bf9\u4e8e local \u7b56\u7565\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f8b\u5982: constructor ( private authService : AuthService ) { super ({ usernameField : 'email' , passwordField : 'password' , }); } \u67e5\u770b\u5b98\u65b9 Passport \u7f51\u7ad9 \u7684\u5c5e\u6027\u540d\u79f0\u3002","title":"\u5b9a\u5236\u7684 Passport"},{"location":"security/authentication/#_10","text":"\u5f53\u5b9e\u73b0\u4e00\u4e2a\u7b56\u7565\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed9\u00b7 PassportStrategy \u00b7\u51fd\u6570\u6765\u4e3a\u5b83\u63d0\u4f9b\u4e00\u4e2a\u540d\u79f0\u3002 \u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u6bcf\u4e2a\u7b56\u7565\u5c06\u6709\u4e00\u4e2a\u9ed8\u8ba4\u540d\u79f0(\u4f8b\u5982\uff0c jwt \u4e3a jwt-strategy ): export class JwtStrategy extends PassportStrategy ( Strategy , 'myjwt' ) \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u88c5\u9970\u5668\u6765\u5f15\u7528\u5b83\uff0c\u6bd4\u5982 @UseGuards(AuthGuard('myjwt')) \u3002","title":"\u547d\u540d\u7b56\u7565"},{"location":"security/authentication/#graphql","text":"\u4e3a\u4e86\u5728 GraphQL \u4e2d\u4f7f\u7528 AuthGuard\uff0c\u6269\u5c55\u5185\u7f6e\u7684 AuthGuard \u7c7b\u5e76\u8986\u76d6 getRequest()\u65b9\u6cd5\u3002 @Injectable () export class GqlAuthGuard extends AuthGuard ( 'jwt' ) { getRequest ( context : ExecutionContext ) { const ctx = GqlExecutionContext . create ( context ); return ctx . getContext (). req ; } } \u8981\u5728\u4f60\u7684 graphql \u89e3\u6790\u5668\u4e2d\u83b7\u53d6\u5f53\u524d\u8ba4\u8bc1\u7684\u7528\u6237\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a @CurrentUser() \u88c5\u9970\u5668: import { createParamDecorator , ExecutionContext } from '@nestjs/common' ; import { GqlExecutionContext } from '@nestjs/graphql' ; export const CurrentUser = createParamDecorator ( ( data : unknown , context : ExecutionContext ) => { const ctx = GqlExecutionContext . create ( context ); return ctx . getContext (). req . user ; }, ); \u8981\u5728\u4f60\u7684\u89e3\u6790\u5668\u4e2d\u4f7f\u7528\u4e0a\u8ff0\u88c5\u9970\u5668\uff0c\u8bf7\u786e\u4fdd\u5c06\u5176\u4f5c\u4e3a\u4f60\u7684\u67e5\u8be2\u6216\u53d8\u5f02\u7684\u53c2\u6570: @Query ( returns => User ) @UseGuards ( GqlAuthGuard ) whoAmI ( @CurrentUser () user : User ) { return this . usersService . findById ( user . id ); }","title":"GraphQL"},{"location":"security/authorization/","text":"\u6388\u6743 \u00b6 \u6388\u6743 \u662f\u6307\u51b3\u5b9a\u7528\u6237\u80fd\u591f\u505a\u4ec0\u4e48\u7684\u8fc7\u7a0b\u3002 \u4f8b\u5982\uff0c\u5141\u8bb8\u7ba1\u7406\u7528\u6237\u521b\u5efa\u3001\u7f16\u8f91\u548c\u5220\u9664\u5e16\u5b50\u3002 \u975e\u7ba1\u7406\u5458\u7528\u6237\u53ea\u88ab\u6388\u6743\u9605\u8bfb\u5e16\u5b50\u3002 \u6388\u6743\u662f\u6b63\u4ea4\u7684\uff0c\u5e76\u4e14\u72ec\u7acb\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4f46\u662f\uff0c\u6388\u6743\u9700\u8981\u4e00\u79cd\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u3002 \u5904\u7406\u6388\u6743\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u548c\u7b56\u7565\u3002 \u4efb\u4f55\u9879\u76ee\u6240\u91c7\u7528\u7684\u65b9\u6cd5\u53d6\u51b3\u4e8e\u5176\u7279\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u672c\u7ae0\u4ecb\u7ecd\u4e86\u51e0\u79cd\u6388\u6743\u65b9\u6cd5\uff0c\u5b83\u4eec\u53ef\u4ee5\u9002\u5e94\u5404\u79cd\u4e0d\u540c\u7684\u9700\u6c42\u3002 \u57fa\u4e8e RBAC \u5b9e\u73b0 \u00b6 \u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236( RBAC )\u662f\u56f4\u7ed5\u89d2\u8272\u548c\u7279\u6743\u5b9a\u4e49\u7684\u7b56\u7565\u65e0\u5173\u7684\u8bbf\u95ee\u63a7\u5236\u673a\u5236\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u5982\u4f55\u4f7f\u7528 Nest guards \u5b9e\u73b0\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684 RBAC \u673a\u5236\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5728\u7cfb\u7edf\u4e2d\u521b\u5efa\u4e00\u4e2a\u8868\u793a\u89d2\u8272\u7684 Role \u679a\u4e3e: @ @filename ( role . enum ) export enum Role { User = 'user' , Admin = 'admin' , } info Hint \u5728\u66f4\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u5c06\u89d2\u8272\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u6216\u8005\u4ece\u5916\u90e8\u8eab\u4efd\u9a8c\u8bc1\u63d0\u4f9b\u8005\u83b7\u53d6\u89d2\u8272\u3002 \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a @Roles() \u88c5\u9970\u5668\u3002 \u8be5\u88c5\u9970\u5668\u5141\u8bb8\u6307\u5b9a\u8bbf\u95ee\u7279\u5b9a\u8d44\u6e90\u6240\u9700\u7684\u89d2\u8272\u3002 @ @filename ( roles . decorator ) import { SetMetadata } from '@nestjs/common' ; import { Role } from '../enums/role.enum' ; export const ROLES_KEY = 'roles' ; export const Roles = ( ...roles : Role []) => SetMetadata ( ROLES_KEY , roles ); @ @switch import { SetMetadata } from '@nestjs/common' ; export const ROLES_KEY = 'roles' ; export const Roles = (... roles ) => SetMetadata ( ROLES_KEY , roles ); \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 @Roles() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u88c5\u9970\u4efb\u4f55\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 @ @filename ( cats . controller ) @Post () @Roles ( Role . Admin ) create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @Roles ( Role . Admin ) @Bind ( Body ()) create ( createCatDto ) { this . catsService . create ( createCatDto ); } \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a RolesGuard \u7c7b\uff0c\u5b83\u5c06\u628a\u5206\u914d\u7ed9\u5f53\u524d\u7528\u6237\u7684\u89d2\u8272\u4e0e\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u8def\u7531\u6240\u9700\u8981\u7684\u5b9e\u9645\u89d2\u8272\u8fdb\u884c\u6bd4\u8f83\u3002 \u4e3a\u4e86\u8bbf\u95ee\u8def\u7531\u7684\u89d2\u8272(\u81ea\u5b9a\u4e49\u5143\u6570\u636e)\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Reflector helper \u7c7b\uff0c\u5b83\u662f\u7531\u6846\u67b6\u63d0\u4f9b\u7684\uff0c\u4ece @nestjs/core \u5305\u4e2d\u516c\u5f00\u7684\u3002 @ @filename ( roles . guard ) import { Injectable , CanActivate , ExecutionContext } from '@nestjs/common' ; import { Reflector } from '@nestjs/core' ; @Injectable () export class RolesGuard implements CanActivate { constructor ( private reflector : Reflector ) {} canActivate ( context : ExecutionContext ) : boolean { const requiredRoles = this . reflector . getAllAndOverride < Role [] > ( ROLES_KEY , [ context . getHandler (), context . getClass (), ]); if ( ! requiredRoles ) { return true ; } const { user } = context . switchToHttp (). getRequest (); return requiredRoles . some (( role ) => user . roles ? . includes ( role )); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { Reflector } from '@nestjs/core' ; @Injectable () @Dependencies ( Reflector ) export class RolesGuard { constructor ( reflector ) { this . reflector = reflector ; } canActivate ( context ) { const requiredRoles = this . reflector . getAllAndOverride ( ROLES_KEY , [ context . getHandler (), context . getClass (), ]); if ( ! requiredRoles ) { return true ; } const { user } = context . switchToHttp (). getRequest (); return requiredRoles . some (( role ) => user . roles . includes ( role )); } } info Hint \u8bf7\u53c2\u9605\u6267\u884c\u4e0a\u4e0b\u6587\u7ae0\u8282\u7684 \u53cd\u5c04\u548c\u5143\u6570\u636e \u5c0f\u8282\uff0c\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u4ee5\u4e0a\u4e0b\u6587\u654f\u611f\u7684\u65b9\u5f0f\u4f7f\u7528 Reflector \u7684\u7ec6\u8282\u3002 warning Notice \u8fd9\u4e2a\u4f8b\u5b50\u88ab\u547d\u540d\u4e3a\" basic \"\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5728\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7ea7\u522b\u68c0\u67e5\u89d2\u8272\u7684\u5b58\u5728\u3002 \u5728\u73b0\u5b9e\u4e16\u754c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e9b\u6d89\u53ca\u591a\u4e2a\u64cd\u4f5c\u7684\u7aef\u70b9/\u5904\u7406\u7a0b\u5e8f\uff0c\u5176\u4e2d\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u9700\u8981\u4e00\u7ec4\u7279\u5b9a\u7684\u6743\u9650\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5fc5\u987b\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\u6765\u68c0\u67e5\u4e1a\u52a1\u903b\u8f91\u4e2d\u7684\u89d2\u8272\uff0c\u8fd9\u4f7f\u7ef4\u62a4\u53d8\u5f97\u6709\u4e9b\u56f0\u96be\uff0c\u56e0\u4e3a\u6ca1\u6709\u96c6\u4e2d\u7684\u5730\u65b9\u5c06\u6743\u9650\u4e0e\u7279\u5b9a\u7684\u64cd\u4f5c\u5173\u8054\u8d77\u6765\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe request.user \u5305\u542b\u7528\u6237\u5b9e\u4f8b\u548c\u5141\u8bb8\u7684\u89d2\u8272(\u5728 roles \u5c5e\u6027\u4e0b)\u3002 \u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u5728\u4f60\u7684\u81ea\u5b9a\u4e49\u7684 \u8eab\u4efd\u9a8c\u8bc1\u4fdd\u62a4 \u4e2d\u5efa\u7acb\u8fd9\u79cd\u5173\u8054-\u8bf7\u53c2\u9605 authentication \u7ae0\u8282\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 \u4e3a\u4e86\u786e\u4fdd\u8fd9\u4e2a\u4f8b\u5b50\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f60\u7684 User \u7c7b\u5fc5\u987b\u5982\u4e0b\u6240\u793a: class User { // ...other properties roles : Role []; } \u6700\u540e\uff0c\u786e\u4fdd\u6ce8\u518c RolesGuard \uff0c\u4f8b\u5982\uff0c\u5728\u63a7\u5236\u5668\u7ea7\u522b\u6216\u5168\u5c40: providers : [ { provide : APP_GUARD , useClass : RolesGuard , }, ], \u5f53\u4e00\u4e2a\u6743\u9650\u4e0d\u8db3\u7684\u7528\u6237\u8bf7\u6c42\u4e00\u4e2a\u7aef\u70b9\u65f6\uff0cNest \u81ea\u52a8\u8fd4\u56de\u4ee5\u4e0b\u54cd\u5e94: { \"statusCode\" : 403 , \"message\" : \"Forbidden resource\" , \"error\" : \"Forbidden\" } info Hint \u5982\u679c\u4f60\u60f3\u8fd4\u56de\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u4f60\u5e94\u8be5\u629b\u51fa\u4f60\u81ea\u5df1\u7684\u7279\u5b9a\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u3002 \u58f0\u660e\u5f0f\u6388\u6743 \u00b6 \u521b\u5efa\u6807\u8bc6\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u5206\u914d\u7ed9\u53d7\u4fe1\u4efb\u65b9\u53d1\u51fa\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u58f0\u660e\u3002 claim \u662f\u4e00\u4e2a\u540d\u79f0-\u503c\u5bf9\uff0c\u5b83\u8868\u793a\u4e3b\u8bed\u53ef\u4ee5\u505a\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u4e3b\u8bed\u662f\u4ec0\u4e48\u3002 \u8981\u5728 Nest \u4e2d\u5b9e\u73b0\u57fa\u4e8e\u58f0\u660e\u7684\u6388\u6743\uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u6211\u4eec\u5728\u4e0a\u9762 RBAC \u5c0f\u8282\u4e2d\u5c55\u793a\u7684\u76f8\u540c\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f46\u6709\u4e00\u4e2a\u663e\u8457\u7684\u533a\u522b:\u60a8\u5e94\u8be5\u6bd4\u8f83 \u6743\u9650 \uff0c\u800c\u4e0d\u662f\u68c0\u67e5\u7279\u5b9a\u7684\u89d2\u8272\u3002 \u6bcf\u4e2a\u7528\u6237\u90fd\u6709\u4e00\u7ec4\u88ab\u5206\u914d\u7684\u6743\u9650\u3002 \u540c\u6837\uff0c\u6bcf\u4e2a\u8d44\u6e90/\u7aef\u70b9\u5c06\u5b9a\u4e49\u9700\u8981\u54ea\u4e9b\u6743\u9650(\u4f8b\u5982\uff0c\u901a\u8fc7\u4e13\u7528\u7684 @RequirePermissions() \u88c5\u9970\u5668)\u6765\u8bbf\u95ee\u5b83\u4eec\u3002 @ @filename ( cats . controller ) @Post () @RequirePermissions ( Permission . CREATE_CAT ) create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @RequirePermissions ( Permission . CREATE_CAT ) @Bind ( Body ()) create ( createCatDto ) { this . catsService . create ( createCatDto ); } info Hint \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c Permission (\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728 RBAC \u90e8\u5206\u4e2d\u5c55\u793a\u7684 Role )\u662f\u4e00\u4e2a TypeScript enum\uff0c\u5b83\u5305\u542b\u4e86\u4f60\u7cfb\u7edf\u4e2d\u6240\u6709\u53ef\u7528\u7684\u6743\u9650\u3002 \u6574\u5408 CASL \u00b6 CASL \u662f\u4e00\u4e2a\u540c\u6784\u7684\u6388\u6743\u5e93\uff0c\u5b83\u9650\u5236\u4e86\u7ed9\u5b9a\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e9b\u8d44\u6e90\u3002 \u5b83\u88ab\u8bbe\u8ba1\u6210\u53ef\u589e\u91cf\u91c7\u7528\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u57fa\u4e8e\u7b80\u5355\u58f0\u660e\u3001\u5168\u529f\u80fd\u4e3b\u9898\u548c\u57fa\u4e8e\u5c5e\u6027\u7684\u6388\u6743\u4e4b\u95f4\u8fdb\u884c\u4f38\u7f29\u3002 \u9996\u5148\uff0c\u5b89\u88c5 @casl/ability \u5305: $ npm i @casl/ability info Hint \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u4e86 CASL\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u5e93\uff0c\u5982 accesscontrol \u6216 acl \uff0c\u8fd9\u53d6\u51b3\u4e8e\u60a8\u7684\u9996\u9009\u9879\u548c\u9879\u76ee\u9700\u6c42\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4e3a\u4e86\u8bf4\u660e CASL \u7684\u673a\u5236\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e24\u4e2a\u5b9e\u4f53\u7c7b: User \u548c Article \u3002 class User { id : number ; isAdmin : boolean ; } User \u7c7b\u7531\u4e24\u4e2a\u5c5e\u6027\u7ec4\u6210\uff0c id \u662f\u552f\u4e00\u7684\u7528\u6237\u6807\u8bc6\u7b26\uff0c isAdmin \u8868\u793a\u7528\u6237\u662f\u5426\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u3002 class Article { id : number ; isPublished : boolean ; authorId : number ; } Article \u7c7b\u6709\u4e09\u4e2a\u5c5e\u6027\uff0c\u5206\u522b\u662f id \u3001 isPublished \u548c authorId \u3002 id \u662f\u6587\u7ae0\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c isPublished \u8868\u793a\u6587\u7ae0\u662f\u5426\u5df2\u7ecf\u53d1\u5e03\uff0c\u800c authorId \u662f\u64b0\u5199\u6587\u7ae0\u7684\u7528\u6237\u7684 id\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u56de\u987e\u5e76\u7cbe\u70bc\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u9700\u6c42: \u7ba1\u7406\u5458\u53ef\u4ee5\u7ba1\u7406(\u521b\u5efa/\u8bfb\u53d6/\u66f4\u65b0/\u5220\u9664)\u6240\u6709\u5b9e\u4f53 \u7528\u6237\u5bf9\u6240\u6709\u5185\u5bb9\u90fd\u5177\u6709\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650 \u7528\u6237\u53ef\u4ee5\u66f4\u65b0\u4ed6\u4eec\u7684\u6587\u7ae0 ( article.authorId === userId ) \u65e0\u6cd5\u5220\u9664\u5df2\u53d1\u5e03\u7684\u9879\u76ee( article.isPublished === true ) \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u521b\u5efa\u4e00\u4e2a Action \u679a\u4e3e\u5f00\u59cb\uff0c\u5b83\u8868\u793a\u7528\u6237\u53ef\u4ee5\u5bf9\u5b9e\u4f53\u6267\u884c\u7684\u6240\u6709\u53ef\u80fd\u7684\u64cd\u4f5c: export enum Action { Manage = 'manage' , Create = 'create' , Read = 'read' , Update = 'update' , Delete = 'delete' , } warning Notice manage \u662f CASL \u4e2d\u7684\u4e00\u4e2a\u7279\u6b8a\u5173\u952e\u5b57\uff0c\u5b83\u8868\u793a \u4efb\u4f55 \u64cd\u4f5c\u3002 \u4e3a\u4e86\u5c01\u88c5 CASL \u5e93\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u751f\u6210 CaslModule \u548c CaslAbilityFactory \u3002 $ nest g module casl $ nest g class casl/casl-ability.factory \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 CaslAbilityFactory \u4e0a\u5b9a\u4e49 createForUser() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u5c06\u4e3a\u7ed9\u5b9a\u7684\u7528\u6237\u521b\u5efa Ability \u5bf9\u8c61: type Subjects = InferSubjects < typeof Article | typeof User > | 'all' ; export type AppAbility = Ability < [ Action , Subjects ] > ; @Injectable () export class CaslAbilityFactory { createForUser ( user : User ) { const { can , cannot , build } = new AbilityBuilder < Ability < [ Action , Subjects ] > > ( Ability as AbilityClass < AppAbility > ); if ( user . isAdmin ) { can ( Action . Manage , 'all' ); // read-write access to everything } else { can ( Action . Read , 'all' ); // read-only access to everything } can ( Action . Update , Article , { authorId : user.id }); cannot ( Action . Delete , Article , { isPublished : true }); return build ({ // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details detectSubjectType : ( item ) => item . constructor as ExtractSubjectType < Subjects > , }); } } warning Notice all \u662f CASL \u4e2d\u4e00\u4e2a\u7279\u6b8a\u7684\u5173\u952e\u5b57\uff0c\u4ee3\u8868 \u4efb\u4f55\u4e3b\u9898 \u3002 info Hint Ability \uff0c AbilityBuilder \uff0c AbilityClass \u548c ExtractSubjectType \u7c7b\u4ece @casl/ Ability \u5305\u4e2d\u5bfc\u51fa\u3002 info Hint detectSubjectType \u9009\u9879\u8ba9 CASL \u4e86\u89e3\u5982\u4f55\u4ece\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e3b\u9898\u7c7b\u578b\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb CASL \u6587\u6863 \u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 AbilityBuilder \u7c7b\u521b\u5efa\u4e86 Ability \u5b9e\u4f8b\u3002 \u6b63\u5982\u4f60\u53ef\u80fd\u731c\u5230\u7684\uff0ccan \u548c cannot \u63a5\u53d7\u76f8\u540c\u7684\u53c2\u6570\uff0c\u4f46\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0ccan \u5141\u8bb8\u5bf9\u6307\u5b9a\u7684\u4e3b\u9898\u505a\u4e00\u4e2a\u52a8\u4f5c\uff0c\u800c cannot \u7981\u6b62\u3002 \u4e24\u8005\u90fd\u53ef\u4ee5\u63a5\u53d7\u6700\u591a 4 \u4e2a\u53c2\u6570\u3002 \u8981\u4e86\u89e3\u5173\u4e8e\u8fd9\u4e9b\u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u5b98\u65b9 CASL \u6587\u6863 \u3002 \u6700\u540e\uff0c\u786e\u4fdd\u5c06 CaslAbilityFactory \u6dfb\u52a0\u5230 CaslModule \u6a21\u5757\u5b9a\u4e49\u4e2d\u7684 providers \u548c exports \u6570\u7ec4\u4e2d: import { Module } from '@nestjs/common' ; import { CaslAbilityFactory } from './casl-ability.factory' ; @Module ({ providers : [ CaslAbilityFactory ], exports : [ CaslAbilityFactory ], }) export class CaslModule {} \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u6784\u9020\u51fd\u6570\u6ce8\u5165\u5c06 CaslAbilityFactory \u6ce8\u5165\u5230\u4efb\u4f55\u7c7b\u4e2d\uff0c\u53ea\u8981 CaslModule \u662f\u5728\u5bbf\u4e3b\u4e0a\u4e0b\u6587\u4e2d\u5bfc\u5165\u7684: constructor ( private caslAbilityFactory : CaslAbilityFactory ) {} \u7136\u540e\u50cf\u4e0b\u9762\u8fd9\u6837\u5728\u7c7b\u4e2d\u4f7f\u7528\u5b83\u3002 const ability = this . caslAbilityFactory . createForUser ( user ); if ( ability . can ( Action . Read , 'all' )) { // \"user\" has read access to everything } info Hint \u6709\u5173 \u80fd\u529b \u7c7b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u5b98\u65b9 CASL \u6587\u6863 \u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e0d\u662f\u7ba1\u7406\u5458\u7684\u7528\u6237\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u5e94\u8be5\u80fd\u591f\u9605\u8bfb\u6587\u7ae0\uff0c\u4f46\u5e94\u8be5\u7981\u6b62\u521b\u5efa\u65b0\u7684\u6587\u7ae0\u6216\u5220\u9664\u73b0\u6709\u7684\u6587\u7ae0\u3002 const user = new User (); user . isAdmin = false ; const ability = this . caslAbilityFactory . createForUser ( user ); ability . can ( Action . Read , Article ); // true ability . can ( Action . Delete , Article ); // false ability . can ( Action . Create , Article ); // false info Hint \u867d\u7136 Ability \u548c AbilityBuilder \u7c7b\u90fd\u63d0\u4f9b\u4e86 can \u548c cannot \u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u7684\u76ee\u7684\u4e0d\u540c\uff0c\u63a5\u53d7\u7684\u53c2\u6570\u4e5f\u7565\u6709\u4e0d\u540c\u3002 \u6b64\u5916\uff0c\u6b63\u5982\u6211\u4eec\u5728\u6211\u4eec\u7684\u8981\u6c42\u4e2d\u6307\u5b9a\u7684\uff0c\u7528\u6237\u5e94\u8be5\u80fd\u591f\u66f4\u65b0\u5176\u6587\u7ae0: const user = new User (); user . id = 1 ; const article = new Article (); article . authorId = user . id ; const ability = this . caslAbilityFactory . createForUser ( user ); ability . can ( Action . Update , article ); // true article . authorId = 2 ; ability . can ( Action . Update , article ); // false \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c Ability \u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u975e\u5e38\u53ef\u8bfb\u7684\u65b9\u5f0f\u68c0\u67e5\u6743\u9650\u3002 \u7c7b\u4f3c\u5730\uff0c AbilityBuilder \u5141\u8bb8\u6211\u4eec\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5b9a\u4e49\u6743\u9650(\u5e76\u6307\u5b9a\u5404\u79cd\u6761\u4ef6)\u3002 \u8981\u67e5\u627e\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u8bbf\u95ee\u5b98\u65b9\u6587\u6863\u3002 \u9ad8\u7ea7:\u5b9e\u73b0\u4e00\u4e2a PoliciesGuard \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u5982\u4f55\u6784\u5efa\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4fdd\u62a4\uff0c\u5b83\u68c0\u67e5\u7528\u6237\u662f\u5426\u6ee1\u8db3\u53ef\u4ee5\u5728\u65b9\u6cd5\u7ea7\u914d\u7f6e\u7684\u7279\u5b9a\u7684 \u6388\u6743\u7b56\u7565 (\u60a8\u53ef\u4ee5\u6269\u5c55\u5b83\u4ee5\u5c0a\u91cd\u5728\u7c7b\u7ea7\u914d\u7f6e\u7684\u7b56\u7565)\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 CASL \u5305\uff0c\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u76ee\u7684\uff0c\u4f46\u4e0d\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a\u5e93\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u6211\u4eec\u5728\u524d\u4e00\u8282\u4e2d\u521b\u5efa\u7684 CaslAbilityFactory \u63d0\u4f9b\u7a0b\u5e8f\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5145\u5b9e\u9700\u6c42\u3002 \u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\uff0c\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u6307\u5b9a\u7b56\u7565\u68c0\u67e5\u3002 \u6211\u4eec\u5c06\u540c\u65f6\u652f\u6301\u5bf9\u8c61\u548c\u51fd\u6570(\u7528\u4e8e\u66f4\u7b80\u5355\u7684\u68c0\u67e5\u548c\u90a3\u4e9b\u66f4\u559c\u6b22\u51fd\u6570\u5f0f\u4ee3\u7801\u7684\u4eba)\u3002 \u8ba9\u6211\u4eec\u4ece\u5b9a\u4e49\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\u7684\u63a5\u53e3\u5f00\u59cb: import { AppAbility } from '../casl/casl-ability.factory' ; interface IPolicyHandler { handle ( ability : AppAbility ) : boolean ; } type PolicyHandlerCallback = ( ability : AppAbility ) => boolean ; export type PolicyHandler = IPolicyHandler | PolicyHandlerCallback ; \u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u5b9a\u4e49\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\u7684\u4e24\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\uff0c\u4e00\u4e2a\u5bf9\u8c61(\u5b9e\u73b0 IPolicyHandler \u63a5\u53e3\u7684\u7c7b\u7684\u5b9e\u4f8b)\u548c\u4e00\u4e2a\u51fd\u6570(\u6ee1\u8db3 PolicyHandlerCallback \u7c7b\u578b)\u3002 \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a @CheckPolicies() \u88c5\u9970\u5668\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u5141\u8bb8\u6307\u5b9a\u8bbf\u95ee\u7279\u5b9a\u8d44\u6e90\u5fc5\u987b\u6ee1\u8db3\u54ea\u4e9b\u7b56\u7565\u3002 export const CHECK_POLICIES_KEY = 'check_policy' ; export const CheckPolicies = ( ...handlers : PolicyHandler []) => SetMetadata ( CHECK_POLICIES_KEY , handlers ); \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a policyesguard \uff0c\u5b83\u5c06\u63d0\u53d6\u548c\u6267\u884c\u7ed1\u5b9a\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7684\u6240\u6709\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\u3002 @Injectable () export class PoliciesGuard implements CanActivate { constructor ( private reflector : Reflector , private caslAbilityFactory : CaslAbilityFactory , ) {} async canActivate ( context : ExecutionContext ) : Promise < boolean > { const policyHandlers = this . reflector . get < PolicyHandler [] > ( CHECK_POLICIES_KEY , context . getHandler (), ) || []; const { user } = context . switchToHttp (). getRequest (); const ability = this . caslAbilityFactory . createForUser ( user ); return policyHandlers . every (( handler ) => this . execPolicyHandler ( handler , ability ), ); } private execPolicyHandler ( handler : PolicyHandler , ability : AppAbility ) { if ( typeof handler === 'function' ) { return handler ( ability ); } return handler . handle ( ability ); } } info Hint \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe request\u3002User \u5305\u542b\u7528\u6237\u5b9e\u4f8b\u3002 \u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u5728\u4f60\u7684\u81ea\u5b9a\u4e49\u7684**\u8eab\u4efd\u9a8c\u8bc1\u4fdd\u62a4\u4e2d\u5efa\u7acb\u8fd9\u79cd\u5173\u8054-\u8bf7\u53c2\u9605 authentication \u7ae0\u8282\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 \u8ba9\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\u3002 policyHandlers \u662f\u4e00\u4e2a\u901a\u8fc7 @CheckPolicies() \u88c5\u9970\u5668\u5206\u914d\u7ed9\u8be5\u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u6570\u7ec4\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 CaslAbilityFactory#create \u65b9\u6cd5\u6765\u6784\u9020 Ability \u5bf9\u8c61\uff0c\u5141\u8bb8\u6211\u4eec\u9a8c\u8bc1\u7528\u6237\u662f\u5426\u6709\u8db3\u591f\u7684\u6743\u9650\u6765\u6267\u884c\u7279\u5b9a\u7684\u64cd\u4f5c\u3002 \u6211\u4eec\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u4f20\u9012\u7ed9\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\uff0c\u5b83\u8981\u4e48\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8981\u4e48\u662f\u5b9e\u73b0\u4e86 IPolicyHandler \u7684\u7c7b\u7684\u5b9e\u4f8b\uff0c\u66b4\u9732\u4e86\u8fd4\u56de\u5e03\u5c14\u503c\u7684 handle() \u65b9\u6cd5\u3002 \u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528 Array#every \u65b9\u6cd5\u6765\u786e\u4fdd\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u8fd4\u56de true \u503c\u3002 \u6700\u540e\uff0c\u4e3a\u4e86\u6d4b\u8bd5\u8fd9\u4e2a\u4fdd\u62a4\uff0c\u5c06\u5b83\u7ed1\u5b9a\u5230\u4efb\u4f55\u8def\u7531\u5904\u7406\u7a0b\u5e8f\uff0c\u5e76\u6ce8\u518c\u4e00\u4e2a\u5185\u8054\u7b56\u7565\u5904\u7406\u7a0b\u5e8f(\u51fd\u6570\u5f0f\u65b9\u6cd5)\uff0c\u5982\u4e0b\u6240\u793a: @Get () @UseGuards ( PoliciesGuard ) @CheckPolicies (( ability : AppAbility ) => ability . can ( Action . Read , Article )) findAll () { return this . articlesService . findAll (); } \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0 IPolicyHandler \u63a5\u53e3\u7684\u7c7b: export class ReadArticlePolicyHandler implements IPolicyHandler { handle ( ability : AppAbility ) { return ability . can ( Action . Read , Article ); } } \u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b: @Get () @UseGuards ( PoliciesGuard ) @CheckPolicies ( new ReadArticlePolicyHandler ()) findAll () { return this . articlesService . findAll (); } warning Notice \u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 new \u5173\u952e\u5b57\u5c31\u5730\u5b9e\u4f8b\u5316\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\uff0c\u6240\u4ee5 ReadArticlePolicyHandler \u7c7b\u4e0d\u80fd\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7 ModuleRef#get \u65b9\u6cd5\u6765\u89e3\u51b3(\u8be6\u89c1 \u6b64\u5904 ). \u57fa\u672c\u4e0a\uff0c\u4f60\u5fc5\u987b\u5141\u8bb8\u4f20\u9012\u4e00\u4e2a Type<IPolicyHandler> \uff0c\u800c\u4e0d\u662f\u901a\u8fc7 @CheckPolicies() \u88c5\u9970\u5668\u6ce8\u518c\u51fd\u6570\u548c\u5b9e\u4f8b\u3002 \u7136\u540e\uff0c\u5728\u4f60\u7684\u5b88\u536b\u5185\u90e8\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u5f15\u7528 moduleRef.get(YOUR_HANDLER_TYPE) \u6765\u68c0\u7d22\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u6216\u8005\u751a\u81f3\u4f7f\u7528 ModuleRef#create \u65b9\u6cd5\u6765\u52a8\u6001\u5b9e\u4f8b\u5316\u5b83\u3002","title":"\u6388\u6743"},{"location":"security/authorization/#_1","text":"\u6388\u6743 \u662f\u6307\u51b3\u5b9a\u7528\u6237\u80fd\u591f\u505a\u4ec0\u4e48\u7684\u8fc7\u7a0b\u3002 \u4f8b\u5982\uff0c\u5141\u8bb8\u7ba1\u7406\u7528\u6237\u521b\u5efa\u3001\u7f16\u8f91\u548c\u5220\u9664\u5e16\u5b50\u3002 \u975e\u7ba1\u7406\u5458\u7528\u6237\u53ea\u88ab\u6388\u6743\u9605\u8bfb\u5e16\u5b50\u3002 \u6388\u6743\u662f\u6b63\u4ea4\u7684\uff0c\u5e76\u4e14\u72ec\u7acb\u4e8e\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4f46\u662f\uff0c\u6388\u6743\u9700\u8981\u4e00\u79cd\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u3002 \u5904\u7406\u6388\u6743\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u548c\u7b56\u7565\u3002 \u4efb\u4f55\u9879\u76ee\u6240\u91c7\u7528\u7684\u65b9\u6cd5\u53d6\u51b3\u4e8e\u5176\u7279\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u672c\u7ae0\u4ecb\u7ecd\u4e86\u51e0\u79cd\u6388\u6743\u65b9\u6cd5\uff0c\u5b83\u4eec\u53ef\u4ee5\u9002\u5e94\u5404\u79cd\u4e0d\u540c\u7684\u9700\u6c42\u3002","title":"\u6388\u6743"},{"location":"security/authorization/#rbac","text":"\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236( RBAC )\u662f\u56f4\u7ed5\u89d2\u8272\u548c\u7279\u6743\u5b9a\u4e49\u7684\u7b56\u7565\u65e0\u5173\u7684\u8bbf\u95ee\u63a7\u5236\u673a\u5236\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u5982\u4f55\u4f7f\u7528 Nest guards \u5b9e\u73b0\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684 RBAC \u673a\u5236\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5728\u7cfb\u7edf\u4e2d\u521b\u5efa\u4e00\u4e2a\u8868\u793a\u89d2\u8272\u7684 Role \u679a\u4e3e: @ @filename ( role . enum ) export enum Role { User = 'user' , Admin = 'admin' , } info Hint \u5728\u66f4\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u5c06\u89d2\u8272\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u6216\u8005\u4ece\u5916\u90e8\u8eab\u4efd\u9a8c\u8bc1\u63d0\u4f9b\u8005\u83b7\u53d6\u89d2\u8272\u3002 \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a @Roles() \u88c5\u9970\u5668\u3002 \u8be5\u88c5\u9970\u5668\u5141\u8bb8\u6307\u5b9a\u8bbf\u95ee\u7279\u5b9a\u8d44\u6e90\u6240\u9700\u7684\u89d2\u8272\u3002 @ @filename ( roles . decorator ) import { SetMetadata } from '@nestjs/common' ; import { Role } from '../enums/role.enum' ; export const ROLES_KEY = 'roles' ; export const Roles = ( ...roles : Role []) => SetMetadata ( ROLES_KEY , roles ); @ @switch import { SetMetadata } from '@nestjs/common' ; export const ROLES_KEY = 'roles' ; export const Roles = (... roles ) => SetMetadata ( ROLES_KEY , roles ); \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 @Roles() \u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u88c5\u9970\u4efb\u4f55\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u3002 @ @filename ( cats . controller ) @Post () @Roles ( Role . Admin ) create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @Roles ( Role . Admin ) @Bind ( Body ()) create ( createCatDto ) { this . catsService . create ( createCatDto ); } \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a RolesGuard \u7c7b\uff0c\u5b83\u5c06\u628a\u5206\u914d\u7ed9\u5f53\u524d\u7528\u6237\u7684\u89d2\u8272\u4e0e\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u8def\u7531\u6240\u9700\u8981\u7684\u5b9e\u9645\u89d2\u8272\u8fdb\u884c\u6bd4\u8f83\u3002 \u4e3a\u4e86\u8bbf\u95ee\u8def\u7531\u7684\u89d2\u8272(\u81ea\u5b9a\u4e49\u5143\u6570\u636e)\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Reflector helper \u7c7b\uff0c\u5b83\u662f\u7531\u6846\u67b6\u63d0\u4f9b\u7684\uff0c\u4ece @nestjs/core \u5305\u4e2d\u516c\u5f00\u7684\u3002 @ @filename ( roles . guard ) import { Injectable , CanActivate , ExecutionContext } from '@nestjs/common' ; import { Reflector } from '@nestjs/core' ; @Injectable () export class RolesGuard implements CanActivate { constructor ( private reflector : Reflector ) {} canActivate ( context : ExecutionContext ) : boolean { const requiredRoles = this . reflector . getAllAndOverride < Role [] > ( ROLES_KEY , [ context . getHandler (), context . getClass (), ]); if ( ! requiredRoles ) { return true ; } const { user } = context . switchToHttp (). getRequest (); return requiredRoles . some (( role ) => user . roles ? . includes ( role )); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { Reflector } from '@nestjs/core' ; @Injectable () @Dependencies ( Reflector ) export class RolesGuard { constructor ( reflector ) { this . reflector = reflector ; } canActivate ( context ) { const requiredRoles = this . reflector . getAllAndOverride ( ROLES_KEY , [ context . getHandler (), context . getClass (), ]); if ( ! requiredRoles ) { return true ; } const { user } = context . switchToHttp (). getRequest (); return requiredRoles . some (( role ) => user . roles . includes ( role )); } } info Hint \u8bf7\u53c2\u9605\u6267\u884c\u4e0a\u4e0b\u6587\u7ae0\u8282\u7684 \u53cd\u5c04\u548c\u5143\u6570\u636e \u5c0f\u8282\uff0c\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u4ee5\u4e0a\u4e0b\u6587\u654f\u611f\u7684\u65b9\u5f0f\u4f7f\u7528 Reflector \u7684\u7ec6\u8282\u3002 warning Notice \u8fd9\u4e2a\u4f8b\u5b50\u88ab\u547d\u540d\u4e3a\" basic \"\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5728\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7ea7\u522b\u68c0\u67e5\u89d2\u8272\u7684\u5b58\u5728\u3002 \u5728\u73b0\u5b9e\u4e16\u754c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e9b\u6d89\u53ca\u591a\u4e2a\u64cd\u4f5c\u7684\u7aef\u70b9/\u5904\u7406\u7a0b\u5e8f\uff0c\u5176\u4e2d\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u9700\u8981\u4e00\u7ec4\u7279\u5b9a\u7684\u6743\u9650\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5fc5\u987b\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\u6765\u68c0\u67e5\u4e1a\u52a1\u903b\u8f91\u4e2d\u7684\u89d2\u8272\uff0c\u8fd9\u4f7f\u7ef4\u62a4\u53d8\u5f97\u6709\u4e9b\u56f0\u96be\uff0c\u56e0\u4e3a\u6ca1\u6709\u96c6\u4e2d\u7684\u5730\u65b9\u5c06\u6743\u9650\u4e0e\u7279\u5b9a\u7684\u64cd\u4f5c\u5173\u8054\u8d77\u6765\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe request.user \u5305\u542b\u7528\u6237\u5b9e\u4f8b\u548c\u5141\u8bb8\u7684\u89d2\u8272(\u5728 roles \u5c5e\u6027\u4e0b)\u3002 \u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u5728\u4f60\u7684\u81ea\u5b9a\u4e49\u7684 \u8eab\u4efd\u9a8c\u8bc1\u4fdd\u62a4 \u4e2d\u5efa\u7acb\u8fd9\u79cd\u5173\u8054-\u8bf7\u53c2\u9605 authentication \u7ae0\u8282\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 \u4e3a\u4e86\u786e\u4fdd\u8fd9\u4e2a\u4f8b\u5b50\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f60\u7684 User \u7c7b\u5fc5\u987b\u5982\u4e0b\u6240\u793a: class User { // ...other properties roles : Role []; } \u6700\u540e\uff0c\u786e\u4fdd\u6ce8\u518c RolesGuard \uff0c\u4f8b\u5982\uff0c\u5728\u63a7\u5236\u5668\u7ea7\u522b\u6216\u5168\u5c40: providers : [ { provide : APP_GUARD , useClass : RolesGuard , }, ], \u5f53\u4e00\u4e2a\u6743\u9650\u4e0d\u8db3\u7684\u7528\u6237\u8bf7\u6c42\u4e00\u4e2a\u7aef\u70b9\u65f6\uff0cNest \u81ea\u52a8\u8fd4\u56de\u4ee5\u4e0b\u54cd\u5e94: { \"statusCode\" : 403 , \"message\" : \"Forbidden resource\" , \"error\" : \"Forbidden\" } info Hint \u5982\u679c\u4f60\u60f3\u8fd4\u56de\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u54cd\u5e94\uff0c\u4f60\u5e94\u8be5\u629b\u51fa\u4f60\u81ea\u5df1\u7684\u7279\u5b9a\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u3002","title":"\u57fa\u4e8e RBAC \u5b9e\u73b0"},{"location":"security/authorization/#_2","text":"\u521b\u5efa\u6807\u8bc6\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u5206\u914d\u7ed9\u53d7\u4fe1\u4efb\u65b9\u53d1\u51fa\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u58f0\u660e\u3002 claim \u662f\u4e00\u4e2a\u540d\u79f0-\u503c\u5bf9\uff0c\u5b83\u8868\u793a\u4e3b\u8bed\u53ef\u4ee5\u505a\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u4e3b\u8bed\u662f\u4ec0\u4e48\u3002 \u8981\u5728 Nest \u4e2d\u5b9e\u73b0\u57fa\u4e8e\u58f0\u660e\u7684\u6388\u6743\uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u6211\u4eec\u5728\u4e0a\u9762 RBAC \u5c0f\u8282\u4e2d\u5c55\u793a\u7684\u76f8\u540c\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f46\u6709\u4e00\u4e2a\u663e\u8457\u7684\u533a\u522b:\u60a8\u5e94\u8be5\u6bd4\u8f83 \u6743\u9650 \uff0c\u800c\u4e0d\u662f\u68c0\u67e5\u7279\u5b9a\u7684\u89d2\u8272\u3002 \u6bcf\u4e2a\u7528\u6237\u90fd\u6709\u4e00\u7ec4\u88ab\u5206\u914d\u7684\u6743\u9650\u3002 \u540c\u6837\uff0c\u6bcf\u4e2a\u8d44\u6e90/\u7aef\u70b9\u5c06\u5b9a\u4e49\u9700\u8981\u54ea\u4e9b\u6743\u9650(\u4f8b\u5982\uff0c\u901a\u8fc7\u4e13\u7528\u7684 @RequirePermissions() \u88c5\u9970\u5668)\u6765\u8bbf\u95ee\u5b83\u4eec\u3002 @ @filename ( cats . controller ) @Post () @RequirePermissions ( Permission . CREATE_CAT ) create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } @ @switch @Post () @RequirePermissions ( Permission . CREATE_CAT ) @Bind ( Body ()) create ( createCatDto ) { this . catsService . create ( createCatDto ); } info Hint \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c Permission (\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5728 RBAC \u90e8\u5206\u4e2d\u5c55\u793a\u7684 Role )\u662f\u4e00\u4e2a TypeScript enum\uff0c\u5b83\u5305\u542b\u4e86\u4f60\u7cfb\u7edf\u4e2d\u6240\u6709\u53ef\u7528\u7684\u6743\u9650\u3002","title":"\u58f0\u660e\u5f0f\u6388\u6743"},{"location":"security/authorization/#casl","text":"CASL \u662f\u4e00\u4e2a\u540c\u6784\u7684\u6388\u6743\u5e93\uff0c\u5b83\u9650\u5236\u4e86\u7ed9\u5b9a\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e9b\u8d44\u6e90\u3002 \u5b83\u88ab\u8bbe\u8ba1\u6210\u53ef\u589e\u91cf\u91c7\u7528\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u57fa\u4e8e\u7b80\u5355\u58f0\u660e\u3001\u5168\u529f\u80fd\u4e3b\u9898\u548c\u57fa\u4e8e\u5c5e\u6027\u7684\u6388\u6743\u4e4b\u95f4\u8fdb\u884c\u4f38\u7f29\u3002 \u9996\u5148\uff0c\u5b89\u88c5 @casl/ability \u5305: $ npm i @casl/ability info Hint \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u4e86 CASL\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u5e93\uff0c\u5982 accesscontrol \u6216 acl \uff0c\u8fd9\u53d6\u51b3\u4e8e\u60a8\u7684\u9996\u9009\u9879\u548c\u9879\u76ee\u9700\u6c42\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4e3a\u4e86\u8bf4\u660e CASL \u7684\u673a\u5236\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e24\u4e2a\u5b9e\u4f53\u7c7b: User \u548c Article \u3002 class User { id : number ; isAdmin : boolean ; } User \u7c7b\u7531\u4e24\u4e2a\u5c5e\u6027\u7ec4\u6210\uff0c id \u662f\u552f\u4e00\u7684\u7528\u6237\u6807\u8bc6\u7b26\uff0c isAdmin \u8868\u793a\u7528\u6237\u662f\u5426\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u3002 class Article { id : number ; isPublished : boolean ; authorId : number ; } Article \u7c7b\u6709\u4e09\u4e2a\u5c5e\u6027\uff0c\u5206\u522b\u662f id \u3001 isPublished \u548c authorId \u3002 id \u662f\u6587\u7ae0\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c isPublished \u8868\u793a\u6587\u7ae0\u662f\u5426\u5df2\u7ecf\u53d1\u5e03\uff0c\u800c authorId \u662f\u64b0\u5199\u6587\u7ae0\u7684\u7528\u6237\u7684 id\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u56de\u987e\u5e76\u7cbe\u70bc\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u9700\u6c42: \u7ba1\u7406\u5458\u53ef\u4ee5\u7ba1\u7406(\u521b\u5efa/\u8bfb\u53d6/\u66f4\u65b0/\u5220\u9664)\u6240\u6709\u5b9e\u4f53 \u7528\u6237\u5bf9\u6240\u6709\u5185\u5bb9\u90fd\u5177\u6709\u53ea\u8bfb\u8bbf\u95ee\u6743\u9650 \u7528\u6237\u53ef\u4ee5\u66f4\u65b0\u4ed6\u4eec\u7684\u6587\u7ae0 ( article.authorId === userId ) \u65e0\u6cd5\u5220\u9664\u5df2\u53d1\u5e03\u7684\u9879\u76ee( article.isPublished === true ) \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u521b\u5efa\u4e00\u4e2a Action \u679a\u4e3e\u5f00\u59cb\uff0c\u5b83\u8868\u793a\u7528\u6237\u53ef\u4ee5\u5bf9\u5b9e\u4f53\u6267\u884c\u7684\u6240\u6709\u53ef\u80fd\u7684\u64cd\u4f5c: export enum Action { Manage = 'manage' , Create = 'create' , Read = 'read' , Update = 'update' , Delete = 'delete' , } warning Notice manage \u662f CASL \u4e2d\u7684\u4e00\u4e2a\u7279\u6b8a\u5173\u952e\u5b57\uff0c\u5b83\u8868\u793a \u4efb\u4f55 \u64cd\u4f5c\u3002 \u4e3a\u4e86\u5c01\u88c5 CASL \u5e93\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u751f\u6210 CaslModule \u548c CaslAbilityFactory \u3002 $ nest g module casl $ nest g class casl/casl-ability.factory \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 CaslAbilityFactory \u4e0a\u5b9a\u4e49 createForUser() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u5c06\u4e3a\u7ed9\u5b9a\u7684\u7528\u6237\u521b\u5efa Ability \u5bf9\u8c61: type Subjects = InferSubjects < typeof Article | typeof User > | 'all' ; export type AppAbility = Ability < [ Action , Subjects ] > ; @Injectable () export class CaslAbilityFactory { createForUser ( user : User ) { const { can , cannot , build } = new AbilityBuilder < Ability < [ Action , Subjects ] > > ( Ability as AbilityClass < AppAbility > ); if ( user . isAdmin ) { can ( Action . Manage , 'all' ); // read-write access to everything } else { can ( Action . Read , 'all' ); // read-only access to everything } can ( Action . Update , Article , { authorId : user.id }); cannot ( Action . Delete , Article , { isPublished : true }); return build ({ // Read https://casl.js.org/v5/en/guide/subject-type-detection#use-classes-as-subject-types for details detectSubjectType : ( item ) => item . constructor as ExtractSubjectType < Subjects > , }); } } warning Notice all \u662f CASL \u4e2d\u4e00\u4e2a\u7279\u6b8a\u7684\u5173\u952e\u5b57\uff0c\u4ee3\u8868 \u4efb\u4f55\u4e3b\u9898 \u3002 info Hint Ability \uff0c AbilityBuilder \uff0c AbilityClass \u548c ExtractSubjectType \u7c7b\u4ece @casl/ Ability \u5305\u4e2d\u5bfc\u51fa\u3002 info Hint detectSubjectType \u9009\u9879\u8ba9 CASL \u4e86\u89e3\u5982\u4f55\u4ece\u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e3b\u9898\u7c7b\u578b\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb CASL \u6587\u6863 \u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 AbilityBuilder \u7c7b\u521b\u5efa\u4e86 Ability \u5b9e\u4f8b\u3002 \u6b63\u5982\u4f60\u53ef\u80fd\u731c\u5230\u7684\uff0ccan \u548c cannot \u63a5\u53d7\u76f8\u540c\u7684\u53c2\u6570\uff0c\u4f46\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0ccan \u5141\u8bb8\u5bf9\u6307\u5b9a\u7684\u4e3b\u9898\u505a\u4e00\u4e2a\u52a8\u4f5c\uff0c\u800c cannot \u7981\u6b62\u3002 \u4e24\u8005\u90fd\u53ef\u4ee5\u63a5\u53d7\u6700\u591a 4 \u4e2a\u53c2\u6570\u3002 \u8981\u4e86\u89e3\u5173\u4e8e\u8fd9\u4e9b\u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u5b98\u65b9 CASL \u6587\u6863 \u3002 \u6700\u540e\uff0c\u786e\u4fdd\u5c06 CaslAbilityFactory \u6dfb\u52a0\u5230 CaslModule \u6a21\u5757\u5b9a\u4e49\u4e2d\u7684 providers \u548c exports \u6570\u7ec4\u4e2d: import { Module } from '@nestjs/common' ; import { CaslAbilityFactory } from './casl-ability.factory' ; @Module ({ providers : [ CaslAbilityFactory ], exports : [ CaslAbilityFactory ], }) export class CaslModule {} \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u6784\u9020\u51fd\u6570\u6ce8\u5165\u5c06 CaslAbilityFactory \u6ce8\u5165\u5230\u4efb\u4f55\u7c7b\u4e2d\uff0c\u53ea\u8981 CaslModule \u662f\u5728\u5bbf\u4e3b\u4e0a\u4e0b\u6587\u4e2d\u5bfc\u5165\u7684: constructor ( private caslAbilityFactory : CaslAbilityFactory ) {} \u7136\u540e\u50cf\u4e0b\u9762\u8fd9\u6837\u5728\u7c7b\u4e2d\u4f7f\u7528\u5b83\u3002 const ability = this . caslAbilityFactory . createForUser ( user ); if ( ability . can ( Action . Read , 'all' )) { // \"user\" has read access to everything } info Hint \u6709\u5173 \u80fd\u529b \u7c7b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u5b98\u65b9 CASL \u6587\u6863 \u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e0d\u662f\u7ba1\u7406\u5458\u7684\u7528\u6237\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u5e94\u8be5\u80fd\u591f\u9605\u8bfb\u6587\u7ae0\uff0c\u4f46\u5e94\u8be5\u7981\u6b62\u521b\u5efa\u65b0\u7684\u6587\u7ae0\u6216\u5220\u9664\u73b0\u6709\u7684\u6587\u7ae0\u3002 const user = new User (); user . isAdmin = false ; const ability = this . caslAbilityFactory . createForUser ( user ); ability . can ( Action . Read , Article ); // true ability . can ( Action . Delete , Article ); // false ability . can ( Action . Create , Article ); // false info Hint \u867d\u7136 Ability \u548c AbilityBuilder \u7c7b\u90fd\u63d0\u4f9b\u4e86 can \u548c cannot \u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u7684\u76ee\u7684\u4e0d\u540c\uff0c\u63a5\u53d7\u7684\u53c2\u6570\u4e5f\u7565\u6709\u4e0d\u540c\u3002 \u6b64\u5916\uff0c\u6b63\u5982\u6211\u4eec\u5728\u6211\u4eec\u7684\u8981\u6c42\u4e2d\u6307\u5b9a\u7684\uff0c\u7528\u6237\u5e94\u8be5\u80fd\u591f\u66f4\u65b0\u5176\u6587\u7ae0: const user = new User (); user . id = 1 ; const article = new Article (); article . authorId = user . id ; const ability = this . caslAbilityFactory . createForUser ( user ); ability . can ( Action . Update , article ); // true article . authorId = 2 ; ability . can ( Action . Update , article ); // false \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c Ability \u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u975e\u5e38\u53ef\u8bfb\u7684\u65b9\u5f0f\u68c0\u67e5\u6743\u9650\u3002 \u7c7b\u4f3c\u5730\uff0c AbilityBuilder \u5141\u8bb8\u6211\u4eec\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5b9a\u4e49\u6743\u9650(\u5e76\u6307\u5b9a\u5404\u79cd\u6761\u4ef6)\u3002 \u8981\u67e5\u627e\u66f4\u591a\u793a\u4f8b\uff0c\u8bf7\u8bbf\u95ee\u5b98\u65b9\u6587\u6863\u3002","title":"\u6574\u5408 CASL"},{"location":"security/authorization/#policiesguard","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u5982\u4f55\u6784\u5efa\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u4fdd\u62a4\uff0c\u5b83\u68c0\u67e5\u7528\u6237\u662f\u5426\u6ee1\u8db3\u53ef\u4ee5\u5728\u65b9\u6cd5\u7ea7\u914d\u7f6e\u7684\u7279\u5b9a\u7684 \u6388\u6743\u7b56\u7565 (\u60a8\u53ef\u4ee5\u6269\u5c55\u5b83\u4ee5\u5c0a\u91cd\u5728\u7c7b\u7ea7\u914d\u7f6e\u7684\u7b56\u7565)\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 CASL \u5305\uff0c\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u76ee\u7684\uff0c\u4f46\u4e0d\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a\u5e93\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u6211\u4eec\u5728\u524d\u4e00\u8282\u4e2d\u521b\u5efa\u7684 CaslAbilityFactory \u63d0\u4f9b\u7a0b\u5e8f\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5145\u5b9e\u9700\u6c42\u3002 \u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u79cd\u673a\u5236\uff0c\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u6307\u5b9a\u7b56\u7565\u68c0\u67e5\u3002 \u6211\u4eec\u5c06\u540c\u65f6\u652f\u6301\u5bf9\u8c61\u548c\u51fd\u6570(\u7528\u4e8e\u66f4\u7b80\u5355\u7684\u68c0\u67e5\u548c\u90a3\u4e9b\u66f4\u559c\u6b22\u51fd\u6570\u5f0f\u4ee3\u7801\u7684\u4eba)\u3002 \u8ba9\u6211\u4eec\u4ece\u5b9a\u4e49\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\u7684\u63a5\u53e3\u5f00\u59cb: import { AppAbility } from '../casl/casl-ability.factory' ; interface IPolicyHandler { handle ( ability : AppAbility ) : boolean ; } type PolicyHandlerCallback = ( ability : AppAbility ) => boolean ; export type PolicyHandler = IPolicyHandler | PolicyHandlerCallback ; \u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u5b9a\u4e49\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\u7684\u4e24\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\uff0c\u4e00\u4e2a\u5bf9\u8c61(\u5b9e\u73b0 IPolicyHandler \u63a5\u53e3\u7684\u7c7b\u7684\u5b9e\u4f8b)\u548c\u4e00\u4e2a\u51fd\u6570(\u6ee1\u8db3 PolicyHandlerCallback \u7c7b\u578b)\u3002 \u6709\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a @CheckPolicies() \u88c5\u9970\u5668\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u5141\u8bb8\u6307\u5b9a\u8bbf\u95ee\u7279\u5b9a\u8d44\u6e90\u5fc5\u987b\u6ee1\u8db3\u54ea\u4e9b\u7b56\u7565\u3002 export const CHECK_POLICIES_KEY = 'check_policy' ; export const CheckPolicies = ( ...handlers : PolicyHandler []) => SetMetadata ( CHECK_POLICIES_KEY , handlers ); \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a policyesguard \uff0c\u5b83\u5c06\u63d0\u53d6\u548c\u6267\u884c\u7ed1\u5b9a\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u7684\u6240\u6709\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\u3002 @Injectable () export class PoliciesGuard implements CanActivate { constructor ( private reflector : Reflector , private caslAbilityFactory : CaslAbilityFactory , ) {} async canActivate ( context : ExecutionContext ) : Promise < boolean > { const policyHandlers = this . reflector . get < PolicyHandler [] > ( CHECK_POLICIES_KEY , context . getHandler (), ) || []; const { user } = context . switchToHttp (). getRequest (); const ability = this . caslAbilityFactory . createForUser ( user ); return policyHandlers . every (( handler ) => this . execPolicyHandler ( handler , ability ), ); } private execPolicyHandler ( handler : PolicyHandler , ability : AppAbility ) { if ( typeof handler === 'function' ) { return handler ( ability ); } return handler . handle ( ability ); } } info Hint \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe request\u3002User \u5305\u542b\u7528\u6237\u5b9e\u4f8b\u3002 \u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u5728\u4f60\u7684\u81ea\u5b9a\u4e49\u7684**\u8eab\u4efd\u9a8c\u8bc1\u4fdd\u62a4\u4e2d\u5efa\u7acb\u8fd9\u79cd\u5173\u8054-\u8bf7\u53c2\u9605 authentication \u7ae0\u8282\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 \u8ba9\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\u3002 policyHandlers \u662f\u4e00\u4e2a\u901a\u8fc7 @CheckPolicies() \u88c5\u9970\u5668\u5206\u914d\u7ed9\u8be5\u65b9\u6cd5\u7684\u5904\u7406\u7a0b\u5e8f\u6570\u7ec4\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 CaslAbilityFactory#create \u65b9\u6cd5\u6765\u6784\u9020 Ability \u5bf9\u8c61\uff0c\u5141\u8bb8\u6211\u4eec\u9a8c\u8bc1\u7528\u6237\u662f\u5426\u6709\u8db3\u591f\u7684\u6743\u9650\u6765\u6267\u884c\u7279\u5b9a\u7684\u64cd\u4f5c\u3002 \u6211\u4eec\u5c06\u8fd9\u4e2a\u5bf9\u8c61\u4f20\u9012\u7ed9\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\uff0c\u5b83\u8981\u4e48\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8981\u4e48\u662f\u5b9e\u73b0\u4e86 IPolicyHandler \u7684\u7c7b\u7684\u5b9e\u4f8b\uff0c\u66b4\u9732\u4e86\u8fd4\u56de\u5e03\u5c14\u503c\u7684 handle() \u65b9\u6cd5\u3002 \u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528 Array#every \u65b9\u6cd5\u6765\u786e\u4fdd\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u8fd4\u56de true \u503c\u3002 \u6700\u540e\uff0c\u4e3a\u4e86\u6d4b\u8bd5\u8fd9\u4e2a\u4fdd\u62a4\uff0c\u5c06\u5b83\u7ed1\u5b9a\u5230\u4efb\u4f55\u8def\u7531\u5904\u7406\u7a0b\u5e8f\uff0c\u5e76\u6ce8\u518c\u4e00\u4e2a\u5185\u8054\u7b56\u7565\u5904\u7406\u7a0b\u5e8f(\u51fd\u6570\u5f0f\u65b9\u6cd5)\uff0c\u5982\u4e0b\u6240\u793a: @Get () @UseGuards ( PoliciesGuard ) @CheckPolicies (( ability : AppAbility ) => ability . can ( Action . Read , Article )) findAll () { return this . articlesService . findAll (); } \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0 IPolicyHandler \u63a5\u53e3\u7684\u7c7b: export class ReadArticlePolicyHandler implements IPolicyHandler { handle ( ability : AppAbility ) { return ability . can ( Action . Read , Article ); } } \u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b: @Get () @UseGuards ( PoliciesGuard ) @CheckPolicies ( new ReadArticlePolicyHandler ()) findAll () { return this . articlesService . findAll (); } warning Notice \u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 new \u5173\u952e\u5b57\u5c31\u5730\u5b9e\u4f8b\u5316\u7b56\u7565\u5904\u7406\u7a0b\u5e8f\uff0c\u6240\u4ee5 ReadArticlePolicyHandler \u7c7b\u4e0d\u80fd\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7 ModuleRef#get \u65b9\u6cd5\u6765\u89e3\u51b3(\u8be6\u89c1 \u6b64\u5904 ). \u57fa\u672c\u4e0a\uff0c\u4f60\u5fc5\u987b\u5141\u8bb8\u4f20\u9012\u4e00\u4e2a Type<IPolicyHandler> \uff0c\u800c\u4e0d\u662f\u901a\u8fc7 @CheckPolicies() \u88c5\u9970\u5668\u6ce8\u518c\u51fd\u6570\u548c\u5b9e\u4f8b\u3002 \u7136\u540e\uff0c\u5728\u4f60\u7684\u5b88\u536b\u5185\u90e8\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u5f15\u7528 moduleRef.get(YOUR_HANDLER_TYPE) \u6765\u68c0\u7d22\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u6216\u8005\u751a\u81f3\u4f7f\u7528 ModuleRef#create \u65b9\u6cd5\u6765\u52a8\u6001\u5b9e\u4f8b\u5316\u5b83\u3002","title":"\u9ad8\u7ea7:\u5b9e\u73b0\u4e00\u4e2a PoliciesGuard"},{"location":"security/cors/","text":"CORS \u00b6 \u8de8\u6e90\u8d44\u6e90\u5171\u4eab(CORS)\u662f\u4e00\u79cd\u5141\u8bb8\u4ece\u53e6\u4e00\u4e2a\u57df\u8bf7\u6c42\u8d44\u6e90\u7684\u673a\u5236\u3002 Under the hood, Nest makes use of the Express cors package. This package provides various options that you can customize based on your requirements. \u5165\u95e8 \u00b6 \u8981\u542f\u7528 CORS\uff0c\u8c03\u7528 Nest \u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u4e0a\u7684 enableCors() \u65b9\u6cd5\u3002 const app = await NestFactory . create ( AppModule ); app . enableCors (); await app . listen ( 3000 ); enableCors() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u914d\u7f6e\u5bf9\u8c61\u53c2\u6570\u3002 \u8be5\u5bf9\u8c61\u7684\u53ef\u7528\u5c5e\u6027\u5728\u5b98\u65b9 CORS \u6587\u6863\u4e2d\u6709\u63cf\u8ff0\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f20\u9012\u4e00\u4e2a \u56de\u8c03\u51fd\u6570 \uff0c\u5b83\u5141\u8bb8\u60a8\u6839\u636e\u8bf7\u6c42(\u52a8\u6001\u5730)\u5f02\u6b65\u5b9a\u4e49\u914d\u7f6e\u5bf9\u8c61\u3002 \u6216\u8005\uff0c\u901a\u8fc7 create() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u542f\u7528 CORS\u3002 \u5c06 cors \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u4ee5\u542f\u7528 cors \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002 \u6216\u8005\uff0c\u5c06 CORS \u914d\u7f6e\u5bf9\u8c61 \u6216 \u56de\u8c03\u51fd\u6570 \u4f5c\u4e3a CORS \u5c5e\u6027\u503c\u6765\u5b9a\u5236\u5176\u884c\u4e3a\u3002 const app = await NestFactory . create ( AppModule , { cors : true }); await app . listen ( 3000 ); \u4e0a\u8ff0\u65b9\u6cd5\u4ec5\u9002\u7528\u4e8e REST \u7aef\u70b9\u3002 \u8981\u5728 GraphQL \u4e2d\u542f\u7528 CORS\uff0c\u8bf7\u5c06 cors \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \uff0c\u6216\u8005\u5728\u5bfc\u5165 GraphQL \u6a21\u5757\u65f6\uff0c\u5c06 CORS \u914d\u7f6e\u5bf9\u8c61 \u6216\u4e00\u4e2a \u56de\u8c03\u51fd\u6570 \u4f5c\u4e3a cors \u5c5e\u6027\u503c\u3002 warning Warning CorsOptionsDelegate \u89e3\u51b3\u65b9\u6848\u5e76\u4e0d\u9002\u7528\u4e8e apollo-server-fastify \u8f6f\u4ef6\u5305\u3002 GraphQLModule . forRoot ({ cors : { origin : 'http://localhost:3000' , credentials : true , }, }),","title":"CORS"},{"location":"security/cors/#cors","text":"\u8de8\u6e90\u8d44\u6e90\u5171\u4eab(CORS)\u662f\u4e00\u79cd\u5141\u8bb8\u4ece\u53e6\u4e00\u4e2a\u57df\u8bf7\u6c42\u8d44\u6e90\u7684\u673a\u5236\u3002 Under the hood, Nest makes use of the Express cors package. This package provides various options that you can customize based on your requirements.","title":"CORS"},{"location":"security/cors/#_1","text":"\u8981\u542f\u7528 CORS\uff0c\u8c03\u7528 Nest \u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u4e0a\u7684 enableCors() \u65b9\u6cd5\u3002 const app = await NestFactory . create ( AppModule ); app . enableCors (); await app . listen ( 3000 ); enableCors() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u914d\u7f6e\u5bf9\u8c61\u53c2\u6570\u3002 \u8be5\u5bf9\u8c61\u7684\u53ef\u7528\u5c5e\u6027\u5728\u5b98\u65b9 CORS \u6587\u6863\u4e2d\u6709\u63cf\u8ff0\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f20\u9012\u4e00\u4e2a \u56de\u8c03\u51fd\u6570 \uff0c\u5b83\u5141\u8bb8\u60a8\u6839\u636e\u8bf7\u6c42(\u52a8\u6001\u5730)\u5f02\u6b65\u5b9a\u4e49\u914d\u7f6e\u5bf9\u8c61\u3002 \u6216\u8005\uff0c\u901a\u8fc7 create() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u542f\u7528 CORS\u3002 \u5c06 cors \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u4ee5\u542f\u7528 cors \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002 \u6216\u8005\uff0c\u5c06 CORS \u914d\u7f6e\u5bf9\u8c61 \u6216 \u56de\u8c03\u51fd\u6570 \u4f5c\u4e3a CORS \u5c5e\u6027\u503c\u6765\u5b9a\u5236\u5176\u884c\u4e3a\u3002 const app = await NestFactory . create ( AppModule , { cors : true }); await app . listen ( 3000 ); \u4e0a\u8ff0\u65b9\u6cd5\u4ec5\u9002\u7528\u4e8e REST \u7aef\u70b9\u3002 \u8981\u5728 GraphQL \u4e2d\u542f\u7528 CORS\uff0c\u8bf7\u5c06 cors \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \uff0c\u6216\u8005\u5728\u5bfc\u5165 GraphQL \u6a21\u5757\u65f6\uff0c\u5c06 CORS \u914d\u7f6e\u5bf9\u8c61 \u6216\u4e00\u4e2a \u56de\u8c03\u51fd\u6570 \u4f5c\u4e3a cors \u5c5e\u6027\u503c\u3002 warning Warning CorsOptionsDelegate \u89e3\u51b3\u65b9\u6848\u5e76\u4e0d\u9002\u7528\u4e8e apollo-server-fastify \u8f6f\u4ef6\u5305\u3002 GraphQLModule . forRoot ({ cors : { origin : 'http://localhost:3000' , credentials : true , }, }),","title":"\u5165\u95e8"},{"location":"security/csrf/","text":"CSRF \u4fdd\u62a4 \u00b6 \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020(\u4e5f\u79f0\u4e3a CSRF \u6216 XSRF)\u662f\u4e00\u79cd\u6076\u610f\u5229\u7528\u7f51\u7ad9\u7684\u7c7b\u578b\uff0c\u5176\u4e2d unauthorized \u547d\u4ee4\u7531 web \u5e94\u7528\u7a0b\u5e8f\u4fe1\u4efb\u7684\u7528\u6237\u4f20\u8f93\u3002 \u4e3a\u4e86\u51cf\u8f7b\u8fd9\u79cd\u653b\u51fb\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 csurf \u5305\u3002 \u4e0e Express \u4e00\u8d77\u4f7f\u7528(\u9ed8\u8ba4) \u00b6 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save csurf warning Warning As explained in the csurf docs , this middleware requires either session middleware or cookie-parser to be initialized first. Please see that documentation for further instructions. Once the installation is complete, apply the csurf middleware as global middleware. import * as csurf from 'csurf' ; // ... // somewhere in your initialization file app . use ( csurf ()); \u4e0e Fastify \u4e00\u8d77\u4f7f\u7528 \u00b6 Start by installing the required package: $ npm i --save fastify-csrf Once the installation is complete, register the fastify-csrf plugin, as follows: import fastifyCsrf from 'fastify-csrf' ; // ... // somewhere in your initialization file after registering some storage plugin app . register ( fastifyCsrf ); warning Warning As explained in the fastify-csrf docs here , this plugin requires a storage plugin to be initialized first. Please, see that documentation for further instructions.","title":"CSRF \u4fdd\u62a4"},{"location":"security/csrf/#csrf","text":"\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020(\u4e5f\u79f0\u4e3a CSRF \u6216 XSRF)\u662f\u4e00\u79cd\u6076\u610f\u5229\u7528\u7f51\u7ad9\u7684\u7c7b\u578b\uff0c\u5176\u4e2d unauthorized \u547d\u4ee4\u7531 web \u5e94\u7528\u7a0b\u5e8f\u4fe1\u4efb\u7684\u7528\u6237\u4f20\u8f93\u3002 \u4e3a\u4e86\u51cf\u8f7b\u8fd9\u79cd\u653b\u51fb\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 csurf \u5305\u3002","title":"CSRF \u4fdd\u62a4"},{"location":"security/csrf/#express","text":"\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save csurf warning Warning As explained in the csurf docs , this middleware requires either session middleware or cookie-parser to be initialized first. Please see that documentation for further instructions. Once the installation is complete, apply the csurf middleware as global middleware. import * as csurf from 'csurf' ; // ... // somewhere in your initialization file app . use ( csurf ());","title":"\u4e0e Express \u4e00\u8d77\u4f7f\u7528(\u9ed8\u8ba4)"},{"location":"security/csrf/#fastify","text":"Start by installing the required package: $ npm i --save fastify-csrf Once the installation is complete, register the fastify-csrf plugin, as follows: import fastifyCsrf from 'fastify-csrf' ; // ... // somewhere in your initialization file after registering some storage plugin app . register ( fastifyCsrf ); warning Warning As explained in the fastify-csrf docs here , this plugin requires a storage plugin to be initialized first. Please, see that documentation for further instructions.","title":"\u4e0e Fastify \u4e00\u8d77\u4f7f\u7528"},{"location":"security/encryption-hashing/","text":"\u52a0\u5bc6\u548c\u6563\u5217 \u00b6 \u52a0\u5bc6 \u662f\u5bf9\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u8fc7\u7a0b\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5c06\u4fe1\u606f\u7684\u539f\u59cb\u8868\u793a\u5f62\u5f0f(\u5373\u660e\u6587)\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u5f62\u5f0f(\u5373\u5bc6\u6587)\u3002 \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u6388\u6743\u65b9\u624d\u80fd\u5c06\u5bc6\u6587\u89e3\u5bc6\u4e3a\u660e\u6587\u5e76\u8bbf\u95ee\u539f\u59cb\u4fe1\u606f\u3002 \u52a0\u5bc6\u672c\u8eab\u5e76\u4e0d\u80fd\u9632\u6b62\u5e72\u6270\uff0c\u4f46\u4f1a\u62d2\u7edd\u5411\u6f5c\u5728\u7684\u62e6\u622a\u8005\u63d0\u4f9b\u53ef\u7406\u89e3\u7684\u5185\u5bb9\u3002 \u52a0\u5bc6\u662f\u4e00\u79cd\u53cc\u5411\u529f\u80fd;\u88ab\u52a0\u5bc6\u7684\u4e1c\u897f\u53ef\u4ee5\u7528\u5408\u9002\u7684\u5bc6\u94a5\u89e3\u5bc6\u3002 \u54c8\u5e0c\u662f\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u7684\u952e\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u503c\u7684\u8fc7\u7a0b\u3002 \u54c8\u5e0c\u51fd\u6570\u7528\u4e8e\u6839\u636e\u6570\u5b66\u7b97\u6cd5\u751f\u6210\u65b0\u503c\u3002 \u4e00\u65e6\u54c8\u5e0c\u64cd\u4f5c\u5b8c\u6210\uff0c\u4ece\u8f93\u51fa\u5230\u8f93\u5165\u5e94\u8be5\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u52a0\u5bc6 \u00b6 Node.js \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684 crypto \u6a21\u5757 \uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u52a0\u5bc6\u548c\u89e3\u5bc6\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u7f13\u51b2\u533a\u3001\u6d41\u7b49\u3002 Nest \u672c\u8eab\u5e76\u6ca1\u6709\u5728\u8fd9\u4e2a\u6a21\u5757\u4e0a\u63d0\u4f9b\u4efb\u4f55\u989d\u5916\u7684\u5305\uff0c\u4ee5\u907f\u514d\u5f15\u5165\u4e0d\u5fc5\u8981\u7684\u62bd\u8c61\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528 AES(\u9ad8\u7ea7\u52a0\u5bc6\u7cfb\u7edf) 'aes-256-ctr' \u7b97\u6cd5 CTR \u52a0\u5bc6\u6a21\u5f0f\u3002 import { createCipheriv , randomBytes , scrypt } from 'crypto' ; import { promisify } from 'util' ; const iv = randomBytes ( 16 ); const password = 'Password used to generate key' ; // The key length is dependent on the algorithm. // In this case for aes256, it is 32 bytes. const key = ( await promisify ( scrypt )( password , 'salt' , 32 )) as Buffer ; const cipher = createCipheriv ( 'aes-256-ctr' , key , iv ); const textToEncrypt = 'Nest' ; const encryptedText = Buffer . concat ([ cipher . update ( textToEncrypt ), cipher . final (), ]); \u73b0\u5728\u8981\u89e3\u5bc6 encryptedText \u503c: import { createDecipheriv } from 'crypto' ; const decipher = createDecipheriv ( 'aes-256-ctr' , key , iv ); const decryptedText = Buffer . concat ([ decipher . update ( encryptedText ), decipher . final (), ]); \u54c8\u5e0c \u00b6 \u5bf9\u4e8e\u54c8\u5e0c\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528 bcrypt \u6216 argon2 \u5305\u3002 Nest \u672c\u8eab\u6ca1\u6709\u5728\u8fd9\u4e9b\u6a21\u5757\u4e0a\u63d0\u4f9b\u4efb\u4f55\u989d\u5916\u7684\u5305\u88c5\u5668\uff0c\u4ee5\u907f\u514d\u5f15\u5165\u4e0d\u5fc5\u8981\u7684\u62bd\u8c61(\u4f7f\u5b66\u4e60\u66f2\u7ebf\u53d8\u77ed)\u3002 \u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528 bcrypt \u6765\u54c8\u5e0c\u4e00\u4e2a\u968f\u673a\u5bc6\u7801\u3002 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i bcrypt $ npm i -D @types/bcrypt \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 hash \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a: import * as bcrypt from 'bcrypt' ; const saltOrRounds = 10 ; const password = 'random_password' ; const hash = await bcrypt . hash ( password , saltOrRounds ); \u8981\u751f\u6210 salt\uff0c\u4f7f\u7528 genSalt \u51fd\u6570: const salt = await bcrypt . genSalt (); \u8981\u6bd4\u8f83/\u68c0\u67e5\u5bc6\u7801\uff0c\u4f7f\u7528 compare \u51fd\u6570: const isMatch = await bcrypt . compare ( password , hash ); \u4f60\u53ef\u4ee5\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u53ef\u7528\u51fd\u6570\u7684\u4fe1\u606f \u8fd9\u91cc .","title":"\u52a0\u5bc6\u548c\u6563\u5217"},{"location":"security/encryption-hashing/#_1","text":"\u52a0\u5bc6 \u662f\u5bf9\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u8fc7\u7a0b\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5c06\u4fe1\u606f\u7684\u539f\u59cb\u8868\u793a\u5f62\u5f0f(\u5373\u660e\u6587)\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u5f62\u5f0f(\u5373\u5bc6\u6587)\u3002 \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u6388\u6743\u65b9\u624d\u80fd\u5c06\u5bc6\u6587\u89e3\u5bc6\u4e3a\u660e\u6587\u5e76\u8bbf\u95ee\u539f\u59cb\u4fe1\u606f\u3002 \u52a0\u5bc6\u672c\u8eab\u5e76\u4e0d\u80fd\u9632\u6b62\u5e72\u6270\uff0c\u4f46\u4f1a\u62d2\u7edd\u5411\u6f5c\u5728\u7684\u62e6\u622a\u8005\u63d0\u4f9b\u53ef\u7406\u89e3\u7684\u5185\u5bb9\u3002 \u52a0\u5bc6\u662f\u4e00\u79cd\u53cc\u5411\u529f\u80fd;\u88ab\u52a0\u5bc6\u7684\u4e1c\u897f\u53ef\u4ee5\u7528\u5408\u9002\u7684\u5bc6\u94a5\u89e3\u5bc6\u3002 \u54c8\u5e0c\u662f\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u7684\u952e\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u503c\u7684\u8fc7\u7a0b\u3002 \u54c8\u5e0c\u51fd\u6570\u7528\u4e8e\u6839\u636e\u6570\u5b66\u7b97\u6cd5\u751f\u6210\u65b0\u503c\u3002 \u4e00\u65e6\u54c8\u5e0c\u64cd\u4f5c\u5b8c\u6210\uff0c\u4ece\u8f93\u51fa\u5230\u8f93\u5165\u5e94\u8be5\u662f\u4e0d\u53ef\u80fd\u7684\u3002","title":"\u52a0\u5bc6\u548c\u6563\u5217"},{"location":"security/encryption-hashing/#_2","text":"Node.js \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684 crypto \u6a21\u5757 \uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u52a0\u5bc6\u548c\u89e3\u5bc6\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3001\u7f13\u51b2\u533a\u3001\u6d41\u7b49\u3002 Nest \u672c\u8eab\u5e76\u6ca1\u6709\u5728\u8fd9\u4e2a\u6a21\u5757\u4e0a\u63d0\u4f9b\u4efb\u4f55\u989d\u5916\u7684\u5305\uff0c\u4ee5\u907f\u514d\u5f15\u5165\u4e0d\u5fc5\u8981\u7684\u62bd\u8c61\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528 AES(\u9ad8\u7ea7\u52a0\u5bc6\u7cfb\u7edf) 'aes-256-ctr' \u7b97\u6cd5 CTR \u52a0\u5bc6\u6a21\u5f0f\u3002 import { createCipheriv , randomBytes , scrypt } from 'crypto' ; import { promisify } from 'util' ; const iv = randomBytes ( 16 ); const password = 'Password used to generate key' ; // The key length is dependent on the algorithm. // In this case for aes256, it is 32 bytes. const key = ( await promisify ( scrypt )( password , 'salt' , 32 )) as Buffer ; const cipher = createCipheriv ( 'aes-256-ctr' , key , iv ); const textToEncrypt = 'Nest' ; const encryptedText = Buffer . concat ([ cipher . update ( textToEncrypt ), cipher . final (), ]); \u73b0\u5728\u8981\u89e3\u5bc6 encryptedText \u503c: import { createDecipheriv } from 'crypto' ; const decipher = createDecipheriv ( 'aes-256-ctr' , key , iv ); const decryptedText = Buffer . concat ([ decipher . update ( encryptedText ), decipher . final (), ]);","title":"\u52a0\u5bc6"},{"location":"security/encryption-hashing/#_3","text":"\u5bf9\u4e8e\u54c8\u5e0c\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528 bcrypt \u6216 argon2 \u5305\u3002 Nest \u672c\u8eab\u6ca1\u6709\u5728\u8fd9\u4e9b\u6a21\u5757\u4e0a\u63d0\u4f9b\u4efb\u4f55\u989d\u5916\u7684\u5305\u88c5\u5668\uff0c\u4ee5\u907f\u514d\u5f15\u5165\u4e0d\u5fc5\u8981\u7684\u62bd\u8c61(\u4f7f\u5b66\u4e60\u66f2\u7ebf\u53d8\u77ed)\u3002 \u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528 bcrypt \u6765\u54c8\u5e0c\u4e00\u4e2a\u968f\u673a\u5bc6\u7801\u3002 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i bcrypt $ npm i -D @types/bcrypt \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 hash \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a: import * as bcrypt from 'bcrypt' ; const saltOrRounds = 10 ; const password = 'random_password' ; const hash = await bcrypt . hash ( password , saltOrRounds ); \u8981\u751f\u6210 salt\uff0c\u4f7f\u7528 genSalt \u51fd\u6570: const salt = await bcrypt . genSalt (); \u8981\u6bd4\u8f83/\u68c0\u67e5\u5bc6\u7801\uff0c\u4f7f\u7528 compare \u51fd\u6570: const isMatch = await bcrypt . compare ( password , hash ); \u4f60\u53ef\u4ee5\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u53ef\u7528\u51fd\u6570\u7684\u4fe1\u606f \u8fd9\u91cc .","title":"\u54c8\u5e0c"},{"location":"security/helmet/","text":"Helmet \u00b6 Helmet \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u9002\u5f53\u7684 HTTP \u5934\u6765\u4fdd\u62a4\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u514d\u53d7\u4e00\u4e9b\u4f17\u6240\u5468\u77e5\u7684 web \u6f0f\u6d1e\u3002 \u901a\u5e38\uff0cHelmet \u53ea\u662f 14 \u4e2a\u8f83\u5c0f\u7684\u4e2d\u95f4\u4ef6\u51fd\u6570\u7684\u96c6\u5408\uff0c\u7528\u4e8e\u8bbe\u7f6e\u4e0e\u5b89\u5168\u76f8\u5173\u7684 HTTP \u5934(\u8bf7\u9605\u8bfb \u66f4\u591a )\u3002 info Hint \u6ce8\u610f\uff0c\u5c06 helmet \u5e94\u7528\u4e3a\u5168\u5c40\u6216\u6ce8\u518c\u5b83\u5fc5\u987b\u5728\u5176\u4ed6\u8c03\u7528 app.use() \u6216\u53ef\u80fd\u8c03\u7528 app.use() \u7684 setup \u51fd\u6570\u4e4b\u524d\u3002 \u8fd9\u662f\u7531\u4e8e\u5e95\u5c42\u5e73\u53f0(\u5373 Express \u6216 Fastify)\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5176\u4e2d\u4e2d\u95f4\u4ef6/\u8def\u7531\u7684\u5b9a\u4e49\u987a\u5e8f\u5f88\u91cd\u8981\u3002 \u5982\u679c\u4f60\u5728\u5b9a\u4e49\u8def\u7531\u540e\u4f7f\u7528 helmet \u6216 cors \u4e4b\u7c7b\u7684\u4e2d\u95f4\u4ef6\uff0c\u90a3\u4e48\u8be5\u4e2d\u95f4\u4ef6\u5c06\u4e0d\u4f1a\u5e94\u7528\u4e8e\u8be5\u8def\u7531\uff0c\u5b83\u53ea\u4f1a\u5e94\u7528\u4e8e\u8def\u7531\u540e\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6\u3002 \u4e0e Express \u4e00\u8d77\u4f7f\u7528(\u9ed8\u8ba4) \u00b6 Start by installing the required package. $ npm i --save helmet Once the installation is complete, apply it as a global middleware. import * as helmet from 'helmet' ; // somewhere in your initialization file app . use ( helmet ()); info Hint If you are getting the This expression is not callable error while trying to import Helmet , you very likely have the allowSyntheticDefaultImports and esModuleInterop options set to true in your project's tsconfig.json file. If that's the case, change the import statement to: import helmet from 'helmet' instead. \u4e0e Fastify \u4e00\u8d77\u4f7f\u7528 \u00b6 If you are using the FastifyAdapter , install the fastify-helmet package: $ npm i --save fastify-helmet fastify-helmet should not be used as a middleware, but as a Fastify plugin , i.e., by using app.register() : import { fastifyHelmet } from 'fastify-helmet' ; // somewhere in your initialization file await app . register ( fastifyHelmet ); warning Warning When using apollo-server-fastify and fastify-helmet , there may be a problem with CSP on the GraphQL playground, to solve this collision, configure the CSP as shown below: await app . register ( fastifyHelmet , { contentSecurityPolicy : { directives : { defaultSrc : [ `'self'` ], styleSrc : [ `'self'` , `'unsafe-inline'` , 'cdn.jsdelivr.net' , 'fonts.googleapis.com' , ], fontSrc : [ `'self'` , 'fonts.gstatic.com' ], imgSrc : [ `'self'` , 'data:' , 'cdn.jsdelivr.net' ], scriptSrc : [ `'self'` , `https: 'unsafe-inline'` , `cdn.jsdelivr.net` ], }, }, }); // If you are not going to use CSP at all, you can use this: await app . register ( fastifyHelmet , { contentSecurityPolicy : false , });","title":"Helmet"},{"location":"security/helmet/#helmet","text":"Helmet \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u9002\u5f53\u7684 HTTP \u5934\u6765\u4fdd\u62a4\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u514d\u53d7\u4e00\u4e9b\u4f17\u6240\u5468\u77e5\u7684 web \u6f0f\u6d1e\u3002 \u901a\u5e38\uff0cHelmet \u53ea\u662f 14 \u4e2a\u8f83\u5c0f\u7684\u4e2d\u95f4\u4ef6\u51fd\u6570\u7684\u96c6\u5408\uff0c\u7528\u4e8e\u8bbe\u7f6e\u4e0e\u5b89\u5168\u76f8\u5173\u7684 HTTP \u5934(\u8bf7\u9605\u8bfb \u66f4\u591a )\u3002 info Hint \u6ce8\u610f\uff0c\u5c06 helmet \u5e94\u7528\u4e3a\u5168\u5c40\u6216\u6ce8\u518c\u5b83\u5fc5\u987b\u5728\u5176\u4ed6\u8c03\u7528 app.use() \u6216\u53ef\u80fd\u8c03\u7528 app.use() \u7684 setup \u51fd\u6570\u4e4b\u524d\u3002 \u8fd9\u662f\u7531\u4e8e\u5e95\u5c42\u5e73\u53f0(\u5373 Express \u6216 Fastify)\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u5176\u4e2d\u4e2d\u95f4\u4ef6/\u8def\u7531\u7684\u5b9a\u4e49\u987a\u5e8f\u5f88\u91cd\u8981\u3002 \u5982\u679c\u4f60\u5728\u5b9a\u4e49\u8def\u7531\u540e\u4f7f\u7528 helmet \u6216 cors \u4e4b\u7c7b\u7684\u4e2d\u95f4\u4ef6\uff0c\u90a3\u4e48\u8be5\u4e2d\u95f4\u4ef6\u5c06\u4e0d\u4f1a\u5e94\u7528\u4e8e\u8be5\u8def\u7531\uff0c\u5b83\u53ea\u4f1a\u5e94\u7528\u4e8e\u8def\u7531\u540e\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6\u3002","title":"Helmet"},{"location":"security/helmet/#express","text":"Start by installing the required package. $ npm i --save helmet Once the installation is complete, apply it as a global middleware. import * as helmet from 'helmet' ; // somewhere in your initialization file app . use ( helmet ()); info Hint If you are getting the This expression is not callable error while trying to import Helmet , you very likely have the allowSyntheticDefaultImports and esModuleInterop options set to true in your project's tsconfig.json file. If that's the case, change the import statement to: import helmet from 'helmet' instead.","title":"\u4e0e Express \u4e00\u8d77\u4f7f\u7528(\u9ed8\u8ba4)"},{"location":"security/helmet/#fastify","text":"If you are using the FastifyAdapter , install the fastify-helmet package: $ npm i --save fastify-helmet fastify-helmet should not be used as a middleware, but as a Fastify plugin , i.e., by using app.register() : import { fastifyHelmet } from 'fastify-helmet' ; // somewhere in your initialization file await app . register ( fastifyHelmet ); warning Warning When using apollo-server-fastify and fastify-helmet , there may be a problem with CSP on the GraphQL playground, to solve this collision, configure the CSP as shown below: await app . register ( fastifyHelmet , { contentSecurityPolicy : { directives : { defaultSrc : [ `'self'` ], styleSrc : [ `'self'` , `'unsafe-inline'` , 'cdn.jsdelivr.net' , 'fonts.googleapis.com' , ], fontSrc : [ `'self'` , 'fonts.gstatic.com' ], imgSrc : [ `'self'` , 'data:' , 'cdn.jsdelivr.net' ], scriptSrc : [ `'self'` , `https: 'unsafe-inline'` , `cdn.jsdelivr.net` ], }, }, }); // If you are not going to use CSP at all, you can use this: await app . register ( fastifyHelmet , { contentSecurityPolicy : false , });","title":"\u4e0e Fastify \u4e00\u8d77\u4f7f\u7528"},{"location":"security/rate-limiting/","text":"\u901f\u5ea6\u9650\u5236 \u00b6 \u4fdd\u62a4\u5e94\u7528\u7a0b\u5e8f\u514d\u53d7\u86ee\u529b\u653b\u51fb\u7684\u4e00\u79cd\u5e38\u89c1\u6280\u672f\u662f\u9650\u901f\u3002 \u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5 @nestjs/throttler \u5305\u3002 $ npm i --save @nestjs/throttler \u4e00\u65e6\u5b89\u88c5\u5b8c\u6210\uff0c ThrottlerModule \u53ef\u4ee5\u914d\u7f6e\u4e3a\u4efb\u4f55\u5176\u4ed6\u5e26\u6709 forRoot \u6216 forRootAsync \u65b9\u6cd5\u7684 Nest \u5305\u3002 @Module ({ imports : [ ThrottlerModule . forRoot ({ ttl : 60 , limit : 10 , }), ], }) export class AppModule {} \u4e0a\u9762\u5c06\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u88ab\u4fdd\u62a4\u7684\u8def\u7531\u8bbe\u7f6e\u5168\u5c40\u9009\u9879 ttl \uff0c\u751f\u5b58\u65f6\u95f4\uff0c\u548c limit \uff0c ttl \u5185\u7684\u6700\u5927\u8bf7\u6c42\u6570\u91cf\u3002 \u4e00\u65e6\u6a21\u5757\u88ab\u5bfc\u5165\uff0c\u4f60\u5c31\u53ef\u4ee5\u9009\u62e9\u5982\u4f55\u7ed1\u5b9a ThrottlerGuard \u3002 guards \u90e8\u5206\u4e2d\u63d0\u5230\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u7ed1\u5b9a\u90fd\u53ef\u4ee5\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u5168\u5c40\u7ed1\u5b9a\u8fd9\u4e2a\u5b88\u536b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u8fd9\u4e2a provider \u6dfb\u52a0\u5230\u4efb\u4f55\u6a21\u5757\u6765\u5b9e\u73b0: { provide : APP_GUARD , useClass : ThrottlerGuard } \u5b9a\u5236 \u00b6 There may be a time where you want to bind the guard to a controller or globally, but want to disable rate limiting for one or more of your endpoints. For that, you can use the @SkipThrottle() decorator, to negate the throttler for an entire class or a single route. The @SkipThrottle() decorator can also take in a boolean for if there is a case where you want to exclude most of a controller, but not every route. There is also the @Throttle() decorator which can be used to override the limit and ttl set in the global module, to give tighter or looser security options. This decorator can be used on a class or a function as well. The order for this decorator does matter, as the arguments are in the order of limit, ttl . \u4ee3\u7406 \u00b6 \u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u5728\u4ee3\u7406\u670d\u52a1\u5668\u540e\u9762\uff0c\u8bf7\u68c0\u67e5\u7279\u5b9a\u7684 HTTP \u9002\u914d\u5668\u9009\u9879( express \u548c fastify )\u4ee5\u83b7\u53d6\u201c\u4fe1\u4efb\u4ee3\u7406\u201d\u9009\u9879\u5e76\u542f\u7528\u5b83\u3002 \u8fd9\u6837\u505a\u5c06\u5141\u8bb8\u4f60\u4ece X-Forward-For \u5934\u83b7\u53d6\u539f\u59cb IP \u5730\u5740\uff0c\u4f60\u53ef\u4ee5\u91cd\u5199 getTracker() \u65b9\u6cd5\u6765\u4ece\u5934\u800c\u4e0d\u662f\u4ece req.ip \u83b7\u53d6\u503c\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u540c\u65f6\u9002\u7528\u4e8e express \u548c fastify: // throttler-behind-proxy.guard.ts import { ThrottlerGuard } from '@nestjs/throttler' ; import { Injectable } from '@nestjs/common' ; @Injectable () export class ThrottlerBehindProxyGuard extends ThrottlerGuard { protected getTracker ( req : Record < string , any > ) : string { return req . ips . length ? req . ips [ 0 ] : req . ip ; // individualize IP extraction to meet your own needs } } // app.controller.ts import { ThrottlerBehindProxyGuard } from './throttler-behind-proxy.guard' ; @UseGuards ( ThrottlerBehindProxyGuard ) info Hint You can find the API of the req Request object for express here and for fastify here . Websockets \u00b6 \u8fd9\u4e2a\u6a21\u5757\u53ef\u4ee5\u4f7f\u7528 websockets\uff0c\u4f46\u5b83\u9700\u8981\u4e00\u4e9b\u7c7b\u6269\u5c55\u3002 \u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u6269\u5c55 ThrottlerGuard \u5e76\u8986\u76d6 handleRequest \u65b9\u6cd5: @Injectable () export class WsThrottlerGuard extends ThrottlerGuard { async handleRequest ( context : ExecutionContext , limit : number , ttl : number , ) : Promise < boolean > { const client = context . switchToWs (). getClient (); const ip = client . conn . remoteAddress ; const key = this . generateKey ( context , ip ); const ttls = await this . storageService . getRecord ( key ); if ( ttls . length >= limit ) { throw new ThrottlerException (); } await this . storageService . addRecord ( key , ttl ); return true ; } } info Hint \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 @nestjs/platform-ws \u5305\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 client._socket.remoteAddress \u4ee3\u66ff\u3002 GraphQL \u00b6 The ThrottlerGuard can also be used to work with GraphQL requests. Again, the guard can be extended, but this time the getRequestResponse method will be overridden @Injectable () export class GqlThrottlerGuard extends ThrottlerGuard { getRequestResponse ( context : ExecutionContext ) { const gqlCtx = GqlExecutionContext . create ( context ); const ctx = gqlCtx . getContext (); return { req : ctx.req , res : ctx.res }; } } \u914d\u7f6e \u00b6 The following options are valid for the ThrottlerModule : ttl \u6bcf\u4e2a\u8bf7\u6c42\u5728\u5b58\u50a8\u4e2d\u6301\u7eed\u7684\u79d2\u6570 limit TTL\u9650\u5236\u5185\u7684\u6700\u5927\u8bf7\u6c42\u6570 ignoreUserAgents \u5728\u9650\u5236\u8bf7\u6c42\u65f6\u53ef\u4ee5\u5ffd\u7565\u7684\u7528\u6237\u4ee3\u7406\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6570\u7ec4 storage \u7528\u4e8e\u8ddf\u8e2a\u8bf7\u6c42\u7684\u5b58\u50a8\u8bbe\u7f6e \u5f02\u6b65\u914d\u7f6e \u00b6 You may want to get your rate-limiting configuration asynchronously instead of synchronously. You can use the forRootAsync() method, which allows for dependency injection and async methods. One approach would be to use a factory function: @Module ({ imports : [ ThrottlerModule . forRootAsync ({ imports : [ ConfigModule ], inject : [ ConfigService ], useFactory : ( config : ConfigService ) => ({ ttl : config.get ( 'THROTTLE_TTL' ), limit : config.get ( 'THROTTLE_LIMIT' ), }), }), ], }) export class AppModule {} \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 useClass \u8bed\u6cd5: @Module ({ imports : [ ThrottlerModule . forRootAsync ({ imports : [ ConfigModule ], useClass : ThrottlerConfigService , }), ], }) export class AppModule {} \u8fd9\u662f\u53ef\u884c\u7684\uff0c\u53ea\u8981 ThrottlerConfigService \u5b9e\u73b0\u63a5\u53e3 ThrottlerOptionsFactory \u3002 \u5b58\u50a8 \u00b6 \u5185\u5efa\u5b58\u50a8\u662f\u4e00\u4e2a\u5185\u5b58\u7f13\u5b58\uff0c\u5b83\u8ddf\u8e2a\u8bf7\u6c42\uff0c\u76f4\u5230\u5b83\u4eec\u4f20\u9012\u4e86\u7531\u5168\u5c40\u9009\u9879\u8bbe\u7f6e\u7684 TTL\u3002 \u4f60\u53ef\u4ee5\u628a\u4f60\u81ea\u5df1\u7684\u5b58\u50a8\u9009\u9879\u653e\u5230 ThrottlerModule \u7684 storage \u9009\u9879\u4e2d\uff0c\u53ea\u8981\u8fd9\u4e2a\u7c7b\u5b9e\u73b0\u4e86 ThrottlerStorage \u63a5\u53e3\u3002 \u5bf9\u4e8e\u5206\u5e03\u5f0f\u670d\u52a1\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u793e\u533a\u5b58\u50a8\u63d0\u4f9b\u5546 Redis \u6765\u83b7\u5f97\u5355\u4e00\u7684\u771f\u76f8\u6765\u6e90\u3002 info Note ThrottlerStorage \u53ef\u4ee5\u4ece @nestjs/throttler \u4e2d\u5bfc\u5165\u3002","title":"\u901f\u5ea6\u9650\u5236"},{"location":"security/rate-limiting/#_1","text":"\u4fdd\u62a4\u5e94\u7528\u7a0b\u5e8f\u514d\u53d7\u86ee\u529b\u653b\u51fb\u7684\u4e00\u79cd\u5e38\u89c1\u6280\u672f\u662f\u9650\u901f\u3002 \u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5 @nestjs/throttler \u5305\u3002 $ npm i --save @nestjs/throttler \u4e00\u65e6\u5b89\u88c5\u5b8c\u6210\uff0c ThrottlerModule \u53ef\u4ee5\u914d\u7f6e\u4e3a\u4efb\u4f55\u5176\u4ed6\u5e26\u6709 forRoot \u6216 forRootAsync \u65b9\u6cd5\u7684 Nest \u5305\u3002 @Module ({ imports : [ ThrottlerModule . forRoot ({ ttl : 60 , limit : 10 , }), ], }) export class AppModule {} \u4e0a\u9762\u5c06\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u88ab\u4fdd\u62a4\u7684\u8def\u7531\u8bbe\u7f6e\u5168\u5c40\u9009\u9879 ttl \uff0c\u751f\u5b58\u65f6\u95f4\uff0c\u548c limit \uff0c ttl \u5185\u7684\u6700\u5927\u8bf7\u6c42\u6570\u91cf\u3002 \u4e00\u65e6\u6a21\u5757\u88ab\u5bfc\u5165\uff0c\u4f60\u5c31\u53ef\u4ee5\u9009\u62e9\u5982\u4f55\u7ed1\u5b9a ThrottlerGuard \u3002 guards \u90e8\u5206\u4e2d\u63d0\u5230\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u7ed1\u5b9a\u90fd\u53ef\u4ee5\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u5168\u5c40\u7ed1\u5b9a\u8fd9\u4e2a\u5b88\u536b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06\u8fd9\u4e2a provider \u6dfb\u52a0\u5230\u4efb\u4f55\u6a21\u5757\u6765\u5b9e\u73b0: { provide : APP_GUARD , useClass : ThrottlerGuard }","title":"\u901f\u5ea6\u9650\u5236"},{"location":"security/rate-limiting/#_2","text":"There may be a time where you want to bind the guard to a controller or globally, but want to disable rate limiting for one or more of your endpoints. For that, you can use the @SkipThrottle() decorator, to negate the throttler for an entire class or a single route. The @SkipThrottle() decorator can also take in a boolean for if there is a case where you want to exclude most of a controller, but not every route. There is also the @Throttle() decorator which can be used to override the limit and ttl set in the global module, to give tighter or looser security options. This decorator can be used on a class or a function as well. The order for this decorator does matter, as the arguments are in the order of limit, ttl .","title":"\u5b9a\u5236"},{"location":"security/rate-limiting/#_3","text":"\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u5728\u4ee3\u7406\u670d\u52a1\u5668\u540e\u9762\uff0c\u8bf7\u68c0\u67e5\u7279\u5b9a\u7684 HTTP \u9002\u914d\u5668\u9009\u9879( express \u548c fastify )\u4ee5\u83b7\u53d6\u201c\u4fe1\u4efb\u4ee3\u7406\u201d\u9009\u9879\u5e76\u542f\u7528\u5b83\u3002 \u8fd9\u6837\u505a\u5c06\u5141\u8bb8\u4f60\u4ece X-Forward-For \u5934\u83b7\u53d6\u539f\u59cb IP \u5730\u5740\uff0c\u4f60\u53ef\u4ee5\u91cd\u5199 getTracker() \u65b9\u6cd5\u6765\u4ece\u5934\u800c\u4e0d\u662f\u4ece req.ip \u83b7\u53d6\u503c\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u540c\u65f6\u9002\u7528\u4e8e express \u548c fastify: // throttler-behind-proxy.guard.ts import { ThrottlerGuard } from '@nestjs/throttler' ; import { Injectable } from '@nestjs/common' ; @Injectable () export class ThrottlerBehindProxyGuard extends ThrottlerGuard { protected getTracker ( req : Record < string , any > ) : string { return req . ips . length ? req . ips [ 0 ] : req . ip ; // individualize IP extraction to meet your own needs } } // app.controller.ts import { ThrottlerBehindProxyGuard } from './throttler-behind-proxy.guard' ; @UseGuards ( ThrottlerBehindProxyGuard ) info Hint You can find the API of the req Request object for express here and for fastify here .","title":"\u4ee3\u7406"},{"location":"security/rate-limiting/#websockets","text":"\u8fd9\u4e2a\u6a21\u5757\u53ef\u4ee5\u4f7f\u7528 websockets\uff0c\u4f46\u5b83\u9700\u8981\u4e00\u4e9b\u7c7b\u6269\u5c55\u3002 \u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u6269\u5c55 ThrottlerGuard \u5e76\u8986\u76d6 handleRequest \u65b9\u6cd5: @Injectable () export class WsThrottlerGuard extends ThrottlerGuard { async handleRequest ( context : ExecutionContext , limit : number , ttl : number , ) : Promise < boolean > { const client = context . switchToWs (). getClient (); const ip = client . conn . remoteAddress ; const key = this . generateKey ( context , ip ); const ttls = await this . storageService . getRecord ( key ); if ( ttls . length >= limit ) { throw new ThrottlerException (); } await this . storageService . addRecord ( key , ttl ); return true ; } } info Hint \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 @nestjs/platform-ws \u5305\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 client._socket.remoteAddress \u4ee3\u66ff\u3002","title":"Websockets"},{"location":"security/rate-limiting/#graphql","text":"The ThrottlerGuard can also be used to work with GraphQL requests. Again, the guard can be extended, but this time the getRequestResponse method will be overridden @Injectable () export class GqlThrottlerGuard extends ThrottlerGuard { getRequestResponse ( context : ExecutionContext ) { const gqlCtx = GqlExecutionContext . create ( context ); const ctx = gqlCtx . getContext (); return { req : ctx.req , res : ctx.res }; } }","title":"GraphQL"},{"location":"security/rate-limiting/#_4","text":"The following options are valid for the ThrottlerModule : ttl \u6bcf\u4e2a\u8bf7\u6c42\u5728\u5b58\u50a8\u4e2d\u6301\u7eed\u7684\u79d2\u6570 limit TTL\u9650\u5236\u5185\u7684\u6700\u5927\u8bf7\u6c42\u6570 ignoreUserAgents \u5728\u9650\u5236\u8bf7\u6c42\u65f6\u53ef\u4ee5\u5ffd\u7565\u7684\u7528\u6237\u4ee3\u7406\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6570\u7ec4 storage \u7528\u4e8e\u8ddf\u8e2a\u8bf7\u6c42\u7684\u5b58\u50a8\u8bbe\u7f6e","title":"\u914d\u7f6e"},{"location":"security/rate-limiting/#_5","text":"You may want to get your rate-limiting configuration asynchronously instead of synchronously. You can use the forRootAsync() method, which allows for dependency injection and async methods. One approach would be to use a factory function: @Module ({ imports : [ ThrottlerModule . forRootAsync ({ imports : [ ConfigModule ], inject : [ ConfigService ], useFactory : ( config : ConfigService ) => ({ ttl : config.get ( 'THROTTLE_TTL' ), limit : config.get ( 'THROTTLE_LIMIT' ), }), }), ], }) export class AppModule {} \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 useClass \u8bed\u6cd5: @Module ({ imports : [ ThrottlerModule . forRootAsync ({ imports : [ ConfigModule ], useClass : ThrottlerConfigService , }), ], }) export class AppModule {} \u8fd9\u662f\u53ef\u884c\u7684\uff0c\u53ea\u8981 ThrottlerConfigService \u5b9e\u73b0\u63a5\u53e3 ThrottlerOptionsFactory \u3002","title":"\u5f02\u6b65\u914d\u7f6e"},{"location":"security/rate-limiting/#_6","text":"\u5185\u5efa\u5b58\u50a8\u662f\u4e00\u4e2a\u5185\u5b58\u7f13\u5b58\uff0c\u5b83\u8ddf\u8e2a\u8bf7\u6c42\uff0c\u76f4\u5230\u5b83\u4eec\u4f20\u9012\u4e86\u7531\u5168\u5c40\u9009\u9879\u8bbe\u7f6e\u7684 TTL\u3002 \u4f60\u53ef\u4ee5\u628a\u4f60\u81ea\u5df1\u7684\u5b58\u50a8\u9009\u9879\u653e\u5230 ThrottlerModule \u7684 storage \u9009\u9879\u4e2d\uff0c\u53ea\u8981\u8fd9\u4e2a\u7c7b\u5b9e\u73b0\u4e86 ThrottlerStorage \u63a5\u53e3\u3002 \u5bf9\u4e8e\u5206\u5e03\u5f0f\u670d\u52a1\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u793e\u533a\u5b58\u50a8\u63d0\u4f9b\u5546 Redis \u6765\u83b7\u5f97\u5355\u4e00\u7684\u771f\u76f8\u6765\u6e90\u3002 info Note ThrottlerStorage \u53ef\u4ee5\u4ece @nestjs/throttler \u4e2d\u5bfc\u5165\u3002","title":"\u5b58\u50a8"},{"location":"techniques/caching/","text":"\u7f13\u5b58 \u00b6 \u7f13\u5b58\u662f\u4e00\u79cd\u4f1f\u5927\u800c\u7b80\u5355\u7684\u6280\u672f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u4f60\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd \u5b83\u5145\u5f53\u4e34\u65f6\u6570\u636e\u5b58\u50a8\uff0c\u63d0\u4f9b\u9ad8\u6027\u80fd\u6570\u636e\u8bbf\u95ee\u3002 \u5b89\u88c5 \u00b6 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm install cache-manager $ npm install -D @types/cache-manager \u5185\u5b58\u7f13\u5b58 \u00b6 Nest \u4e3a\u5404\u79cd\u7f13\u5b58\u5b58\u50a8\u63d0\u4f9b\u5546\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684 API \u5185\u7f6e\u7684\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5b58\u50a8 \u4e0d\u8fc7\uff0c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5207\u6362\u5230\u4e00\u4e2a\u66f4\u5168\u9762\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6bd4\u5982 Redis\u3002 \u4e3a\u4e86\u542f\u7528\u7f13\u5b58\uff0c\u5bfc\u5165 CacheModule \u5e76\u8c03\u7528\u5b83\u7684 register() \u65b9\u6cd5\u3002 import { CacheModule , Module } from `@nestjs/common'; import { AppController } from` . / app . controller ' ; @Module ({ imports : [ CacheModule . register ()], controllers : [ AppController ], }) export class AppModule {} \u4e0e\u7f13\u5b58\u5b58\u50a8\u4ea4\u4e92 \u00b6 \u8981\u4e0e\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\u4ea4\u4e92\uff0c\u4f7f\u7528 CACHE_MANAGER \u4ee4\u724c\u5c06\u5176\u6ce8\u5165\u5230\u4f60\u7684\u7c7b\u4e2d\uff0c\u5982\u4e0b\u6240\u793a: constructor ( @Inject ( CACHE_MANAGER ) private cacheManager : Cache ) {} info Hint Cache \u7c7b\u662f\u4ece cache-manager \u5bfc\u5165\u7684\uff0c\u800c CACHE_MANAGER \u4ee4\u724c\u662f\u4ece @nestjs/common \u5305\u5bfc\u5165\u7684\u3002 Cache \u5b9e\u4f8b\u7684 get \u65b9\u6cd5(\u6765\u81ea cache-manager \u5305)\u7528\u4e8e\u4ece\u7f13\u5b58\u4e2d\u68c0\u7d22\u9879 \u5982\u679c\u8be5\u9879\u5728\u7f13\u5b58\u4e2d\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de null \u3002 const value = await this . cacheManager . get ( 'key' ); \u8981\u5411\u7f13\u5b58\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u9879\uff0c\u8bf7\u4f7f\u7528 set \u65b9\u6cd5: await this . cacheManager . set ( 'key' , 'value' ); \u7f13\u5b58\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\u4e3a 5 \u79d2\u3002 \u60a8\u53ef\u4ee5\u624b\u52a8\u4e3a\u8fd9\u4e2a\u7279\u5b9a\u7684\u5bc6\u94a5\u6307\u5b9a\u4e00\u4e2a TTL(\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u8fc7\u671f\u65f6\u95f4)\uff0c\u5982\u4e0b\u6240\u793a: await this . cacheManager . set ( 'key' , 'value' , { ttl : 1000 }); \u7f13\u5b58\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\u4e3a 5 \u79d2\u3002 \u60a8\u53ef\u4ee5\u624b\u52a8\u4e3a\u8fd9\u4e2a\u7279\u5b9a\u7684\u5bc6\u94a5\u6307\u5b9a\u4e00\u4e2a TTL(\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u8fc7\u671f\u65f6\u95f4)\uff0c\u5982\u4e0b\u6240\u793a: await this . cacheManager . set ( 'key' , 'value' , { ttl : 0 }); \u8981\u4ece\u7f13\u5b58\u4e2d\u5220\u9664\u4e00\u4e2a\u9879\uff0c\u4f7f\u7528 del \u65b9\u6cd5: await this . cacheManager . del ( 'key' ); \u8981\u6e05\u9664\u6574\u4e2a\u7f13\u5b58\uff0c\u8bf7\u4f7f\u7528 reset \u65b9\u6cd5: await this . cacheManager . reset (); \u81ea\u52a8\u7f13\u5b58\u54cd\u5e94 \u00b6 warning Warning \u5728 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u62e6\u622a\u5668\u662f\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u89e3\u6790\u5668\u5355\u72ec\u6267\u884c\u7684 \u56e0\u6b64\uff0c CacheModule (\u4f7f\u7528\u62e6\u622a\u5668\u6765\u7f13\u5b58\u54cd\u5e94)\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u8981\u542f\u7528\u81ea\u52a8\u7f13\u5b58\u54cd\u5e94\uff0c\u53ea\u9700\u5c06 CacheInterceptor \u7ed1\u5b9a\u5728\u4f60\u60f3\u8981\u7f13\u5b58\u6570\u636e\u7684\u5730\u65b9\u3002 @Controller () @UseInterceptors ( CacheInterceptor ) export class AppController { @Get () findAll () : string [] { return []; } } warning Warning \u53ea\u7f13\u5b58 GET \u7aef\u70b9 \u6b64\u5916\uff0c\u6ce8\u5165\u672c\u673a\u54cd\u5e94\u5bf9\u8c61( @Res() )\u7684 HTTP \u670d\u52a1\u5668\u8def\u7531\u4e0d\u80fd\u4f7f\u7528\u7f13\u5b58\u62e6\u622a\u5668 \u8bf7\u53c2\u9605 \u54cd\u5e94\u6620\u5c04 \u4e86\u89e3\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002 \u4e3a\u4e86\u51cf\u5c11\u6240\u9700\u6837\u677f\u6587\u4ef6\u7684\u6570\u91cf\uff0c\u4f60\u53ef\u4ee5\u5168\u5c40\u7ed1\u5b9a CacheInterceptor \u5230\u6240\u6709\u7aef\u70b9: import { CacheModule , Module , CacheInterceptor } from `@nestjs/common'; import { AppController } from` . / app . controller '; import { APP_INTERCEPTOR } from`@nestjs/core' ; @Module ({ imports : [ CacheModule . register ()], controllers : [ AppController ], providers : [ { provide : APP_INTERCEPTOR , useClass : CacheInterceptor , }, ], }) export class AppModule {} \u5b9a\u5236\u9ad8\u901f\u7f13\u5b58 \u00b6 \u6240\u6709\u7f13\u5b58\u6570\u636e\u90fd\u6709\u81ea\u5df1\u7684\u8fc7\u671f\u65f6\u95f4( TTL ) \u8981\u81ea\u5b9a\u4e49\u9ed8\u8ba4\u503c\uff0c\u5c06\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 register() \u65b9\u6cd5\u3002 CacheModule . register ({ ttl : 5 , // seconds max : 10 , // maximum number of items in cache }); \u5728\u5168\u5c40\u8303\u56f4\u5185\u4f7f\u7528\u6a21\u5757 \u00b6 \u5f53\u4f60\u60f3\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u4f7f\u7528 CacheModule \u65f6\uff0c\u4f60\u9700\u8981\u5bfc\u5165\u5b83(\u5c31\u50cf\u4efb\u4f55 Nest \u6a21\u5757\u4e00\u6837) \u6216\u8005\uff0c\u901a\u8fc7\u8bbe\u7f6e options \u5bf9\u8c61\u7684 isGlobal \u5c5e\u6027\u4e3a true \u6765\u58f0\u660e\u5b83\u4e3a global \u6a21\u5757 \uff0c\u5982\u4e0b\u6240\u793a \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u65e6 CacheModule \u88ab\u52a0\u8f7d\u5230\u6839\u6a21\u5757(\u4f8b\u5982 AppModule )\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u5bfc\u5165\u5b83\u4e86\u3002 CacheModule . register ({ isGlobal : true , }); \u5168\u5c40\u7f13\u5b58\u8986\u76d6 \u00b6 \u5f53\u5168\u5c40\u7f13\u5b58\u88ab\u542f\u7528\u65f6\uff0c\u7f13\u5b58\u6761\u76ee\u88ab\u5b58\u50a8\u5728\u4e00\u4e2a CacheKey \u4e0b\uff0c\u8fd9\u4e2a CacheKey \u662f\u6839\u636e\u8def\u7531\u8def\u5f84\u81ea\u52a8\u751f\u6210\u7684 \u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u91cd\u5199\u67d0\u4e9b\u7f13\u5b58\u8bbe\u7f6e( @CacheKey() \u548c @CacheTTL() )\uff0c\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u63a7\u5236\u5668\u65b9\u6cd5\u5b9a\u5236\u7f13\u5b58\u7b56\u7565 \u5728\u4f7f\u7528[\u4e0d\u540c\u7684\u7f13\u5b58\u5b58\u50a8]\u65f6\u8fd9\u53ef\u80fd\u662f\u6700\u76f8\u5173\u7684\u3002(https://docs.nestjs.com/techniques/caching#different-stores) @Controller () export class AppController { @CacheKey ( 'custom_key' ) @CacheTTL ( 20 ) findAll () : string [] { return []; } } info Hint @CacheKey() \u548c @CacheTTL() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 @CacheKey() \u4fee\u9970\u7b26\u53ef\u4ee5\u548c\u5bf9\u5e94\u7684 @CacheTTL() \u4fee\u9970\u7b26\u4e00\u8d77\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\uff0c\u53cd\u4e4b\u4ea6\u7136 \u53ef\u4ee5\u9009\u62e9\u53ea\u8986\u76d6 @CacheKey() \u6216\u53ea\u8986\u76d6 @CacheTTL() \u6ca1\u6709\u88ab\u88c5\u9970\u5668\u8986\u76d6\u7684\u8bbe\u7f6e\u5c06\u4f7f\u7528\u5168\u5c40\u6ce8\u518c\u7684\u9ed8\u8ba4\u503c(\u53c2\u89c1 \u81ea\u5b9a\u4e49\u7f13\u5b58 )\u3002 WebSockets \u548c Microservices \u00b6 \u4f60\u4e5f\u53ef\u4ee5\u5c06 CacheInterceptor \u5e94\u7528\u5230 WebSocket \u8ba2\u9605\u8005\u548c Microservice \u7684\u6a21\u5f0f\u4e2d(\u4e0d\u7ba1\u4f7f\u7528\u7684\u4f20\u8f93\u65b9\u6cd5\u662f\u4ec0\u4e48)\u3002 @ @filename () @CacheKey ( 'events' ) @UseInterceptors ( CacheInterceptor ) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : string []) : Observable < string [] > { return []; } @ @switch @CacheKey ( 'events' ) @UseInterceptors ( CacheInterceptor ) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { return []; } \u7136\u800c\uff0c\u989d\u5916\u7684 @CacheKey() \u4fee\u9970\u7b26\u662f\u5fc5\u9700\u7684\uff0c\u4ee5\u4fbf\u6307\u5b9a\u4e00\u4e2a\u7528\u4e8e\u968f\u540e\u5b58\u50a8\u548c\u68c0\u7d22\u7f13\u5b58\u6570\u636e\u7684\u952e \u6b64\u5916\uff0c\u8bf7\u6ce8\u610f\uff0c\u60a8 \u4e0d\u5e94\u8be5\u7f13\u5b58\u6240\u6709\u5185\u5bb9 \u6267\u884c\u67d0\u4e9b\u4e1a\u52a1\u64cd\u4f5c\u800c\u4e0d\u662f\u7b80\u5355\u5730\u67e5\u8be2\u6570\u636e\u7684\u64cd\u4f5c\u6c38\u8fdc\u4e0d\u5e94\u8be5\u88ab\u7f13\u5b58\u3002 \u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 @CacheTTL() \u88c5\u9970\u5668\u6307\u5b9a\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4(TTL)\uff0c\u5b83\u5c06\u8986\u76d6\u5168\u5c40\u9ed8\u8ba4 TTL \u503c\u3002 @ @filename () @CacheTTL ( 10 ) @UseInterceptors ( CacheInterceptor ) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : string []) : Observable < string [] > { return []; } @ @switch @CacheTTL ( 10 ) @UseInterceptors ( CacheInterceptor ) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { return []; } info Hint @CacheTTL() \u4fee\u9970\u7b26\u53ef\u4ee5\u4e0e\u5bf9\u5e94\u7684 @CacheKey() \u4fee\u9970\u7b26\u4e00\u8d77\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u3002 \u8c03\u6574\u8ddf\u8e2a \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNest \u4f7f\u7528\u8bf7\u6c42 URL(\u5728 HTTP \u5e94\u7528\u7a0b\u5e8f\u4e2d)\u6216\u7f13\u5b58\u952e(\u5728 websockets \u548c\u5fae\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u8fc7 @CacheKey() \u88c5\u9970\u5668\u8bbe\u7f6e)\u6765\u5c06\u7f13\u5b58\u8bb0\u5f55\u4e0e\u7aef\u70b9\u5173\u8054\u8d77\u6765 \u7136\u800c\uff0c\u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u57fa\u4e8e\u4e0d\u540c\u7684\u56e0\u7d20\u8bbe\u7f6e\u8ddf\u8e2a\uff0c\u4f8b\u5982\uff0c\u4f7f\u7528 HTTP \u5934(\u4f8b\u5982 '\u6388\u6743'\u4ee5\u6b63\u786e\u6807\u8bc6'\u914d\u7f6e\u6587\u4ef6'\u7aef\u70b9)\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u521b\u5efa\u4e00\u4e2a CacheInterceptor \u7684\u5b50\u7c7b\uff0c\u5e76\u8986\u76d6 trackBy() \u65b9\u6cd5\u3002 @Injectable () class HttpCacheInterceptor extends CacheInterceptor { trackBy ( context : ExecutionContext ) : string | undefined { return `key'; } } \u4e0d\u540c\u7684\u5546\u5e97 \u00b6 \u8be5\u670d\u52a1\u5728\u5185\u90e8\u5229\u7528\u4e86 cache-manager cache-manager \u5305\u652f\u6301\u5e7f\u6cdb\u7684\u6709\u7528\u7684\u5b58\u50a8\uff0c\u4f8b\u5982 Redis store \u652f\u6301\u7684\u5546\u5e97\u7684\u5b8c\u6574\u5217\u8868\u53ef\u4ee5\u83b7\u5f97 \u6b64\u5904 \u8981\u8bbe\u7f6e Redis store\uff0c\u53ea\u9700\u5c06\u5305\u8fde\u540c\u76f8\u5e94\u7684\u9009\u9879\u4f20\u9012\u7ed9 register() \u65b9\u6cd5\u3002 import type { ClientOpts as RedisClientOpts } from `redis'; import * as redisStore from` cache - manager - redis - store '; import { CacheModule, Module } from`@nestjs/common' ; import { AppController } from `./app.controller'; @Module({ imports: [ CacheModule.register<RedisClientOpts>({ store: redisStore, // Store-specific configuration: host:` localhost ' , port : 6379 , }), ], controllers : [ AppController ], }) export class AppModule {} \u5f02\u6b65\u7684\u914d\u7f6e \u00b6 \u4f60\u53ef\u80fd\u60f3\u8981\u5f02\u6b65\u4f20\u9012\u6a21\u5757\u9009\u9879\uff0c\u800c\u4e0d\u662f\u5728\u7f16\u8bd1\u65f6\u9759\u6001\u4f20\u9012 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 registerAsync() \u65b9\u6cd5\uff0c\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u65b9\u6cd5\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: CacheModule . registerAsync ({ useFactory : () => ({ ttl : 5 , }), }); \u6211\u4eec\u7684\u5de5\u5382\u884c\u4e3a\u4e0e\u6240\u6709\u5176\u4ed6\u5f02\u6b65\u6a21\u5757\u5de5\u5382\u4e00\u6837(\u5b83\u53ef\u4ee5\u662f async \uff0c\u5e76\u80fd\u591f\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56)\u3002 CacheModule . registerAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ ttl : configService.get ( 'CACHE_TTL' ), }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useClass \u65b9\u6cd5: CacheModule . registerAsync ({ useClass : CacheConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5c06\u5728 CacheModule \u4e2d\u5b9e\u4f8b\u5316 CacheConfigService \uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u83b7\u53d6\u9009\u9879\u5bf9\u8c61 \u4e3a\u4e86\u63d0\u4f9b\u914d\u7f6e\u9009\u9879\uff0c CacheConfigService \u5fc5\u987b\u5b9e\u73b0 CacheOptionsFactory \u63a5\u53e3: @Injectable () class CacheConfigService implements CacheOptionsFactory { createCacheOptions () : CacheModuleOptions { return { ttl : 5 , }; } } \u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u4ece\u4e0d\u540c\u6a21\u5757\u5bfc\u5165\u7684\u73b0\u6709\u914d\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u8bf7\u4f7f\u7528 useExisting \u8bed\u6cd5: CacheModule . registerAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u5b83\u7684\u5de5\u4f5c\u539f\u7406\u4e0e useClass \u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b\u2014\u2014 CacheModule \u5c06\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757\u6765\u91cd\u7528\u4efb\u4f55\u5df2\u7ecf\u521b\u5efa\u7684 ConfigService \uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u5316\u5b83\u81ea\u5df1\u7684\u6a21\u5757\u3002 info Hint CacheModule#register \u3001 CacheModule#registerAsync \u548c CacheOptionsFactory \u6709\u4e00\u4e2a\u53ef\u9009\u7684\u6cdb\u578b(\u7c7b\u578b\u53c2\u6570)\u6765\u7f29\u5c0f\u7279\u5b9a\u4e8e\u5b58\u50a8\u7684\u914d\u7f6e\u9009\u9879\uff0c\u4f7f\u5176\u7c7b\u578b\u5b89\u5168\u3002 \u4f8b\u5b50 \u00b6 \u6b64\u5904 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5de5\u4f5c\u793a\u4f8b\u3002","title":"\u7f13\u5b58"},{"location":"techniques/caching/#_1","text":"\u7f13\u5b58\u662f\u4e00\u79cd\u4f1f\u5927\u800c\u7b80\u5355\u7684\u6280\u672f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u4f60\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd \u5b83\u5145\u5f53\u4e34\u65f6\u6570\u636e\u5b58\u50a8\uff0c\u63d0\u4f9b\u9ad8\u6027\u80fd\u6570\u636e\u8bbf\u95ee\u3002","title":"\u7f13\u5b58"},{"location":"techniques/caching/#_2","text":"\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm install cache-manager $ npm install -D @types/cache-manager","title":"\u5b89\u88c5"},{"location":"techniques/caching/#_3","text":"Nest \u4e3a\u5404\u79cd\u7f13\u5b58\u5b58\u50a8\u63d0\u4f9b\u5546\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684 API \u5185\u7f6e\u7684\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5b58\u50a8 \u4e0d\u8fc7\uff0c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5207\u6362\u5230\u4e00\u4e2a\u66f4\u5168\u9762\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6bd4\u5982 Redis\u3002 \u4e3a\u4e86\u542f\u7528\u7f13\u5b58\uff0c\u5bfc\u5165 CacheModule \u5e76\u8c03\u7528\u5b83\u7684 register() \u65b9\u6cd5\u3002 import { CacheModule , Module } from `@nestjs/common'; import { AppController } from` . / app . controller ' ; @Module ({ imports : [ CacheModule . register ()], controllers : [ AppController ], }) export class AppModule {}","title":"\u5185\u5b58\u7f13\u5b58"},{"location":"techniques/caching/#_4","text":"\u8981\u4e0e\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\u4ea4\u4e92\uff0c\u4f7f\u7528 CACHE_MANAGER \u4ee4\u724c\u5c06\u5176\u6ce8\u5165\u5230\u4f60\u7684\u7c7b\u4e2d\uff0c\u5982\u4e0b\u6240\u793a: constructor ( @Inject ( CACHE_MANAGER ) private cacheManager : Cache ) {} info Hint Cache \u7c7b\u662f\u4ece cache-manager \u5bfc\u5165\u7684\uff0c\u800c CACHE_MANAGER \u4ee4\u724c\u662f\u4ece @nestjs/common \u5305\u5bfc\u5165\u7684\u3002 Cache \u5b9e\u4f8b\u7684 get \u65b9\u6cd5(\u6765\u81ea cache-manager \u5305)\u7528\u4e8e\u4ece\u7f13\u5b58\u4e2d\u68c0\u7d22\u9879 \u5982\u679c\u8be5\u9879\u5728\u7f13\u5b58\u4e2d\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de null \u3002 const value = await this . cacheManager . get ( 'key' ); \u8981\u5411\u7f13\u5b58\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u9879\uff0c\u8bf7\u4f7f\u7528 set \u65b9\u6cd5: await this . cacheManager . set ( 'key' , 'value' ); \u7f13\u5b58\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\u4e3a 5 \u79d2\u3002 \u60a8\u53ef\u4ee5\u624b\u52a8\u4e3a\u8fd9\u4e2a\u7279\u5b9a\u7684\u5bc6\u94a5\u6307\u5b9a\u4e00\u4e2a TTL(\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u8fc7\u671f\u65f6\u95f4)\uff0c\u5982\u4e0b\u6240\u793a: await this . cacheManager . set ( 'key' , 'value' , { ttl : 1000 }); \u7f13\u5b58\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\u4e3a 5 \u79d2\u3002 \u60a8\u53ef\u4ee5\u624b\u52a8\u4e3a\u8fd9\u4e2a\u7279\u5b9a\u7684\u5bc6\u94a5\u6307\u5b9a\u4e00\u4e2a TTL(\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u8fc7\u671f\u65f6\u95f4)\uff0c\u5982\u4e0b\u6240\u793a: await this . cacheManager . set ( 'key' , 'value' , { ttl : 0 }); \u8981\u4ece\u7f13\u5b58\u4e2d\u5220\u9664\u4e00\u4e2a\u9879\uff0c\u4f7f\u7528 del \u65b9\u6cd5: await this . cacheManager . del ( 'key' ); \u8981\u6e05\u9664\u6574\u4e2a\u7f13\u5b58\uff0c\u8bf7\u4f7f\u7528 reset \u65b9\u6cd5: await this . cacheManager . reset ();","title":"\u4e0e\u7f13\u5b58\u5b58\u50a8\u4ea4\u4e92"},{"location":"techniques/caching/#_5","text":"warning Warning \u5728 GraphQL \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u62e6\u622a\u5668\u662f\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u89e3\u6790\u5668\u5355\u72ec\u6267\u884c\u7684 \u56e0\u6b64\uff0c CacheModule (\u4f7f\u7528\u62e6\u622a\u5668\u6765\u7f13\u5b58\u54cd\u5e94)\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u8981\u542f\u7528\u81ea\u52a8\u7f13\u5b58\u54cd\u5e94\uff0c\u53ea\u9700\u5c06 CacheInterceptor \u7ed1\u5b9a\u5728\u4f60\u60f3\u8981\u7f13\u5b58\u6570\u636e\u7684\u5730\u65b9\u3002 @Controller () @UseInterceptors ( CacheInterceptor ) export class AppController { @Get () findAll () : string [] { return []; } } warning Warning \u53ea\u7f13\u5b58 GET \u7aef\u70b9 \u6b64\u5916\uff0c\u6ce8\u5165\u672c\u673a\u54cd\u5e94\u5bf9\u8c61( @Res() )\u7684 HTTP \u670d\u52a1\u5668\u8def\u7531\u4e0d\u80fd\u4f7f\u7528\u7f13\u5b58\u62e6\u622a\u5668 \u8bf7\u53c2\u9605 \u54cd\u5e94\u6620\u5c04 \u4e86\u89e3\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002 \u4e3a\u4e86\u51cf\u5c11\u6240\u9700\u6837\u677f\u6587\u4ef6\u7684\u6570\u91cf\uff0c\u4f60\u53ef\u4ee5\u5168\u5c40\u7ed1\u5b9a CacheInterceptor \u5230\u6240\u6709\u7aef\u70b9: import { CacheModule , Module , CacheInterceptor } from `@nestjs/common'; import { AppController } from` . / app . controller '; import { APP_INTERCEPTOR } from`@nestjs/core' ; @Module ({ imports : [ CacheModule . register ()], controllers : [ AppController ], providers : [ { provide : APP_INTERCEPTOR , useClass : CacheInterceptor , }, ], }) export class AppModule {}","title":"\u81ea\u52a8\u7f13\u5b58\u54cd\u5e94"},{"location":"techniques/caching/#_6","text":"\u6240\u6709\u7f13\u5b58\u6570\u636e\u90fd\u6709\u81ea\u5df1\u7684\u8fc7\u671f\u65f6\u95f4( TTL ) \u8981\u81ea\u5b9a\u4e49\u9ed8\u8ba4\u503c\uff0c\u5c06\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 register() \u65b9\u6cd5\u3002 CacheModule . register ({ ttl : 5 , // seconds max : 10 , // maximum number of items in cache });","title":"\u5b9a\u5236\u9ad8\u901f\u7f13\u5b58"},{"location":"techniques/caching/#_7","text":"\u5f53\u4f60\u60f3\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u4f7f\u7528 CacheModule \u65f6\uff0c\u4f60\u9700\u8981\u5bfc\u5165\u5b83(\u5c31\u50cf\u4efb\u4f55 Nest \u6a21\u5757\u4e00\u6837) \u6216\u8005\uff0c\u901a\u8fc7\u8bbe\u7f6e options \u5bf9\u8c61\u7684 isGlobal \u5c5e\u6027\u4e3a true \u6765\u58f0\u660e\u5b83\u4e3a global \u6a21\u5757 \uff0c\u5982\u4e0b\u6240\u793a \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u65e6 CacheModule \u88ab\u52a0\u8f7d\u5230\u6839\u6a21\u5757(\u4f8b\u5982 AppModule )\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u5bfc\u5165\u5b83\u4e86\u3002 CacheModule . register ({ isGlobal : true , });","title":"\u5728\u5168\u5c40\u8303\u56f4\u5185\u4f7f\u7528\u6a21\u5757"},{"location":"techniques/caching/#_8","text":"\u5f53\u5168\u5c40\u7f13\u5b58\u88ab\u542f\u7528\u65f6\uff0c\u7f13\u5b58\u6761\u76ee\u88ab\u5b58\u50a8\u5728\u4e00\u4e2a CacheKey \u4e0b\uff0c\u8fd9\u4e2a CacheKey \u662f\u6839\u636e\u8def\u7531\u8def\u5f84\u81ea\u52a8\u751f\u6210\u7684 \u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u91cd\u5199\u67d0\u4e9b\u7f13\u5b58\u8bbe\u7f6e( @CacheKey() \u548c @CacheTTL() )\uff0c\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u63a7\u5236\u5668\u65b9\u6cd5\u5b9a\u5236\u7f13\u5b58\u7b56\u7565 \u5728\u4f7f\u7528[\u4e0d\u540c\u7684\u7f13\u5b58\u5b58\u50a8]\u65f6\u8fd9\u53ef\u80fd\u662f\u6700\u76f8\u5173\u7684\u3002(https://docs.nestjs.com/techniques/caching#different-stores) @Controller () export class AppController { @CacheKey ( 'custom_key' ) @CacheTTL ( 20 ) findAll () : string [] { return []; } } info Hint @CacheKey() \u548c @CacheTTL() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u5165\u7684\u3002 @CacheKey() \u4fee\u9970\u7b26\u53ef\u4ee5\u548c\u5bf9\u5e94\u7684 @CacheTTL() \u4fee\u9970\u7b26\u4e00\u8d77\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\uff0c\u53cd\u4e4b\u4ea6\u7136 \u53ef\u4ee5\u9009\u62e9\u53ea\u8986\u76d6 @CacheKey() \u6216\u53ea\u8986\u76d6 @CacheTTL() \u6ca1\u6709\u88ab\u88c5\u9970\u5668\u8986\u76d6\u7684\u8bbe\u7f6e\u5c06\u4f7f\u7528\u5168\u5c40\u6ce8\u518c\u7684\u9ed8\u8ba4\u503c(\u53c2\u89c1 \u81ea\u5b9a\u4e49\u7f13\u5b58 )\u3002","title":"\u5168\u5c40\u7f13\u5b58\u8986\u76d6"},{"location":"techniques/caching/#websockets-microservices","text":"\u4f60\u4e5f\u53ef\u4ee5\u5c06 CacheInterceptor \u5e94\u7528\u5230 WebSocket \u8ba2\u9605\u8005\u548c Microservice \u7684\u6a21\u5f0f\u4e2d(\u4e0d\u7ba1\u4f7f\u7528\u7684\u4f20\u8f93\u65b9\u6cd5\u662f\u4ec0\u4e48)\u3002 @ @filename () @CacheKey ( 'events' ) @UseInterceptors ( CacheInterceptor ) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : string []) : Observable < string [] > { return []; } @ @switch @CacheKey ( 'events' ) @UseInterceptors ( CacheInterceptor ) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { return []; } \u7136\u800c\uff0c\u989d\u5916\u7684 @CacheKey() \u4fee\u9970\u7b26\u662f\u5fc5\u9700\u7684\uff0c\u4ee5\u4fbf\u6307\u5b9a\u4e00\u4e2a\u7528\u4e8e\u968f\u540e\u5b58\u50a8\u548c\u68c0\u7d22\u7f13\u5b58\u6570\u636e\u7684\u952e \u6b64\u5916\uff0c\u8bf7\u6ce8\u610f\uff0c\u60a8 \u4e0d\u5e94\u8be5\u7f13\u5b58\u6240\u6709\u5185\u5bb9 \u6267\u884c\u67d0\u4e9b\u4e1a\u52a1\u64cd\u4f5c\u800c\u4e0d\u662f\u7b80\u5355\u5730\u67e5\u8be2\u6570\u636e\u7684\u64cd\u4f5c\u6c38\u8fdc\u4e0d\u5e94\u8be5\u88ab\u7f13\u5b58\u3002 \u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 @CacheTTL() \u88c5\u9970\u5668\u6307\u5b9a\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4(TTL)\uff0c\u5b83\u5c06\u8986\u76d6\u5168\u5c40\u9ed8\u8ba4 TTL \u503c\u3002 @ @filename () @CacheTTL ( 10 ) @UseInterceptors ( CacheInterceptor ) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : string []) : Observable < string [] > { return []; } @ @switch @CacheTTL ( 10 ) @UseInterceptors ( CacheInterceptor ) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { return []; } info Hint @CacheTTL() \u4fee\u9970\u7b26\u53ef\u4ee5\u4e0e\u5bf9\u5e94\u7684 @CacheKey() \u4fee\u9970\u7b26\u4e00\u8d77\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528\u3002","title":"WebSockets \u548c Microservices"},{"location":"techniques/caching/#_9","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNest \u4f7f\u7528\u8bf7\u6c42 URL(\u5728 HTTP \u5e94\u7528\u7a0b\u5e8f\u4e2d)\u6216\u7f13\u5b58\u952e(\u5728 websockets \u548c\u5fae\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u8fc7 @CacheKey() \u88c5\u9970\u5668\u8bbe\u7f6e)\u6765\u5c06\u7f13\u5b58\u8bb0\u5f55\u4e0e\u7aef\u70b9\u5173\u8054\u8d77\u6765 \u7136\u800c\uff0c\u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u57fa\u4e8e\u4e0d\u540c\u7684\u56e0\u7d20\u8bbe\u7f6e\u8ddf\u8e2a\uff0c\u4f8b\u5982\uff0c\u4f7f\u7528 HTTP \u5934(\u4f8b\u5982 '\u6388\u6743'\u4ee5\u6b63\u786e\u6807\u8bc6'\u914d\u7f6e\u6587\u4ef6'\u7aef\u70b9)\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u521b\u5efa\u4e00\u4e2a CacheInterceptor \u7684\u5b50\u7c7b\uff0c\u5e76\u8986\u76d6 trackBy() \u65b9\u6cd5\u3002 @Injectable () class HttpCacheInterceptor extends CacheInterceptor { trackBy ( context : ExecutionContext ) : string | undefined { return `key'; } }","title":"\u8c03\u6574\u8ddf\u8e2a"},{"location":"techniques/caching/#_10","text":"\u8be5\u670d\u52a1\u5728\u5185\u90e8\u5229\u7528\u4e86 cache-manager cache-manager \u5305\u652f\u6301\u5e7f\u6cdb\u7684\u6709\u7528\u7684\u5b58\u50a8\uff0c\u4f8b\u5982 Redis store \u652f\u6301\u7684\u5546\u5e97\u7684\u5b8c\u6574\u5217\u8868\u53ef\u4ee5\u83b7\u5f97 \u6b64\u5904 \u8981\u8bbe\u7f6e Redis store\uff0c\u53ea\u9700\u5c06\u5305\u8fde\u540c\u76f8\u5e94\u7684\u9009\u9879\u4f20\u9012\u7ed9 register() \u65b9\u6cd5\u3002 import type { ClientOpts as RedisClientOpts } from `redis'; import * as redisStore from` cache - manager - redis - store '; import { CacheModule, Module } from`@nestjs/common' ; import { AppController } from `./app.controller'; @Module({ imports: [ CacheModule.register<RedisClientOpts>({ store: redisStore, // Store-specific configuration: host:` localhost ' , port : 6379 , }), ], controllers : [ AppController ], }) export class AppModule {}","title":"\u4e0d\u540c\u7684\u5546\u5e97"},{"location":"techniques/caching/#_11","text":"\u4f60\u53ef\u80fd\u60f3\u8981\u5f02\u6b65\u4f20\u9012\u6a21\u5757\u9009\u9879\uff0c\u800c\u4e0d\u662f\u5728\u7f16\u8bd1\u65f6\u9759\u6001\u4f20\u9012 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 registerAsync() \u65b9\u6cd5\uff0c\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u65b9\u6cd5\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: CacheModule . registerAsync ({ useFactory : () => ({ ttl : 5 , }), }); \u6211\u4eec\u7684\u5de5\u5382\u884c\u4e3a\u4e0e\u6240\u6709\u5176\u4ed6\u5f02\u6b65\u6a21\u5757\u5de5\u5382\u4e00\u6837(\u5b83\u53ef\u4ee5\u662f async \uff0c\u5e76\u80fd\u591f\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56)\u3002 CacheModule . registerAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ ttl : configService.get ( 'CACHE_TTL' ), }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useClass \u65b9\u6cd5: CacheModule . registerAsync ({ useClass : CacheConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5c06\u5728 CacheModule \u4e2d\u5b9e\u4f8b\u5316 CacheConfigService \uff0c\u5e76\u4f7f\u7528\u5b83\u6765\u83b7\u53d6\u9009\u9879\u5bf9\u8c61 \u4e3a\u4e86\u63d0\u4f9b\u914d\u7f6e\u9009\u9879\uff0c CacheConfigService \u5fc5\u987b\u5b9e\u73b0 CacheOptionsFactory \u63a5\u53e3: @Injectable () class CacheConfigService implements CacheOptionsFactory { createCacheOptions () : CacheModuleOptions { return { ttl : 5 , }; } } \u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u4ece\u4e0d\u540c\u6a21\u5757\u5bfc\u5165\u7684\u73b0\u6709\u914d\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u8bf7\u4f7f\u7528 useExisting \u8bed\u6cd5: CacheModule . registerAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u5b83\u7684\u5de5\u4f5c\u539f\u7406\u4e0e useClass \u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b\u2014\u2014 CacheModule \u5c06\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757\u6765\u91cd\u7528\u4efb\u4f55\u5df2\u7ecf\u521b\u5efa\u7684 ConfigService \uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u5316\u5b83\u81ea\u5df1\u7684\u6a21\u5757\u3002 info Hint CacheModule#register \u3001 CacheModule#registerAsync \u548c CacheOptionsFactory \u6709\u4e00\u4e2a\u53ef\u9009\u7684\u6cdb\u578b(\u7c7b\u578b\u53c2\u6570)\u6765\u7f29\u5c0f\u7279\u5b9a\u4e8e\u5b58\u50a8\u7684\u914d\u7f6e\u9009\u9879\uff0c\u4f7f\u5176\u7c7b\u578b\u5b89\u5168\u3002","title":"\u5f02\u6b65\u7684\u914d\u7f6e"},{"location":"techniques/caching/#_12","text":"\u6b64\u5904 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5de5\u4f5c\u793a\u4f8b\u3002","title":"\u4f8b\u5b50"},{"location":"techniques/compression/","text":"\u538b\u7f29 \u00b6 Compression can greatly decrease the size of the response body, thereby increasing the speed of a web app. For high-traffic websites in production, it is strongly recommended to offload compression from the application server - typically in a reverse proxy (e.g., Nginx). In that case, you should not use compression middleware. \u4e0e Express \u4e00\u8d77\u4f7f\u7528(\u9ed8\u8ba4) \u00b6 Use the compression middleware package to enable gzip compression. First install the required package: $ npm i --save compression Once the installation is complete, apply the compression middleware as global middleware. import * as compression from 'compression' ; // somewhere in your initialization file app . use ( compression ()); \u4e0e Fastify \u4e00\u8d77\u4f7f\u7528 \u00b6 If using the FastifyAdapter , you'll want to use fastify-compress : $ npm i --save fastify-compress Once the installation is complete, apply the fastify-compress middleware as global middleware. import compression from 'fastify-compress' ; // somewhere in your initialization file app . register ( compression ); By default, fastify-compress will use Brotli compression (on Node >= 11.7.0) when browsers indicate support for the encoding. While Brotli is quite efficient in terms of compression ratio, it's also quite slow. Due to this, you may want to tell fastify-compress to only use deflate and gzip to compress responses; you'll end up with larger responses but they'll be delivered much more quickly. To specify encodings, provide a second argument to app.register : app . register ( compression , { encodings : [ 'gzip' , 'deflate' ] }); The above tells fastify-compress to only use gzip and deflate encodings, preferring gzip if the client supports both.","title":"\u538b\u7f29"},{"location":"techniques/compression/#_1","text":"Compression can greatly decrease the size of the response body, thereby increasing the speed of a web app. For high-traffic websites in production, it is strongly recommended to offload compression from the application server - typically in a reverse proxy (e.g., Nginx). In that case, you should not use compression middleware.","title":"\u538b\u7f29"},{"location":"techniques/compression/#express","text":"Use the compression middleware package to enable gzip compression. First install the required package: $ npm i --save compression Once the installation is complete, apply the compression middleware as global middleware. import * as compression from 'compression' ; // somewhere in your initialization file app . use ( compression ());","title":"\u4e0e Express \u4e00\u8d77\u4f7f\u7528(\u9ed8\u8ba4)"},{"location":"techniques/compression/#fastify","text":"If using the FastifyAdapter , you'll want to use fastify-compress : $ npm i --save fastify-compress Once the installation is complete, apply the fastify-compress middleware as global middleware. import compression from 'fastify-compress' ; // somewhere in your initialization file app . register ( compression ); By default, fastify-compress will use Brotli compression (on Node >= 11.7.0) when browsers indicate support for the encoding. While Brotli is quite efficient in terms of compression ratio, it's also quite slow. Due to this, you may want to tell fastify-compress to only use deflate and gzip to compress responses; you'll end up with larger responses but they'll be delivered much more quickly. To specify encodings, provide a second argument to app.register : app . register ( compression , { encodings : [ 'gzip' , 'deflate' ] }); The above tells fastify-compress to only use gzip and deflate encodings, preferring gzip if the client supports both.","title":"\u4e0e Fastify \u4e00\u8d77\u4f7f\u7528"},{"location":"techniques/configuration/","text":"\u914d\u7f6e \u00b6 \u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u5728\u4e0d\u540c\u7684 \u73af\u5883 \u4e2d\u8fd0\u884c\u3002 \u6839\u636e\u73af\u5883\u7684\u4e0d\u540c\uff0c\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u914d\u7f6e\u8bbe\u7f6e\u3002 \u4f8b\u5982\uff0c\u672c\u5730\u73af\u5883\u901a\u5e38\u4f9d\u8d56\u4e8e\u7279\u5b9a\u7684\u6570\u636e\u5e93\u51ed\u636e\uff0c\u8fd9\u4e9b\u51ed\u636e\u4ec5\u5bf9\u672c\u5730 DB \u5b9e\u4f8b\u6709\u6548\u3002 \u751f\u4ea7\u73af\u5883\u5c06\u4f7f\u7528\u4e00\u7ec4\u5355\u72ec\u7684 DB \u51ed\u8bc1\u3002 \u7531\u4e8e\u914d\u7f6e\u53d8\u91cf\u7684\u53d8\u5316\uff0c\u6700\u4f73\u5b9e\u8df5\u662f\u5728\u73af\u5883\u4e2d \u5b58\u50a8\u914d\u7f6e\u53d8\u91cf \u3002 \u5916\u90e8\u5b9a\u4e49\u7684\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7 process.env \u5168\u5c40\u53d8\u91cf\u5728 Node.js \u4e2d\u53ef\u89c1\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6bcf\u4e2a\u73af\u5883\u4e2d\u5206\u522b\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u5c1d\u8bd5\u89e3\u51b3\u591a\u4e2a\u73af\u5883\u7684\u95ee\u9898\u3002 \u8fd9\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u7b28\u62d9\u4e0d\u582a\uff0c\u7279\u522b\u662f\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\u4e2d\uff0c\u8fd9\u4e9b\u503c\u9700\u8981\u5f88\u5bb9\u6613\u5730\u88ab\u6a21\u4eff\u548c/\u6216\u66f4\u6539\u3002 \u5728 Node.js \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u4f7f\u7528 .env \u6587\u4ef6\uff0c\u4fdd\u5b58\u952e-\u503c\u5bf9\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u4ee5\u8868\u793a\u6bcf\u4e2a\u73af\u5883\u3002 \u5728\u4e0d\u540c\u7684\u73af\u5883\u4e2d\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u53ea\u662f\u4ea4\u6362\u6b63\u786e\u7684 .env \u6587\u4ef6\u7684\u95ee\u9898\u3002 \u5728 Nest \u4e2d\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u7684\u4e00\u4e2a\u597d\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a ConfigModule \u6765\u516c\u5f00\u4e00\u4e2a ConfigService \u6765\u52a0\u8f7d\u9002\u5f53\u7684 env \u6587\u4ef6\u3002 \u867d\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u7f16\u5199\u8fd9\u6837\u4e00\u4e2a\u6a21\u5757\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0cNest \u63d0\u4f9b\u4e86\u73b0\u6210\u7684 @nestjs/config \u5305\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u8ba8\u8bba\u8fd9\u4e2a\u5305\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm i --save @nestjs/config info Hint @nestjs/config \u5305\u5185\u90e8\u4f7f\u7528 dotenv . warning Note @nestjs/config \u9700\u8981 TypeScript 4.1 \u6216\u66f4\u9ad8\u7248\u672c\u3002 \u5f00\u59cb \u00b6 \u4e00\u65e6\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\uff0c\u6211\u4eec\u53ef\u4ee5\u5bfc\u5165 ConfigModule \u3002 \u901a\u5e38\uff0c\u6211\u4eec\u4f1a\u628a\u5b83\u5bfc\u5165\u6839\u6a21\u5757 AppModule\uff0c\u5e76\u4f7f\u7528\u9759\u6001\u65b9\u6cd5 forRoot() \u6765\u63a7\u5236\u5b83\u7684\u884c\u4e3a\u3002 \u5728\u6b64\u6b65\u9aa4\u4e2d\uff0c\u5c06\u89e3\u6790\u548c\u89e3\u51b3\u73af\u5883\u53d8\u91cf\u952e/\u503c\u5bf9\u3002 \u7a0d\u540e\uff0c\u6211\u4eec\u5c06\u5728\u5176\u4ed6\u7279\u6027\u6a21\u5757\u4e2d\u770b\u5230\u8bbf\u95ee ConfigModule \u7c7b\u7684 ConfigService \u7c7b\u7684\u51e0\u4e2a\u9009\u9879\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { ConfigModule } from '@nestjs/config' ; @Module ({ imports : [ ConfigModule . forRoot ()], }) export class AppModule {} \u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u4ece\u9ed8\u8ba4\u4f4d\u7f6e(\u9879\u76ee\u6839\u76ee\u5f55)\u52a0\u8f7d\u5e76\u89e3\u6790\u4e00\u4e2a .env \u6587\u4ef6\uff0c\u5c06 .env \u6587\u4ef6\u4e2d\u7684\u952e/\u503c\u5bf9\u4e0e\u5206\u914d\u7ed9 processenv \u7684\u73af\u5883\u53d8\u91cf\u5408\u5e76\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4e00\u4e2a\u79c1\u6709\u7ed3\u6784\u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 ConfigService \u8bbf\u95ee\u8be5\u7ed3\u6784\u3002 forRoot() \u65b9\u6cd5\u6ce8\u518c\u4e86 ConfigService \u63d0\u4f9b\u7a0b\u5e8f\uff0c\u540e\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a get() \u65b9\u6cd5\u6765\u8bfb\u53d6\u8fd9\u4e9b\u89e3\u6790/\u5408\u5e76\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u7531\u4e8e @nestjs/config \u4f9d\u8d56\u4e8e dotenv \uff0c\u5b83\u4f7f\u7528\u8be5\u5305\u7684\u89c4\u5219\u6765\u89e3\u51b3\u73af\u5883\u53d8\u91cf\u540d\u79f0\u4e2d\u7684\u51b2\u7a81\u3002 \u5f53\u4e00\u4e2a\u952e\u540c\u65f6\u5b58\u5728\u4e8e\u8fd0\u884c\u65f6\u73af\u5883\u4e2d\u4f5c\u4e3a\u4e00\u4e2a\u73af\u5883\u53d8\u91cf(\u4f8b\u5982\uff0c\u901a\u8fc7 OS shell \u5bfc\u51fa\uff0c\u5982 export DATABASE_USER=test )\u548c\u4e00\u4e2a .env \u6587\u4ef6\u4e2d\u65f6\uff0c\u8fd0\u884c\u65f6\u73af\u5883\u53d8\u91cf\u4f18\u5148\u3002 \u4e00\u4e2a\u793a\u4f8b .env \u6587\u4ef6\u770b\u8d77\u6765\u50cf\u8fd9\u6837: DATABASE_USER= test DATABASE_PASSWORD= test \u81ea\u5b9a\u4e49\u73af\u5883\u6587\u4ef6\u8def\u5f84 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5305\u4f1a\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u6839\u76ee\u5f55\u4e2d\u67e5\u627e .env \u6587\u4ef6\u3002 \u8981\u4e3a .env \u6587\u4ef6\u6307\u5b9a\u53e6\u4e00\u4e2a\u8def\u5f84\uff0c\u8bf7\u8bbe\u7f6e\u4f20\u9012\u7ed9 forRoot() \u7684(\u53ef\u9009)\u9009\u9879\u5bf9\u8c61\u7684 envFilePath \u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a: ConfigModule . forRoot ({ envFilePath : '.development.env' , }); \u4f60\u4e5f\u53ef\u4ee5\u50cf\u8fd9\u6837\u4e3a .env \u6587\u4ef6\u6307\u5b9a\u591a\u4e2a\u8def\u5f84: ConfigModule . forRoot ({ envFilePath : [ '.env.development.local' , '.env.development' ], }); \u5982\u679c\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u627e\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u5219\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4f18\u5148\u3002 \u7981\u7528\u73af\u5883\u53d8\u91cf\u52a0\u8f7d \u00b6 \u5982\u679c\u4f60\u4e0d\u60f3\u52a0\u8f7d .env \u6587\u4ef6\uff0c\u800c\u662f\u60f3\u7b80\u5355\u5730\u4ece\u8fd0\u884c\u73af\u5883\u4e2d\u8bbf\u95ee\u73af\u5883\u53d8\u91cf(\u5c31\u50cf\u64cd\u4f5c\u7cfb\u7edf shell \u5bfc\u51fa export DATABASE_USER=test \u4e00\u6837)\uff0c\u8bbe\u7f6e\u9009\u9879\u5bf9\u8c61\u7684 ignoreEnvFile \u5c5e\u6027\u4e3a true \uff0c\u5982\u4e0b\u6240\u793a: ConfigModule . forRoot ({ ignoreEnvFile : true , }); \u5728\u5168\u5c40\u8303\u56f4\u5185\u4f7f\u7528\u6a21\u5757 \u00b6 \u5f53\u4f60\u60f3\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u4f7f\u7528 ConfigModule \u65f6\uff0c\u4f60\u9700\u8981\u5bfc\u5165\u5b83(\u8fd9\u662f\u4efb\u4f55 Nest \u6a21\u5757\u7684\u6807\u51c6\u914d\u7f6e)\u3002 \u6216\u8005\uff0c\u901a\u8fc7\u8bbe\u7f6e options \u5bf9\u8c61\u7684 isGlobal \u5c5e\u6027\u4e3a true \uff0c\u5c06\u5176\u58f0\u660e\u4e3a global \u6a21\u5757 \uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u65e6 ConfigModule \u88ab\u52a0\u8f7d\u5230\u6839\u6a21\u5757\u4e2d(\u4f8b\u5982\uff0c AppModule )\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u5bfc\u5165\u5b83\u4e86\u3002 ConfigModule . forRoot ({ isGlobal : true , }); \u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6 \u00b6 \u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u9879\u76ee\uff0c\u60a8\u53ef\u4ee5\u5229\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u6765\u8fd4\u56de\u5d4c\u5957\u7684\u914d\u7f6e\u5bf9\u8c61\u3002 \u8fd9\u5141\u8bb8\u60a8\u6309\u529f\u80fd\u5bf9\u76f8\u5173\u7684\u914d\u7f6e\u8bbe\u7f6e\u5206\u7ec4(\u4f8b\u5982\uff0c\u4e0e\u6570\u636e\u5e93\u76f8\u5173\u7684\u8bbe\u7f6e)\uff0c\u5e76\u5c06\u76f8\u5173\u7684\u8bbe\u7f6e\u5b58\u50a8\u5728\u5355\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4ee5\u5e2e\u52a9\u72ec\u7acb\u5730\u7ba1\u7406\u5b83\u4eec\u3002 \u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u5bfc\u51fa\u4e00\u4e2a\u8fd4\u56de\u914d\u7f6e\u5bf9\u8c61\u7684\u5de5\u5382\u51fd\u6570\u3002 \u914d\u7f6e\u5bf9\u8c61\u53ef\u4ee5\u662f\u4efb\u610f\u5d4c\u5957\u7684\u666e\u901a JavaScript \u5bf9\u8c61\u3002 process.env \u5bf9\u8c61\u5c06\u5305\u542b\u5b8c\u5168\u89e3\u6790\u7684\u73af\u5883\u53d8\u91cf\u952e/\u503c\u5bf9(\u4e0e .env \u6587\u4ef6\u548c\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u89e3\u6790\u5e76\u5408\u5e76\uff0c\u5982 \u4e0a\u9762 )\u6240\u8ff0\u3002 \u56e0\u4e3a\u60a8\u63a7\u5236\u8fd4\u56de\u7684\u914d\u7f6e\u5bf9\u8c61\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u6dfb\u52a0\u4efb\u4f55\u5fc5\u9700\u7684\u903b\u8f91\u6765\u5c06\u503c\u5f3a\u5236\u8f6c\u6362\u4e3a\u9002\u5f53\u7684\u7c7b\u578b\uff0c\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u7b49\u7b49... \u4f8b\u5982: @ @filename ( config / configuration ) export default () => ({ port : parseInt ( process . env . PORT , 10 ) || 3000 , database : { host : process.env.DATABASE_HOST , port : parseInt ( process . env . DATABASE_PORT , 10 ) || 5432 } }); \u6211\u4eec\u4f7f\u7528\u4f20\u9012\u7ed9 ConfigModule.forRoot() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684 load \u5c5e\u6027\u6765\u52a0\u8f7d\u8fd9\u4e2a\u6587\u4ef6: import configuration from './config/configuration' ; @Module ({ imports : [ ConfigModule . forRoot ({ load : [ configuration ], }), ], }) export class AppModule {} info Notice load \u5c5e\u6027\u7684\u503c\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5141\u8bb8\u4f60\u52a0\u8f7d\u591a\u4e2a\u914d\u7f6e\u6587\u4ef6 (\u5982... load: [databaseConfig, authConfig] ) \u4f7f\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u7ba1\u7406\u81ea\u5b9a\u4e49\u6587\u4ef6\uff0c\u5982 YAML \u6587\u4ef6\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 YAML \u683c\u5f0f\u7684\u914d\u7f6e\u793a\u4f8b: http : host : 'localhost' port : 8080 db : postgres : url : 'localhost' port : 5432 database : 'yaml-db' sqlite : database : 'sqlite.db' \u8981\u8bfb\u53d6\u548c\u89e3\u6790 YAML \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 js-yaml \u5305\u3002 $ npm i js-yaml $ npm i -D @types/js-yaml \u4e00\u65e6\u5b89\u88c5\u4e86\u8fd9\u4e2a\u5305\uff0c\u6211\u4eec\u4f7f\u7528 yaml#load \u51fd\u6570\u6765\u52a0\u8f7d\u6211\u4eec\u521a\u624d\u521b\u5efa\u7684 yaml \u6587\u4ef6\u3002 @ @filename ( config / configuration ) import { readFileSync } from 'fs' ; import * as yaml from 'js-yaml' ; import { join } from 'path' ; const YAML_CONFIG_FILENAME = 'config.yaml' ; export default () => { return yaml . load ( readFileSync ( join ( __dirname , YAML_CONFIG_FILENAME ), 'utf8' ), ) as Record < string , any > ; }; warning Note \u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\uff0cNest CLI \u4e0d\u4f1a\u81ea\u52a8\u79fb\u52a8\u4f60\u7684\"assets\"(\u975e ts \u6587\u4ef6)\u5230 dist \u6587\u4ef6\u5939\u3002 \u4e3a\u4e86\u786e\u4fdd\u4f60\u7684 YAML \u6587\u4ef6\u88ab\u590d\u5236\uff0c\u4f60\u5fc5\u987b\u5728 nest-clijson \u6587\u4ef6\u4e2d\u7684 compilerOptions#assets \u5bf9\u8c61\u4e2d\u6307\u5b9a\u8fd9\u4e00\u70b9\u3002 \u4f8b\u5982\uff0c\u5982\u679c config \u6587\u4ef6\u5939\u548c src \u6587\u4ef6\u5939\u5728\u540c\u4e00\u7ea7\u522b\uff0c\u6dfb\u52a0\u201ccompilerOptions#assets\u201d\u503c\u4e3a \"assets\": [{{ '{' }}\"include\": \"../config/*.yaml\", \"outDir\": \"./dist/config\"{{ '}' }}] . \u9605\u8bfb\u66f4\u591a(\u5728\u8fd9\u91cc)(/cli/monorepo#assets). \u4f7f\u7528 ConfigService \u00b6 \u8981\u4ece ConfigService \u4e2d\u8bbf\u95ee\u914d\u7f6e\u503c\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u6ce8\u5165 ConfigService \u3002 \u4e0e\u4efb\u4f55\u63d0\u4f9b\u5668\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u5305\u542b\u7684\u6a21\u5757- ConfigModule -\u5bfc\u5165\u5230\u5c06\u8981\u4f7f\u7528\u5b83\u7684\u6a21\u5757\u4e2d(\u9664\u975e\u4f60\u5c06\u4f20\u9012\u7ed9 ConfigModule.forroot() \u65b9\u6cd5\u7684\u9009\u9879\u5bf9\u8c61\u4e2d\u7684 isGlobal \u5c5e\u6027\u8bbe\u7f6e\u4e3a true )\u3002 \u5c06\u5176\u5bfc\u5165\u7279\u6027\u6a21\u5757\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\u3002 @ @filename ( feature . module ) @Module ({ imports : [ ConfigModule ], // ... }) \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u6784\u9020\u51fd\u6570\u6ce8\u5165\u6765\u6ce8\u5165\u5b83: constructor ( private configService : ConfigService ) {} info Hint ConfigService \u662f\u4ece @nestjs/config \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u6211\u4eec\u7684\u7c7b\u4e0a\u4f7f\u7528\u5b83: // get an environment variable const dbUser = this . configService . get < string > ( 'DATABASE_USER' ); // get a custom configuration value const dbHost = this . configService . get < string > ( 'database.host' ); \u5982\u4e0a\u6240\u793a\uff0c\u4f7f\u7528 configService.get() \u65b9\u6cd5\u901a\u8fc7\u4f20\u9012\u53d8\u91cf\u540d\u6765\u83b7\u53d6\u4e00\u4e2a\u7b80\u5355\u7684\u73af\u5883\u53d8\u91cf\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u7c7b\u578b\u6765\u505a TypeScript \u7c7b\u578b\u63d0\u793a\uff0c\u5982\u4e0a\u6240\u793a(\u4f8b\u5982\uff0c get<string>(\u2026) )\u3002 get() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u904d\u5386\u5d4c\u5957\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\u5bf9\u8c61(\u901a\u8fc7 \u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6 \u521b\u5efa)\uff0c\u5982\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u6240\u793a\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u63a5\u53e3\u4f5c\u4e3a\u7c7b\u578b\u63d0\u793a\u6765\u83b7\u5f97\u6574\u4e2a\u5d4c\u5957\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\u5bf9\u8c61: interface DatabaseConfig { host : string ; port : number ; } const dbConfig = this . configService . get < DatabaseConfig > ( 'database' ); // you can now use `dbConfig.port` and `dbConfig.host` const port = dbConfig . port ; get() \u65b9\u6cd5\u8fd8\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u5c06\u8fd4\u56de\u8fd9\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5982\u4e0b\u6240\u793a: // use \"localhost\" when \"database.host\" is not defined const dbHost = this . configService . get < string > ( 'database.host' , 'localhost' ); ConfigService \u6709\u4e24\u4e2a\u53ef\u9009\u7684\u6cdb\u578b(\u7c7b\u578b\u53c2\u6570)\u3002 \u7b2c\u4e00\u4e2a\u662f\u5e2e\u52a9\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u914d\u7f6e\u5c5e\u6027\u3002\u5982\u4e0b\u56fe\u6240\u793a: interface EnvironmentVariables { PORT : number ; TIMEOUT : string ; } // somewhere in the code constructor ( private configService : ConfigService < EnvironmentVariables > ) { const port = this . configService . get ( 'PORT' , { infer : true }); // TypeScript Error: this is invalid as the URL property is not defined in EnvironmentVariables const url = this . configService . get ( 'URL' , { infer : true }); } \u5f53 infer \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u65f6\uff0c ConfigService#get \u65b9\u6cd5\u5c06\u6839\u636e\u63a5\u53e3\u81ea\u52a8\u63a8\u65ad\u5c5e\u6027\u7c7b\u578b\uff0c\u4e3e\u4e2a\u4f8b\u5b50, typeof port === \"number\" (\u5982\u679c\u4f60\u6ca1\u6709\u5728 TypeScript \u4e2d\u4f7f\u7528' strictNullChecks '\u6807\u5fd7)\u56e0\u4e3a PORT \u5728 EnvironmentVariables \u63a5\u53e3\u4e2d\u6709\u4e00\u4e2a number \u7c7b\u578b\u3002 \u540c\u6837\uff0c\u4f7f\u7528 infer \u7279\u6027\uff0c\u4f60\u53ef\u4ee5\u63a8\u65ad\u5d4c\u5957\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\u5bf9\u8c61\u7684\u5c5e\u6027\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u4f7f\u7528\u70b9\u7b26\u53f7\uff0c\u5982\u4e0b\u6240\u793a: constructor ( private configService : ConfigService < { database : { host : string } } > ) { const dbHost = this . configService . get ( 'database.host' , { infer : true }) ! ; // typeof dbHost === \"string\" | // +--> non-null assertion operator } \u7b2c\u4e8c\u4e2a\u6cdb\u578b\u4f9d\u8d56\u4e8e\u7b2c\u4e00\u4e2a\u6cdb\u578b\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u578b\u65ad\u8a00\uff0c\u4ee5\u6d88\u9664\u5f53 strictNullChecks \u6253\u5f00\u65f6 ConfigService \u7684\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u7684\u6240\u6709 undefined \u7c7b\u578b\u3002\u4f8b\u5982: // ... constructor ( private configService : ConfigService < { PORT : number }, true > ) { // ^^^^ const port = this . configService . get ( 'PORT' , { infer : true }); // ^^^ The type of port will be 'number' thus you don't need TS type assertions anymore } \u914d\u7f6e\u540d\u79f0\u7a7a\u95f4 \u00b6 ConfigModule \u5141\u8bb8\u4f60\u5b9a\u4e49\u548c\u52a0\u8f7d\u591a\u4e2a\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u4e0a\u9762 \u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6 \u6240\u793a\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u7684\u914d\u7f6e\u5bf9\u8c61\u7ba1\u7406\u590d\u6742\u7684\u914d\u7f6e\u5bf9\u8c61\u5c42\u6b21\u7ed3\u6784\uff0c\u5982\u8be5\u90e8\u5206\u6240\u793a\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u7528 registerAs() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\"\u547d\u540d\u7a7a\u95f4\"\u7684\u914d\u7f6e\u5bf9\u8c61\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( config / database . config ) export default registerAs ( 'database' , () => ({ host : process.env.DATABASE_HOST , port : process.env.DATABASE_PORT || 5432 })); \u4e0e\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u4e00\u6837\uff0c\u5728\u4f60\u7684 registerAs() \u5de5\u5382\u51fd\u6570\u4e2d\uff0c process.env \u5bf9\u8c61\u5c06\u5305\u542b\u5b8c\u5168\u89e3\u6790\u7684\u73af\u5883\u53d8\u91cf\u952e/\u503c\u5bf9(\u4e0e .env \u6587\u4ef6\u548c\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u89e3\u6790\u548c\u5408\u5e76\uff0c\u5982 \u4e0a\u9762 \u6240\u8ff0\u3002 info Hint registerAs \u51fd\u6570\u662f\u4ece @nestjs/config \u5305\u5bfc\u51fa\u7684\u3002 \u7528 forRoot() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684 load \u5c5e\u6027\u52a0\u8f7d\u6709\u547d\u540d\u7a7a\u95f4\u7684\u914d\u7f6e\uff0c\u5c31\u50cf\u4f60\u52a0\u8f7d\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u4e00\u6837: import databaseConfig from './config/database.config' ; @Module ({ imports : [ ConfigModule . forRoot ({ load : [ databaseConfig ], }), ], }) export class AppModule {} \u73b0\u5728\uff0c\u8981\u4ece database \u540d\u79f0\u7a7a\u95f4\u83b7\u53d6 host \u503c\uff0c\u8bf7\u4f7f\u7528\u70b9\u8868\u793a\u6cd5\u3002 \u4f7f\u7528 database \u4f5c\u4e3a\u5c5e\u6027\u540d\u7684\u524d\u7f00\uff0c\u5bf9\u5e94\u4e8e\u547d\u540d\u7a7a\u95f4\u7684\u540d\u79f0(\u4f5c\u4e3a registerAs() \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012): const dbHost = this . configService . get < string > ( 'database.host' ); \u4e00\u4e2a\u5408\u7406\u7684\u66ff\u4ee3\u65b9\u6cd5\u662f\u76f4\u63a5\u6ce8\u5165 database \u540d\u79f0\u7a7a\u95f4\u3002\u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u4ece\u5f3a\u7c7b\u578b\u4e2d\u83b7\u76ca: constructor ( @Inject ( databaseConfig . KEY ) private dbConfig : ConfigType < typeof databaseConfig > , ) {} info Hint ConfigType \u662f\u4ece @nestjs/config \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 \u7f13\u5b58\u73af\u5883\u53d8\u91cf \u00b6 \u7531\u4e8e\u8bbf\u95ee process.env \u53ef\u80fd\u5f88\u6162\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4f20\u9012\u7ed9 ConfigModule.forRoot() \u7684\u9009\u9879\u5bf9\u8c61\u7684 cache \u5c5e\u6027\u6765\u63d0\u9ad8 ConfigService#get \u65b9\u6cd5\u7684\u6027\u80fd\uff0c\u5f53\u5b83\u5b58\u50a8\u5728 process.env \u4e2d\u7684\u53d8\u91cf\u65f6\u3002 ConfigModule . forRoot ({ cache : true , }); \u90e8\u5206\u6ce8\u518c \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u6839\u6a21\u5757(\u4f8b\u5982 AppModule )\u4e2d\u5904\u7406\u4e86\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528\u7684\u662f forRoot() \u65b9\u6cd5\u3002 \u4e5f\u8bb8\u60a8\u6709\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u9879\u76ee\u7ed3\u6784\uff0c\u7279\u6027\u7279\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e\u591a\u4e2a\u4e0d\u540c\u7684\u76ee\u5f55\u4e2d\u3002 @nestjs/config \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3a \u90e8\u5206\u6ce8\u518c \u7684\u7279\u6027\uff0c\u5b83\u53ea\u5f15\u7528\u4e0e\u6bcf\u4e2a\u7279\u6027\u6a21\u5757\u76f8\u5173\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u5c06\u6240\u6709\u8fd9\u4e9b\u6587\u4ef6\u52a0\u8f7d\u5230\u6839\u6a21\u5757\u4e2d\u3002 \u5728\u7279\u6027\u6a21\u5757\u4e2d\u4f7f\u7528 forFeature() \u9759\u6001\u65b9\u6cd5\u6765\u6267\u884c\u90e8\u5206\u6ce8\u518c\uff0c\u5982\u4e0b\u6240\u793a: import databaseConfig from './config/database.config' ; @Module ({ imports : [ ConfigModule . forFeature ( databaseConfig )], }) export class DatabaseModule {} info Warning \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f7f\u7528 onModuleInit() \u94a9\u5b50\u8bbf\u95ee\u901a\u8fc7\u90e8\u5206\u6ce8\u518c\u52a0\u8f7d\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u5728\u6784\u9020\u51fd\u6570\u4e2d\u3002\u8fd9\u662f\u56e0\u4e3a forFeature() \u65b9\u6cd5\u662f\u5728\u6a21\u5757\u521d\u59cb\u5316\u671f\u95f4\u8fd0\u884c\u7684\uff0c\u6a21\u5757\u521d\u59cb\u5316\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u5982\u679c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8bbf\u95ee\u53e6\u4e00\u4e2a\u6a21\u5757\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u52a0\u8f7d\u7684\u503c\uff0c\u5219\u914d\u7f6e\u6240\u4f9d\u8d56\u7684\u6a21\u5757\u53ef\u80fd\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 onModuleInit() \u65b9\u6cd5\u53ea\u6709\u5728\u5b83\u4f9d\u8d56\u7684\u6240\u6709\u6a21\u5757\u90fd\u88ab\u521d\u59cb\u5316\u540e\u624d\u4f1a\u8fd0\u884c\uff0c\u6240\u4ee5\u8fd9\u79cd\u6280\u672f\u662f\u5b89\u5168\u7684\u3002 \u6a21\u5f0f\u9a8c\u8bc1 \u00b6 \u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u6240\u9700\u7684\u73af\u5883\u53d8\u91cf\uff0c\u6216\u8005\u5b83\u4eec\u4e0d\u7b26\u5408\u67d0\u4e9b\u9a8c\u8bc1\u89c4\u5219\uff0c\u90a3\u4e48\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u671f\u95f4\u629b\u51fa\u5f02\u5e38\u662f\u6807\u51c6\u7684\u505a\u6cd5\u3002 @nestjs/config \u5305\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0: Joi \u5185\u7f6e\u9a8c\u8bc1\u5668\u3002\u4f7f\u7528 Joi\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u6a21\u5f0f\uff0c\u5e76\u6839\u636e\u5b83\u9a8c\u8bc1 JavaScript \u5bf9\u8c61\u3002 \u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 validate() \u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u73af\u5883\u53d8\u91cf\u4f5c\u4e3a\u8f93\u5165\u3002 \u8981\u4f7f\u7528 Joi\uff0c\u6211\u4eec\u5fc5\u987b\u5b89\u88c5 Joi \u5305: $ npm install --save joi warning Notice \u201cjoi\u201d\u7684\u6700\u65b0\u7248\u672c\u8981\u6c42\u60a8\u8fd0\u884c\u7684\u662f Node v12 \u6216\u66f4\u9ad8\u7248\u672c\u3002\u5bf9\u4e8e\u8f83\u8001\u7248\u672c\u7684\u8282\u70b9\uff0c\u8bf7\u5b89\u88c5 v16.1.8 \u3002\u8fd9\u4e3b\u8981\u662f\u5728\u201cv17.0.2\u201d\u53d1\u5e03\u4e4b\u540e\uff0c\u5b83\u4f1a\u5728\u6784\u5efa\u65f6\u5bfc\u81f4\u9519\u8bef\u3002\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\u4ed6\u4eec\u7684 17.0.0 \u53d1\u5e03\u8bf4\u660e \u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a Joi \u9a8c\u8bc1\u6a21\u5f0f\uff0c\u5e76\u901a\u8fc7 forRoot() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684 validationSchema \u5c5e\u6027\u4f20\u9012\u5b83\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import * as Joi from 'joi' ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ NODE_ENV : Joi.string () . valid ( 'development' , 'production' , 'test' , 'provision' ) . default ( 'development' ), PORT : Joi.number (). default ( 3000 ), }), }), ], }) export class AppModule {} \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u6a21\u5f0f\u952e\u90fd\u88ab\u8ba4\u4e3a\u662f\u53ef\u9009\u7684\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3a NODE_ENV \u548c PORT \u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u6211\u4eec\u5728\u73af\u5883( .env \u6587\u4ef6\u6216\u8fdb\u7a0b\u73af\u5883)\u4e2d\u4e0d\u63d0\u4f9b\u8fd9\u4e9b\u53d8\u91cf\uff0c\u5c06\u4f7f\u7528\u5b83\u4eec\u3002 \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 required() \u9a8c\u8bc1\u65b9\u6cd5\u6765\u8981\u6c42\u4e00\u4e2a\u503c\u5fc5\u987b\u5b9a\u4e49\u5728\u73af\u5883\u4e2d( .env \u6587\u4ef6\u6216\u8fdb\u7a0b\u73af\u5883)\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u63d0\u4f9b\u73af\u5883\u4e2d\u7684\u53d8\u91cf\uff0c\u9a8c\u8bc1\u6b65\u9aa4\u5c06\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002 \u6709\u5173\u5982\u4f55\u6784\u9020\u9a8c\u8bc1\u6a21\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Joi \u9a8c\u8bc1\u65b9\u6cd5 \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5141\u8bb8\u672a\u77e5\u7684\u73af\u5883\u53d8\u91cf(\u5176\u952e\u4e0d\u5728\u6a21\u5f0f\u4e2d\u51fa\u73b0\u7684\u73af\u5883\u53d8\u91cf)\uff0c\u5e76\u4e14\u4e0d\u4f1a\u89e6\u53d1\u9a8c\u8bc1\u5f02\u5e38\u3002 \u7f3a\u7701\u60c5\u51b5\u4e0b\uff0c\u62a5\u544a\u6240\u6709\u9a8c\u8bc1\u9519\u8bef\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 forRoot() \u9009\u9879\u5bf9\u8c61\u7684 validationOptions \u952e\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u6765\u6539\u53d8\u8fd9\u4e9b\u884c\u4e3a\u3002 \u8fd9\u4e2a\u9009\u9879\u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u7531 Joi validation options \u63d0\u4f9b\u7684\u4efb\u4f55\u6807\u51c6\u9a8c\u8bc1\u9009\u9879\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u8981\u53cd\u8f6c\u4e0a\u9762\u7684\u4e24\u4e2a\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f20\u9012\u9009\u9879: @ @filename ( app . module ) import * as Joi from 'joi' ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ NODE_ENV : Joi.string () . valid ( 'development' , 'production' , 'test' , 'provision' ) . default ( 'development' ), PORT : Joi.number (). default ( 3000 ), }), validationOptions : { allowUnknown : false , abortEarly : true , }, }), ], }) export class AppModule {} @nestjs/config \u5305\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e: allowUnknown : \u63a7\u5236\u73af\u5883\u53d8\u91cf\u4e2d\u662f\u5426\u5141\u8bb8\u672a\u77e5\u952e\u3002\u9ed8\u8ba4\u662f true abortEarly : \u5982\u679c true \uff0c\u5728\u7b2c\u4e00\u4e2a\u9519\u8bef\u65f6\u505c\u6b62\u9a8c\u8bc1;\u5982\u679c\u4e3a false \uff0c\u8fd4\u56de\u6240\u6709\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a false \u3002 \u8bf7\u6ce8\u610f\uff0c\u4e00\u65e6\u4f60\u51b3\u5b9a\u4f20\u9012\u4e00\u4e2a validationOptions \u5bf9\u8c61\uff0c\u4efb\u4f55\u4f60\u6ca1\u6709\u663e\u5f0f\u4f20\u9012\u7684\u8bbe\u7f6e\u5c06\u9ed8\u8ba4\u4e3a Joi \u6807\u51c6\u9ed8\u8ba4\u503c(\u800c\u4e0d\u662f @nestjs/config \u9ed8\u8ba4\u503c)\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5728\u4f60\u7684\u81ea\u5b9a\u4e49 validationOptions \u5bf9\u8c61\u4e2d\u672a\u6307\u5b9a allowUnknowns \uff0c\u5b83\u7684 Joi \u9ed8\u8ba4\u503c\u4e3a false \u3002 \u56e0\u6b64\uff0c\u5728\u4f60\u7684\u81ea\u5b9a\u4e49\u5bf9\u8c61\u4e2d\u540c\u65f6\u6307\u5b9a\u8fd9 \u4e24\u4e2a \u8bbe\u7f6e\u53ef\u80fd\u662f\u6700\u5b89\u5168\u7684\u3002 \u81ea\u5b9a\u4e49\u9a8c\u8bc1\u51fd\u6570 \u00b6 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u540c\u6b65 validate \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5305\u542b\u73af\u5883\u53d8\u91cf\u7684\u5bf9\u8c61(\u6765\u81ea env \u6587\u4ef6\u548c\u8fdb\u7a0b)\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5df2\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf\u7684\u5bf9\u8c61\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u5bf9\u5b83\u4eec\u8fdb\u884c\u8f6c\u6362/\u4fee\u6539\u3002 \u5982\u679c\u51fd\u6570\u629b\u51fa\u9519\u8bef\uff0c\u5b83\u5c06\u963b\u6b62\u5e94\u7528\u7a0b\u5e8f\u5f15\u5bfc\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528 class-transformer and class-validator \u5305\u3002\u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u5b9a\u4e49: \u4e00\u4e2a\u6709\u9a8c\u8bc1\u7ea6\u675f\u7684\u7c7b\uff0c \u4f7f\u7528 plainToClass \u548c validateSync \u51fd\u6570\u7684\u9a8c\u8bc1\u51fd\u6570\u3002 @ @filename ( env . validation ) import { plainToClass } from 'class-transformer' ; import { IsEnum , IsNumber , validateSync } from 'class-validator' ; enum Environment { Development = \"development\" , Production = \"production\" , Test = \"test\" , Provision = \"provision\" , } class EnvironmentVariables { @IsEnum ( Environment ) NODE_ENV : Environment ; @IsNumber () PORT : number ; } export function validate ( config : Record < string , unknown > ) { const validatedConfig = plainToClass ( EnvironmentVariables , config , { enableImplicitConversion : true }, ); const errors = validateSync ( validatedConfig , { skipMissingProperties : false }); if ( errors . length > 0 ) { throw new Error ( errors . toString ()); } return validatedConfig ; } \u5728\u8fd9\u91cc\uff0c\u4f7f\u7528 validate \u51fd\u6570\u4f5c\u4e3a ConfigModule \u7684\u914d\u7f6e\u9009\u9879\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import { validate } from './env.validation' ; @Module ({ imports : [ ConfigModule . forRoot ({ validate , }), ], }) export class AppModule {} \u5b9a\u5236\u7684 getter \u51fd\u6570 \u00b6 ConfigService \u5b9a\u4e49\u4e86\u4e00\u4e2a\u901a\u7528\u7684 get() \u65b9\u6cd5\u6765\u6309\u952e\u68c0\u7d22\u914d\u7f6e\u503c\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u6dfb\u52a0 getter \u51fd\u6570\u6765\u5b9e\u73b0\u66f4\u81ea\u7136\u7684\u7f16\u7801\u98ce\u683c: @ @filename () @Injectable () export class ApiConfigService { constructor ( private configService : ConfigService ) {} get isAuthEnabled () : boolean { return this . configService . get ( 'AUTH_ENABLED' ) === 'true' ; } } @ @switch @Dependencies ( ConfigService ) @Injectable () export class ApiConfigService { constructor ( configService ) { this . configService = configService ; } get isAuthEnabled () { return this . configService . get ( 'AUTH_ENABLED' ) === 'true' ; } } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528 getter \u51fd\u6570: @ @filename ( app . service ) @Injectable () export class AppService { constructor ( apiConfigService : ApiConfigService ) { if ( apiConfigService . isAuthEnabled ) { // Authentication is enabled } } } @ @switch @Dependencies ( ApiConfigService ) @Injectable () export class AppService { constructor ( apiConfigService ) { if ( apiConfigService . isAuthEnabled ) { // Authentication is enabled } } } \u53ef\u6269\u5c55\u7684\u53d8\u91cf \u00b6 @nestjs/config \u5305\u652f\u6301\u73af\u5883\u53d8\u91cf\u6269\u5c55\u3002 \u4f7f\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u5d4c\u5957\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\u5728\u53e6\u4e00\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49\u4e2d\u88ab\u5f15\u7528\u3002 \u4f8b\u5982: APP_URL=mywebsi te .com SUPPORT_EMAIL=suppor t @$ { APP_URL } \u5728\u8fd9\u4e2a\u6784\u9020\u4e2d\uff0c\u53d8\u91cf SUPPORT_EMAIL \u89e3\u6790\u4e3a 'support@mywebsite.com' \u3002\u6ce8\u610f ${{ '{' }}...{{ '}' }} \u8bed\u6cd5\u89e6\u53d1\u89e3\u6790 SUPPORT_EMAIL \u5b9a\u4e49\u4e2d\u7684\u53d8\u91cf APP_URL \u7684\u503c\u3002 info Hint \u5bf9\u4e8e\u8fd9\u4e2a\u7279\u6027\uff0c @nestjs/config \u5305\u5185\u90e8\u4f7f\u7528 dotenv-expand \u3002 \u5728\u4f20\u9012\u7ed9 ConfigModule \u7684 forRoot() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u4e2d\uff0c\u4f7f\u7528 expandVariables \u5c5e\u6027\u542f\u7528\u73af\u5883\u53d8\u91cf\u5c55\u5f00\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) @Module ({ imports : [ ConfigModule . forRoot ({ // ... expandVariables : true , }), ], }) export class AppModule {} \u5728 main.ts \u4e2d\u4f7f\u7528 \u00b6 \u867d\u7136\u6211\u4eec\u7684\u914d\u7f6e\u5b58\u50a8\u5728\u670d\u52a1\u4e2d\uff0c\u4f46\u5b83\u4ecd\u7136\u53ef\u4ee5\u5728 main.ts \u6587\u4ef6\u4e2d\u4f7f\u7528\u3002\u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5b58\u50a8\u8bf8\u5982\u5e94\u7528\u7a0b\u5e8f\u7aef\u53e3\u6216 CORS \u4e3b\u673a\u4e4b\u7c7b\u7684\u53d8\u91cf\u3002 \u8981\u8bbf\u95ee\u5b83\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528 app.get() \u65b9\u6cd5\uff0c\u540e\u9762\u8ddf\u7740\u670d\u52a1\u5f15\u7528: const configService = app . get ( ConfigService ); \u7136\u540e\u4f60\u53ef\u4ee5\u50cf\u5f80\u5e38\u4e00\u6837\u4f7f\u7528\u5b83\uff0c\u901a\u8fc7\u4f7f\u7528\u914d\u7f6e\u952e\u8c03\u7528 get \u65b9\u6cd5: const port = configService . get ( 'PORT' );","title":"\u914d\u7f6e"},{"location":"techniques/configuration/#_1","text":"\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u5728\u4e0d\u540c\u7684 \u73af\u5883 \u4e2d\u8fd0\u884c\u3002 \u6839\u636e\u73af\u5883\u7684\u4e0d\u540c\uff0c\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u914d\u7f6e\u8bbe\u7f6e\u3002 \u4f8b\u5982\uff0c\u672c\u5730\u73af\u5883\u901a\u5e38\u4f9d\u8d56\u4e8e\u7279\u5b9a\u7684\u6570\u636e\u5e93\u51ed\u636e\uff0c\u8fd9\u4e9b\u51ed\u636e\u4ec5\u5bf9\u672c\u5730 DB \u5b9e\u4f8b\u6709\u6548\u3002 \u751f\u4ea7\u73af\u5883\u5c06\u4f7f\u7528\u4e00\u7ec4\u5355\u72ec\u7684 DB \u51ed\u8bc1\u3002 \u7531\u4e8e\u914d\u7f6e\u53d8\u91cf\u7684\u53d8\u5316\uff0c\u6700\u4f73\u5b9e\u8df5\u662f\u5728\u73af\u5883\u4e2d \u5b58\u50a8\u914d\u7f6e\u53d8\u91cf \u3002 \u5916\u90e8\u5b9a\u4e49\u7684\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7 process.env \u5168\u5c40\u53d8\u91cf\u5728 Node.js \u4e2d\u53ef\u89c1\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6bcf\u4e2a\u73af\u5883\u4e2d\u5206\u522b\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u5c1d\u8bd5\u89e3\u51b3\u591a\u4e2a\u73af\u5883\u7684\u95ee\u9898\u3002 \u8fd9\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u7b28\u62d9\u4e0d\u582a\uff0c\u7279\u522b\u662f\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\u4e2d\uff0c\u8fd9\u4e9b\u503c\u9700\u8981\u5f88\u5bb9\u6613\u5730\u88ab\u6a21\u4eff\u548c/\u6216\u66f4\u6539\u3002 \u5728 Node.js \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u901a\u5e38\u4f7f\u7528 .env \u6587\u4ef6\uff0c\u4fdd\u5b58\u952e-\u503c\u5bf9\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u4ee5\u8868\u793a\u6bcf\u4e2a\u73af\u5883\u3002 \u5728\u4e0d\u540c\u7684\u73af\u5883\u4e2d\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u53ea\u662f\u4ea4\u6362\u6b63\u786e\u7684 .env \u6587\u4ef6\u7684\u95ee\u9898\u3002 \u5728 Nest \u4e2d\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u7684\u4e00\u4e2a\u597d\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a ConfigModule \u6765\u516c\u5f00\u4e00\u4e2a ConfigService \u6765\u52a0\u8f7d\u9002\u5f53\u7684 env \u6587\u4ef6\u3002 \u867d\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u7f16\u5199\u8fd9\u6837\u4e00\u4e2a\u6a21\u5757\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0cNest \u63d0\u4f9b\u4e86\u73b0\u6210\u7684 @nestjs/config \u5305\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u8ba8\u8bba\u8fd9\u4e2a\u5305\u3002","title":"\u914d\u7f6e"},{"location":"techniques/configuration/#_2","text":"\u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm i --save @nestjs/config info Hint @nestjs/config \u5305\u5185\u90e8\u4f7f\u7528 dotenv . warning Note @nestjs/config \u9700\u8981 TypeScript 4.1 \u6216\u66f4\u9ad8\u7248\u672c\u3002","title":"\u5b89\u88c5"},{"location":"techniques/configuration/#_3","text":"\u4e00\u65e6\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\uff0c\u6211\u4eec\u53ef\u4ee5\u5bfc\u5165 ConfigModule \u3002 \u901a\u5e38\uff0c\u6211\u4eec\u4f1a\u628a\u5b83\u5bfc\u5165\u6839\u6a21\u5757 AppModule\uff0c\u5e76\u4f7f\u7528\u9759\u6001\u65b9\u6cd5 forRoot() \u6765\u63a7\u5236\u5b83\u7684\u884c\u4e3a\u3002 \u5728\u6b64\u6b65\u9aa4\u4e2d\uff0c\u5c06\u89e3\u6790\u548c\u89e3\u51b3\u73af\u5883\u53d8\u91cf\u952e/\u503c\u5bf9\u3002 \u7a0d\u540e\uff0c\u6211\u4eec\u5c06\u5728\u5176\u4ed6\u7279\u6027\u6a21\u5757\u4e2d\u770b\u5230\u8bbf\u95ee ConfigModule \u7c7b\u7684 ConfigService \u7c7b\u7684\u51e0\u4e2a\u9009\u9879\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { ConfigModule } from '@nestjs/config' ; @Module ({ imports : [ ConfigModule . forRoot ()], }) export class AppModule {} \u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u4ece\u9ed8\u8ba4\u4f4d\u7f6e(\u9879\u76ee\u6839\u76ee\u5f55)\u52a0\u8f7d\u5e76\u89e3\u6790\u4e00\u4e2a .env \u6587\u4ef6\uff0c\u5c06 .env \u6587\u4ef6\u4e2d\u7684\u952e/\u503c\u5bf9\u4e0e\u5206\u914d\u7ed9 processenv \u7684\u73af\u5883\u53d8\u91cf\u5408\u5e76\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4e00\u4e2a\u79c1\u6709\u7ed3\u6784\u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 ConfigService \u8bbf\u95ee\u8be5\u7ed3\u6784\u3002 forRoot() \u65b9\u6cd5\u6ce8\u518c\u4e86 ConfigService \u63d0\u4f9b\u7a0b\u5e8f\uff0c\u540e\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a get() \u65b9\u6cd5\u6765\u8bfb\u53d6\u8fd9\u4e9b\u89e3\u6790/\u5408\u5e76\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u7531\u4e8e @nestjs/config \u4f9d\u8d56\u4e8e dotenv \uff0c\u5b83\u4f7f\u7528\u8be5\u5305\u7684\u89c4\u5219\u6765\u89e3\u51b3\u73af\u5883\u53d8\u91cf\u540d\u79f0\u4e2d\u7684\u51b2\u7a81\u3002 \u5f53\u4e00\u4e2a\u952e\u540c\u65f6\u5b58\u5728\u4e8e\u8fd0\u884c\u65f6\u73af\u5883\u4e2d\u4f5c\u4e3a\u4e00\u4e2a\u73af\u5883\u53d8\u91cf(\u4f8b\u5982\uff0c\u901a\u8fc7 OS shell \u5bfc\u51fa\uff0c\u5982 export DATABASE_USER=test )\u548c\u4e00\u4e2a .env \u6587\u4ef6\u4e2d\u65f6\uff0c\u8fd0\u884c\u65f6\u73af\u5883\u53d8\u91cf\u4f18\u5148\u3002 \u4e00\u4e2a\u793a\u4f8b .env \u6587\u4ef6\u770b\u8d77\u6765\u50cf\u8fd9\u6837: DATABASE_USER= test DATABASE_PASSWORD= test","title":"\u5f00\u59cb"},{"location":"techniques/configuration/#_4","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5305\u4f1a\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u6839\u76ee\u5f55\u4e2d\u67e5\u627e .env \u6587\u4ef6\u3002 \u8981\u4e3a .env \u6587\u4ef6\u6307\u5b9a\u53e6\u4e00\u4e2a\u8def\u5f84\uff0c\u8bf7\u8bbe\u7f6e\u4f20\u9012\u7ed9 forRoot() \u7684(\u53ef\u9009)\u9009\u9879\u5bf9\u8c61\u7684 envFilePath \u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a: ConfigModule . forRoot ({ envFilePath : '.development.env' , }); \u4f60\u4e5f\u53ef\u4ee5\u50cf\u8fd9\u6837\u4e3a .env \u6587\u4ef6\u6307\u5b9a\u591a\u4e2a\u8def\u5f84: ConfigModule . forRoot ({ envFilePath : [ '.env.development.local' , '.env.development' ], }); \u5982\u679c\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u627e\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u5219\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4f18\u5148\u3002","title":"\u81ea\u5b9a\u4e49\u73af\u5883\u6587\u4ef6\u8def\u5f84"},{"location":"techniques/configuration/#_5","text":"\u5982\u679c\u4f60\u4e0d\u60f3\u52a0\u8f7d .env \u6587\u4ef6\uff0c\u800c\u662f\u60f3\u7b80\u5355\u5730\u4ece\u8fd0\u884c\u73af\u5883\u4e2d\u8bbf\u95ee\u73af\u5883\u53d8\u91cf(\u5c31\u50cf\u64cd\u4f5c\u7cfb\u7edf shell \u5bfc\u51fa export DATABASE_USER=test \u4e00\u6837)\uff0c\u8bbe\u7f6e\u9009\u9879\u5bf9\u8c61\u7684 ignoreEnvFile \u5c5e\u6027\u4e3a true \uff0c\u5982\u4e0b\u6240\u793a: ConfigModule . forRoot ({ ignoreEnvFile : true , });","title":"\u7981\u7528\u73af\u5883\u53d8\u91cf\u52a0\u8f7d"},{"location":"techniques/configuration/#_6","text":"\u5f53\u4f60\u60f3\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u4f7f\u7528 ConfigModule \u65f6\uff0c\u4f60\u9700\u8981\u5bfc\u5165\u5b83(\u8fd9\u662f\u4efb\u4f55 Nest \u6a21\u5757\u7684\u6807\u51c6\u914d\u7f6e)\u3002 \u6216\u8005\uff0c\u901a\u8fc7\u8bbe\u7f6e options \u5bf9\u8c61\u7684 isGlobal \u5c5e\u6027\u4e3a true \uff0c\u5c06\u5176\u58f0\u660e\u4e3a global \u6a21\u5757 \uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u65e6 ConfigModule \u88ab\u52a0\u8f7d\u5230\u6839\u6a21\u5757\u4e2d(\u4f8b\u5982\uff0c AppModule )\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u5bfc\u5165\u5b83\u4e86\u3002 ConfigModule . forRoot ({ isGlobal : true , });","title":"\u5728\u5168\u5c40\u8303\u56f4\u5185\u4f7f\u7528\u6a21\u5757"},{"location":"techniques/configuration/#_7","text":"\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u9879\u76ee\uff0c\u60a8\u53ef\u4ee5\u5229\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u6765\u8fd4\u56de\u5d4c\u5957\u7684\u914d\u7f6e\u5bf9\u8c61\u3002 \u8fd9\u5141\u8bb8\u60a8\u6309\u529f\u80fd\u5bf9\u76f8\u5173\u7684\u914d\u7f6e\u8bbe\u7f6e\u5206\u7ec4(\u4f8b\u5982\uff0c\u4e0e\u6570\u636e\u5e93\u76f8\u5173\u7684\u8bbe\u7f6e)\uff0c\u5e76\u5c06\u76f8\u5173\u7684\u8bbe\u7f6e\u5b58\u50a8\u5728\u5355\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4ee5\u5e2e\u52a9\u72ec\u7acb\u5730\u7ba1\u7406\u5b83\u4eec\u3002 \u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u5bfc\u51fa\u4e00\u4e2a\u8fd4\u56de\u914d\u7f6e\u5bf9\u8c61\u7684\u5de5\u5382\u51fd\u6570\u3002 \u914d\u7f6e\u5bf9\u8c61\u53ef\u4ee5\u662f\u4efb\u610f\u5d4c\u5957\u7684\u666e\u901a JavaScript \u5bf9\u8c61\u3002 process.env \u5bf9\u8c61\u5c06\u5305\u542b\u5b8c\u5168\u89e3\u6790\u7684\u73af\u5883\u53d8\u91cf\u952e/\u503c\u5bf9(\u4e0e .env \u6587\u4ef6\u548c\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u89e3\u6790\u5e76\u5408\u5e76\uff0c\u5982 \u4e0a\u9762 )\u6240\u8ff0\u3002 \u56e0\u4e3a\u60a8\u63a7\u5236\u8fd4\u56de\u7684\u914d\u7f6e\u5bf9\u8c61\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u6dfb\u52a0\u4efb\u4f55\u5fc5\u9700\u7684\u903b\u8f91\u6765\u5c06\u503c\u5f3a\u5236\u8f6c\u6362\u4e3a\u9002\u5f53\u7684\u7c7b\u578b\uff0c\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u7b49\u7b49... \u4f8b\u5982: @ @filename ( config / configuration ) export default () => ({ port : parseInt ( process . env . PORT , 10 ) || 3000 , database : { host : process.env.DATABASE_HOST , port : parseInt ( process . env . DATABASE_PORT , 10 ) || 5432 } }); \u6211\u4eec\u4f7f\u7528\u4f20\u9012\u7ed9 ConfigModule.forRoot() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684 load \u5c5e\u6027\u6765\u52a0\u8f7d\u8fd9\u4e2a\u6587\u4ef6: import configuration from './config/configuration' ; @Module ({ imports : [ ConfigModule . forRoot ({ load : [ configuration ], }), ], }) export class AppModule {} info Notice load \u5c5e\u6027\u7684\u503c\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5141\u8bb8\u4f60\u52a0\u8f7d\u591a\u4e2a\u914d\u7f6e\u6587\u4ef6 (\u5982... load: [databaseConfig, authConfig] ) \u4f7f\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u7ba1\u7406\u81ea\u5b9a\u4e49\u6587\u4ef6\uff0c\u5982 YAML \u6587\u4ef6\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 YAML \u683c\u5f0f\u7684\u914d\u7f6e\u793a\u4f8b: http : host : 'localhost' port : 8080 db : postgres : url : 'localhost' port : 5432 database : 'yaml-db' sqlite : database : 'sqlite.db' \u8981\u8bfb\u53d6\u548c\u89e3\u6790 YAML \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 js-yaml \u5305\u3002 $ npm i js-yaml $ npm i -D @types/js-yaml \u4e00\u65e6\u5b89\u88c5\u4e86\u8fd9\u4e2a\u5305\uff0c\u6211\u4eec\u4f7f\u7528 yaml#load \u51fd\u6570\u6765\u52a0\u8f7d\u6211\u4eec\u521a\u624d\u521b\u5efa\u7684 yaml \u6587\u4ef6\u3002 @ @filename ( config / configuration ) import { readFileSync } from 'fs' ; import * as yaml from 'js-yaml' ; import { join } from 'path' ; const YAML_CONFIG_FILENAME = 'config.yaml' ; export default () => { return yaml . load ( readFileSync ( join ( __dirname , YAML_CONFIG_FILENAME ), 'utf8' ), ) as Record < string , any > ; }; warning Note \u5728\u6784\u5efa\u8fc7\u7a0b\u4e2d\uff0cNest CLI \u4e0d\u4f1a\u81ea\u52a8\u79fb\u52a8\u4f60\u7684\"assets\"(\u975e ts \u6587\u4ef6)\u5230 dist \u6587\u4ef6\u5939\u3002 \u4e3a\u4e86\u786e\u4fdd\u4f60\u7684 YAML \u6587\u4ef6\u88ab\u590d\u5236\uff0c\u4f60\u5fc5\u987b\u5728 nest-clijson \u6587\u4ef6\u4e2d\u7684 compilerOptions#assets \u5bf9\u8c61\u4e2d\u6307\u5b9a\u8fd9\u4e00\u70b9\u3002 \u4f8b\u5982\uff0c\u5982\u679c config \u6587\u4ef6\u5939\u548c src \u6587\u4ef6\u5939\u5728\u540c\u4e00\u7ea7\u522b\uff0c\u6dfb\u52a0\u201ccompilerOptions#assets\u201d\u503c\u4e3a \"assets\": [{{ '{' }}\"include\": \"../config/*.yaml\", \"outDir\": \"./dist/config\"{{ '}' }}] . \u9605\u8bfb\u66f4\u591a(\u5728\u8fd9\u91cc)(/cli/monorepo#assets).","title":"\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6"},{"location":"techniques/configuration/#configservice","text":"\u8981\u4ece ConfigService \u4e2d\u8bbf\u95ee\u914d\u7f6e\u503c\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u6ce8\u5165 ConfigService \u3002 \u4e0e\u4efb\u4f55\u63d0\u4f9b\u5668\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u5305\u542b\u7684\u6a21\u5757- ConfigModule -\u5bfc\u5165\u5230\u5c06\u8981\u4f7f\u7528\u5b83\u7684\u6a21\u5757\u4e2d(\u9664\u975e\u4f60\u5c06\u4f20\u9012\u7ed9 ConfigModule.forroot() \u65b9\u6cd5\u7684\u9009\u9879\u5bf9\u8c61\u4e2d\u7684 isGlobal \u5c5e\u6027\u8bbe\u7f6e\u4e3a true )\u3002 \u5c06\u5176\u5bfc\u5165\u7279\u6027\u6a21\u5757\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\u3002 @ @filename ( feature . module ) @Module ({ imports : [ ConfigModule ], // ... }) \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u6784\u9020\u51fd\u6570\u6ce8\u5165\u6765\u6ce8\u5165\u5b83: constructor ( private configService : ConfigService ) {} info Hint ConfigService \u662f\u4ece @nestjs/config \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u6211\u4eec\u7684\u7c7b\u4e0a\u4f7f\u7528\u5b83: // get an environment variable const dbUser = this . configService . get < string > ( 'DATABASE_USER' ); // get a custom configuration value const dbHost = this . configService . get < string > ( 'database.host' ); \u5982\u4e0a\u6240\u793a\uff0c\u4f7f\u7528 configService.get() \u65b9\u6cd5\u901a\u8fc7\u4f20\u9012\u53d8\u91cf\u540d\u6765\u83b7\u53d6\u4e00\u4e2a\u7b80\u5355\u7684\u73af\u5883\u53d8\u91cf\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u7c7b\u578b\u6765\u505a TypeScript \u7c7b\u578b\u63d0\u793a\uff0c\u5982\u4e0a\u6240\u793a(\u4f8b\u5982\uff0c get<string>(\u2026) )\u3002 get() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u904d\u5386\u5d4c\u5957\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\u5bf9\u8c61(\u901a\u8fc7 \u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6 \u521b\u5efa)\uff0c\u5982\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u6240\u793a\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u63a5\u53e3\u4f5c\u4e3a\u7c7b\u578b\u63d0\u793a\u6765\u83b7\u5f97\u6574\u4e2a\u5d4c\u5957\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\u5bf9\u8c61: interface DatabaseConfig { host : string ; port : number ; } const dbConfig = this . configService . get < DatabaseConfig > ( 'database' ); // you can now use `dbConfig.port` and `dbConfig.host` const port = dbConfig . port ; get() \u65b9\u6cd5\u8fd8\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u5c06\u8fd4\u56de\u8fd9\u4e2a\u9ed8\u8ba4\u503c\uff0c\u5982\u4e0b\u6240\u793a: // use \"localhost\" when \"database.host\" is not defined const dbHost = this . configService . get < string > ( 'database.host' , 'localhost' ); ConfigService \u6709\u4e24\u4e2a\u53ef\u9009\u7684\u6cdb\u578b(\u7c7b\u578b\u53c2\u6570)\u3002 \u7b2c\u4e00\u4e2a\u662f\u5e2e\u52a9\u9632\u6b62\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u914d\u7f6e\u5c5e\u6027\u3002\u5982\u4e0b\u56fe\u6240\u793a: interface EnvironmentVariables { PORT : number ; TIMEOUT : string ; } // somewhere in the code constructor ( private configService : ConfigService < EnvironmentVariables > ) { const port = this . configService . get ( 'PORT' , { infer : true }); // TypeScript Error: this is invalid as the URL property is not defined in EnvironmentVariables const url = this . configService . get ( 'URL' , { infer : true }); } \u5f53 infer \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u65f6\uff0c ConfigService#get \u65b9\u6cd5\u5c06\u6839\u636e\u63a5\u53e3\u81ea\u52a8\u63a8\u65ad\u5c5e\u6027\u7c7b\u578b\uff0c\u4e3e\u4e2a\u4f8b\u5b50, typeof port === \"number\" (\u5982\u679c\u4f60\u6ca1\u6709\u5728 TypeScript \u4e2d\u4f7f\u7528' strictNullChecks '\u6807\u5fd7)\u56e0\u4e3a PORT \u5728 EnvironmentVariables \u63a5\u53e3\u4e2d\u6709\u4e00\u4e2a number \u7c7b\u578b\u3002 \u540c\u6837\uff0c\u4f7f\u7528 infer \u7279\u6027\uff0c\u4f60\u53ef\u4ee5\u63a8\u65ad\u5d4c\u5957\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\u5bf9\u8c61\u7684\u5c5e\u6027\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u4f7f\u7528\u70b9\u7b26\u53f7\uff0c\u5982\u4e0b\u6240\u793a: constructor ( private configService : ConfigService < { database : { host : string } } > ) { const dbHost = this . configService . get ( 'database.host' , { infer : true }) ! ; // typeof dbHost === \"string\" | // +--> non-null assertion operator } \u7b2c\u4e8c\u4e2a\u6cdb\u578b\u4f9d\u8d56\u4e8e\u7b2c\u4e00\u4e2a\u6cdb\u578b\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u578b\u65ad\u8a00\uff0c\u4ee5\u6d88\u9664\u5f53 strictNullChecks \u6253\u5f00\u65f6 ConfigService \u7684\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u7684\u6240\u6709 undefined \u7c7b\u578b\u3002\u4f8b\u5982: // ... constructor ( private configService : ConfigService < { PORT : number }, true > ) { // ^^^^ const port = this . configService . get ( 'PORT' , { infer : true }); // ^^^ The type of port will be 'number' thus you don't need TS type assertions anymore }","title":"\u4f7f\u7528 ConfigService"},{"location":"techniques/configuration/#_8","text":"ConfigModule \u5141\u8bb8\u4f60\u5b9a\u4e49\u548c\u52a0\u8f7d\u591a\u4e2a\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\uff0c\u5982\u4e0a\u9762 \u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6 \u6240\u793a\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u7684\u914d\u7f6e\u5bf9\u8c61\u7ba1\u7406\u590d\u6742\u7684\u914d\u7f6e\u5bf9\u8c61\u5c42\u6b21\u7ed3\u6784\uff0c\u5982\u8be5\u90e8\u5206\u6240\u793a\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u7528 registerAs() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\"\u547d\u540d\u7a7a\u95f4\"\u7684\u914d\u7f6e\u5bf9\u8c61\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( config / database . config ) export default registerAs ( 'database' , () => ({ host : process.env.DATABASE_HOST , port : process.env.DATABASE_PORT || 5432 })); \u4e0e\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u4e00\u6837\uff0c\u5728\u4f60\u7684 registerAs() \u5de5\u5382\u51fd\u6570\u4e2d\uff0c process.env \u5bf9\u8c61\u5c06\u5305\u542b\u5b8c\u5168\u89e3\u6790\u7684\u73af\u5883\u53d8\u91cf\u952e/\u503c\u5bf9(\u4e0e .env \u6587\u4ef6\u548c\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u89e3\u6790\u548c\u5408\u5e76\uff0c\u5982 \u4e0a\u9762 \u6240\u8ff0\u3002 info Hint registerAs \u51fd\u6570\u662f\u4ece @nestjs/config \u5305\u5bfc\u51fa\u7684\u3002 \u7528 forRoot() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684 load \u5c5e\u6027\u52a0\u8f7d\u6709\u547d\u540d\u7a7a\u95f4\u7684\u914d\u7f6e\uff0c\u5c31\u50cf\u4f60\u52a0\u8f7d\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u4e00\u6837: import databaseConfig from './config/database.config' ; @Module ({ imports : [ ConfigModule . forRoot ({ load : [ databaseConfig ], }), ], }) export class AppModule {} \u73b0\u5728\uff0c\u8981\u4ece database \u540d\u79f0\u7a7a\u95f4\u83b7\u53d6 host \u503c\uff0c\u8bf7\u4f7f\u7528\u70b9\u8868\u793a\u6cd5\u3002 \u4f7f\u7528 database \u4f5c\u4e3a\u5c5e\u6027\u540d\u7684\u524d\u7f00\uff0c\u5bf9\u5e94\u4e8e\u547d\u540d\u7a7a\u95f4\u7684\u540d\u79f0(\u4f5c\u4e3a registerAs() \u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012): const dbHost = this . configService . get < string > ( 'database.host' ); \u4e00\u4e2a\u5408\u7406\u7684\u66ff\u4ee3\u65b9\u6cd5\u662f\u76f4\u63a5\u6ce8\u5165 database \u540d\u79f0\u7a7a\u95f4\u3002\u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u4ece\u5f3a\u7c7b\u578b\u4e2d\u83b7\u76ca: constructor ( @Inject ( databaseConfig . KEY ) private dbConfig : ConfigType < typeof databaseConfig > , ) {} info Hint ConfigType \u662f\u4ece @nestjs/config \u5305\u4e2d\u5bfc\u51fa\u7684\u3002","title":"\u914d\u7f6e\u540d\u79f0\u7a7a\u95f4"},{"location":"techniques/configuration/#_9","text":"\u7531\u4e8e\u8bbf\u95ee process.env \u53ef\u80fd\u5f88\u6162\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4f20\u9012\u7ed9 ConfigModule.forRoot() \u7684\u9009\u9879\u5bf9\u8c61\u7684 cache \u5c5e\u6027\u6765\u63d0\u9ad8 ConfigService#get \u65b9\u6cd5\u7684\u6027\u80fd\uff0c\u5f53\u5b83\u5b58\u50a8\u5728 process.env \u4e2d\u7684\u53d8\u91cf\u65f6\u3002 ConfigModule . forRoot ({ cache : true , });","title":"\u7f13\u5b58\u73af\u5883\u53d8\u91cf"},{"location":"techniques/configuration/#_10","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u6839\u6a21\u5757(\u4f8b\u5982 AppModule )\u4e2d\u5904\u7406\u4e86\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528\u7684\u662f forRoot() \u65b9\u6cd5\u3002 \u4e5f\u8bb8\u60a8\u6709\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u9879\u76ee\u7ed3\u6784\uff0c\u7279\u6027\u7279\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e\u591a\u4e2a\u4e0d\u540c\u7684\u76ee\u5f55\u4e2d\u3002 @nestjs/config \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3a \u90e8\u5206\u6ce8\u518c \u7684\u7279\u6027\uff0c\u5b83\u53ea\u5f15\u7528\u4e0e\u6bcf\u4e2a\u7279\u6027\u6a21\u5757\u76f8\u5173\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u5c06\u6240\u6709\u8fd9\u4e9b\u6587\u4ef6\u52a0\u8f7d\u5230\u6839\u6a21\u5757\u4e2d\u3002 \u5728\u7279\u6027\u6a21\u5757\u4e2d\u4f7f\u7528 forFeature() \u9759\u6001\u65b9\u6cd5\u6765\u6267\u884c\u90e8\u5206\u6ce8\u518c\uff0c\u5982\u4e0b\u6240\u793a: import databaseConfig from './config/database.config' ; @Module ({ imports : [ ConfigModule . forFeature ( databaseConfig )], }) export class DatabaseModule {} info Warning \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f7f\u7528 onModuleInit() \u94a9\u5b50\u8bbf\u95ee\u901a\u8fc7\u90e8\u5206\u6ce8\u518c\u52a0\u8f7d\u7684\u5c5e\u6027\uff0c\u800c\u4e0d\u662f\u5728\u6784\u9020\u51fd\u6570\u4e2d\u3002\u8fd9\u662f\u56e0\u4e3a forFeature() \u65b9\u6cd5\u662f\u5728\u6a21\u5757\u521d\u59cb\u5316\u671f\u95f4\u8fd0\u884c\u7684\uff0c\u6a21\u5757\u521d\u59cb\u5316\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u5982\u679c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u8bbf\u95ee\u53e6\u4e00\u4e2a\u6a21\u5757\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u52a0\u8f7d\u7684\u503c\uff0c\u5219\u914d\u7f6e\u6240\u4f9d\u8d56\u7684\u6a21\u5757\u53ef\u80fd\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 onModuleInit() \u65b9\u6cd5\u53ea\u6709\u5728\u5b83\u4f9d\u8d56\u7684\u6240\u6709\u6a21\u5757\u90fd\u88ab\u521d\u59cb\u5316\u540e\u624d\u4f1a\u8fd0\u884c\uff0c\u6240\u4ee5\u8fd9\u79cd\u6280\u672f\u662f\u5b89\u5168\u7684\u3002","title":"\u90e8\u5206\u6ce8\u518c"},{"location":"techniques/configuration/#_11","text":"\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u6240\u9700\u7684\u73af\u5883\u53d8\u91cf\uff0c\u6216\u8005\u5b83\u4eec\u4e0d\u7b26\u5408\u67d0\u4e9b\u9a8c\u8bc1\u89c4\u5219\uff0c\u90a3\u4e48\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u671f\u95f4\u629b\u51fa\u5f02\u5e38\u662f\u6807\u51c6\u7684\u505a\u6cd5\u3002 @nestjs/config \u5305\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0: Joi \u5185\u7f6e\u9a8c\u8bc1\u5668\u3002\u4f7f\u7528 Joi\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u6a21\u5f0f\uff0c\u5e76\u6839\u636e\u5b83\u9a8c\u8bc1 JavaScript \u5bf9\u8c61\u3002 \u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 validate() \u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u73af\u5883\u53d8\u91cf\u4f5c\u4e3a\u8f93\u5165\u3002 \u8981\u4f7f\u7528 Joi\uff0c\u6211\u4eec\u5fc5\u987b\u5b89\u88c5 Joi \u5305: $ npm install --save joi warning Notice \u201cjoi\u201d\u7684\u6700\u65b0\u7248\u672c\u8981\u6c42\u60a8\u8fd0\u884c\u7684\u662f Node v12 \u6216\u66f4\u9ad8\u7248\u672c\u3002\u5bf9\u4e8e\u8f83\u8001\u7248\u672c\u7684\u8282\u70b9\uff0c\u8bf7\u5b89\u88c5 v16.1.8 \u3002\u8fd9\u4e3b\u8981\u662f\u5728\u201cv17.0.2\u201d\u53d1\u5e03\u4e4b\u540e\uff0c\u5b83\u4f1a\u5728\u6784\u5efa\u65f6\u5bfc\u81f4\u9519\u8bef\u3002\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003\u4ed6\u4eec\u7684 17.0.0 \u53d1\u5e03\u8bf4\u660e \u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a Joi \u9a8c\u8bc1\u6a21\u5f0f\uff0c\u5e76\u901a\u8fc7 forRoot() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u7684 validationSchema \u5c5e\u6027\u4f20\u9012\u5b83\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import * as Joi from 'joi' ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ NODE_ENV : Joi.string () . valid ( 'development' , 'production' , 'test' , 'provision' ) . default ( 'development' ), PORT : Joi.number (). default ( 3000 ), }), }), ], }) export class AppModule {} \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u6a21\u5f0f\u952e\u90fd\u88ab\u8ba4\u4e3a\u662f\u53ef\u9009\u7684\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3a NODE_ENV \u548c PORT \u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u6211\u4eec\u5728\u73af\u5883( .env \u6587\u4ef6\u6216\u8fdb\u7a0b\u73af\u5883)\u4e2d\u4e0d\u63d0\u4f9b\u8fd9\u4e9b\u53d8\u91cf\uff0c\u5c06\u4f7f\u7528\u5b83\u4eec\u3002 \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 required() \u9a8c\u8bc1\u65b9\u6cd5\u6765\u8981\u6c42\u4e00\u4e2a\u503c\u5fc5\u987b\u5b9a\u4e49\u5728\u73af\u5883\u4e2d( .env \u6587\u4ef6\u6216\u8fdb\u7a0b\u73af\u5883)\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u63d0\u4f9b\u73af\u5883\u4e2d\u7684\u53d8\u91cf\uff0c\u9a8c\u8bc1\u6b65\u9aa4\u5c06\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002 \u6709\u5173\u5982\u4f55\u6784\u9020\u9a8c\u8bc1\u6a21\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Joi \u9a8c\u8bc1\u65b9\u6cd5 \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5141\u8bb8\u672a\u77e5\u7684\u73af\u5883\u53d8\u91cf(\u5176\u952e\u4e0d\u5728\u6a21\u5f0f\u4e2d\u51fa\u73b0\u7684\u73af\u5883\u53d8\u91cf)\uff0c\u5e76\u4e14\u4e0d\u4f1a\u89e6\u53d1\u9a8c\u8bc1\u5f02\u5e38\u3002 \u7f3a\u7701\u60c5\u51b5\u4e0b\uff0c\u62a5\u544a\u6240\u6709\u9a8c\u8bc1\u9519\u8bef\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 forRoot() \u9009\u9879\u5bf9\u8c61\u7684 validationOptions \u952e\u4f20\u9012\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u6765\u6539\u53d8\u8fd9\u4e9b\u884c\u4e3a\u3002 \u8fd9\u4e2a\u9009\u9879\u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u7531 Joi validation options \u63d0\u4f9b\u7684\u4efb\u4f55\u6807\u51c6\u9a8c\u8bc1\u9009\u9879\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u8981\u53cd\u8f6c\u4e0a\u9762\u7684\u4e24\u4e2a\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f20\u9012\u9009\u9879: @ @filename ( app . module ) import * as Joi from 'joi' ; @Module ({ imports : [ ConfigModule . forRoot ({ validationSchema : Joi.object ({ NODE_ENV : Joi.string () . valid ( 'development' , 'production' , 'test' , 'provision' ) . default ( 'development' ), PORT : Joi.number (). default ( 3000 ), }), validationOptions : { allowUnknown : false , abortEarly : true , }, }), ], }) export class AppModule {} @nestjs/config \u5305\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e: allowUnknown : \u63a7\u5236\u73af\u5883\u53d8\u91cf\u4e2d\u662f\u5426\u5141\u8bb8\u672a\u77e5\u952e\u3002\u9ed8\u8ba4\u662f true abortEarly : \u5982\u679c true \uff0c\u5728\u7b2c\u4e00\u4e2a\u9519\u8bef\u65f6\u505c\u6b62\u9a8c\u8bc1;\u5982\u679c\u4e3a false \uff0c\u8fd4\u56de\u6240\u6709\u9519\u8bef\u3002\u9ed8\u8ba4\u4e3a false \u3002 \u8bf7\u6ce8\u610f\uff0c\u4e00\u65e6\u4f60\u51b3\u5b9a\u4f20\u9012\u4e00\u4e2a validationOptions \u5bf9\u8c61\uff0c\u4efb\u4f55\u4f60\u6ca1\u6709\u663e\u5f0f\u4f20\u9012\u7684\u8bbe\u7f6e\u5c06\u9ed8\u8ba4\u4e3a Joi \u6807\u51c6\u9ed8\u8ba4\u503c(\u800c\u4e0d\u662f @nestjs/config \u9ed8\u8ba4\u503c)\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u5728\u4f60\u7684\u81ea\u5b9a\u4e49 validationOptions \u5bf9\u8c61\u4e2d\u672a\u6307\u5b9a allowUnknowns \uff0c\u5b83\u7684 Joi \u9ed8\u8ba4\u503c\u4e3a false \u3002 \u56e0\u6b64\uff0c\u5728\u4f60\u7684\u81ea\u5b9a\u4e49\u5bf9\u8c61\u4e2d\u540c\u65f6\u6307\u5b9a\u8fd9 \u4e24\u4e2a \u8bbe\u7f6e\u53ef\u80fd\u662f\u6700\u5b89\u5168\u7684\u3002","title":"\u6a21\u5f0f\u9a8c\u8bc1"},{"location":"techniques/configuration/#_12","text":"\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a \u540c\u6b65 validate \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5305\u542b\u73af\u5883\u53d8\u91cf\u7684\u5bf9\u8c61(\u6765\u81ea env \u6587\u4ef6\u548c\u8fdb\u7a0b)\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5df2\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf\u7684\u5bf9\u8c61\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u5bf9\u5b83\u4eec\u8fdb\u884c\u8f6c\u6362/\u4fee\u6539\u3002 \u5982\u679c\u51fd\u6570\u629b\u51fa\u9519\u8bef\uff0c\u5b83\u5c06\u963b\u6b62\u5e94\u7528\u7a0b\u5e8f\u5f15\u5bfc\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u4f7f\u7528 class-transformer and class-validator \u5305\u3002\u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u5b9a\u4e49: \u4e00\u4e2a\u6709\u9a8c\u8bc1\u7ea6\u675f\u7684\u7c7b\uff0c \u4f7f\u7528 plainToClass \u548c validateSync \u51fd\u6570\u7684\u9a8c\u8bc1\u51fd\u6570\u3002 @ @filename ( env . validation ) import { plainToClass } from 'class-transformer' ; import { IsEnum , IsNumber , validateSync } from 'class-validator' ; enum Environment { Development = \"development\" , Production = \"production\" , Test = \"test\" , Provision = \"provision\" , } class EnvironmentVariables { @IsEnum ( Environment ) NODE_ENV : Environment ; @IsNumber () PORT : number ; } export function validate ( config : Record < string , unknown > ) { const validatedConfig = plainToClass ( EnvironmentVariables , config , { enableImplicitConversion : true }, ); const errors = validateSync ( validatedConfig , { skipMissingProperties : false }); if ( errors . length > 0 ) { throw new Error ( errors . toString ()); } return validatedConfig ; } \u5728\u8fd9\u91cc\uff0c\u4f7f\u7528 validate \u51fd\u6570\u4f5c\u4e3a ConfigModule \u7684\u914d\u7f6e\u9009\u9879\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import { validate } from './env.validation' ; @Module ({ imports : [ ConfigModule . forRoot ({ validate , }), ], }) export class AppModule {}","title":"\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u51fd\u6570"},{"location":"techniques/configuration/#getter","text":"ConfigService \u5b9a\u4e49\u4e86\u4e00\u4e2a\u901a\u7528\u7684 get() \u65b9\u6cd5\u6765\u6309\u952e\u68c0\u7d22\u914d\u7f6e\u503c\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u6dfb\u52a0 getter \u51fd\u6570\u6765\u5b9e\u73b0\u66f4\u81ea\u7136\u7684\u7f16\u7801\u98ce\u683c: @ @filename () @Injectable () export class ApiConfigService { constructor ( private configService : ConfigService ) {} get isAuthEnabled () : boolean { return this . configService . get ( 'AUTH_ENABLED' ) === 'true' ; } } @ @switch @Dependencies ( ConfigService ) @Injectable () export class ApiConfigService { constructor ( configService ) { this . configService = configService ; } get isAuthEnabled () { return this . configService . get ( 'AUTH_ENABLED' ) === 'true' ; } } \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528 getter \u51fd\u6570: @ @filename ( app . service ) @Injectable () export class AppService { constructor ( apiConfigService : ApiConfigService ) { if ( apiConfigService . isAuthEnabled ) { // Authentication is enabled } } } @ @switch @Dependencies ( ApiConfigService ) @Injectable () export class AppService { constructor ( apiConfigService ) { if ( apiConfigService . isAuthEnabled ) { // Authentication is enabled } } }","title":"\u5b9a\u5236\u7684 getter \u51fd\u6570"},{"location":"techniques/configuration/#_13","text":"@nestjs/config \u5305\u652f\u6301\u73af\u5883\u53d8\u91cf\u6269\u5c55\u3002 \u4f7f\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u5d4c\u5957\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5176\u4e2d\u4e00\u4e2a\u53d8\u91cf\u5728\u53e6\u4e00\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49\u4e2d\u88ab\u5f15\u7528\u3002 \u4f8b\u5982: APP_URL=mywebsi te .com SUPPORT_EMAIL=suppor t @$ { APP_URL } \u5728\u8fd9\u4e2a\u6784\u9020\u4e2d\uff0c\u53d8\u91cf SUPPORT_EMAIL \u89e3\u6790\u4e3a 'support@mywebsite.com' \u3002\u6ce8\u610f ${{ '{' }}...{{ '}' }} \u8bed\u6cd5\u89e6\u53d1\u89e3\u6790 SUPPORT_EMAIL \u5b9a\u4e49\u4e2d\u7684\u53d8\u91cf APP_URL \u7684\u503c\u3002 info Hint \u5bf9\u4e8e\u8fd9\u4e2a\u7279\u6027\uff0c @nestjs/config \u5305\u5185\u90e8\u4f7f\u7528 dotenv-expand \u3002 \u5728\u4f20\u9012\u7ed9 ConfigModule \u7684 forRoot() \u65b9\u6cd5\u7684 options \u5bf9\u8c61\u4e2d\uff0c\u4f7f\u7528 expandVariables \u5c5e\u6027\u542f\u7528\u73af\u5883\u53d8\u91cf\u5c55\u5f00\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) @Module ({ imports : [ ConfigModule . forRoot ({ // ... expandVariables : true , }), ], }) export class AppModule {}","title":"\u53ef\u6269\u5c55\u7684\u53d8\u91cf"},{"location":"techniques/configuration/#maints","text":"\u867d\u7136\u6211\u4eec\u7684\u914d\u7f6e\u5b58\u50a8\u5728\u670d\u52a1\u4e2d\uff0c\u4f46\u5b83\u4ecd\u7136\u53ef\u4ee5\u5728 main.ts \u6587\u4ef6\u4e2d\u4f7f\u7528\u3002\u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5b58\u50a8\u8bf8\u5982\u5e94\u7528\u7a0b\u5e8f\u7aef\u53e3\u6216 CORS \u4e3b\u673a\u4e4b\u7c7b\u7684\u53d8\u91cf\u3002 \u8981\u8bbf\u95ee\u5b83\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528 app.get() \u65b9\u6cd5\uff0c\u540e\u9762\u8ddf\u7740\u670d\u52a1\u5f15\u7528: const configService = app . get ( ConfigService ); \u7136\u540e\u4f60\u53ef\u4ee5\u50cf\u5f80\u5e38\u4e00\u6837\u4f7f\u7528\u5b83\uff0c\u901a\u8fc7\u4f7f\u7528\u914d\u7f6e\u952e\u8c03\u7528 get \u65b9\u6cd5: const port = configService . get ( 'PORT' );","title":"\u5728main.ts\u4e2d\u4f7f\u7528"},{"location":"techniques/cookies/","text":"Cookies \u00b6 An HTTP cookie is a small piece of data stored by the user's browser. Cookies were designed to be a reliable mechanism for websites to remember stateful information. When the user visits the website again, the cookie is automatically sent with the request. Use with Express (default) \u00b6 First install the required package (and its types for TypeScript users): $ npm i cookie-parser $ npm i -D @types/cookie-parser Once the installation is complete, apply the cookie-parser middleware as global middleware (for example, in your main.ts file). import * as cookieParser from 'cookie-parser' ; // somewhere in your initialization file app . use ( cookieParser ()); You can pass several options to the cookieParser middleware: secret a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order. options an object that is passed to cookie.parse as the second option. See cookie for more information. The middleware will parse the Cookie header on the request and expose the cookie data as the property req.cookies and, if a secret was provided, as the property req.signedCookies . These properties are name value pairs of the cookie name to cookie value. When secret is provided, this module will unsign and validate any signed cookie values and move those name value pairs from req.cookies into req.signedCookies . A signed cookie is a cookie that has a value prefixed with s: . Signed cookies that fail signature validation will have the value false instead of the tampered value. With this in place, you can now read cookies from within the route handlers, as follows: @Get () findAll ( @Req () request : Request ) { console . log ( request . cookies ); // or \"request.cookies['cookieKey']\" // or console.log(request.signedCookies); } info Hint The @Req() decorator is imported from the @nestjs/common , while Request from the express package. To attach a cookie to an outgoing response, use the Response#cookie() method: @Get () findAll ( @Res ({ passthrough : true }) response : Response ) { response . cookie ( 'key' , 'value' ) } warning Warning If you want to leave the response handling logic to the framework, remember to set the passthrough option to true , as shown above. Read more here . info Hint The @Res() decorator is imported from the @nestjs/common , while Response from the express package. Use with Fastify \u00b6 First install the required package: $ npm i fastify-cookie Once the installation is complete, register the fastify-cookie plugin: import fastifyCookie from 'fastify-cookie' ; // somewhere in your initialization file const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter (), ); app . register ( fastifyCookie , { secret : 'my-secret' , // for cookies signature }); With this in place, you can now read cookies from within the route handlers, as follows: @Get () findAll ( @Req () request : FastifyRequest ) { console . log ( request . cookies ); // or \"request.cookies['cookieKey']\" } info Hint The @Req() decorator is imported from the @nestjs/common , while FastifyRequest from the fastify package. To attach a cookie to an outgoing response, use the FastifyReply#setCookie() method: @Get () findAll ( @Res ({ passthrough : true }) response : FastifyReply ) { response . setCookie ( 'key' , 'value' ) } To read more about FastifyReply#setCookie() method, check out this page . warning Warning If you want to leave the response handling logic to the framework, remember to set the passthrough option to true , as shown above. Read more here . info Hint The @Res() decorator is imported from the @nestjs/common , while FastifyReply from the fastify package. Creating a custom decorator (cross-platform) \u00b6 To provide a convenient, declarative way of accessing incoming cookies, we can create a custom decorator . import { createParamDecorator , ExecutionContext } from '@nestjs/common' ; export const Cookies = createParamDecorator ( ( data : string , ctx : ExecutionContext ) => { const request = ctx . switchToHttp (). getRequest (); return data ? request . cookies ? .[ data ] : request . cookies ; }, ); The @Cookies() decorator will extract all cookies, or a named cookie from the req.cookies object and populate the decorated parameter with that value. With this in place, we can now use the decorator in a route handler signature, as follows: @Get () findAll ( @Cookies ( 'name' ) name : string ) {}","title":"Cookies"},{"location":"techniques/cookies/#cookies","text":"An HTTP cookie is a small piece of data stored by the user's browser. Cookies were designed to be a reliable mechanism for websites to remember stateful information. When the user visits the website again, the cookie is automatically sent with the request.","title":"Cookies"},{"location":"techniques/cookies/#use-with-express-default","text":"First install the required package (and its types for TypeScript users): $ npm i cookie-parser $ npm i -D @types/cookie-parser Once the installation is complete, apply the cookie-parser middleware as global middleware (for example, in your main.ts file). import * as cookieParser from 'cookie-parser' ; // somewhere in your initialization file app . use ( cookieParser ()); You can pass several options to the cookieParser middleware: secret a string or array used for signing cookies. This is optional and if not specified, will not parse signed cookies. If a string is provided, this is used as the secret. If an array is provided, an attempt will be made to unsign the cookie with each secret in order. options an object that is passed to cookie.parse as the second option. See cookie for more information. The middleware will parse the Cookie header on the request and expose the cookie data as the property req.cookies and, if a secret was provided, as the property req.signedCookies . These properties are name value pairs of the cookie name to cookie value. When secret is provided, this module will unsign and validate any signed cookie values and move those name value pairs from req.cookies into req.signedCookies . A signed cookie is a cookie that has a value prefixed with s: . Signed cookies that fail signature validation will have the value false instead of the tampered value. With this in place, you can now read cookies from within the route handlers, as follows: @Get () findAll ( @Req () request : Request ) { console . log ( request . cookies ); // or \"request.cookies['cookieKey']\" // or console.log(request.signedCookies); } info Hint The @Req() decorator is imported from the @nestjs/common , while Request from the express package. To attach a cookie to an outgoing response, use the Response#cookie() method: @Get () findAll ( @Res ({ passthrough : true }) response : Response ) { response . cookie ( 'key' , 'value' ) } warning Warning If you want to leave the response handling logic to the framework, remember to set the passthrough option to true , as shown above. Read more here . info Hint The @Res() decorator is imported from the @nestjs/common , while Response from the express package.","title":"Use with Express (default)"},{"location":"techniques/cookies/#use-with-fastify","text":"First install the required package: $ npm i fastify-cookie Once the installation is complete, register the fastify-cookie plugin: import fastifyCookie from 'fastify-cookie' ; // somewhere in your initialization file const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter (), ); app . register ( fastifyCookie , { secret : 'my-secret' , // for cookies signature }); With this in place, you can now read cookies from within the route handlers, as follows: @Get () findAll ( @Req () request : FastifyRequest ) { console . log ( request . cookies ); // or \"request.cookies['cookieKey']\" } info Hint The @Req() decorator is imported from the @nestjs/common , while FastifyRequest from the fastify package. To attach a cookie to an outgoing response, use the FastifyReply#setCookie() method: @Get () findAll ( @Res ({ passthrough : true }) response : FastifyReply ) { response . setCookie ( 'key' , 'value' ) } To read more about FastifyReply#setCookie() method, check out this page . warning Warning If you want to leave the response handling logic to the framework, remember to set the passthrough option to true , as shown above. Read more here . info Hint The @Res() decorator is imported from the @nestjs/common , while FastifyReply from the fastify package.","title":"Use with Fastify"},{"location":"techniques/cookies/#creating-a-custom-decorator-cross-platform","text":"To provide a convenient, declarative way of accessing incoming cookies, we can create a custom decorator . import { createParamDecorator , ExecutionContext } from '@nestjs/common' ; export const Cookies = createParamDecorator ( ( data : string , ctx : ExecutionContext ) => { const request = ctx . switchToHttp (). getRequest (); return data ? request . cookies ? .[ data ] : request . cookies ; }, ); The @Cookies() decorator will extract all cookies, or a named cookie from the req.cookies object and populate the decorated parameter with that value. With this in place, we can now use the decorator in a route handler signature, as follows: @Get () findAll ( @Cookies ( 'name' ) name : string ) {}","title":"Creating a custom decorator (cross-platform)"},{"location":"techniques/events/","text":"Events \u00b6 Event Emitter package ( @nestjs/event-emitter ) provides a simple observer implementation, allowing you to subscribe and listen for various events that occur in your application. Events serve as a great way to decouple various aspects of your application, since a single event can have multiple listeners that do not depend on each other. EventEmitterModule internally uses the eventemitter2 package. Getting started \u00b6 First install the required package: $ npm i --save @nestjs/event-emitter Once the installation is complete, import the EventEmitterModule into the root AppModule and run the forRoot() static method as shown below: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { EventEmitterModule } from '@nestjs/event-emitter' ; @Module ({ imports : [ EventEmitterModule . forRoot () ], }) export class AppModule {} The .forRoot() call initializes the event emitter and registers any declarative event listeners that exist within your app. Registration occurs when the onApplicationBootstrap lifecycle hook occurs, ensuring that all modules have loaded and declared any scheduled jobs. To configure the underlying EventEmitter instance, pass the configuration object to the .forRoot() method, as follows: EventEmitterModule . forRoot ({ // set this to `true` to use wildcards wildcard : false , // the delimiter used to segment namespaces delimiter : '.' , // set this to `true` if you want to emit the newListener event newListener : false , // set this to `true` if you want to emit the removeListener event removeListener : false , // the maximum amount of listeners that can be assigned to an event maxListeners : 10 , // show event name in memory leak message when more than maximum amount of listeners is assigned verboseMemoryLeak : false , // disable throwing uncaughtException if an error event is emitted and it has no listeners ignoreErrors : false , }); Dispatching Events \u00b6 To dispatch (i.e., fire) an event, first inject EventEmitter2 using standard constructor injection: constructor ( private eventEmitter : EventEmitter2 ) {} info Hint Import the EventEmitter2 from the @nestjs/event-emitter package. Then use it in a class as follows: this . eventEmitter . emit ( 'order.created' , new OrderCreatedEvent ({ orderId : 1 , payload : {}, }), ); Listening to Events \u00b6 To declare an event listener, decorate a method with the @OnEvent() decorator preceding the method definition containing the code to be executed, as follows: @OnEvent ( 'order.created' ) handleOrderCreatedEvent ( payload : OrderCreatedEvent ) { // handle and process \"OrderCreatedEvent\" event } warning Warning Event subscribers cannot be request-scoped. The first argument can be a string or symbol for a simple event emitter and a string | symbol | Array<string | symbol> in a case of a wildcard emitter. The second argument (optional) is a listener options object ( read more ). @OnEvent ( 'order.created' , { async : true }) handleOrderCreatedEvent ( payload : OrderCreatedEvent ) { // handle and process \"OrderCreatedEvent\" event } To use namespaces/wildcards, pass the wildcard option into the EventEmitterModule#forRoot() method. When namespaces/wildcards are enabled, events can either be strings ( foo.bar ) separated by a delimiter or arrays ( ['foo', 'bar'] ). The delimiter is also configurable as a configuration property ( delimiter ). With namespaces feature enabled, you can subscribe to events using a wildcard: @OnEvent ( 'order.*' ) handleOrderEvents ( payload : OrderCreatedEvent | OrderRemovedEvent | OrderUpdatedEvent ) { // handle and process an event } Note that such a wildcard only applies to one block. The argument order.* will match, for example, the events order.created and order.shipped but not order.delayed.out_of_stock . In order to listen to such events, use the multilevel wildcard pattern (i.e, ** ), described in the EventEmitter2 documentation . With this pattern, you can, for example, create an event listener that catches all events. @OnEvent ( '**' ) handleEverything ( payload : any ) { // handle and process an event } info Hint EventEmitter2 class provides several useful methods for interacting with events, like waitFor and onAny . You can read more about them here . Example \u00b6 A working example is available here .","title":"\u4e8b\u4ef6"},{"location":"techniques/events/#events","text":"Event Emitter package ( @nestjs/event-emitter ) provides a simple observer implementation, allowing you to subscribe and listen for various events that occur in your application. Events serve as a great way to decouple various aspects of your application, since a single event can have multiple listeners that do not depend on each other. EventEmitterModule internally uses the eventemitter2 package.","title":"Events"},{"location":"techniques/events/#getting-started","text":"First install the required package: $ npm i --save @nestjs/event-emitter Once the installation is complete, import the EventEmitterModule into the root AppModule and run the forRoot() static method as shown below: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { EventEmitterModule } from '@nestjs/event-emitter' ; @Module ({ imports : [ EventEmitterModule . forRoot () ], }) export class AppModule {} The .forRoot() call initializes the event emitter and registers any declarative event listeners that exist within your app. Registration occurs when the onApplicationBootstrap lifecycle hook occurs, ensuring that all modules have loaded and declared any scheduled jobs. To configure the underlying EventEmitter instance, pass the configuration object to the .forRoot() method, as follows: EventEmitterModule . forRoot ({ // set this to `true` to use wildcards wildcard : false , // the delimiter used to segment namespaces delimiter : '.' , // set this to `true` if you want to emit the newListener event newListener : false , // set this to `true` if you want to emit the removeListener event removeListener : false , // the maximum amount of listeners that can be assigned to an event maxListeners : 10 , // show event name in memory leak message when more than maximum amount of listeners is assigned verboseMemoryLeak : false , // disable throwing uncaughtException if an error event is emitted and it has no listeners ignoreErrors : false , });","title":"Getting started"},{"location":"techniques/events/#dispatching-events","text":"To dispatch (i.e., fire) an event, first inject EventEmitter2 using standard constructor injection: constructor ( private eventEmitter : EventEmitter2 ) {} info Hint Import the EventEmitter2 from the @nestjs/event-emitter package. Then use it in a class as follows: this . eventEmitter . emit ( 'order.created' , new OrderCreatedEvent ({ orderId : 1 , payload : {}, }), );","title":"Dispatching Events"},{"location":"techniques/events/#listening-to-events","text":"To declare an event listener, decorate a method with the @OnEvent() decorator preceding the method definition containing the code to be executed, as follows: @OnEvent ( 'order.created' ) handleOrderCreatedEvent ( payload : OrderCreatedEvent ) { // handle and process \"OrderCreatedEvent\" event } warning Warning Event subscribers cannot be request-scoped. The first argument can be a string or symbol for a simple event emitter and a string | symbol | Array<string | symbol> in a case of a wildcard emitter. The second argument (optional) is a listener options object ( read more ). @OnEvent ( 'order.created' , { async : true }) handleOrderCreatedEvent ( payload : OrderCreatedEvent ) { // handle and process \"OrderCreatedEvent\" event } To use namespaces/wildcards, pass the wildcard option into the EventEmitterModule#forRoot() method. When namespaces/wildcards are enabled, events can either be strings ( foo.bar ) separated by a delimiter or arrays ( ['foo', 'bar'] ). The delimiter is also configurable as a configuration property ( delimiter ). With namespaces feature enabled, you can subscribe to events using a wildcard: @OnEvent ( 'order.*' ) handleOrderEvents ( payload : OrderCreatedEvent | OrderRemovedEvent | OrderUpdatedEvent ) { // handle and process an event } Note that such a wildcard only applies to one block. The argument order.* will match, for example, the events order.created and order.shipped but not order.delayed.out_of_stock . In order to listen to such events, use the multilevel wildcard pattern (i.e, ** ), described in the EventEmitter2 documentation . With this pattern, you can, for example, create an event listener that catches all events. @OnEvent ( '**' ) handleEverything ( payload : any ) { // handle and process an event } info Hint EventEmitter2 class provides several useful methods for interacting with events, like waitFor and onAny . You can read more about them here .","title":"Listening to Events"},{"location":"techniques/events/#example","text":"A working example is available here .","title":"Example"},{"location":"techniques/file-upload/","text":"\u6587\u4ef6\u4e0a\u4f20 \u00b6 \u4e3a\u4e86\u5904\u7406\u6587\u4ef6\u4e0a\u4f20\uff0cNest \u57fa\u4e8e Express \u7684 multer \u4e2d\u95f4\u4ef6\u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u6a21\u5757\u3002 Multer \u5904\u7406\u4ee5 multipart/form-data \u683c\u5f0f\u53d1\u5e03\u7684\u6570\u636e\uff0c\u8be5\u683c\u5f0f\u4e3b\u8981\u7528\u4e8e\u901a\u8fc7 HTTP POST \u8bf7\u6c42\u4e0a\u4f20\u6587\u4ef6\u3002 \u6b64\u6a21\u5757\u662f\u5b8c\u5168\u53ef\u914d\u7f6e\u7684\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u6c42\u8c03\u6574\u5176\u884c\u4e3a\u3002 warning Warning Multer \u4e0d\u80fd\u5904\u7406\u4e0d\u652f\u6301\u591a\u90e8\u5206\u683c\u5f0f\u7684\u6570\u636e ( multipart/form-data ). \u53e6\u5916\uff0c\u8bf7\u6ce8\u610f\u8fd9\u4e2a\u5305\u4e0d\u517c\u5bb9 FastifyAdapter \u3002 \u4e3a\u4e86\u66f4\u597d\u7684\u7c7b\u578b\u5b89\u5168\uff0c\u8ba9\u6211\u4eec\u5b89\u88c5 Multer typings \u5305: $ npm i -D @types/multer \u5b89\u88c5\u4e86\u8fd9\u4e2a\u5305\u540e\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 Express.Multer.File \u7c7b\u578b (\u60a8\u53ef\u4ee5\u5982\u4e0b\u65b9\u5f0f\u5bfc\u5165\u8be5\u7c7b\u578b: import {{ '{' }} Express {{ '}' }} from 'express' ). \u57fa\u672c\u7684\u4f8b\u5b50 \u00b6 \u8981\u4e0a\u4f20\u5355\u4e2a\u6587\u4ef6\uff0c\u53ea\u9700\u5c06 FileInterceptor() \u62e6\u622a\u5668\u7ed1\u5b9a\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u4e0a\uff0c\u7136\u540e\u4f7f\u7528 @UploadedFile() \u88c5\u9970\u5668\u4ece request \u4e2d\u63d0\u53d6 file \u3002 @ @filename () @Post ( 'upload' ) @UseInterceptors ( FileInterceptor ( 'file' )) uploadFile ( @UploadedFile () file : Express.Multer.File ) { console . log ( file ); } @ @switch @Post ( 'upload' ) @UseInterceptors ( FileInterceptor ( 'file' )) @Bind ( UploadedFile ()) uploadFile ( file ) { console . log ( file ); } info Hint FileInterceptor() \u88c5\u9970\u5668\u662f\u4ece @nestjs/platform-express \u5305\u5bfc\u51fa\u7684\u3002 @UploadedFile() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5bfc\u51fa\u7684\u3002 FileInterceptor() \u88c5\u9970\u5668\u6709\u4e24\u4e2a\u53c2\u6570: fieldName : \u5b57\u7b26\u4e32\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fdd\u5b58\u6587\u4ef6\u7684 HTML \u8868\u5355\u4e2d\u5b57\u6bb5\u7684\u540d\u79f0 options : \u7c7b\u578b\u4e3a MulterOptions \u7684\u53ef\u9009\u5bf9\u8c61\u3002 \u8fd9\u662f multiter \u6784\u9020\u51fd\u6570\u4f7f\u7528\u7684\u540c\u4e00\u4e2a\u5bf9\u8c61 (\u66f4\u591a\u7ec6\u8282 \u5728\u8fd9\u91cc ). warning Warning FileInterceptor() \u53ef\u80fd\u4e0d\u517c\u5bb9\u7b2c\u4e09\u65b9\u4e91\u63d0\u4f9b\u5546\uff0c\u5982\u8c37\u6b4c Firebase \u6216\u5176\u4ed6\u3002 \u6587\u4ef6\u6570\u7ec4 \u00b6 \u8981\u4e0a\u4f20\u4e00\u4e2a\u6587\u4ef6\u6570\u7ec4(\u7528\u4e00\u4e2a\u5b57\u6bb5\u540d\u6807\u8bc6)\uff0c\u4f7f\u7528 FilesInterceptor() \u88c5\u9970\u5668(\u6ce8\u610f\u88c5\u9970\u5668\u540d\u79f0\u4e2d\u7684\u590d\u6570 Files )\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u6709\u4e09\u4e2a\u53c2\u6570: fieldName : \u5982\u4e0a\u6240\u8ff0 maxCount : \u53ef\u9009\u6570\u76ee\uff0c\u5b9a\u4e49\u8981\u63a5\u53d7\u7684\u6700\u5927\u6587\u4ef6\u6570\u76ee options : \u53ef\u9009\u7684 MulterOptions \u5bf9\u8c61\uff0c\u5982\u4e0a\u6240\u8ff0 \u5f53\u4f7f\u7528 FilesInterceptor() \u65f6\uff0c\u4f7f\u7528 @UploadedFiles() \u88c5\u9970\u5668\u4ece request \u4e2d\u63d0\u53d6\u6587\u4ef6\u3002 @ @filename () @Post ( 'upload' ) @UseInterceptors ( FilesInterceptor ( 'files' )) uploadFile ( @UploadedFiles () files : Array < Express . Multer . File > ) { console . log ( files ); } @ @switch @Post ( 'upload' ) @UseInterceptors ( FilesInterceptor ( 'files' )) @Bind ( UploadedFiles ()) uploadFile ( files ) { console . log ( files ); } info Hint FilesInterceptor() \u88c5\u9970\u5668\u662f\u4ece @nestjs/platform-express \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 @UploadedFiles() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5bfc\u51fa\u7684\u3002 \u591a\u4e2a\u6587\u4ef6 \u00b6 \u8981\u4e0a\u4f20\u591a\u4e2a\u5b57\u6bb5(\u90fd\u6709\u4e0d\u540c\u7684\u5b57\u6bb5\u540d\u952e)\uff0c\u8bf7\u4f7f\u7528 FileFieldsInterceptor() \u88c5\u9970\u5668\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u6709\u4e24\u4e2a\u53c2\u6570: uploadedFields : \u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2a\u5fc5\u9700\u7684 name \u5c5e\u6027\u548c\u4e00\u4e2a\u6307\u5b9a\u5b57\u6bb5\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u503c\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u4ee5\u53ca\u4e00\u4e2a\u53ef\u9009\u7684 maxCount \u5c5e\u6027\uff0c\u5982\u524d\u6240\u8ff0 options : \u53ef\u9009\u7684 MulterOptions \u5bf9\u8c61\uff0c\u5982\u4e0a\u6240\u8ff0 \u5f53\u4f7f\u7528 FileFieldsInterceptor() \u65f6\uff0c\u4f7f\u7528 @UploadedFiles() \u88c5\u9970\u5668\u4ece request \u4e2d\u63d0\u53d6\u6587\u4ef6\u3002 @ @filename () @Post ( 'upload' ) @UseInterceptors ( FileFieldsInterceptor ([ { name : 'avatar' , maxCount : 1 }, { name : 'background' , maxCount : 1 }, ])) uploadFile ( @UploadedFiles () files : { avatar? : Express.Multer.File [], background? : Express.Multer.File [] }) { console . log ( files ); } @ @switch @Post ( 'upload' ) @Bind ( UploadedFiles ()) @UseInterceptors ( FileFieldsInterceptor ([ { name : 'avatar' , maxCount : 1 }, { name : 'background' , maxCount : 1 }, ])) uploadFile ( files ) { console . log ( files ); } \u4efb\u4f55\u6587\u4ef6 \u00b6 \u8981\u4e0a\u4f20\u5e26\u6709\u4efb\u610f\u5b57\u6bb5\u540d\u952e\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u8bf7\u4f7f\u7528 AnyFilesInterceptor() \u88c5\u9970\u5668\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 options \u5bf9\u8c61\uff0c\u5982\u4e0a\u6240\u8ff0\u3002 \u5f53\u4f7f\u7528 AnyFilesInterceptor() \u65f6\uff0c\u4f7f\u7528 @UploadedFiles() \u88c5\u9970\u5668\u4ece request \u4e2d\u63d0\u53d6\u6587\u4ef6\u3002 @ @filename () @Post ( 'upload' ) @UseInterceptors ( AnyFilesInterceptor ()) uploadFile ( @UploadedFiles () files : Array < Express . Multer . File > ) { console . log ( files ); } @ @switch @Post ( 'upload' ) @Bind ( UploadedFiles ()) @UseInterceptors ( AnyFilesInterceptor ()) uploadFile ( files ) { console . log ( files ); } \u9ed8\u8ba4\u9009\u9879 \u00b6 \u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u63cf\u8ff0\u7684\u6587\u4ef6\u62e6\u622a\u5668\u4e2d\u6307\u5b9a\u591a\u4e2a\u9009\u9879\u3002 \u8981\u8bbe\u7f6e\u9ed8\u8ba4\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u5728\u5bfc\u5165 MulterModule \u65f6\u8c03\u7528\u9759\u6001\u7684 register() \u65b9\u6cd5\uff0c\u4f20\u5165\u652f\u6301\u7684\u9009\u9879\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 \u8fd9\u91cc \u5217\u51fa\u7684\u6240\u6709\u9009\u9879\u3002 MulterModule . register ({ dest : './upload' , }); info Hint MulterModule \u7c7b\u662f\u4ece @nestjs/platform-express \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 \u5f02\u6b65\u7684\u914d\u7f6e \u00b6 \u5f53\u4f60\u9700\u8981\u5f02\u6b65\u800c\u4e0d\u662f\u9759\u6001\u5730\u8bbe\u7f6e MulterModule \u9009\u9879\u65f6\uff0c\u4f7f\u7528 registerAsync() \u65b9\u6cd5\u3002 \u4e0e\u5927\u591a\u6570\u52a8\u6001\u6a21\u5757\u4e00\u6837\uff0cNest \u63d0\u4f9b\u4e86\u51e0\u79cd\u6280\u672f\u6765\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: MulterModule . registerAsync ({ useFactory : () => ({ dest : './upload' , }), }); \u50cf\u5176\u4ed6 \u5de5\u5382\u63d0\u4f9b\u7a0b\u5e8f \u4e00\u6837\uff0c\u6211\u4eec\u7684\u5de5\u5382\u51fd\u6570\u53ef\u4ee5\u662f async \u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002 MulterModule . registerAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ dest : configService.getString ( 'MULTER_DEST' ), }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u5de5\u5382\u6765\u914d\u7f6e MulterModule \uff0c\u5982\u4e0b\u6240\u793a: MulterModule . registerAsync ({ useClass : MulterConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5728 MulterModule \u4e2d\u5b9e\u4f8b\u5316\u4e86 MulterConfigService \uff0c\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u6240\u9700\u7684\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c MulterConfigService \u5fc5\u987b\u5b9e\u73b0 MulterOptionsFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a\u3002 MulterModule \u4f1a\u5728\u63d0\u4f9b\u7684\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e0a\u8c03\u7528 createMulterOptions() \u65b9\u6cd5\u3002 @Injectable () class MulterConfigService implements MulterOptionsFactory { createMulterOptions () : MulterModuleOptions { return { dest : './upload' , }; } } \u5982\u679c\u4f60\u60f3\u91cd\u7528\u73b0\u6709\u7684\u9009\u9879\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u5728 MulterModule \u4e2d\u521b\u5efa\u4e00\u4e2a\u79c1\u6709\u526f\u672c\uff0c\u8bf7\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 MulterModule . registerAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u4f8b\u5b50 \u00b6 \u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"techniques/file-upload/#_1","text":"\u4e3a\u4e86\u5904\u7406\u6587\u4ef6\u4e0a\u4f20\uff0cNest \u57fa\u4e8e Express \u7684 multer \u4e2d\u95f4\u4ef6\u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u6a21\u5757\u3002 Multer \u5904\u7406\u4ee5 multipart/form-data \u683c\u5f0f\u53d1\u5e03\u7684\u6570\u636e\uff0c\u8be5\u683c\u5f0f\u4e3b\u8981\u7528\u4e8e\u901a\u8fc7 HTTP POST \u8bf7\u6c42\u4e0a\u4f20\u6587\u4ef6\u3002 \u6b64\u6a21\u5757\u662f\u5b8c\u5168\u53ef\u914d\u7f6e\u7684\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684\u9700\u6c42\u8c03\u6574\u5176\u884c\u4e3a\u3002 warning Warning Multer \u4e0d\u80fd\u5904\u7406\u4e0d\u652f\u6301\u591a\u90e8\u5206\u683c\u5f0f\u7684\u6570\u636e ( multipart/form-data ). \u53e6\u5916\uff0c\u8bf7\u6ce8\u610f\u8fd9\u4e2a\u5305\u4e0d\u517c\u5bb9 FastifyAdapter \u3002 \u4e3a\u4e86\u66f4\u597d\u7684\u7c7b\u578b\u5b89\u5168\uff0c\u8ba9\u6211\u4eec\u5b89\u88c5 Multer typings \u5305: $ npm i -D @types/multer \u5b89\u88c5\u4e86\u8fd9\u4e2a\u5305\u540e\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 Express.Multer.File \u7c7b\u578b (\u60a8\u53ef\u4ee5\u5982\u4e0b\u65b9\u5f0f\u5bfc\u5165\u8be5\u7c7b\u578b: import {{ '{' }} Express {{ '}' }} from 'express' ).","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"techniques/file-upload/#_2","text":"\u8981\u4e0a\u4f20\u5355\u4e2a\u6587\u4ef6\uff0c\u53ea\u9700\u5c06 FileInterceptor() \u62e6\u622a\u5668\u7ed1\u5b9a\u5230\u8def\u7531\u5904\u7406\u7a0b\u5e8f\u4e0a\uff0c\u7136\u540e\u4f7f\u7528 @UploadedFile() \u88c5\u9970\u5668\u4ece request \u4e2d\u63d0\u53d6 file \u3002 @ @filename () @Post ( 'upload' ) @UseInterceptors ( FileInterceptor ( 'file' )) uploadFile ( @UploadedFile () file : Express.Multer.File ) { console . log ( file ); } @ @switch @Post ( 'upload' ) @UseInterceptors ( FileInterceptor ( 'file' )) @Bind ( UploadedFile ()) uploadFile ( file ) { console . log ( file ); } info Hint FileInterceptor() \u88c5\u9970\u5668\u662f\u4ece @nestjs/platform-express \u5305\u5bfc\u51fa\u7684\u3002 @UploadedFile() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5bfc\u51fa\u7684\u3002 FileInterceptor() \u88c5\u9970\u5668\u6709\u4e24\u4e2a\u53c2\u6570: fieldName : \u5b57\u7b26\u4e32\uff0c\u5b83\u63d0\u4f9b\u4e86\u4fdd\u5b58\u6587\u4ef6\u7684 HTML \u8868\u5355\u4e2d\u5b57\u6bb5\u7684\u540d\u79f0 options : \u7c7b\u578b\u4e3a MulterOptions \u7684\u53ef\u9009\u5bf9\u8c61\u3002 \u8fd9\u662f multiter \u6784\u9020\u51fd\u6570\u4f7f\u7528\u7684\u540c\u4e00\u4e2a\u5bf9\u8c61 (\u66f4\u591a\u7ec6\u8282 \u5728\u8fd9\u91cc ). warning Warning FileInterceptor() \u53ef\u80fd\u4e0d\u517c\u5bb9\u7b2c\u4e09\u65b9\u4e91\u63d0\u4f9b\u5546\uff0c\u5982\u8c37\u6b4c Firebase \u6216\u5176\u4ed6\u3002","title":"\u57fa\u672c\u7684\u4f8b\u5b50"},{"location":"techniques/file-upload/#_3","text":"\u8981\u4e0a\u4f20\u4e00\u4e2a\u6587\u4ef6\u6570\u7ec4(\u7528\u4e00\u4e2a\u5b57\u6bb5\u540d\u6807\u8bc6)\uff0c\u4f7f\u7528 FilesInterceptor() \u88c5\u9970\u5668(\u6ce8\u610f\u88c5\u9970\u5668\u540d\u79f0\u4e2d\u7684\u590d\u6570 Files )\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u6709\u4e09\u4e2a\u53c2\u6570: fieldName : \u5982\u4e0a\u6240\u8ff0 maxCount : \u53ef\u9009\u6570\u76ee\uff0c\u5b9a\u4e49\u8981\u63a5\u53d7\u7684\u6700\u5927\u6587\u4ef6\u6570\u76ee options : \u53ef\u9009\u7684 MulterOptions \u5bf9\u8c61\uff0c\u5982\u4e0a\u6240\u8ff0 \u5f53\u4f7f\u7528 FilesInterceptor() \u65f6\uff0c\u4f7f\u7528 @UploadedFiles() \u88c5\u9970\u5668\u4ece request \u4e2d\u63d0\u53d6\u6587\u4ef6\u3002 @ @filename () @Post ( 'upload' ) @UseInterceptors ( FilesInterceptor ( 'files' )) uploadFile ( @UploadedFiles () files : Array < Express . Multer . File > ) { console . log ( files ); } @ @switch @Post ( 'upload' ) @UseInterceptors ( FilesInterceptor ( 'files' )) @Bind ( UploadedFiles ()) uploadFile ( files ) { console . log ( files ); } info Hint FilesInterceptor() \u88c5\u9970\u5668\u662f\u4ece @nestjs/platform-express \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 @UploadedFiles() \u88c5\u9970\u5668\u662f\u4ece @nestjs/common \u5bfc\u51fa\u7684\u3002","title":"\u6587\u4ef6\u6570\u7ec4"},{"location":"techniques/file-upload/#_4","text":"\u8981\u4e0a\u4f20\u591a\u4e2a\u5b57\u6bb5(\u90fd\u6709\u4e0d\u540c\u7684\u5b57\u6bb5\u540d\u952e)\uff0c\u8bf7\u4f7f\u7528 FileFieldsInterceptor() \u88c5\u9970\u5668\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u6709\u4e24\u4e2a\u53c2\u6570: uploadedFields : \u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u6307\u5b9a\u4e00\u4e2a\u5fc5\u9700\u7684 name \u5c5e\u6027\u548c\u4e00\u4e2a\u6307\u5b9a\u5b57\u6bb5\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u503c\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u4ee5\u53ca\u4e00\u4e2a\u53ef\u9009\u7684 maxCount \u5c5e\u6027\uff0c\u5982\u524d\u6240\u8ff0 options : \u53ef\u9009\u7684 MulterOptions \u5bf9\u8c61\uff0c\u5982\u4e0a\u6240\u8ff0 \u5f53\u4f7f\u7528 FileFieldsInterceptor() \u65f6\uff0c\u4f7f\u7528 @UploadedFiles() \u88c5\u9970\u5668\u4ece request \u4e2d\u63d0\u53d6\u6587\u4ef6\u3002 @ @filename () @Post ( 'upload' ) @UseInterceptors ( FileFieldsInterceptor ([ { name : 'avatar' , maxCount : 1 }, { name : 'background' , maxCount : 1 }, ])) uploadFile ( @UploadedFiles () files : { avatar? : Express.Multer.File [], background? : Express.Multer.File [] }) { console . log ( files ); } @ @switch @Post ( 'upload' ) @Bind ( UploadedFiles ()) @UseInterceptors ( FileFieldsInterceptor ([ { name : 'avatar' , maxCount : 1 }, { name : 'background' , maxCount : 1 }, ])) uploadFile ( files ) { console . log ( files ); }","title":"\u591a\u4e2a\u6587\u4ef6"},{"location":"techniques/file-upload/#_5","text":"\u8981\u4e0a\u4f20\u5e26\u6709\u4efb\u610f\u5b57\u6bb5\u540d\u952e\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u8bf7\u4f7f\u7528 AnyFilesInterceptor() \u88c5\u9970\u5668\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 options \u5bf9\u8c61\uff0c\u5982\u4e0a\u6240\u8ff0\u3002 \u5f53\u4f7f\u7528 AnyFilesInterceptor() \u65f6\uff0c\u4f7f\u7528 @UploadedFiles() \u88c5\u9970\u5668\u4ece request \u4e2d\u63d0\u53d6\u6587\u4ef6\u3002 @ @filename () @Post ( 'upload' ) @UseInterceptors ( AnyFilesInterceptor ()) uploadFile ( @UploadedFiles () files : Array < Express . Multer . File > ) { console . log ( files ); } @ @switch @Post ( 'upload' ) @Bind ( UploadedFiles ()) @UseInterceptors ( AnyFilesInterceptor ()) uploadFile ( files ) { console . log ( files ); }","title":"\u4efb\u4f55\u6587\u4ef6"},{"location":"techniques/file-upload/#_6","text":"\u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u63cf\u8ff0\u7684\u6587\u4ef6\u62e6\u622a\u5668\u4e2d\u6307\u5b9a\u591a\u4e2a\u9009\u9879\u3002 \u8981\u8bbe\u7f6e\u9ed8\u8ba4\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u5728\u5bfc\u5165 MulterModule \u65f6\u8c03\u7528\u9759\u6001\u7684 register() \u65b9\u6cd5\uff0c\u4f20\u5165\u652f\u6301\u7684\u9009\u9879\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 \u8fd9\u91cc \u5217\u51fa\u7684\u6240\u6709\u9009\u9879\u3002 MulterModule . register ({ dest : './upload' , }); info Hint MulterModule \u7c7b\u662f\u4ece @nestjs/platform-express \u5305\u4e2d\u5bfc\u51fa\u7684\u3002","title":"\u9ed8\u8ba4\u9009\u9879"},{"location":"techniques/file-upload/#_7","text":"\u5f53\u4f60\u9700\u8981\u5f02\u6b65\u800c\u4e0d\u662f\u9759\u6001\u5730\u8bbe\u7f6e MulterModule \u9009\u9879\u65f6\uff0c\u4f7f\u7528 registerAsync() \u65b9\u6cd5\u3002 \u4e0e\u5927\u591a\u6570\u52a8\u6001\u6a21\u5757\u4e00\u6837\uff0cNest \u63d0\u4f9b\u4e86\u51e0\u79cd\u6280\u672f\u6765\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: MulterModule . registerAsync ({ useFactory : () => ({ dest : './upload' , }), }); \u50cf\u5176\u4ed6 \u5de5\u5382\u63d0\u4f9b\u7a0b\u5e8f \u4e00\u6837\uff0c\u6211\u4eec\u7684\u5de5\u5382\u51fd\u6570\u53ef\u4ee5\u662f async \u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002 MulterModule . registerAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ dest : configService.getString ( 'MULTER_DEST' ), }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u5de5\u5382\u6765\u914d\u7f6e MulterModule \uff0c\u5982\u4e0b\u6240\u793a: MulterModule . registerAsync ({ useClass : MulterConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5728 MulterModule \u4e2d\u5b9e\u4f8b\u5316\u4e86 MulterConfigService \uff0c\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u6240\u9700\u7684\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c MulterConfigService \u5fc5\u987b\u5b9e\u73b0 MulterOptionsFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a\u3002 MulterModule \u4f1a\u5728\u63d0\u4f9b\u7684\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e0a\u8c03\u7528 createMulterOptions() \u65b9\u6cd5\u3002 @Injectable () class MulterConfigService implements MulterOptionsFactory { createMulterOptions () : MulterModuleOptions { return { dest : './upload' , }; } } \u5982\u679c\u4f60\u60f3\u91cd\u7528\u73b0\u6709\u7684\u9009\u9879\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u5728 MulterModule \u4e2d\u521b\u5efa\u4e00\u4e2a\u79c1\u6709\u526f\u672c\uff0c\u8bf7\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 MulterModule . registerAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , });","title":"\u5f02\u6b65\u7684\u914d\u7f6e"},{"location":"techniques/file-upload/#_8","text":"\u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u4f8b\u5b50"},{"location":"techniques/http-module/","text":"HTTP module \u00b6 Axios \u662f\u5e7f\u6cdb\u4f7f\u7528\u7684\u529f\u80fd\u4e30\u5bcc\u7684 HTTP \u5ba2\u6237\u7aef\u5305\u3002 Nest \u5c01\u88c5 Axios \u5e76\u901a\u8fc7\u5185\u7f6e\u7684 HttpModule \u516c\u5f00\u5b83\u3002 HttpModule \u5bfc\u51fa HttpService \u7c7b\uff0c\u8be5\u7c7b\u516c\u5f00\u4e86\u57fa\u4e8e axios \u7684\u65b9\u6cd5\u6765\u6267\u884c HTTP \u8bf7\u6c42\u3002 \u8be5\u5e93\u8fd8\u5c06\u4ea7\u751f\u7684 HTTP \u54cd\u5e94\u8f6c\u6362\u4e3a\u201c\u53ef\u89c2\u5bdf\u5bf9\u8c61\u201d\u3002 info Hint \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4efb\u4f55\u901a\u7528\u7684 Node.js HTTP \u5ba2\u6237\u7aef\u5e93\uff0c\u5305\u62ec got \u6216 undici \u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm i --save @nestjs/axios \u5f00\u59cb \u00b6 \u4e00\u65e6\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\uff0c\u8981\u4f7f\u7528 HttpService \uff0c\u9996\u5148\u5bfc\u5165 HttpModule \u3002 @Module ({ imports : [ HttpModule ], providers : [ CatsService ], }) export class CatsModule {} \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u666e\u901a\u6784\u9020\u51fd\u6570\u6ce8\u5165\u6ce8\u5165 HttpService \u3002 info Hint HttpModule \u548c HttpService \u662f\u4ece @nestjs/axios \u5305\u4e2d\u5bfc\u5165\u7684\u3002 @ @filename () @Injectable () export class CatsService { constructor ( private httpService : HttpService ) {} findAll () : Observable < AxiosResponse < Cat [] >> { return this . httpService . get ( 'http://localhost:3000/cats' ); } } @ @switch @Injectable () @Dependencies ( HttpService ) export class CatsService { constructor ( httpService ) { this . httpService = httpService ; } findAll () { return this . httpService . get ( 'http://localhost:3000/cats' ); } } info Hint AxiosResponse \u662f\u4ece axios \u5305( $ npm i axios )\u5bfc\u51fa\u7684\u63a5\u53e3\u3002 \u6240\u6709\u7684\u201cHttpService\u201d\u65b9\u6cd5\u90fd\u8fd4\u56de\u4e00\u4e2a\u5305\u88c5\u5728\u201cObservable\u201d\u5bf9\u8c61\u4e2d\u7684\u201cAxiosResponse\u201d\u3002 \u914d\u7f6e \u00b6 Axios \u53ef\u4ee5\u914d\u7f6e\u5404\u79cd\u9009\u9879\u6765\u5b9a\u5236 HttpService \u7684\u884c\u4e3a\u3002 \u6b64\u5904 \u4e86\u89e3\u66f4\u591a\u3002 \u8981\u914d\u7f6e\u5e95\u5c42\u7684 Axios \u5b9e\u4f8b\uff0c\u5728\u5bfc\u5165\u5b83\u65f6\u5c06\u4e00\u4e2a\u53ef\u9009\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 HttpModule \u7684 register() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u9009\u9879\u5bf9\u8c61\u5c06\u76f4\u63a5\u4f20\u9012\u7ed9\u5e95\u5c42\u7684 Axios \u6784\u9020\u51fd\u6570\u3002 @Module ({ imports : [ HttpModule . register ({ timeout : 5000 , maxRedirects : 5 , }), ], providers : [ CatsService ], }) export class CatsModule {} \u5f02\u6b65\u7684\u914d\u7f6e \u00b6 \u5f53\u60a8\u9700\u8981\u5f02\u6b65\u800c\u4e0d\u662f\u9759\u6001\u5730\u4f20\u9012\u6a21\u5757\u9009\u9879\u65f6\uff0c\u8bf7\u4f7f\u7528 registerAsync() \u65b9\u6cd5\u3002 \u4e0e\u5927\u591a\u6570\u52a8\u6001\u6a21\u5757\u4e00\u6837\uff0cNest \u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u6280\u672f\u3002 \u4e00\u79cd\u6280\u672f\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: HttpModule . registerAsync ({ useFactory : () => ({ timeout : 5000 , maxRedirects : 5 , }), }); \u50cf\u5176\u4ed6\u5de5\u5382\u63d0\u4f9b\u7a0b\u5e8f\u4e00\u6837\uff0c\u6211\u4eec\u7684\u5de5\u5382\u51fd\u6570\u53ef\u4ee5\u662f async \uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002 HttpModule . registerAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ timeout : configService.getString ( 'HTTP_TIMEOUT' ), maxRedirects : configService.getString ( 'HTTP_MAX_REDIRECTS' ), }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u5de5\u5382\u6765\u914d\u7f6e HttpModule \uff0c\u5982\u4e0b\u6240\u793a\u3002 HttpModule . registerAsync ({ useClass : HttpConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u51fd\u6570\u5728 HttpModule \u4e2d\u5b9e\u4f8b\u5316\u4e86 HttpConfigService \uff0c\u7528\u5b83\u6765\u521b\u5efa\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c HttpConfigService \u5fc5\u987b\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\u7684 HttpModuleOptionsFactory \u63a5\u53e3\u3002 HttpModule \u5c06\u5bf9\u6240\u63d0\u4f9b\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528 createHttpOptions() \u65b9\u6cd5\u3002 @Injectable () class HttpConfigService implements HttpModuleOptionsFactory { createHttpOptions () : HttpModuleOptions { return { timeout : 5000 , maxRedirects : 5 , }; } } \u5982\u679c\u4f60\u60f3\u91cd\u7528\u73b0\u6709\u7684\u9009\u9879\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u5728 HttpModule \u4e2d\u521b\u5efa\u79c1\u6709\u526f\u672c\uff0c\u8bf7\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 HttpModule . registerAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u76f4\u63a5\u4f7f\u7528 Axios \u00b6 \u5982\u679c\u4f60\u8ba4\u4e3a HttpModule.register \u7684\u9009\u9879\u5bf9\u4f60\u6765\u8bf4\u4e0d\u591f\uff0c\u6216\u8005\u5982\u679c\u4f60\u53ea\u60f3\u8bbf\u95ee\u7531 @nestjs/axios \u521b\u5efa\u7684\u5e95\u5c42 Axios \u5b9e\u4f8b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f HttpService#axiosRef \u8bbf\u95ee\u5b83: @Injectable () export class CatsService { constructor ( private readonly httpService : HttpService ) {} findAll () : Promise < AxiosResponse < Cat [] >> { return this . httpService . axiosRef . get ( 'http://localhost:3000/cats' ); //^ AxiosInstance interface } }","title":"HTTP \u6a21\u5757"},{"location":"techniques/http-module/#http-module","text":"Axios \u662f\u5e7f\u6cdb\u4f7f\u7528\u7684\u529f\u80fd\u4e30\u5bcc\u7684 HTTP \u5ba2\u6237\u7aef\u5305\u3002 Nest \u5c01\u88c5 Axios \u5e76\u901a\u8fc7\u5185\u7f6e\u7684 HttpModule \u516c\u5f00\u5b83\u3002 HttpModule \u5bfc\u51fa HttpService \u7c7b\uff0c\u8be5\u7c7b\u516c\u5f00\u4e86\u57fa\u4e8e axios \u7684\u65b9\u6cd5\u6765\u6267\u884c HTTP \u8bf7\u6c42\u3002 \u8be5\u5e93\u8fd8\u5c06\u4ea7\u751f\u7684 HTTP \u54cd\u5e94\u8f6c\u6362\u4e3a\u201c\u53ef\u89c2\u5bdf\u5bf9\u8c61\u201d\u3002 info Hint \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4efb\u4f55\u901a\u7528\u7684 Node.js HTTP \u5ba2\u6237\u7aef\u5e93\uff0c\u5305\u62ec got \u6216 undici \u3002","title":"HTTP module"},{"location":"techniques/http-module/#_1","text":"\u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm i --save @nestjs/axios","title":"\u5b89\u88c5"},{"location":"techniques/http-module/#_2","text":"\u4e00\u65e6\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\uff0c\u8981\u4f7f\u7528 HttpService \uff0c\u9996\u5148\u5bfc\u5165 HttpModule \u3002 @Module ({ imports : [ HttpModule ], providers : [ CatsService ], }) export class CatsModule {} \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u666e\u901a\u6784\u9020\u51fd\u6570\u6ce8\u5165\u6ce8\u5165 HttpService \u3002 info Hint HttpModule \u548c HttpService \u662f\u4ece @nestjs/axios \u5305\u4e2d\u5bfc\u5165\u7684\u3002 @ @filename () @Injectable () export class CatsService { constructor ( private httpService : HttpService ) {} findAll () : Observable < AxiosResponse < Cat [] >> { return this . httpService . get ( 'http://localhost:3000/cats' ); } } @ @switch @Injectable () @Dependencies ( HttpService ) export class CatsService { constructor ( httpService ) { this . httpService = httpService ; } findAll () { return this . httpService . get ( 'http://localhost:3000/cats' ); } } info Hint AxiosResponse \u662f\u4ece axios \u5305( $ npm i axios )\u5bfc\u51fa\u7684\u63a5\u53e3\u3002 \u6240\u6709\u7684\u201cHttpService\u201d\u65b9\u6cd5\u90fd\u8fd4\u56de\u4e00\u4e2a\u5305\u88c5\u5728\u201cObservable\u201d\u5bf9\u8c61\u4e2d\u7684\u201cAxiosResponse\u201d\u3002","title":"\u5f00\u59cb"},{"location":"techniques/http-module/#_3","text":"Axios \u53ef\u4ee5\u914d\u7f6e\u5404\u79cd\u9009\u9879\u6765\u5b9a\u5236 HttpService \u7684\u884c\u4e3a\u3002 \u6b64\u5904 \u4e86\u89e3\u66f4\u591a\u3002 \u8981\u914d\u7f6e\u5e95\u5c42\u7684 Axios \u5b9e\u4f8b\uff0c\u5728\u5bfc\u5165\u5b83\u65f6\u5c06\u4e00\u4e2a\u53ef\u9009\u9009\u9879\u5bf9\u8c61\u4f20\u9012\u7ed9 HttpModule \u7684 register() \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u9009\u9879\u5bf9\u8c61\u5c06\u76f4\u63a5\u4f20\u9012\u7ed9\u5e95\u5c42\u7684 Axios \u6784\u9020\u51fd\u6570\u3002 @Module ({ imports : [ HttpModule . register ({ timeout : 5000 , maxRedirects : 5 , }), ], providers : [ CatsService ], }) export class CatsModule {}","title":"\u914d\u7f6e"},{"location":"techniques/http-module/#_4","text":"\u5f53\u60a8\u9700\u8981\u5f02\u6b65\u800c\u4e0d\u662f\u9759\u6001\u5730\u4f20\u9012\u6a21\u5757\u9009\u9879\u65f6\uff0c\u8bf7\u4f7f\u7528 registerAsync() \u65b9\u6cd5\u3002 \u4e0e\u5927\u591a\u6570\u52a8\u6001\u6a21\u5757\u4e00\u6837\uff0cNest \u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u6280\u672f\u3002 \u4e00\u79cd\u6280\u672f\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: HttpModule . registerAsync ({ useFactory : () => ({ timeout : 5000 , maxRedirects : 5 , }), }); \u50cf\u5176\u4ed6\u5de5\u5382\u63d0\u4f9b\u7a0b\u5e8f\u4e00\u6837\uff0c\u6211\u4eec\u7684\u5de5\u5382\u51fd\u6570\u53ef\u4ee5\u662f async \uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002 HttpModule . registerAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ timeout : configService.getString ( 'HTTP_TIMEOUT' ), maxRedirects : configService.getString ( 'HTTP_MAX_REDIRECTS' ), }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u5de5\u5382\u6765\u914d\u7f6e HttpModule \uff0c\u5982\u4e0b\u6240\u793a\u3002 HttpModule . registerAsync ({ useClass : HttpConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u51fd\u6570\u5728 HttpModule \u4e2d\u5b9e\u4f8b\u5316\u4e86 HttpConfigService \uff0c\u7528\u5b83\u6765\u521b\u5efa\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c HttpConfigService \u5fc5\u987b\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\u7684 HttpModuleOptionsFactory \u63a5\u53e3\u3002 HttpModule \u5c06\u5bf9\u6240\u63d0\u4f9b\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u8c03\u7528 createHttpOptions() \u65b9\u6cd5\u3002 @Injectable () class HttpConfigService implements HttpModuleOptionsFactory { createHttpOptions () : HttpModuleOptions { return { timeout : 5000 , maxRedirects : 5 , }; } } \u5982\u679c\u4f60\u60f3\u91cd\u7528\u73b0\u6709\u7684\u9009\u9879\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u5728 HttpModule \u4e2d\u521b\u5efa\u79c1\u6709\u526f\u672c\uff0c\u8bf7\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 HttpModule . registerAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , });","title":"\u5f02\u6b65\u7684\u914d\u7f6e"},{"location":"techniques/http-module/#axios","text":"\u5982\u679c\u4f60\u8ba4\u4e3a HttpModule.register \u7684\u9009\u9879\u5bf9\u4f60\u6765\u8bf4\u4e0d\u591f\uff0c\u6216\u8005\u5982\u679c\u4f60\u53ea\u60f3\u8bbf\u95ee\u7531 @nestjs/axios \u521b\u5efa\u7684\u5e95\u5c42 Axios \u5b9e\u4f8b\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f HttpService#axiosRef \u8bbf\u95ee\u5b83: @Injectable () export class CatsService { constructor ( private readonly httpService : HttpService ) {} findAll () : Promise < AxiosResponse < Cat [] >> { return this . httpService . axiosRef . get ( 'http://localhost:3000/cats' ); //^ AxiosInstance interface } }","title":"\u76f4\u63a5\u4f7f\u7528 Axios"},{"location":"techniques/logger/","text":"Logger \u00b6 Nest comes with a built-in text-based logger which is used during application bootstrapping and several other circumstances such as displaying caught exceptions (i.e., system logging). This functionality is provided via the Logger class in the @nestjs/common package. You can fully control the behavior of the logging system, including any of the following: disable logging entirely specify the log level of detail (e.g., display errors, warnings, debug information, etc.) override timestamp in the default logger (e.g., use ISO8601 standard as date format) completely override the default logger customize the default logger by extending it make use of dependency injection to simplify composing and testing your application You can also make use of the built-in logger, or create your own custom implementation, to log your own application-level events and messages. For more advanced logging functionality, you can make use of any Node.js logging package, such as Winston , to implement a completely custom, production grade logging system. Basic customization \u00b6 To disable logging, set the logger property to false in the (optional) Nest application options object passed as the second argument to the NestFactory.create() method. const app = await NestFactory . create ( AppModule , { logger : false , }); await app . listen ( 3000 ); To enable specific logging levels, set the logger property to an array of strings specifying the log levels to display, as follows: const app = await NestFactory . create ( AppModule , { logger : [ 'error' , 'warn' ], }); await app . listen ( 3000 ); Values in the array can be any combination of 'log' , 'error' , 'warn' , 'debug' , and 'verbose' . info Hint To disable color in the default logger's messages, set the NO_COLOR environment variable to some non-empty string. Custom implementation \u00b6 You can provide a custom logger implementation to be used by Nest for system logging by setting the value of the logger property to an object that fulfills the LoggerService interface. For example, you can tell Nest to use the built-in global JavaScript console object (which implements the LoggerService interface), as follows: const app = await NestFactory . create ( AppModule , { logger : console , }); await app . listen ( 3000 ); Implementing your own custom logger is straightforward. Simply implement each of the methods of the LoggerService interface as shown below. import { LoggerService } from '@nestjs/common' ; export class MyLogger implements LoggerService { /** * Write a 'log' level log. */ log ( message : any , ...optionalParams : any []) {} /** * Write an 'error' level log. */ error ( message : any , ...optionalParams : any []) {} /** * Write a 'warn' level log. */ warn ( message : any , ...optionalParams : any []) {} /** * Write a 'debug' level log. */ debug ? ( message : any , ...optionalParams : any []) {} /** * Write a 'verbose' level log. */ verbose ? ( message : any , ...optionalParams : any []) {} } You can then supply an instance of MyLogger via the logger property of the Nest application options object. const app = await NestFactory . create ( AppModule , { logger : new MyLogger (), }); await app . listen ( 3000 ); This technique, while simple, doesn't utilize dependency injection for the MyLogger class. This can pose some challenges, particularly for testing, and limit the reusability of MyLogger . For a better solution, see the Dependency Injection section below. Extend built-in logger \u00b6 Rather than writing a logger from scratch, you may be able to meet your needs by extending the built-in ConsoleLogger class and overriding selected behavior of the default implementation. import { ConsoleLogger } from '@nestjs/common' ; export class MyLogger extends ConsoleLogger { error ( message : any , stack? : string , context? : string ) { // add your tailored logic here super . error (... arguments ); } } You can use such an extended logger in your feature modules as described in the Using the logger for application logging section below. You can tell Nest to use your extended logger for system logging by passing an instance of it via the logger property of the application options object (as shown in the Custom implementation section above), or by using the technique shown in the Dependency Injection section below. If you do so, you should take care to call super , as shown in the sample code above, to delegate the specific log method call to the parent (built-in) class so that Nest can rely on the built-in features it expects. Dependency injection \u00b6 For more advanced logging functionality, you'll want to take advantage of dependency injection. For example, you may want to inject a ConfigService into your logger to customize it, and in turn inject your custom logger into other controllers and/or providers. To enable dependency injection for your custom logger, create a class that implements LoggerService and register that class as a provider in some module. For example, you can Define a MyLogger class that either extends the built-in ConsoleLogger or completely overrides it, as shown in previous sections. Be sure to implement the LoggerService interface. Create a LoggerModule as shown below, and provide MyLogger from that module. import { Module } from '@nestjs/common' ; import { MyLogger } from './my-logger.service' ; @Module ({ providers : [ MyLogger ], exports : [ MyLogger ], }) export class LoggerModule {} With this construct, you are now providing your custom logger for use by any other module. Because your MyLogger class is part of a module, it can use dependency injection (for example, to inject a ConfigService ). There's one more technique needed to provide this custom logger for use by Nest for system logging (e.g., for bootstrapping and error handling). Because application instantiation ( NestFactory.create() ) happens outside the context of any module, it doesn't participate in the normal Dependency Injection phase of initialization. So we must ensure that at least one application module imports the LoggerModule to trigger Nest to instantiate a singleton instance of our MyLogger class. We can then instruct Nest to use the same singleton instance of MyLogger with the following construction: const app = await NestFactory . create ( ApplicationModule , { bufferLogs : true , }); app . useLogger ( app . get ( MyLogger )); await app . listen ( 3000 ); info Note In the example above, we set the bufferLogs to true to make sure all logs will be buffered until a custom logger is attached ( MyLogger in this case) and the application initialisation process either completes or fails. If the initialisation process fails, Nest will fallback to the original ConsoleLogger to print out any reported error messages. Also, you can set the autoFlushLogs to false (default true ) to manually flush logs (using the Logger#flush() method). Here we use the get() method on the NestApplication instance to retrieve the singleton instance of the MyLogger object. This technique is essentially a way to \"inject\" an instance of a logger for use by Nest. The app.get() call retrieves the singleton instance of MyLogger , and depends on that instance being first injected in another module, as described above. You can also inject this MyLogger provider in your feature classes, thus ensuring consistent logging behavior across both Nest system logging and application logging. See Using the logger for application logging and Injecting a custom logger below for more information. Using the logger for application logging \u00b6 We can combine several of the techniques above to provide consistent behavior and formatting across both Nest system logging and our own application event/message logging. A good practice is to instantiate Logger class from @nestjs/common in each of our services. We can supply our service name as the context argument in the Logger constructor, like so: import { Logger , Injectable } from '@nestjs/common' ; @Injectable () class MyService { private readonly logger = new Logger ( MyService . name ); doSomething () { this . logger . log ( 'Doing something...' ); } } In the default logger implementation, context is printed in the square brackets, like NestFactory in the example below: [ Nest ] 19096 - 12 /08/2019, 7 :12:59 AM [ NestFactory ] Starting Nest application... If we supply a custom logger via app.useLogger() , it will actually be used by Nest internally. That means that our code remains implementation agnostic, while we can easily substitute the default logger for our custom one by calling app.useLogger() . That way if we follow the steps from the previous section and call app.useLogger(app.get(MyLogger)) , the following calls to this.logger.log() from MyService would result in calls to method log from MyLogger instance. This should be suitable for most cases. But if you need more customization (like adding and calling custom methods), move to the next section. Injecting a custom logger \u00b6 To start, extend the built-in logger with code like the following. We supply the scope option as configuration metadata for the ConsoleLogger class, specifying a transient scope, to ensure that we'll have a unique instance of the MyLogger in each feature module. In this example, we do not extend the individual ConsoleLogger methods (like log() , warn() , etc.), though you may choose to do so. import { Injectable , Scope , ConsoleLogger } from '@nestjs/common' ; @Injectable ({ scope : Scope.TRANSIENT }) export class MyLogger extends ConsoleLogger { customLog () { this . log ( 'Please feed the cat!' ); } } Next, create a LoggerModule with a construction like this: import { Module } from '@nestjs/common' ; import { MyLogger } from './my-logger.service' ; @Module ({ providers : [ MyLogger ], exports : [ MyLogger ], }) export class LoggerModule {} Next, import the LoggerModule into your feature module. Since we extended default Logger we have the convenience of using setContext method. So we can start using the context-aware custom logger, like this: import { Injectable } from '@nestjs/common' ; import { MyLogger } from './my-logger.service' ; @Injectable () export class CatsService { private readonly cats : Cat [] = []; constructor ( private myLogger : MyLogger ) { // Due to transient scope, CatsService has its own unique instance of MyLogger, // so setting context here will not affect other instances in other services this . myLogger . setContext ( 'CatsService' ); } findAll () : Cat [] { // You can call all the default methods this . myLogger . warn ( 'About to return cats!' ); // And your custom methods this . myLogger . customLog (); return this . cats ; } } Finally, instruct Nest to use an instance of the custom logger in your main.ts file as shown below. Of course in this example, we haven't actually customized the logger behavior (by extending the Logger methods like log() , warn() , etc.), so this step isn't actually needed. But it would be needed if you added custom logic to those methods and wanted Nest to use the same implementation. const app = await NestFactory . create ( ApplicationModule , { bufferLogs : true , }); app . useLogger ( new MyLogger ()); await app . listen ( 3000 ); info Hint Alternatively, instead of setting bufferLogs to true , you could temporarily disable the logger with logger: false instruction. Be mindful that if you supply logger: false to NestFactory.create , nothing will be logged until you call useLogger , so you may miss some important initialization errors. If you don't mind that some of your initial messages will be logged with the default logger, you can just omit the logger: false option. Use external logger \u00b6 Production applications often have specific logging requirements, including advanced filtering, formatting and centralized logging. Nest's built-in logger is used for monitoring Nest system behavior, and can also be useful for basic formatted text logging in your feature modules while in development, but production applications often take advantage of dedicated logging modules like Winston . As with any standard Node.js application, you can take full advantage of such modules in Nest.","title":"\u65e5\u5fd7"},{"location":"techniques/logger/#logger","text":"Nest comes with a built-in text-based logger which is used during application bootstrapping and several other circumstances such as displaying caught exceptions (i.e., system logging). This functionality is provided via the Logger class in the @nestjs/common package. You can fully control the behavior of the logging system, including any of the following: disable logging entirely specify the log level of detail (e.g., display errors, warnings, debug information, etc.) override timestamp in the default logger (e.g., use ISO8601 standard as date format) completely override the default logger customize the default logger by extending it make use of dependency injection to simplify composing and testing your application You can also make use of the built-in logger, or create your own custom implementation, to log your own application-level events and messages. For more advanced logging functionality, you can make use of any Node.js logging package, such as Winston , to implement a completely custom, production grade logging system.","title":"Logger"},{"location":"techniques/logger/#basic-customization","text":"To disable logging, set the logger property to false in the (optional) Nest application options object passed as the second argument to the NestFactory.create() method. const app = await NestFactory . create ( AppModule , { logger : false , }); await app . listen ( 3000 ); To enable specific logging levels, set the logger property to an array of strings specifying the log levels to display, as follows: const app = await NestFactory . create ( AppModule , { logger : [ 'error' , 'warn' ], }); await app . listen ( 3000 ); Values in the array can be any combination of 'log' , 'error' , 'warn' , 'debug' , and 'verbose' . info Hint To disable color in the default logger's messages, set the NO_COLOR environment variable to some non-empty string.","title":"Basic customization"},{"location":"techniques/logger/#custom-implementation","text":"You can provide a custom logger implementation to be used by Nest for system logging by setting the value of the logger property to an object that fulfills the LoggerService interface. For example, you can tell Nest to use the built-in global JavaScript console object (which implements the LoggerService interface), as follows: const app = await NestFactory . create ( AppModule , { logger : console , }); await app . listen ( 3000 ); Implementing your own custom logger is straightforward. Simply implement each of the methods of the LoggerService interface as shown below. import { LoggerService } from '@nestjs/common' ; export class MyLogger implements LoggerService { /** * Write a 'log' level log. */ log ( message : any , ...optionalParams : any []) {} /** * Write an 'error' level log. */ error ( message : any , ...optionalParams : any []) {} /** * Write a 'warn' level log. */ warn ( message : any , ...optionalParams : any []) {} /** * Write a 'debug' level log. */ debug ? ( message : any , ...optionalParams : any []) {} /** * Write a 'verbose' level log. */ verbose ? ( message : any , ...optionalParams : any []) {} } You can then supply an instance of MyLogger via the logger property of the Nest application options object. const app = await NestFactory . create ( AppModule , { logger : new MyLogger (), }); await app . listen ( 3000 ); This technique, while simple, doesn't utilize dependency injection for the MyLogger class. This can pose some challenges, particularly for testing, and limit the reusability of MyLogger . For a better solution, see the Dependency Injection section below.","title":"Custom implementation"},{"location":"techniques/logger/#extend-built-in-logger","text":"Rather than writing a logger from scratch, you may be able to meet your needs by extending the built-in ConsoleLogger class and overriding selected behavior of the default implementation. import { ConsoleLogger } from '@nestjs/common' ; export class MyLogger extends ConsoleLogger { error ( message : any , stack? : string , context? : string ) { // add your tailored logic here super . error (... arguments ); } } You can use such an extended logger in your feature modules as described in the Using the logger for application logging section below. You can tell Nest to use your extended logger for system logging by passing an instance of it via the logger property of the application options object (as shown in the Custom implementation section above), or by using the technique shown in the Dependency Injection section below. If you do so, you should take care to call super , as shown in the sample code above, to delegate the specific log method call to the parent (built-in) class so that Nest can rely on the built-in features it expects.","title":"Extend built-in logger"},{"location":"techniques/logger/#dependency-injection","text":"For more advanced logging functionality, you'll want to take advantage of dependency injection. For example, you may want to inject a ConfigService into your logger to customize it, and in turn inject your custom logger into other controllers and/or providers. To enable dependency injection for your custom logger, create a class that implements LoggerService and register that class as a provider in some module. For example, you can Define a MyLogger class that either extends the built-in ConsoleLogger or completely overrides it, as shown in previous sections. Be sure to implement the LoggerService interface. Create a LoggerModule as shown below, and provide MyLogger from that module. import { Module } from '@nestjs/common' ; import { MyLogger } from './my-logger.service' ; @Module ({ providers : [ MyLogger ], exports : [ MyLogger ], }) export class LoggerModule {} With this construct, you are now providing your custom logger for use by any other module. Because your MyLogger class is part of a module, it can use dependency injection (for example, to inject a ConfigService ). There's one more technique needed to provide this custom logger for use by Nest for system logging (e.g., for bootstrapping and error handling). Because application instantiation ( NestFactory.create() ) happens outside the context of any module, it doesn't participate in the normal Dependency Injection phase of initialization. So we must ensure that at least one application module imports the LoggerModule to trigger Nest to instantiate a singleton instance of our MyLogger class. We can then instruct Nest to use the same singleton instance of MyLogger with the following construction: const app = await NestFactory . create ( ApplicationModule , { bufferLogs : true , }); app . useLogger ( app . get ( MyLogger )); await app . listen ( 3000 ); info Note In the example above, we set the bufferLogs to true to make sure all logs will be buffered until a custom logger is attached ( MyLogger in this case) and the application initialisation process either completes or fails. If the initialisation process fails, Nest will fallback to the original ConsoleLogger to print out any reported error messages. Also, you can set the autoFlushLogs to false (default true ) to manually flush logs (using the Logger#flush() method). Here we use the get() method on the NestApplication instance to retrieve the singleton instance of the MyLogger object. This technique is essentially a way to \"inject\" an instance of a logger for use by Nest. The app.get() call retrieves the singleton instance of MyLogger , and depends on that instance being first injected in another module, as described above. You can also inject this MyLogger provider in your feature classes, thus ensuring consistent logging behavior across both Nest system logging and application logging. See Using the logger for application logging and Injecting a custom logger below for more information.","title":"Dependency injection"},{"location":"techniques/logger/#using-the-logger-for-application-logging","text":"We can combine several of the techniques above to provide consistent behavior and formatting across both Nest system logging and our own application event/message logging. A good practice is to instantiate Logger class from @nestjs/common in each of our services. We can supply our service name as the context argument in the Logger constructor, like so: import { Logger , Injectable } from '@nestjs/common' ; @Injectable () class MyService { private readonly logger = new Logger ( MyService . name ); doSomething () { this . logger . log ( 'Doing something...' ); } } In the default logger implementation, context is printed in the square brackets, like NestFactory in the example below: [ Nest ] 19096 - 12 /08/2019, 7 :12:59 AM [ NestFactory ] Starting Nest application... If we supply a custom logger via app.useLogger() , it will actually be used by Nest internally. That means that our code remains implementation agnostic, while we can easily substitute the default logger for our custom one by calling app.useLogger() . That way if we follow the steps from the previous section and call app.useLogger(app.get(MyLogger)) , the following calls to this.logger.log() from MyService would result in calls to method log from MyLogger instance. This should be suitable for most cases. But if you need more customization (like adding and calling custom methods), move to the next section.","title":"Using the logger for application logging"},{"location":"techniques/logger/#injecting-a-custom-logger","text":"To start, extend the built-in logger with code like the following. We supply the scope option as configuration metadata for the ConsoleLogger class, specifying a transient scope, to ensure that we'll have a unique instance of the MyLogger in each feature module. In this example, we do not extend the individual ConsoleLogger methods (like log() , warn() , etc.), though you may choose to do so. import { Injectable , Scope , ConsoleLogger } from '@nestjs/common' ; @Injectable ({ scope : Scope.TRANSIENT }) export class MyLogger extends ConsoleLogger { customLog () { this . log ( 'Please feed the cat!' ); } } Next, create a LoggerModule with a construction like this: import { Module } from '@nestjs/common' ; import { MyLogger } from './my-logger.service' ; @Module ({ providers : [ MyLogger ], exports : [ MyLogger ], }) export class LoggerModule {} Next, import the LoggerModule into your feature module. Since we extended default Logger we have the convenience of using setContext method. So we can start using the context-aware custom logger, like this: import { Injectable } from '@nestjs/common' ; import { MyLogger } from './my-logger.service' ; @Injectable () export class CatsService { private readonly cats : Cat [] = []; constructor ( private myLogger : MyLogger ) { // Due to transient scope, CatsService has its own unique instance of MyLogger, // so setting context here will not affect other instances in other services this . myLogger . setContext ( 'CatsService' ); } findAll () : Cat [] { // You can call all the default methods this . myLogger . warn ( 'About to return cats!' ); // And your custom methods this . myLogger . customLog (); return this . cats ; } } Finally, instruct Nest to use an instance of the custom logger in your main.ts file as shown below. Of course in this example, we haven't actually customized the logger behavior (by extending the Logger methods like log() , warn() , etc.), so this step isn't actually needed. But it would be needed if you added custom logic to those methods and wanted Nest to use the same implementation. const app = await NestFactory . create ( ApplicationModule , { bufferLogs : true , }); app . useLogger ( new MyLogger ()); await app . listen ( 3000 ); info Hint Alternatively, instead of setting bufferLogs to true , you could temporarily disable the logger with logger: false instruction. Be mindful that if you supply logger: false to NestFactory.create , nothing will be logged until you call useLogger , so you may miss some important initialization errors. If you don't mind that some of your initial messages will be logged with the default logger, you can just omit the logger: false option.","title":"Injecting a custom logger"},{"location":"techniques/logger/#use-external-logger","text":"Production applications often have specific logging requirements, including advanced filtering, formatting and centralized logging. Nest's built-in logger is used for monitoring Nest system behavior, and can also be useful for basic formatted text logging in your feature modules while in development, but production applications often take advantage of dedicated logging modules like Winston . As with any standard Node.js application, you can take full advantage of such modules in Nest.","title":"Use external logger"},{"location":"techniques/mongo/","text":"Mongo \u00b6 Nest \u652f\u6301\u4e24\u79cd\u96c6\u6210 MongoDB \u6570\u636e\u5e93\u7684\u65b9\u6cd5\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 \u8fd9\u91cc \u63cf\u8ff0\u7684\u5185\u7f6e TypeORM \u6a21\u5757\uff0c\u5b83\u4e3a MongoDB \u63d0\u4f9b\u4e86\u4e00\u4e2a\u8fde\u63a5\u5668\uff0c\u6216\u8005\u4f7f\u7528 Mongoose \uff0c\u6700\u6d41\u884c\u7684 MongoDB \u5bf9\u8c61\u5efa\u6a21\u5de5\u5177\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e13\u7528\u7684 @nestjs/mongoose \u5305\u6765\u63cf\u8ff0\u540e\u9762\u3002 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879: $ npm install --save @nestjs/mongoose mongoose \u4e00\u65e6\u5b89\u88c5\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a MongooseModule \u5bfc\u5165\u5230\u6839\u76ee\u5f55 AppModule \u4e2d\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; @Module ({ imports : [ MongooseModule . forRoot ( 'mongodb://localhost/nest' )], }) export class AppModule {} forRoot() \u65b9\u6cd5\u63a5\u53d7\u4e0e Mongoose \u5305\u4e2d\u7684 Mongoose.connect() \u76f8\u540c\u7684\u914d\u7f6e\u5bf9\u8c61\uff0c\u5982 \u8fd9\u91cc \u6240\u8ff0. \u6a21\u578b\u6ce8\u5165 \u00b6 \u4f7f\u7528 Mongoose\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u6765\u81ea Schema . \u6bcf\u4e2a\u6a21\u5f0f\u6620\u5c04\u5230\u4e00\u4e2a MongoDB \u96c6\u5408\uff0c\u5e76\u5b9a\u4e49\u8be5\u96c6\u5408\u4e2d\u6587\u6863\u7684\u5f62\u72b6\u3002 Schema \u7528\u4e8e\u5b9a\u4e49 Model . \u6a21\u578b\u8d1f\u8d23\u4ece\u5e95\u5c42 MongoDB \u6570\u636e\u5e93\u521b\u5efa\u548c\u8bfb\u53d6\u6587\u6863\u3002 \u6a21\u5f0f\u53ef\u4ee5\u7528 NestJS \u88c5\u9970\u5668\u521b\u5efa\uff0c\u4e5f\u53ef\u4ee5\u7528 Mongoose \u81ea\u5df1\u624b\u52a8\u521b\u5efa\u3002 \u4f7f\u7528\u88c5\u9970\u5668\u6765\u521b\u5efa\u6a21\u5f0f\u5927\u5927\u51cf\u5c11\u4e86\u6837\u677f\uff0c\u5e76\u63d0\u9ad8\u4e86\u6574\u4f53\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 \u6211\u4eec\u5b9a\u4e49\u7684 CatSchema : @ @filename ( schemas / cat . schema ) import { Prop , Schema , SchemaFactory } from '@nestjs/mongoose' ; import { Document } from 'mongoose' ; export type CatDocument = Cat & Document ; @Schema () export class Cat { @Prop () name : string ; @Prop () age : number ; @Prop () breed : string ; } export const CatSchema = SchemaFactory . createForClass ( Cat ); info \u63d0\u793a \u6ce8\u610f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 defintionsfactory \u7c7b(\u4ece nestjs/mongoose )\u751f\u6210\u4e00\u4e2a\u539f\u59cb\u6a21\u5f0f\u5b9a\u4e49\u3002 \u8fd9\u5141\u8bb8\u60a8\u624b\u52a8\u4fee\u6539\u57fa\u4e8e\u60a8\u63d0\u4f9b\u7684\u5143\u6570\u636e\u751f\u6210\u7684\u6a21\u5f0f\u5b9a\u4e49\u3002\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u8fb9\u7f18\u60c5\u51b5\u975e\u5e38\u6709\u7528\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u5f88\u96be\u7528 decorator \u6765\u8868\u793a\u6240\u6709\u5185\u5bb9\u3002 @Schema() \u88c5\u9970\u5668\u5c06\u4e00\u4e2a\u7c7b\u6807\u8bb0\u4e3a\u4e00\u4e2a\u6a21\u5f0f\u5b9a\u4e49\u3002 \u5b83\u5c06\u6211\u4eec\u7684 Cat \u7c7b\u6620\u5c04\u5230\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684 MongoDB \u96c6\u5408\uff0c\u4f46\u5728\u672b\u5c3e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u989d\u5916\u7684 s \u2014\u2014\u6240\u4ee5\u6700\u7ec8\u7684 mongo \u96c6\u5408\u540d\u79f0\u5c06\u662f cats \u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u6a21\u5f0f\u9009\u9879\u5bf9\u8c61\u3002 \u628a\u5b83\u60f3\u8c61\u6210\u4f60\u901a\u5e38\u4f1a\u4f20\u9012\u7ed9 mongoose.Schema \u7c7b\u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5bf9\u8c61(\u5982, new mongoose.Schema(_, options) ))\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u53ef\u7528\u7684\u6a21\u5f0f\u9009\u9879\uff0c\u8bf7\u53c2\u9605 \u672c \u7ae0\u3002 @Prop() \u88c5\u9970\u5668\u5728\u6587\u6863\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u5728\u4e0a\u9762\u7684\u6a21\u5f0f\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u4e2a\u5c5e\u6027: name , age \u548c breed \u3002 \u7531\u4e8e TypeScript \u7684\u5143\u6570\u636e(\u548c\u53cd\u5c04)\u529f\u80fd\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684 schema types \u4f1a\u88ab\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\u3002 \u7136\u800c\uff0c\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u7c7b\u578b\u4e0d\u80fd\u9690\u5f0f\u53cd\u6620(\u4f8b\u5982\uff0c\u6570\u7ec4\u6216\u5d4c\u5957\u5bf9\u8c61\u7ed3\u6784)\uff0c\u7c7b\u578b\u5fc5\u987b\u663e\u5f0f\u8868\u793a\uff0c\u5982\u4e0b\u6240\u793a: @Prop ([ String ]) tags : string []; \u6216\u8005\uff0c @Prop() \u88c5\u9970\u5668\u63a5\u53d7\u4e00\u4e2a options \u5bf9\u8c61\u53c2\u6570( \u9605\u8bfb\u66f4\u591a \u5173\u4e8e\u53ef\u7528\u9009\u9879)\u3002 \u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\u6307\u793a\u662f\u5426\u9700\u8981\u5c5e\u6027\u3001\u6307\u5b9a\u9ed8\u8ba4\u503c\u6216\u5c06\u5176\u6807\u8bb0\u4e3a\u4e0d\u53ef\u53d8\u3002\u4f8b\u5982: @Prop ({ required : true }) name : string ; \u5982\u679c\u4f60\u60f3\u8981\u6307\u5b9a\u4e0e\u53e6\u4e00\u4e2a\u6a21\u578b\u7684\u5173\u7cfb\uff0c\u7a0d\u540e\u586b\u5145\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 @Prop() \u88c5\u9970\u5668\u3002 \u4f8b\u5982\uff0c\u5982\u679c Cat \u5177\u6709 Owner \uff0c\u8be5\u5c5e\u6027\u5b58\u50a8\u5728\u53e6\u4e00\u4e2a\u540d\u4e3a owners \u7684\u96c6\u5408\u4e2d\uff0c\u5219\u8be5\u5c5e\u6027\u5e94\u8be5\u5177\u6709 type \u548c ref\u3002\u4f8b\u5982: import * as mongoose from 'mongoose' ; import { Owner } from '../owners/schemas/owner.schema' ; // inside the class definition @Prop ({ type : mongoose . Schema . Types . ObjectId , ref : ' Owner `}) owner: Owner; \u5982\u679c\u6709\u591a\u4e2a\u6240\u6709\u8005\uff0c\u4f60\u7684\u5c5e\u6027\u914d\u7f6e\u5e94\u8be5\u5982\u4e0b\u6240\u793a: @Prop ({ type : [{ type : mongoose . Schema . Types . ObjectId , ref : ' Owner `}] }) owner: Owner[]; \u6700\u540e\uff0c\u539f\u59cb\u7684\u6a21\u5f0f\u5b9a\u4e49\u4e5f\u53ef\u4ee5\u4f20\u9012\u7ed9\u88c5\u9970\u5668\u3002 \u4f8b\u5982\uff0c\u5f53\u5c5e\u6027\u8868\u793a\u672a\u5b9a\u4e49\u4e3a\u7c7b\u7684\u5d4c\u5957\u5bf9\u8c61\u65f6\uff0c\u8fd9\u5f88\u6709\u7528\u3002 \u4e3a\u6b64\uff0c\u4f7f\u7528 @nestjs/mongoose \u5305\u4e2d\u7684 raw() \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a: @Prop ( raw ({ firstName : { type : String }, lastName : { type : String } })) details : Record < string , any > ; \u6216\u8005\uff0c\u5982\u679c\u4f60\u4e0d\u559c\u6b22\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u4f60\u53ef\u4ee5\u624b\u52a8\u5b9a\u4e49\u4e00\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982: export const CatSchema = new mongoose . Schema ({ name : String , age : Number , breed : String , }); cat.schema \u6587\u4ef6\u4f4d\u4e8e cats \u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4e5f\u5b9a\u4e49\u4e86 CatsModule \u3002 \u867d\u7136\u4f60\u53ef\u4ee5\u5c06\u6a21\u5f0f\u6587\u4ef6\u5b58\u50a8\u5728\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u5730\u65b9\uff0c\u4f46\u6211\u4eec\u5efa\u8bae\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u5b83\u4eec\u76f8\u5173\u7684 \u57df \u5bf9\u8c61\u9644\u8fd1\uff0c\u5728\u9002\u5f53\u7684\u6a21\u5757\u76ee\u5f55\u4e2d\u3002 \u8ba9\u6211\u4eec\u770b\u770b CatsModule : @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; import { Cat , CatSchema } from './schemas/cat.schema' ; @Module ({ imports : [ MongooseModule . forFeature ([{ name : Cat.name , schema : CatSchema }])], controllers : [ CatsController ], providers : [ CatsService ], }) export class CatsModule {} MongooseModule \u63d0\u4f9b\u4e86 forFeature() \u65b9\u6cd5\u6765\u914d\u7f6e\u6a21\u5757\uff0c\u5305\u62ec\u5b9a\u4e49\u54ea\u4e9b\u6a21\u578b\u5e94\u8be5\u5728\u5f53\u524d\u8303\u56f4\u5185\u6ce8\u518c\u3002 \u5982\u679c\u4f60\u8fd8\u60f3\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b\uff0c\u53ef\u4ee5\u5c06 MongooseModule \u6dfb\u52a0\u5230 CatsModule \u7684 exports \u90e8\u5206\uff0c\u5e76\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165 CatsModule \u3002 \u4e00\u65e6\u4f60\u6ce8\u518c\u4e86\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 @InjectModel() \u88c5\u9970\u5668\u5c06\u4e00\u4e2a Cat \u6a21\u578b\u6ce8\u5165\u5230 CatsService \u4e2d: @ @filename ( cats . service ) import { Model } from 'mongoose' ; import { Injectable } from '@nestjs/common' ; import { InjectModel } from '@nestjs/mongoose' ; import { Cat , CatDocument } from './schemas/cat.schema' ; import { CreateCatDto } from './dto/create-cat.dto' ; @Injectable () export class CatsService { constructor ( @InjectModel ( Cat . name ) private catModel : Model < CatDocument > ) {} async create ( createCatDto : CreateCatDto ) : Promise < Cat > { const createdCat = new this . catModel ( createCatDto ); return createdCat . save (); } async findAll () : Promise < Cat [] > { return this . catModel . find (). exec (); } } @ @switch import { Model } from 'mongoose' ; import { Injectable , Dependencies } from '@nestjs/common' ; import { getModelToken } from '@nestjs/mongoose' ; import { Cat } from './schemas/cat.schema' ; @Injectable () @Dependencies ( getModelToken ( Cat . name )) export class CatsService { constructor ( catModel ) { this . catModel = catModel ; } async create ( createCatDto ) { const createdCat = new this . catModel ( createCatDto ); return createdCat . save (); } async findAll () { return this . catModel . find (). exec (); } } \u8fde\u63a5 \u00b6 \u6709\u65f6\u4f60\u53ef\u80fd\u9700\u8981\u8bbf\u95ee\u672c\u5730 Mongoose Connection \u5bf9\u8c61\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5bf9\u8fde\u63a5\u5bf9\u8c61\u8fdb\u884c\u672c\u673a API \u8c03\u7528\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 @InjectConnection() \u88c5\u9970\u5668\u6765\u6ce8\u5165 Mongoose \u8fde\u63a5\uff0c\u5982\u4e0b\u6240\u793a: import { Injectable } from '@nestjs/common' ; import { InjectConnection } from '@nestjs/mongoose' ; import { Connection } from 'mongoose' ; @Injectable () export class CatsService { constructor ( @InjectConnection () private connection : Connection ) {} } \u591a\u5e93 \u00b6 \u6709\u4e9b\u9879\u76ee\u9700\u8981\u591a\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6a21\u5757\u5b9e\u73b0\u3002 \u8981\u5904\u7406\u591a\u4e2a\u8fde\u63a5\uff0c\u9996\u5148\u8981\u521b\u5efa\u8fde\u63a5\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u547d\u540d\u6210\u4e3a \u5fc5\u987b\u7684 \u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; @Module ({ imports : [ MongooseModule . forRoot ( 'mongodb://localhost/test' , { connectionName : 'cats' , }), MongooseModule . forRoot ( 'mongodb://localhost/users' , { connectionName : 'users' , }), ], }) export class AppModule {} warning \u8bf7\u6ce8\u610f \u8bf7\u6ce8\u610f\uff0c\u60a8\u4e0d\u5e94\u8be5\u6709\u591a\u4e2a\u6ca1\u6709\u540d\u79f0\u6216\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u8fde\u63a5\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u88ab\u8986\u76d6\u3002 \u5728\u8fd9\u4e2a\u8bbe\u7f6e\u4e2d\uff0c\u4f60\u5fc5\u987b\u544a\u8bc9 mongoosemmodule.forfeature() \u51fd\u6570\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u8fde\u63a5\u3002 @Module ({ imports : [ MongooseModule . forFeature ([{ name : Cat.name , schema : CatSchema }], 'cats' ), ], }) export class AppModule {} \u4f60\u4e5f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8fde\u63a5\u6ce8\u5165 Connection : import { Injectable } from '@nestjs/common' ; import { InjectConnection } from '@nestjs/mongoose' ; import { Connection } from 'mongoose' ; @Injectable () export class CatsService { constructor ( @InjectConnection ( 'cats' ) private connection : Connection ) {} } \u8981\u5c06\u7ed9\u5b9a\u7684 Connection \u6ce8\u5165\u5230\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668(\u4f8b\u5982\uff0c\u5de5\u5382\u63d0\u4f9b\u5668)\uff0c\u4f7f\u7528 getConnectionToken() \u51fd\u6570\u5c06\u8fde\u63a5\u7684\u540d\u79f0\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002 { provide : CatsService , useFactory : ( catsConnection : Connection ) => { return new CatsService ( catsConnection ); }, inject : [ getConnectionToken ( 'cats' )], } \u94a9\u5b50 (\u4e2d\u95f4\u4ef6) \u00b6 \u4e2d\u95f4\u4ef6(\u4e5f\u79f0\u4e3a\u524d\u7f6e\u94a9\u5b50\u548c post \u94a9\u5b50)\u662f\u5728\u5f02\u6b65\u51fd\u6570\u6267\u884c\u671f\u95f4\u4f20\u9012\u63a7\u5236\u7684\u51fd\u6570\u3002 \u4e2d\u95f4\u4ef6\u662f\u5728\u6a21\u5f0f\u7ea7\u6307\u5b9a\u7684\uff0c\u5bf9\u4e8e\u7f16\u5199\u63d2\u4ef6\u975e\u5e38\u6709\u7528( source )\u3002 \u5728\u7f16\u8bd1\u6a21\u578b\u540e\u8c03\u7528 pre() \u6216 post() \u5728 Mongoose \u4e2d\u4e0d\u8d77\u4f5c\u7528\u3002 \u8981\u5728\u6a21\u578b\u6ce8\u518c \u4e4b\u524d \u6ce8\u518c\u4e00\u4e2a\u94a9\u5b50\uff0c\u4f7f\u7528 MongooseModule \u7684 forFeatureAsync() \u65b9\u6cd5\u548c\u4e00\u4e2a\u5de5\u5382\u63d0\u4f9b\u5668(\u4f8b\u5982 useFactory )\u3002 \u4f7f\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee\u4e00\u4e2a\u6a21\u5f0f\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528 pre() \u6216 post() \u65b9\u6cd5\u5728\u8be5\u6a21\u5f0f\u4e0a\u6ce8\u518c\u4e00\u4e2a\u94a9\u5b50\u3002 \u8bf7\u53c2\u89c1\u4e0b\u9762\u7684\u4f8b\u5b50: @Module ({ imports : [ MongooseModule . forFeatureAsync ([ { name : Cat.name , useFactory : () => { const schema = CatsSchema ; schema . pre ( 'save' , function () { console . log ( 'Hello from pre save' ); }); return schema ; }, }, ]), ], }) export class AppModule {} \u50cf\u5176\u4ed6 \u5de5\u5382\u63d0\u4f9b\u5668 \u4e00\u6837\uff0c\u6211\u4eec\u7684\u5de5\u5382\u51fd\u6570\u53ef\u4ee5\u662f async \u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002 @Module ({ imports : [ MongooseModule . forFeatureAsync ([ { name : Cat.name , imports : [ ConfigModule ], useFactory : ( configService : ConfigService ) => { const schema = CatsSchema ; schema . pre ( 'save' , function () { console . log ( ` ${ configService . get ( 'APP_NAME' ) } : Hello from pre save` , ), }); return schema ; }, inject : [ ConfigService ], }, ]), ], }) export class AppModule {} \u63d2\u4ef6 \u00b6 \u8981\u6ce8\u518c\u4e00\u4e2a plugin \uff0c\u4f7f\u7528 forFeatureAsync() \u65b9\u6cd5\u3002 @Module ({ imports : [ MongooseModule . forFeatureAsync ([ { name : Cat.name , useFactory : () => { const schema = CatsSchema ; schema . plugin ( require ( 'mongoose-autopopulate' )); return schema ; }, }, ]), ], }) export class AppModule {} \u8981\u4e00\u6b21\u6027\u4e3a\u6240\u6709\u6a21\u5f0f\u6ce8\u518c\u4e00\u4e2a\u63d2\u4ef6\uff0c\u8c03\u7528 Connection \u5bf9\u8c61\u7684 .plugin() \u65b9\u6cd5\u3002 \u60a8\u5e94\u8be5\u5728\u521b\u5efa\u6a21\u578b\u4e4b\u524d\u8bbf\u95ee\u8fde\u63a5;\u4e3a\u6b64\uff0c\u4f7f\u7528 connectionFactory : @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; @Module ({ imports : [ MongooseModule . forRoot ( 'mongodb://localhost/test' , { connectionFactory : ( connection ) => { connection . plugin ( require ( 'mongoose-autopopulate' )); return connection ; } }), ], }) export class AppModule {} \u9274\u522b\u5668 \u00b6 Discriminators \u662f\u4e00\u79cd\u6a21\u5f0f\u7ee7\u627f\u673a\u5236\u3002 \u5b83\u4eec\u4f7f\u60a8\u80fd\u591f\u5728\u76f8\u540c\u7684\u5e95\u5c42 MongoDB \u96c6\u5408\u4e0a\u62e5\u6709\u5177\u6709\u91cd\u53e0\u6a21\u5f0f\u7684\u591a\u4e2a\u6a21\u578b\u3002 \u5047\u8bbe\u60a8\u60f3\u8981\u8ddf\u8e2a\u5355\u4e2a\u96c6\u5408\u4e2d\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\u6bcf\u4e2a\u4e8b\u4ef6\u90fd\u6709\u4e00\u4e2a\u65f6\u95f4\u6233\u3002 @ @filename ( event . schema ) @Schema ({ discriminatorKey : ' kind `}) export class Event { @Prop({ type: String, required: true, enum: [ClickedLinkEvent.name, SignUpEvent.name], }) kind: string; @Prop({ type: Date, required: true }) time: Date; } export const EventSchema = SchemaFactory.createForClass(Event); info Hint mongoose \u901a\u8fc7 discriminator key \u6765\u533a\u5206\u4e0d\u540c\u7684\u9274\u522b\u5668\u6a21\u578b\uff0c\u9ed8\u8ba4\u4e3a __t \u3002 Mongoose \u5c06\u4e00\u4e2a\u540d\u4e3a __t \u7684\u5b57\u7b26\u4e32\u8def\u5f84\u6dfb\u52a0\u5230\u60a8\u7684\u6a21\u5f0f\u4e2d\uff0c\u7528\u4e8e\u8ddf\u8e2a\u8be5\u6587\u6863\u662f\u54ea\u4e2a\u9274\u522b\u5668\u7684\u5b9e\u4f8b\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 discriminatorKey \u9009\u9879\u6765\u5b9a\u4e49\u533a\u5206\u7684\u8def\u5f84\u3002 SignedUpEvent \u548c clicklinkevent \u5b9e\u4f8b\u5c06\u4f5c\u4e3a\u901a\u7528\u4e8b\u4ef6\u5b58\u50a8\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49 clicklinkevent \u7c7b\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( click - link - event . schema ) @Schema () export class ClickedLinkEvent { kind : string ; time : Date ; @Prop ({ type : String , required : true }) url : string ; } export const ClickedLinkEventSchema = SchemaFactory . createForClass ( ClickedLinkEvent ); \u6dfb\u52a0 SignUpEvent \u7c7b: @ @filename ( sign - up - event . schema ) @Schema () export class SignUpEvent { kind : string ; time : Date ; @Prop ({ type : String , required : true }) user : string ; } export const SignUpEventSchema = SchemaFactory . createForClass ( SignUpEvent ); \u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528 discriminator \u9009\u9879\u4e3a\u7ed9\u5b9a\u7684\u6a21\u5f0f\u6ce8\u518c\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002 \u5b83\u5de5\u4f5c\u5728\u4e24\u4e2a `MongooseModule\u3002forFeature\u2019\u548c\u2018MongooseModule.forFeatureAsync\u201d: @ @filename ( event . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; @Module ({ imports : [ MongooseModule . forFeature ([ { name : Event.name , schema : EventSchema , discriminators : [ { name : ClickedLinkEvent.name , schema : ClickedLinkEventSchema }, { name : SignUpEvent.name , schema : SignUpEventSchema }, ], }, ]), ] }) export class EventsModule {} \u6d4b\u8bd5 \u00b6 \u5728\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u907f\u514d\u4efb\u4f55\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4ece\u800c\u4f7f\u6211\u4eec\u7684\u6d4b\u8bd5\u5957\u4ef6\u8bbe\u7f6e\u8d77\u6765\u66f4\u7b80\u5355\uff0c\u6267\u884c\u8d77\u6765\u66f4\u5feb\u3002 \u4f46\u662f\u6211\u4eec\u7684\u7c7b\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4ece\u8fde\u63a5\u5b9e\u4f8b\u4e2d\u63d0\u53d6\u7684\u6a21\u578b\u3002 \u6211\u4eec\u5982\u4f55\u89e3\u6790\u8fd9\u4e9b\u7c7b?\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u6a21\u62df\u6a21\u578b\u3002 \u4e3a\u4e86\u7b80\u5316\u8fd9\u4e2a\u8fc7\u7a0b\uff0c @nestjs/mongoose \u5305\u516c\u5f00\u4e86\u4e00\u4e2a getModelToken() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6839\u636e\u4e00\u4e2a\u4ee4\u724c\u540d\u8fd4\u56de\u4e00\u4e2a\u51c6\u5907\u597d\u7684 \u6ce8\u5165\u4ee4\u724c \u3002 \u4f7f\u7528\u8fd9\u4e2a\u4ee4\u724c\uff0c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u7684 \u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668 \u6280\u672f\u6765\u63d0\u4f9b\u4e00\u4e2a\u6a21\u62df\u5b9e\u73b0\uff0c\u5305\u62ec useClass \uff0c useValue \u548c useFactory \u3002\u4f8b\u5982: @Module ({ providers : [ CatsService , { provide : getModelToken ( Cat . name ), useValue : catModel , }, ], }) export class CatsModule {} \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5f53\u4efb\u4f55\u6d88\u8d39\u8005\u4f7f\u7528 @InjectModel() \u88c5\u9970\u5668\u6ce8\u5165 Model<Cat> \u65f6\uff0c\u5c31\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u786c\u7f16\u7801\u7684 catModel (\u5bf9\u8c61\u5b9e\u4f8b)\u3002 \u5f02\u6b65\u914d\u7f6e \u00b6 \u5f53\u4f60\u9700\u8981\u5f02\u6b65\u800c\u4e0d\u662f\u9759\u6001\u4f20\u9012\u6a21\u5757\u9009\u9879\u65f6\uff0c\u4f7f\u7528 forRootAsync() \u65b9\u6cd5\u3002\u4e0e\u5927\u591a\u6570\u52a8\u6001\u6a21\u5757\u4e00\u6837\uff0cNest \u63d0\u4f9b\u4e86\u51e0\u79cd\u6280\u672f\u6765\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: MongooseModule . forRootAsync ({ useFactory : () => ({ uri : 'mongodb://localhost/nest' , }), }); \u50cf\u5176\u4ed6 \u5de5\u5382\u63d0\u4f9b\u5668 \u4e00\u6837\uff0c\u6211\u4eec\u7684\u5de5\u5382\u51fd\u6570\u53ef\u4ee5\u662f async \u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002 MongooseModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ uri : configService.get < string > ( 'MONGODB_URI' ), }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u5de5\u5382\u6765\u914d\u7f6e\u201cMongooseModule\u201d\uff0c\u5982\u4e0b\u6240\u793a: MongooseModule . forRootAsync ({ useClass : MongooseConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5b9e\u4f8b\u5316\u4e86 MongooseConfigService \u5728 MongooseModule \u4e2d\uff0c\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u6240\u9700\u7684\u9009\u9879\u5bf9\u8c61\u3002\u6ce8\u610f\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c MongooseConfigService \u5fc5\u987b\u5b9e\u73b0 MongooseOptionsFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a\u3002 MongooseModule \u5c06\u5728\u63d0\u4f9b\u7684\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e0a\u8c03\u7528 createMongooseOptions() \u65b9\u6cd5\u3002 @Injectable () class MongooseConfigService implements MongooseOptionsFactory { createMongooseOptions () : MongooseModuleOptions { return { uri : 'mongodb://localhost/nest' , }; } } \u5982\u679c\u4f60\u60f3\u91cd\u7528\u4e00\u4e2a\u73b0\u6709\u7684\u9009\u9879\u63d0\u4f9b\u5546\uff0c\u800c\u4e0d\u662f\u5728 MongooseModule \u4e2d\u521b\u5efa\u4e00\u4e2a\u79c1\u6709\u526f\u672c\uff0c\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 MongooseModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u4f8b\u5b50 \u00b6 (https://github.com/nestjs/nest/tree/master/sample/06-mongoose).","title":"Mongo"},{"location":"techniques/mongo/#mongo","text":"Nest \u652f\u6301\u4e24\u79cd\u96c6\u6210 MongoDB \u6570\u636e\u5e93\u7684\u65b9\u6cd5\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 \u8fd9\u91cc \u63cf\u8ff0\u7684\u5185\u7f6e TypeORM \u6a21\u5757\uff0c\u5b83\u4e3a MongoDB \u63d0\u4f9b\u4e86\u4e00\u4e2a\u8fde\u63a5\u5668\uff0c\u6216\u8005\u4f7f\u7528 Mongoose \uff0c\u6700\u6d41\u884c\u7684 MongoDB \u5bf9\u8c61\u5efa\u6a21\u5de5\u5177\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e13\u7528\u7684 @nestjs/mongoose \u5305\u6765\u63cf\u8ff0\u540e\u9762\u3002 \u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879: $ npm install --save @nestjs/mongoose mongoose \u4e00\u65e6\u5b89\u88c5\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a MongooseModule \u5bfc\u5165\u5230\u6839\u76ee\u5f55 AppModule \u4e2d\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; @Module ({ imports : [ MongooseModule . forRoot ( 'mongodb://localhost/nest' )], }) export class AppModule {} forRoot() \u65b9\u6cd5\u63a5\u53d7\u4e0e Mongoose \u5305\u4e2d\u7684 Mongoose.connect() \u76f8\u540c\u7684\u914d\u7f6e\u5bf9\u8c61\uff0c\u5982 \u8fd9\u91cc \u6240\u8ff0.","title":"Mongo"},{"location":"techniques/mongo/#_1","text":"\u4f7f\u7528 Mongoose\uff0c\u6240\u6709\u4e1c\u897f\u90fd\u6765\u81ea Schema . \u6bcf\u4e2a\u6a21\u5f0f\u6620\u5c04\u5230\u4e00\u4e2a MongoDB \u96c6\u5408\uff0c\u5e76\u5b9a\u4e49\u8be5\u96c6\u5408\u4e2d\u6587\u6863\u7684\u5f62\u72b6\u3002 Schema \u7528\u4e8e\u5b9a\u4e49 Model . \u6a21\u578b\u8d1f\u8d23\u4ece\u5e95\u5c42 MongoDB \u6570\u636e\u5e93\u521b\u5efa\u548c\u8bfb\u53d6\u6587\u6863\u3002 \u6a21\u5f0f\u53ef\u4ee5\u7528 NestJS \u88c5\u9970\u5668\u521b\u5efa\uff0c\u4e5f\u53ef\u4ee5\u7528 Mongoose \u81ea\u5df1\u624b\u52a8\u521b\u5efa\u3002 \u4f7f\u7528\u88c5\u9970\u5668\u6765\u521b\u5efa\u6a21\u5f0f\u5927\u5927\u51cf\u5c11\u4e86\u6837\u677f\uff0c\u5e76\u63d0\u9ad8\u4e86\u6574\u4f53\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002 \u6211\u4eec\u5b9a\u4e49\u7684 CatSchema : @ @filename ( schemas / cat . schema ) import { Prop , Schema , SchemaFactory } from '@nestjs/mongoose' ; import { Document } from 'mongoose' ; export type CatDocument = Cat & Document ; @Schema () export class Cat { @Prop () name : string ; @Prop () age : number ; @Prop () breed : string ; } export const CatSchema = SchemaFactory . createForClass ( Cat ); info \u63d0\u793a \u6ce8\u610f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 defintionsfactory \u7c7b(\u4ece nestjs/mongoose )\u751f\u6210\u4e00\u4e2a\u539f\u59cb\u6a21\u5f0f\u5b9a\u4e49\u3002 \u8fd9\u5141\u8bb8\u60a8\u624b\u52a8\u4fee\u6539\u57fa\u4e8e\u60a8\u63d0\u4f9b\u7684\u5143\u6570\u636e\u751f\u6210\u7684\u6a21\u5f0f\u5b9a\u4e49\u3002\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u8fb9\u7f18\u60c5\u51b5\u975e\u5e38\u6709\u7528\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u5f88\u96be\u7528 decorator \u6765\u8868\u793a\u6240\u6709\u5185\u5bb9\u3002 @Schema() \u88c5\u9970\u5668\u5c06\u4e00\u4e2a\u7c7b\u6807\u8bb0\u4e3a\u4e00\u4e2a\u6a21\u5f0f\u5b9a\u4e49\u3002 \u5b83\u5c06\u6211\u4eec\u7684 Cat \u7c7b\u6620\u5c04\u5230\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684 MongoDB \u96c6\u5408\uff0c\u4f46\u5728\u672b\u5c3e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u989d\u5916\u7684 s \u2014\u2014\u6240\u4ee5\u6700\u7ec8\u7684 mongo \u96c6\u5408\u540d\u79f0\u5c06\u662f cats \u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5b83\u662f\u4e00\u4e2a\u6a21\u5f0f\u9009\u9879\u5bf9\u8c61\u3002 \u628a\u5b83\u60f3\u8c61\u6210\u4f60\u901a\u5e38\u4f1a\u4f20\u9012\u7ed9 mongoose.Schema \u7c7b\u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5bf9\u8c61(\u5982, new mongoose.Schema(_, options) ))\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u53ef\u7528\u7684\u6a21\u5f0f\u9009\u9879\uff0c\u8bf7\u53c2\u9605 \u672c \u7ae0\u3002 @Prop() \u88c5\u9970\u5668\u5728\u6587\u6863\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u5728\u4e0a\u9762\u7684\u6a21\u5f0f\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u4e2a\u5c5e\u6027: name , age \u548c breed \u3002 \u7531\u4e8e TypeScript \u7684\u5143\u6570\u636e(\u548c\u53cd\u5c04)\u529f\u80fd\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684 schema types \u4f1a\u88ab\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\u3002 \u7136\u800c\uff0c\u5728\u66f4\u590d\u6742\u7684\u573a\u666f\u4e2d\uff0c\u7c7b\u578b\u4e0d\u80fd\u9690\u5f0f\u53cd\u6620(\u4f8b\u5982\uff0c\u6570\u7ec4\u6216\u5d4c\u5957\u5bf9\u8c61\u7ed3\u6784)\uff0c\u7c7b\u578b\u5fc5\u987b\u663e\u5f0f\u8868\u793a\uff0c\u5982\u4e0b\u6240\u793a: @Prop ([ String ]) tags : string []; \u6216\u8005\uff0c @Prop() \u88c5\u9970\u5668\u63a5\u53d7\u4e00\u4e2a options \u5bf9\u8c61\u53c2\u6570( \u9605\u8bfb\u66f4\u591a \u5173\u4e8e\u53ef\u7528\u9009\u9879)\u3002 \u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\u6307\u793a\u662f\u5426\u9700\u8981\u5c5e\u6027\u3001\u6307\u5b9a\u9ed8\u8ba4\u503c\u6216\u5c06\u5176\u6807\u8bb0\u4e3a\u4e0d\u53ef\u53d8\u3002\u4f8b\u5982: @Prop ({ required : true }) name : string ; \u5982\u679c\u4f60\u60f3\u8981\u6307\u5b9a\u4e0e\u53e6\u4e00\u4e2a\u6a21\u578b\u7684\u5173\u7cfb\uff0c\u7a0d\u540e\u586b\u5145\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 @Prop() \u88c5\u9970\u5668\u3002 \u4f8b\u5982\uff0c\u5982\u679c Cat \u5177\u6709 Owner \uff0c\u8be5\u5c5e\u6027\u5b58\u50a8\u5728\u53e6\u4e00\u4e2a\u540d\u4e3a owners \u7684\u96c6\u5408\u4e2d\uff0c\u5219\u8be5\u5c5e\u6027\u5e94\u8be5\u5177\u6709 type \u548c ref\u3002\u4f8b\u5982: import * as mongoose from 'mongoose' ; import { Owner } from '../owners/schemas/owner.schema' ; // inside the class definition @Prop ({ type : mongoose . Schema . Types . ObjectId , ref : ' Owner `}) owner: Owner; \u5982\u679c\u6709\u591a\u4e2a\u6240\u6709\u8005\uff0c\u4f60\u7684\u5c5e\u6027\u914d\u7f6e\u5e94\u8be5\u5982\u4e0b\u6240\u793a: @Prop ({ type : [{ type : mongoose . Schema . Types . ObjectId , ref : ' Owner `}] }) owner: Owner[]; \u6700\u540e\uff0c\u539f\u59cb\u7684\u6a21\u5f0f\u5b9a\u4e49\u4e5f\u53ef\u4ee5\u4f20\u9012\u7ed9\u88c5\u9970\u5668\u3002 \u4f8b\u5982\uff0c\u5f53\u5c5e\u6027\u8868\u793a\u672a\u5b9a\u4e49\u4e3a\u7c7b\u7684\u5d4c\u5957\u5bf9\u8c61\u65f6\uff0c\u8fd9\u5f88\u6709\u7528\u3002 \u4e3a\u6b64\uff0c\u4f7f\u7528 @nestjs/mongoose \u5305\u4e2d\u7684 raw() \u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a: @Prop ( raw ({ firstName : { type : String }, lastName : { type : String } })) details : Record < string , any > ; \u6216\u8005\uff0c\u5982\u679c\u4f60\u4e0d\u559c\u6b22\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u4f60\u53ef\u4ee5\u624b\u52a8\u5b9a\u4e49\u4e00\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982: export const CatSchema = new mongoose . Schema ({ name : String , age : Number , breed : String , }); cat.schema \u6587\u4ef6\u4f4d\u4e8e cats \u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4e5f\u5b9a\u4e49\u4e86 CatsModule \u3002 \u867d\u7136\u4f60\u53ef\u4ee5\u5c06\u6a21\u5f0f\u6587\u4ef6\u5b58\u50a8\u5728\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u5730\u65b9\uff0c\u4f46\u6211\u4eec\u5efa\u8bae\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u5b83\u4eec\u76f8\u5173\u7684 \u57df \u5bf9\u8c61\u9644\u8fd1\uff0c\u5728\u9002\u5f53\u7684\u6a21\u5757\u76ee\u5f55\u4e2d\u3002 \u8ba9\u6211\u4eec\u770b\u770b CatsModule : @ @filename ( cats . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; import { CatsController } from './cats.controller' ; import { CatsService } from './cats.service' ; import { Cat , CatSchema } from './schemas/cat.schema' ; @Module ({ imports : [ MongooseModule . forFeature ([{ name : Cat.name , schema : CatSchema }])], controllers : [ CatsController ], providers : [ CatsService ], }) export class CatsModule {} MongooseModule \u63d0\u4f9b\u4e86 forFeature() \u65b9\u6cd5\u6765\u914d\u7f6e\u6a21\u5757\uff0c\u5305\u62ec\u5b9a\u4e49\u54ea\u4e9b\u6a21\u578b\u5e94\u8be5\u5728\u5f53\u524d\u8303\u56f4\u5185\u6ce8\u518c\u3002 \u5982\u679c\u4f60\u8fd8\u60f3\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b\uff0c\u53ef\u4ee5\u5c06 MongooseModule \u6dfb\u52a0\u5230 CatsModule \u7684 exports \u90e8\u5206\uff0c\u5e76\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u5bfc\u5165 CatsModule \u3002 \u4e00\u65e6\u4f60\u6ce8\u518c\u4e86\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 @InjectModel() \u88c5\u9970\u5668\u5c06\u4e00\u4e2a Cat \u6a21\u578b\u6ce8\u5165\u5230 CatsService \u4e2d: @ @filename ( cats . service ) import { Model } from 'mongoose' ; import { Injectable } from '@nestjs/common' ; import { InjectModel } from '@nestjs/mongoose' ; import { Cat , CatDocument } from './schemas/cat.schema' ; import { CreateCatDto } from './dto/create-cat.dto' ; @Injectable () export class CatsService { constructor ( @InjectModel ( Cat . name ) private catModel : Model < CatDocument > ) {} async create ( createCatDto : CreateCatDto ) : Promise < Cat > { const createdCat = new this . catModel ( createCatDto ); return createdCat . save (); } async findAll () : Promise < Cat [] > { return this . catModel . find (). exec (); } } @ @switch import { Model } from 'mongoose' ; import { Injectable , Dependencies } from '@nestjs/common' ; import { getModelToken } from '@nestjs/mongoose' ; import { Cat } from './schemas/cat.schema' ; @Injectable () @Dependencies ( getModelToken ( Cat . name )) export class CatsService { constructor ( catModel ) { this . catModel = catModel ; } async create ( createCatDto ) { const createdCat = new this . catModel ( createCatDto ); return createdCat . save (); } async findAll () { return this . catModel . find (). exec (); } }","title":"\u6a21\u578b\u6ce8\u5165"},{"location":"techniques/mongo/#_2","text":"\u6709\u65f6\u4f60\u53ef\u80fd\u9700\u8981\u8bbf\u95ee\u672c\u5730 Mongoose Connection \u5bf9\u8c61\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5bf9\u8fde\u63a5\u5bf9\u8c61\u8fdb\u884c\u672c\u673a API \u8c03\u7528\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 @InjectConnection() \u88c5\u9970\u5668\u6765\u6ce8\u5165 Mongoose \u8fde\u63a5\uff0c\u5982\u4e0b\u6240\u793a: import { Injectable } from '@nestjs/common' ; import { InjectConnection } from '@nestjs/mongoose' ; import { Connection } from 'mongoose' ; @Injectable () export class CatsService { constructor ( @InjectConnection () private connection : Connection ) {} }","title":"\u8fde\u63a5"},{"location":"techniques/mongo/#_3","text":"\u6709\u4e9b\u9879\u76ee\u9700\u8981\u591a\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6a21\u5757\u5b9e\u73b0\u3002 \u8981\u5904\u7406\u591a\u4e2a\u8fde\u63a5\uff0c\u9996\u5148\u8981\u521b\u5efa\u8fde\u63a5\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u547d\u540d\u6210\u4e3a \u5fc5\u987b\u7684 \u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; @Module ({ imports : [ MongooseModule . forRoot ( 'mongodb://localhost/test' , { connectionName : 'cats' , }), MongooseModule . forRoot ( 'mongodb://localhost/users' , { connectionName : 'users' , }), ], }) export class AppModule {} warning \u8bf7\u6ce8\u610f \u8bf7\u6ce8\u610f\uff0c\u60a8\u4e0d\u5e94\u8be5\u6709\u591a\u4e2a\u6ca1\u6709\u540d\u79f0\u6216\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u8fde\u63a5\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u88ab\u8986\u76d6\u3002 \u5728\u8fd9\u4e2a\u8bbe\u7f6e\u4e2d\uff0c\u4f60\u5fc5\u987b\u544a\u8bc9 mongoosemmodule.forfeature() \u51fd\u6570\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u8fde\u63a5\u3002 @Module ({ imports : [ MongooseModule . forFeature ([{ name : Cat.name , schema : CatSchema }], 'cats' ), ], }) export class AppModule {} \u4f60\u4e5f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8fde\u63a5\u6ce8\u5165 Connection : import { Injectable } from '@nestjs/common' ; import { InjectConnection } from '@nestjs/mongoose' ; import { Connection } from 'mongoose' ; @Injectable () export class CatsService { constructor ( @InjectConnection ( 'cats' ) private connection : Connection ) {} } \u8981\u5c06\u7ed9\u5b9a\u7684 Connection \u6ce8\u5165\u5230\u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668(\u4f8b\u5982\uff0c\u5de5\u5382\u63d0\u4f9b\u5668)\uff0c\u4f7f\u7528 getConnectionToken() \u51fd\u6570\u5c06\u8fde\u63a5\u7684\u540d\u79f0\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002 { provide : CatsService , useFactory : ( catsConnection : Connection ) => { return new CatsService ( catsConnection ); }, inject : [ getConnectionToken ( 'cats' )], }","title":"\u591a\u5e93"},{"location":"techniques/mongo/#_4","text":"\u4e2d\u95f4\u4ef6(\u4e5f\u79f0\u4e3a\u524d\u7f6e\u94a9\u5b50\u548c post \u94a9\u5b50)\u662f\u5728\u5f02\u6b65\u51fd\u6570\u6267\u884c\u671f\u95f4\u4f20\u9012\u63a7\u5236\u7684\u51fd\u6570\u3002 \u4e2d\u95f4\u4ef6\u662f\u5728\u6a21\u5f0f\u7ea7\u6307\u5b9a\u7684\uff0c\u5bf9\u4e8e\u7f16\u5199\u63d2\u4ef6\u975e\u5e38\u6709\u7528( source )\u3002 \u5728\u7f16\u8bd1\u6a21\u578b\u540e\u8c03\u7528 pre() \u6216 post() \u5728 Mongoose \u4e2d\u4e0d\u8d77\u4f5c\u7528\u3002 \u8981\u5728\u6a21\u578b\u6ce8\u518c \u4e4b\u524d \u6ce8\u518c\u4e00\u4e2a\u94a9\u5b50\uff0c\u4f7f\u7528 MongooseModule \u7684 forFeatureAsync() \u65b9\u6cd5\u548c\u4e00\u4e2a\u5de5\u5382\u63d0\u4f9b\u5668(\u4f8b\u5982 useFactory )\u3002 \u4f7f\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee\u4e00\u4e2a\u6a21\u5f0f\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528 pre() \u6216 post() \u65b9\u6cd5\u5728\u8be5\u6a21\u5f0f\u4e0a\u6ce8\u518c\u4e00\u4e2a\u94a9\u5b50\u3002 \u8bf7\u53c2\u89c1\u4e0b\u9762\u7684\u4f8b\u5b50: @Module ({ imports : [ MongooseModule . forFeatureAsync ([ { name : Cat.name , useFactory : () => { const schema = CatsSchema ; schema . pre ( 'save' , function () { console . log ( 'Hello from pre save' ); }); return schema ; }, }, ]), ], }) export class AppModule {} \u50cf\u5176\u4ed6 \u5de5\u5382\u63d0\u4f9b\u5668 \u4e00\u6837\uff0c\u6211\u4eec\u7684\u5de5\u5382\u51fd\u6570\u53ef\u4ee5\u662f async \u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002 @Module ({ imports : [ MongooseModule . forFeatureAsync ([ { name : Cat.name , imports : [ ConfigModule ], useFactory : ( configService : ConfigService ) => { const schema = CatsSchema ; schema . pre ( 'save' , function () { console . log ( ` ${ configService . get ( 'APP_NAME' ) } : Hello from pre save` , ), }); return schema ; }, inject : [ ConfigService ], }, ]), ], }) export class AppModule {}","title":"\u94a9\u5b50 (\u4e2d\u95f4\u4ef6)"},{"location":"techniques/mongo/#_5","text":"\u8981\u6ce8\u518c\u4e00\u4e2a plugin \uff0c\u4f7f\u7528 forFeatureAsync() \u65b9\u6cd5\u3002 @Module ({ imports : [ MongooseModule . forFeatureAsync ([ { name : Cat.name , useFactory : () => { const schema = CatsSchema ; schema . plugin ( require ( 'mongoose-autopopulate' )); return schema ; }, }, ]), ], }) export class AppModule {} \u8981\u4e00\u6b21\u6027\u4e3a\u6240\u6709\u6a21\u5f0f\u6ce8\u518c\u4e00\u4e2a\u63d2\u4ef6\uff0c\u8c03\u7528 Connection \u5bf9\u8c61\u7684 .plugin() \u65b9\u6cd5\u3002 \u60a8\u5e94\u8be5\u5728\u521b\u5efa\u6a21\u578b\u4e4b\u524d\u8bbf\u95ee\u8fde\u63a5;\u4e3a\u6b64\uff0c\u4f7f\u7528 connectionFactory : @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; @Module ({ imports : [ MongooseModule . forRoot ( 'mongodb://localhost/test' , { connectionFactory : ( connection ) => { connection . plugin ( require ( 'mongoose-autopopulate' )); return connection ; } }), ], }) export class AppModule {}","title":"\u63d2\u4ef6"},{"location":"techniques/mongo/#_6","text":"Discriminators \u662f\u4e00\u79cd\u6a21\u5f0f\u7ee7\u627f\u673a\u5236\u3002 \u5b83\u4eec\u4f7f\u60a8\u80fd\u591f\u5728\u76f8\u540c\u7684\u5e95\u5c42 MongoDB \u96c6\u5408\u4e0a\u62e5\u6709\u5177\u6709\u91cd\u53e0\u6a21\u5f0f\u7684\u591a\u4e2a\u6a21\u578b\u3002 \u5047\u8bbe\u60a8\u60f3\u8981\u8ddf\u8e2a\u5355\u4e2a\u96c6\u5408\u4e2d\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\u6bcf\u4e2a\u4e8b\u4ef6\u90fd\u6709\u4e00\u4e2a\u65f6\u95f4\u6233\u3002 @ @filename ( event . schema ) @Schema ({ discriminatorKey : ' kind `}) export class Event { @Prop({ type: String, required: true, enum: [ClickedLinkEvent.name, SignUpEvent.name], }) kind: string; @Prop({ type: Date, required: true }) time: Date; } export const EventSchema = SchemaFactory.createForClass(Event); info Hint mongoose \u901a\u8fc7 discriminator key \u6765\u533a\u5206\u4e0d\u540c\u7684\u9274\u522b\u5668\u6a21\u578b\uff0c\u9ed8\u8ba4\u4e3a __t \u3002 Mongoose \u5c06\u4e00\u4e2a\u540d\u4e3a __t \u7684\u5b57\u7b26\u4e32\u8def\u5f84\u6dfb\u52a0\u5230\u60a8\u7684\u6a21\u5f0f\u4e2d\uff0c\u7528\u4e8e\u8ddf\u8e2a\u8be5\u6587\u6863\u662f\u54ea\u4e2a\u9274\u522b\u5668\u7684\u5b9e\u4f8b\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 discriminatorKey \u9009\u9879\u6765\u5b9a\u4e49\u533a\u5206\u7684\u8def\u5f84\u3002 SignedUpEvent \u548c clicklinkevent \u5b9e\u4f8b\u5c06\u4f5c\u4e3a\u901a\u7528\u4e8b\u4ef6\u5b58\u50a8\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49 clicklinkevent \u7c7b\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( click - link - event . schema ) @Schema () export class ClickedLinkEvent { kind : string ; time : Date ; @Prop ({ type : String , required : true }) url : string ; } export const ClickedLinkEventSchema = SchemaFactory . createForClass ( ClickedLinkEvent ); \u6dfb\u52a0 SignUpEvent \u7c7b: @ @filename ( sign - up - event . schema ) @Schema () export class SignUpEvent { kind : string ; time : Date ; @Prop ({ type : String , required : true }) user : string ; } export const SignUpEventSchema = SchemaFactory . createForClass ( SignUpEvent ); \u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528 discriminator \u9009\u9879\u4e3a\u7ed9\u5b9a\u7684\u6a21\u5f0f\u6ce8\u518c\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002 \u5b83\u5de5\u4f5c\u5728\u4e24\u4e2a `MongooseModule\u3002forFeature\u2019\u548c\u2018MongooseModule.forFeatureAsync\u201d: @ @filename ( event . module ) import { Module } from '@nestjs/common' ; import { MongooseModule } from '@nestjs/mongoose' ; @Module ({ imports : [ MongooseModule . forFeature ([ { name : Event.name , schema : EventSchema , discriminators : [ { name : ClickedLinkEvent.name , schema : ClickedLinkEventSchema }, { name : SignUpEvent.name , schema : SignUpEventSchema }, ], }, ]), ] }) export class EventsModule {}","title":"\u9274\u522b\u5668"},{"location":"techniques/mongo/#_7","text":"\u5728\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u907f\u514d\u4efb\u4f55\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4ece\u800c\u4f7f\u6211\u4eec\u7684\u6d4b\u8bd5\u5957\u4ef6\u8bbe\u7f6e\u8d77\u6765\u66f4\u7b80\u5355\uff0c\u6267\u884c\u8d77\u6765\u66f4\u5feb\u3002 \u4f46\u662f\u6211\u4eec\u7684\u7c7b\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4ece\u8fde\u63a5\u5b9e\u4f8b\u4e2d\u63d0\u53d6\u7684\u6a21\u578b\u3002 \u6211\u4eec\u5982\u4f55\u89e3\u6790\u8fd9\u4e9b\u7c7b?\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u6a21\u62df\u6a21\u578b\u3002 \u4e3a\u4e86\u7b80\u5316\u8fd9\u4e2a\u8fc7\u7a0b\uff0c @nestjs/mongoose \u5305\u516c\u5f00\u4e86\u4e00\u4e2a getModelToken() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6839\u636e\u4e00\u4e2a\u4ee4\u724c\u540d\u8fd4\u56de\u4e00\u4e2a\u51c6\u5907\u597d\u7684 \u6ce8\u5165\u4ee4\u724c \u3002 \u4f7f\u7528\u8fd9\u4e2a\u4ee4\u724c\uff0c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u7684 \u81ea\u5b9a\u4e49\u63d0\u4f9b\u5668 \u6280\u672f\u6765\u63d0\u4f9b\u4e00\u4e2a\u6a21\u62df\u5b9e\u73b0\uff0c\u5305\u62ec useClass \uff0c useValue \u548c useFactory \u3002\u4f8b\u5982: @Module ({ providers : [ CatsService , { provide : getModelToken ( Cat . name ), useValue : catModel , }, ], }) export class CatsModule {} \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5f53\u4efb\u4f55\u6d88\u8d39\u8005\u4f7f\u7528 @InjectModel() \u88c5\u9970\u5668\u6ce8\u5165 Model<Cat> \u65f6\uff0c\u5c31\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u786c\u7f16\u7801\u7684 catModel (\u5bf9\u8c61\u5b9e\u4f8b)\u3002","title":"\u6d4b\u8bd5"},{"location":"techniques/mongo/#_8","text":"\u5f53\u4f60\u9700\u8981\u5f02\u6b65\u800c\u4e0d\u662f\u9759\u6001\u4f20\u9012\u6a21\u5757\u9009\u9879\u65f6\uff0c\u4f7f\u7528 forRootAsync() \u65b9\u6cd5\u3002\u4e0e\u5927\u591a\u6570\u52a8\u6001\u6a21\u5757\u4e00\u6837\uff0cNest \u63d0\u4f9b\u4e86\u51e0\u79cd\u6280\u672f\u6765\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: MongooseModule . forRootAsync ({ useFactory : () => ({ uri : 'mongodb://localhost/nest' , }), }); \u50cf\u5176\u4ed6 \u5de5\u5382\u63d0\u4f9b\u5668 \u4e00\u6837\uff0c\u6211\u4eec\u7684\u5de5\u5382\u51fd\u6570\u53ef\u4ee5\u662f async \u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002 MongooseModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ uri : configService.get < string > ( 'MONGODB_URI' ), }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u5de5\u5382\u6765\u914d\u7f6e\u201cMongooseModule\u201d\uff0c\u5982\u4e0b\u6240\u793a: MongooseModule . forRootAsync ({ useClass : MongooseConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5b9e\u4f8b\u5316\u4e86 MongooseConfigService \u5728 MongooseModule \u4e2d\uff0c\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u6240\u9700\u7684\u9009\u9879\u5bf9\u8c61\u3002\u6ce8\u610f\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c MongooseConfigService \u5fc5\u987b\u5b9e\u73b0 MongooseOptionsFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a\u3002 MongooseModule \u5c06\u5728\u63d0\u4f9b\u7684\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u4e0a\u8c03\u7528 createMongooseOptions() \u65b9\u6cd5\u3002 @Injectable () class MongooseConfigService implements MongooseOptionsFactory { createMongooseOptions () : MongooseModuleOptions { return { uri : 'mongodb://localhost/nest' , }; } } \u5982\u679c\u4f60\u60f3\u91cd\u7528\u4e00\u4e2a\u73b0\u6709\u7684\u9009\u9879\u63d0\u4f9b\u5546\uff0c\u800c\u4e0d\u662f\u5728 MongooseModule \u4e2d\u521b\u5efa\u4e00\u4e2a\u79c1\u6709\u526f\u672c\uff0c\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 MongooseModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , });","title":"\u5f02\u6b65\u914d\u7f6e"},{"location":"techniques/mongo/#_9","text":"(https://github.com/nestjs/nest/tree/master/sample/06-mongoose).","title":"\u4f8b\u5b50"},{"location":"techniques/mvc/","text":"Model-View-Controller \u00b6 Nest, by default, makes use of the Express library under the hood. Hence, every technique for using the MVC (Model-View-Controller) pattern in Express applies to Nest as well. First, let's scaffold a simple Nest application using the CLI tool: $ npm i -g @nestjs/cli $ nest new project In order to create an MVC app, we also need a template engine to render our HTML views: $ npm install --save hbs We've used the hbs ( Handlebars ) engine, though you can use whatever fits your requirements. Once the installation process is complete, we need to configure the express instance using the following code: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { NestExpressApplication } from '@nestjs/platform-express' ; import { join } from 'path' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create < NestExpressApplication > ( AppModule , ); app . useStaticAssets ( join ( __dirname , '..' , 'public' )); app . setBaseViewsDir ( join ( __dirname , '..' , 'views' )); app . setViewEngine ( 'hbs' ); await app . listen ( 3000 ); } bootstrap (); @ @switch import { NestFactory } from '@nestjs/core' ; import { join } from 'path' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule , ); app . useStaticAssets ( join ( __dirname , '..' , 'public' )); app . setBaseViewsDir ( join ( __dirname , '..' , 'views' )); app . setViewEngine ( 'hbs' ); await app . listen ( 3000 ); } bootstrap (); We told Express that the public directory will be used for storing static assets, views will contain templates, and the hbs template engine should be used to render HTML output. Template rendering \u00b6 Now, let's create a views directory and index.hbs template inside it. In the template, we'll print a message passed from the controller: <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < title > App </ title > </ head > < body > {{ \"{{ message }\\}\" }} </ body > </ html > Next, open the app.controller file and replace the root() method with the following code: @ @filename ( app . controller ) import { Get , Controller , Render } from '@nestjs/common' ; @Controller () export class AppController { @Get () @Render ( 'index' ) root () { return { message : 'Hello world!' }; } } In this code, we are specifying the template to use in the @Render() decorator, and the return value of the route handler method is passed to the template for rendering. Notice that the return value is an object with a property message , matching the message placeholder we created in the template. While the application is running, open your browser and navigate to http://localhost:3000 . You should see the Hello world! message. Dynamic template rendering \u00b6 If the application logic must dynamically decide which template to render, then we should use the @Res() decorator, and supply the view name in our route handler, rather than in the @Render() decorator: info Hint When Nest detects the @Res() decorator, it injects the library-specific response object. We can use this object to dynamically render the template. Learn more about the response object API here . @ @filename ( app . controller ) import { Get , Controller , Res , Render } from '@nestjs/common' ; import { Response } from 'express' ; import { AppService } from './app.service' ; @Controller () export class AppController { constructor ( private appService : AppService ) {} @Get () root ( @Res () res : Response ) { return res . render ( this . appService . getViewName (), { message : 'Hello world!' }, ); } } Example \u00b6 A working example is available here . Fastify \u00b6 As mentioned in this chapter , we are able to use any compatible HTTP provider together with Nest. One such library is Fastify . In order to create an MVC application with Fastify, we have to install the following packages: $ npm i --save fastify-static point-of-view handlebars The next steps cover almost the same process used with Express, with minor differences specific to the platform. Once the installation process is complete, open the main.ts file and update its contents: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { NestFastifyApplication , FastifyAdapter } from '@nestjs/platform-fastify' ; import { AppModule } from './app.module' ; import { join } from 'path' ; async function bootstrap () { const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter (), ); app . useStaticAssets ({ root : join ( __dirname , '..' , 'public' ), prefix : '/public/' , }); app . setViewEngine ({ engine : { handlebars : require ( 'handlebars' ), }, templates : join ( __dirname , '..' , 'views' ), }); await app . listen ( 3000 ); } bootstrap (); @ @switch import { NestFactory } from '@nestjs/core' ; import { FastifyAdapter } from '@nestjs/platform-fastify' ; import { AppModule } from './app.module' ; import { join } from 'path' ; async function bootstrap () { const app = await NestFactory . create ( AppModule , new FastifyAdapter ()); app . useStaticAssets ({ root : join ( __dirname , '..' , 'public' ), prefix : '/public/' , }); app . setViewEngine ({ engine : { handlebars : require ( 'handlebars' ), }, templates : join ( __dirname , '..' , 'views' ), }); await app . listen ( 3000 ); } bootstrap (); The Fastify API is slightly different but the end result of those methods calls remains the same. One difference to notice with Fastify is that the template name passed into the @Render() decorator must include a file extension. @ @filename ( app . controller ) import { Get , Controller , Render } from '@nestjs/common' ; @Controller () export class AppController { @Get () @Render ( 'index.hbs' ) root () { return { message : 'Hello world!' }; } } While the application is running, open your browser and navigate to http://localhost:3000 . You should see the Hello world! message. Example \u00b6 A working example is available here .","title":"Model-View-Controller"},{"location":"techniques/mvc/#model-view-controller","text":"Nest, by default, makes use of the Express library under the hood. Hence, every technique for using the MVC (Model-View-Controller) pattern in Express applies to Nest as well. First, let's scaffold a simple Nest application using the CLI tool: $ npm i -g @nestjs/cli $ nest new project In order to create an MVC app, we also need a template engine to render our HTML views: $ npm install --save hbs We've used the hbs ( Handlebars ) engine, though you can use whatever fits your requirements. Once the installation process is complete, we need to configure the express instance using the following code: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { NestExpressApplication } from '@nestjs/platform-express' ; import { join } from 'path' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create < NestExpressApplication > ( AppModule , ); app . useStaticAssets ( join ( __dirname , '..' , 'public' )); app . setBaseViewsDir ( join ( __dirname , '..' , 'views' )); app . setViewEngine ( 'hbs' ); await app . listen ( 3000 ); } bootstrap (); @ @switch import { NestFactory } from '@nestjs/core' ; import { join } from 'path' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create ( AppModule , ); app . useStaticAssets ( join ( __dirname , '..' , 'public' )); app . setBaseViewsDir ( join ( __dirname , '..' , 'views' )); app . setViewEngine ( 'hbs' ); await app . listen ( 3000 ); } bootstrap (); We told Express that the public directory will be used for storing static assets, views will contain templates, and the hbs template engine should be used to render HTML output.","title":"Model-View-Controller"},{"location":"techniques/mvc/#template-rendering","text":"Now, let's create a views directory and index.hbs template inside it. In the template, we'll print a message passed from the controller: <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < title > App </ title > </ head > < body > {{ \"{{ message }\\}\" }} </ body > </ html > Next, open the app.controller file and replace the root() method with the following code: @ @filename ( app . controller ) import { Get , Controller , Render } from '@nestjs/common' ; @Controller () export class AppController { @Get () @Render ( 'index' ) root () { return { message : 'Hello world!' }; } } In this code, we are specifying the template to use in the @Render() decorator, and the return value of the route handler method is passed to the template for rendering. Notice that the return value is an object with a property message , matching the message placeholder we created in the template. While the application is running, open your browser and navigate to http://localhost:3000 . You should see the Hello world! message.","title":"Template rendering"},{"location":"techniques/mvc/#dynamic-template-rendering","text":"If the application logic must dynamically decide which template to render, then we should use the @Res() decorator, and supply the view name in our route handler, rather than in the @Render() decorator: info Hint When Nest detects the @Res() decorator, it injects the library-specific response object. We can use this object to dynamically render the template. Learn more about the response object API here . @ @filename ( app . controller ) import { Get , Controller , Res , Render } from '@nestjs/common' ; import { Response } from 'express' ; import { AppService } from './app.service' ; @Controller () export class AppController { constructor ( private appService : AppService ) {} @Get () root ( @Res () res : Response ) { return res . render ( this . appService . getViewName (), { message : 'Hello world!' }, ); } }","title":"Dynamic template rendering"},{"location":"techniques/mvc/#example","text":"A working example is available here .","title":"Example"},{"location":"techniques/mvc/#fastify","text":"As mentioned in this chapter , we are able to use any compatible HTTP provider together with Nest. One such library is Fastify . In order to create an MVC application with Fastify, we have to install the following packages: $ npm i --save fastify-static point-of-view handlebars The next steps cover almost the same process used with Express, with minor differences specific to the platform. Once the installation process is complete, open the main.ts file and update its contents: @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { NestFastifyApplication , FastifyAdapter } from '@nestjs/platform-fastify' ; import { AppModule } from './app.module' ; import { join } from 'path' ; async function bootstrap () { const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter (), ); app . useStaticAssets ({ root : join ( __dirname , '..' , 'public' ), prefix : '/public/' , }); app . setViewEngine ({ engine : { handlebars : require ( 'handlebars' ), }, templates : join ( __dirname , '..' , 'views' ), }); await app . listen ( 3000 ); } bootstrap (); @ @switch import { NestFactory } from '@nestjs/core' ; import { FastifyAdapter } from '@nestjs/platform-fastify' ; import { AppModule } from './app.module' ; import { join } from 'path' ; async function bootstrap () { const app = await NestFactory . create ( AppModule , new FastifyAdapter ()); app . useStaticAssets ({ root : join ( __dirname , '..' , 'public' ), prefix : '/public/' , }); app . setViewEngine ({ engine : { handlebars : require ( 'handlebars' ), }, templates : join ( __dirname , '..' , 'views' ), }); await app . listen ( 3000 ); } bootstrap (); The Fastify API is slightly different but the end result of those methods calls remains the same. One difference to notice with Fastify is that the template name passed into the @Render() decorator must include a file extension. @ @filename ( app . controller ) import { Get , Controller , Render } from '@nestjs/common' ; @Controller () export class AppController { @Get () @Render ( 'index.hbs' ) root () { return { message : 'Hello world!' }; } } While the application is running, open your browser and navigate to http://localhost:3000 . You should see the Hello world! message.","title":"Fastify"},{"location":"techniques/mvc/#example_1","text":"A working example is available here .","title":"Example"},{"location":"techniques/performance/","text":"\u6027\u80fd(Fastify) \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNest \u4f7f\u7528 Express \u6846\u67b6\u3002 \u5982\u524d\u6240\u8ff0\uff0cNest \u8fd8\u63d0\u4f9b\u4e86\u4e0e\u5176\u4ed6\u5e93\u7684\u517c\u5bb9\u6027\uff0c\u4f8b\u5982 Fastify \u3002 Nest \u901a\u8fc7\u5b9e\u73b0\u4e00\u4e2a\u6846\u67b6\u9002\u914d\u5668\u6765\u5b9e\u73b0\u8fd9\u79cd\u6846\u67b6\u72ec\u7acb\u6027\uff0c\u8be5\u9002\u914d\u5668\u7684\u4e3b\u8981\u529f\u80fd\u662f\u9488\u5bf9\u4ee3\u7406\u4e2d\u95f4\u4ef6\u548c\u9488\u5bf9\u7279\u5b9a\u4e8e\u5e93\u7684\u5b9e\u73b0\u7684\u5904\u7406\u7a0b\u5e8f\u3002 info Hint \u6ce8\u610f\uff0c\u4e3a\u4e86\u5b9e\u73b0\u6846\u67b6\u9002\u914d\u5668\uff0c\u76ee\u6807\u5e93\u5fc5\u987b\u63d0\u4f9b\u4e0e Express \u4e2d\u7c7b\u4f3c\u7684\u8bf7\u6c42/\u54cd\u5e94\u7ba1\u9053\u5904\u7406\u3002 Fastify \u4e3a Nest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u66ff\u4ee3\u6846\u67b6\uff0c\u56e0\u4e3a\u5b83\u4ee5\u7c7b\u4f3c\u4e8e Express \u7684\u65b9\u5f0f\u89e3\u51b3\u4e86\u8bbe\u8ba1\u95ee\u9898\u3002 \u7136\u800c\uff0cfastify \u6bd4 Express \u5feb\u5f97\u591a\uff0c\u5b9e\u73b0\u7684\u57fa\u51c6\u7ed3\u679c\u51e0\u4e4e\u662f Express \u7684\u4e24\u500d\u3002 \u4e00\u4e2a\u5408\u7406\u7684\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48 Nest \u4f7f\u7528 Express \u4f5c\u4e3a\u9ed8\u8ba4\u7684 HTTP \u63d0\u4f9b\u8005?\u539f\u56e0\u662f Express \u88ab\u5e7f\u6cdb\u4f7f\u7528\u3001\u4f17\u6240\u5468\u77e5\uff0c\u5e76\u4e14\u6709\u5927\u91cf\u517c\u5bb9\u7684\u4e2d\u95f4\u4ef6\uff0cNest \u7528\u6237\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528\u3002 \u4f46\u662f\u7531\u4e8e Nest \u63d0\u4f9b\u4e86\u6846\u67b6\u72ec\u7acb\u6027\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u5b83\u4eec\u4e4b\u95f4\u8fdb\u884c\u8fc1\u79fb\u3002 \u5f53\u60a8\u9ad8\u5ea6\u91cd\u89c6\u975e\u5e38\u5feb\u7684\u6027\u80fd\u65f6\uff0cFastify \u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9\u3002 \u8981\u4f7f\u7528 Fastify\uff0c\u53ea\u9700\u9009\u62e9\u672c\u7ae0\u6240\u793a\u7684\u5185\u7f6e FastifyAdapter \u3002 \u5b89\u88c5 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i --save @nestjs/platform-fastify warning Warning \u5f53\u4f7f\u7528 @nestjs/platform-fastify \u7248\u672c >=7.5.0 \u548c apolo -server-fastify \u65f6\uff0cGraphQL playground \u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e0e fastify version ^3.0.0 \u4e0d\u517c\u5bb9\u800c\u65e0\u6cd5\u5de5\u4f5c\u3002 \u60a8\u53ef\u80fd\u60f3\u4f7f\u7528\u4e0d\u7a33\u5b9a\u7684 apollo-server-fastify \u7248\u672c ^3.0.0-alpha\u30023 \u6216\u6682\u65f6\u9009\u62e9\u5feb\u9012\u4ee3\u66ff\u3002 \u9002\u914d\u5668 \u00b6 \u4e00\u65e6\u5b89\u88c5\u4e86 Fastify \u5e73\u53f0\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 FastifyAdapter \u3002 @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { FastifyAdapter , NestFastifyApplication , } from '@nestjs/platform-fastify' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter () ); await app . listen ( 3000 ); } bootstrap (); \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cFastify \u53ea\u4fa6\u542c localhost 127.0.0.1 \u63a5\u53e3( \u9605\u8bfb\u66f4\u591a )\u3002 \u5982\u679c\u4f60\u60f3\u5728\u5176\u4ed6\u4e3b\u673a\u4e0a\u63a5\u53d7\u8fde\u63a5\uff0c\u4f60\u5e94\u8be5\u5728 listen() \u8c03\u7528\u4e2d\u6307\u5b9a 0.0.0.0 : async function bootstrap () { const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter (), ); await app . listen ( 3000 , '0.0.0.0' ); } \u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u5305 \u00b6 \u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4f60\u4f7f\u7528 FastifyAdapter \u65f6\uff0cNest \u4f7f\u7528 Fastify \u4f5c\u4e3a HTTP \u63d0\u4f9b\u5668 \u3002 \u8fd9\u610f\u5473\u7740\uff0c\u6bcf\u4e2a\u4f9d\u8d56 Express \u7684\u914d\u65b9\u53ef\u80fd\u4e0d\u518d\u6709\u6548\u3002 \u76f8\u53cd\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528\u4e0e Fastify \u7b49\u4ef7\u7684\u5305\u3002 \u91cd\u5b9a\u5411\u54cd\u5e94 \u00b6 Fastify \u5904\u7406\u91cd\u5b9a\u5411\u54cd\u5e94\u7684\u65b9\u5f0f\u4e0e Express \u7565\u6709\u4e0d\u540c\u3002 \u8981\u4f7f\u7528 Fastify \u505a\u4e00\u4e2a\u9002\u5f53\u7684\u91cd\u5b9a\u5411\uff0c\u8fd4\u56de\u72b6\u6001\u7801\u548c URL\uff0c\u5982\u4e0b: @Get () index ( @Res () res ) { res . status ( 302 ). redirect ( '/login' ); } Fastify \u9009\u9879 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7 FastifyAdapter \u6784\u9020\u51fd\u6570\u5c06\u9009\u9879\u4f20\u9012\u7ed9 Fastify \u6784\u9020\u51fd\u6570\u3002 \u4f8b\u5982: new FastifyAdapter ({ logger : true }); \u4f8b\u5b50 \u00b6 \u6b64\u5904 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5de5\u4f5c\u793a\u4f8b\u3002","title":"\u6027\u80fd (Fastify)"},{"location":"techniques/performance/#fastify","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cNest \u4f7f\u7528 Express \u6846\u67b6\u3002 \u5982\u524d\u6240\u8ff0\uff0cNest \u8fd8\u63d0\u4f9b\u4e86\u4e0e\u5176\u4ed6\u5e93\u7684\u517c\u5bb9\u6027\uff0c\u4f8b\u5982 Fastify \u3002 Nest \u901a\u8fc7\u5b9e\u73b0\u4e00\u4e2a\u6846\u67b6\u9002\u914d\u5668\u6765\u5b9e\u73b0\u8fd9\u79cd\u6846\u67b6\u72ec\u7acb\u6027\uff0c\u8be5\u9002\u914d\u5668\u7684\u4e3b\u8981\u529f\u80fd\u662f\u9488\u5bf9\u4ee3\u7406\u4e2d\u95f4\u4ef6\u548c\u9488\u5bf9\u7279\u5b9a\u4e8e\u5e93\u7684\u5b9e\u73b0\u7684\u5904\u7406\u7a0b\u5e8f\u3002 info Hint \u6ce8\u610f\uff0c\u4e3a\u4e86\u5b9e\u73b0\u6846\u67b6\u9002\u914d\u5668\uff0c\u76ee\u6807\u5e93\u5fc5\u987b\u63d0\u4f9b\u4e0e Express \u4e2d\u7c7b\u4f3c\u7684\u8bf7\u6c42/\u54cd\u5e94\u7ba1\u9053\u5904\u7406\u3002 Fastify \u4e3a Nest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u66ff\u4ee3\u6846\u67b6\uff0c\u56e0\u4e3a\u5b83\u4ee5\u7c7b\u4f3c\u4e8e Express \u7684\u65b9\u5f0f\u89e3\u51b3\u4e86\u8bbe\u8ba1\u95ee\u9898\u3002 \u7136\u800c\uff0cfastify \u6bd4 Express \u5feb\u5f97\u591a\uff0c\u5b9e\u73b0\u7684\u57fa\u51c6\u7ed3\u679c\u51e0\u4e4e\u662f Express \u7684\u4e24\u500d\u3002 \u4e00\u4e2a\u5408\u7406\u7684\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48 Nest \u4f7f\u7528 Express \u4f5c\u4e3a\u9ed8\u8ba4\u7684 HTTP \u63d0\u4f9b\u8005?\u539f\u56e0\u662f Express \u88ab\u5e7f\u6cdb\u4f7f\u7528\u3001\u4f17\u6240\u5468\u77e5\uff0c\u5e76\u4e14\u6709\u5927\u91cf\u517c\u5bb9\u7684\u4e2d\u95f4\u4ef6\uff0cNest \u7528\u6237\u53ef\u4ee5\u5f00\u7bb1\u5373\u7528\u3002 \u4f46\u662f\u7531\u4e8e Nest \u63d0\u4f9b\u4e86\u6846\u67b6\u72ec\u7acb\u6027\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u5b83\u4eec\u4e4b\u95f4\u8fdb\u884c\u8fc1\u79fb\u3002 \u5f53\u60a8\u9ad8\u5ea6\u91cd\u89c6\u975e\u5e38\u5feb\u7684\u6027\u80fd\u65f6\uff0cFastify \u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9\u3002 \u8981\u4f7f\u7528 Fastify\uff0c\u53ea\u9700\u9009\u62e9\u672c\u7ae0\u6240\u793a\u7684\u5185\u7f6e FastifyAdapter \u3002","title":"\u6027\u80fd(Fastify)"},{"location":"techniques/performance/#_1","text":"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u6240\u9700\u7684\u8f6f\u4ef6\u5305: $ npm i --save @nestjs/platform-fastify warning Warning \u5f53\u4f7f\u7528 @nestjs/platform-fastify \u7248\u672c >=7.5.0 \u548c apolo -server-fastify \u65f6\uff0cGraphQL playground \u53ef\u80fd\u4f1a\u56e0\u4e3a\u4e0e fastify version ^3.0.0 \u4e0d\u517c\u5bb9\u800c\u65e0\u6cd5\u5de5\u4f5c\u3002 \u60a8\u53ef\u80fd\u60f3\u4f7f\u7528\u4e0d\u7a33\u5b9a\u7684 apollo-server-fastify \u7248\u672c ^3.0.0-alpha\u30023 \u6216\u6682\u65f6\u9009\u62e9\u5feb\u9012\u4ee3\u66ff\u3002","title":"\u5b89\u88c5"},{"location":"techniques/performance/#_2","text":"\u4e00\u65e6\u5b89\u88c5\u4e86 Fastify \u5e73\u53f0\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 FastifyAdapter \u3002 @ @filename ( main ) import { NestFactory } from '@nestjs/core' ; import { FastifyAdapter , NestFastifyApplication , } from '@nestjs/platform-fastify' ; import { AppModule } from './app.module' ; async function bootstrap () { const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter () ); await app . listen ( 3000 ); } bootstrap (); \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cFastify \u53ea\u4fa6\u542c localhost 127.0.0.1 \u63a5\u53e3( \u9605\u8bfb\u66f4\u591a )\u3002 \u5982\u679c\u4f60\u60f3\u5728\u5176\u4ed6\u4e3b\u673a\u4e0a\u63a5\u53d7\u8fde\u63a5\uff0c\u4f60\u5e94\u8be5\u5728 listen() \u8c03\u7528\u4e2d\u6307\u5b9a 0.0.0.0 : async function bootstrap () { const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter (), ); await app . listen ( 3000 , '0.0.0.0' ); }","title":"\u9002\u914d\u5668"},{"location":"techniques/performance/#_3","text":"\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4f60\u4f7f\u7528 FastifyAdapter \u65f6\uff0cNest \u4f7f\u7528 Fastify \u4f5c\u4e3a HTTP \u63d0\u4f9b\u5668 \u3002 \u8fd9\u610f\u5473\u7740\uff0c\u6bcf\u4e2a\u4f9d\u8d56 Express \u7684\u914d\u65b9\u53ef\u80fd\u4e0d\u518d\u6709\u6548\u3002 \u76f8\u53cd\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528\u4e0e Fastify \u7b49\u4ef7\u7684\u5305\u3002","title":"\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u5305"},{"location":"techniques/performance/#_4","text":"Fastify \u5904\u7406\u91cd\u5b9a\u5411\u54cd\u5e94\u7684\u65b9\u5f0f\u4e0e Express \u7565\u6709\u4e0d\u540c\u3002 \u8981\u4f7f\u7528 Fastify \u505a\u4e00\u4e2a\u9002\u5f53\u7684\u91cd\u5b9a\u5411\uff0c\u8fd4\u56de\u72b6\u6001\u7801\u548c URL\uff0c\u5982\u4e0b: @Get () index ( @Res () res ) { res . status ( 302 ). redirect ( '/login' ); }","title":"\u91cd\u5b9a\u5411\u54cd\u5e94"},{"location":"techniques/performance/#fastify_1","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7 FastifyAdapter \u6784\u9020\u51fd\u6570\u5c06\u9009\u9879\u4f20\u9012\u7ed9 Fastify \u6784\u9020\u51fd\u6570\u3002 \u4f8b\u5982: new FastifyAdapter ({ logger : true });","title":"Fastify \u9009\u9879"},{"location":"techniques/performance/#_5","text":"\u6b64\u5904 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5de5\u4f5c\u793a\u4f8b\u3002","title":"\u4f8b\u5b50"},{"location":"techniques/queues/","text":"\u961f\u5217 \u00b6 \u961f\u5217\u662f\u4e00\u79cd\u529f\u80fd\u5f3a\u5927\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u5904\u7406\u5e38\u89c1\u7684\u5e94\u7528\u7a0b\u5e8f\u6269\u5c55\u548c\u6027\u80fd\u6311\u6218\u3002 \u961f\u5217\u53ef\u4ee5\u5e2e\u52a9\u4f60\u89e3\u51b3\u7684\u4e00\u4e9b\u95ee\u9898\u793a\u4f8b\u5982\u4e0b: \u5e73\u6ed1\u5904\u7406\u5cf0\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u542f\u52a8\u8d44\u6e90\u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u5219\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4efb\u52a1\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u800c\u4e0d\u662f\u540c\u6b65\u6267\u884c\u5b83\u4eec\u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u8ba9\u5de5\u4f5c\u8fdb\u7a0b\u4ee5\u53d7\u63a7\u7684\u65b9\u5f0f\u4ece\u961f\u5217\u4e2d\u62c9\u51fa\u4efb\u52a1\u3002 \u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u6dfb\u52a0\u65b0\u7684\u961f\u5217\u4f7f\u7528\u8005\uff0c\u4ee5\u4fbf\u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u7684\u6269\u5c55\u800c\u6269\u5c55\u540e\u7aef\u4efb\u52a1\u5904\u7406\u3002 \u5206\u89e3\u53ef\u80fd\u4f1a\u963b\u585e Node.js \u4e8b\u4ef6\u5faa\u73af\u7684\u5355\u5757\u4efb\u52a1\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u7528\u6237\u8bf7\u6c42\u9700\u8981\u50cf\u97f3\u9891\u8f6c\u7801\u8fd9\u6837\u7684 CPU \u5bc6\u96c6\u578b\u5de5\u4f5c\uff0c\u60a8\u53ef\u4ee5\u5c06\u6b64\u4efb\u52a1\u59d4\u6258\u7ed9\u5176\u4ed6\u8fdb\u7a0b\uff0c\u4ece\u800c\u91ca\u653e\u9762\u5411\u7528\u6237\u7684\u8fdb\u7a0b\u4ee5\u4fdd\u6301\u54cd\u5e94\u3002 \u5728\u5404\u79cd\u670d\u52a1\u4e4b\u95f4\u63d0\u4f9b\u53ef\u9760\u7684\u901a\u4fe1\u901a\u9053\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a\u8fdb\u7a0b\u6216\u670d\u52a1\u4e2d\u5bf9\u4efb\u52a1(\u4f5c\u4e1a)\u6392\u961f\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6216\u670d\u52a1\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002 \u60a8\u53ef\u4ee5\u5728\u4f5c\u4e1a\u751f\u547d\u5468\u671f\u4e2d\u7684\u4efb\u4f55\u6d41\u7a0b\u6216\u670d\u52a1\u5b8c\u6210\u3001\u9519\u8bef\u6216\u5176\u4ed6\u72b6\u6001\u66f4\u6539\u65f6\u6536\u5230\u901a\u77e5(\u901a\u8fc7\u4fa6\u542c\u72b6\u6001\u4e8b\u4ef6)\u3002 \u5f53\u961f\u5217\u7684\u751f\u4ea7\u8005\u6216\u6d88\u8d39\u8005\u5931\u8d25\u65f6\uff0c\u5b83\u4eec\u7684\u72b6\u6001\u88ab\u4fdd\u7559\uff0c\u4efb\u52a1\u5904\u7406\u53ef\u4ee5\u5728\u8282\u70b9\u91cd\u542f\u65f6\u81ea\u52a8\u91cd\u542f\u3002 Nest \u63d0\u4f9b\u4e86 @nestjs/bull \u5305\uff0c\u4f5c\u4e3a Bull \u7684\u62bd\u8c61/\u5305\u88c5\uff0c\u8fd9\u662f\u4e00\u4e2a\u6d41\u884c\u7684\u3001\u652f\u6301\u826f\u597d\u7684\u3001\u57fa\u4e8e Node.js \u7684\u9ad8\u6027\u80fd\u961f\u5217\u7cfb\u7edf\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u5305\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5c06 Bull Queues \u4ee5\u4e00\u79cd nest \u53cb\u597d\u7684\u65b9\u5f0f\u96c6\u6210\u5230\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 Bull \u4f7f\u7528 Redis \u6765\u4fdd\u5b58\u4f5c\u4e1a\u6570\u636e\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5728\u4f60\u7684\u7cfb\u7edf\u4e0a\u5b89\u88c5 Redis\u3002 \u56e0\u4e3a\u5b83\u662f Redis-backed\uff0c\u6240\u4ee5\u60a8\u7684 Queue \u4f53\u7cfb\u7ed3\u6784\u53ef\u4ee5\u662f\u5b8c\u5168\u5206\u5e03\u5f0f\u7684\u548c\u5e73\u53f0\u65e0\u5173\u7684\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8ba9\u4e00\u4e9b Queue \u751f\u4ea7\u8005 \u3001 \u6d88\u8d39\u8005 \u548c \u76d1\u542c\u5668 \u8fd0\u884c\u5728\u4e00\u4e2a(\u6216\u591a\u4e2a)\u8282\u70b9\u7684 Nest \u4e2d\uff0c\u800c\u5176\u4ed6\u751f\u4ea7\u8005\u3001\u6d88\u8d39\u8005\u548c\u76d1\u542c\u5668\u8fd0\u884c\u5728\u5176\u4ed6\u7f51\u7edc\u8282\u70b9\u7684\u5176\u4ed6 Node.js \u5e73\u53f0\u4e0a\u3002 \u672c\u7ae0\u4ecb\u7ecd\u4e86 @nestjs/bull \u5305\u3002 \u6211\u4eec\u8fd8\u5efa\u8bae\u9605\u8bfb Bull \u6587\u6863 \u4ee5\u83b7\u5f97\u66f4\u591a\u80cc\u666f\u548c\u5177\u4f53\u7684\u5b9e\u73b0\u7ec6\u8282\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm install --save @nestjs/bull bull $ npm install --save-dev @types/bull \u4e00\u65e6\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06 BullModule \u5bfc\u5165\u5230\u6839\u76ee\u5f55 AppModule \u4e2d\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { BullModule } from '@nestjs/bull' ; @Module ({ imports : [ BullModule . forRoot ({ redis : { host : 'localhost' , port : 6379 , }, }), ], }) export class AppModule {} forRoot() \u65b9\u6cd5\u7528\u4e8e\u6ce8\u518c\u4e00\u4e2a bull \u5305\u914d\u7f6e\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c06\u88ab\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ce8\u518c\u7684\u6240\u6709\u961f\u5217\u4f7f\u7528(\u9664\u975e\u53e6\u6709\u8bf4\u660e)\u3002\u914d\u7f6e\u5bf9\u8c61\u7531\u4ee5\u4e0b\u5c5e\u6027\u7ec4\u6210: limiter: RateLimiter - \u7528\u4e8e\u63a7\u5236\u961f\u5217\u4f5c\u4e1a\u7684\u5904\u7406\u901f\u5ea6\u7684\u9009\u9879\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 RateLimiter \u3002 \u53ef\u9009\u7684\u3002 redis: RedisOpts - \u914d\u7f6e Redis \u8fde\u63a5\u7684\u9009\u9879\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 RedisOpts \u3002 \u53ef\u9009\u7684\u3002 prefix: string - \u6240\u6709\u961f\u5217\u952e\u7684\u524d\u7f00\u3002\u53ef\u9009\u7684\u3002 defaultJobOptions: JobOpts - \u7528\u4e8e\u63a7\u5236\u65b0\u4f5c\u4e1a\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u9009\u9879\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 JobOpts \u3002 \u53ef\u9009\u7684\u3002 settings: AdvancedSettings - \u9ad8\u7ea7\u961f\u5217\u914d\u7f6e\u8bbe\u7f6e\u3002 \u8fd9\u4e9b\u901a\u5e38\u4e0d\u5e94\u66f4\u6539\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 AdvancedSettings \u3002 \u53ef\u9009\u7684\u3002 \u6240\u6709\u9009\u9879\u90fd\u662f\u53ef\u9009\u7684\uff0c\u63d0\u4f9b\u4e86\u5bf9\u961f\u5217\u884c\u4e3a\u7684\u8be6\u7ec6\u63a7\u5236\u3002\u8fd9\u4e9b\u88ab\u76f4\u63a5\u4f20\u9012\u7ed9 Bull Queue \u6784\u9020\u51fd\u6570\u3002 \u6709\u5173\u8fd9\u4e9b\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f \u5728\u8fd9\u91cc \u3002 \u8981\u6ce8\u518c\u4e00\u4e2a\u961f\u5217\uff0c\u8bf7\u5bfc\u5165 BullModule#registerQueue() \u52a8\u6001\u6a21\u5757\uff0c\u5982\u4e0b\u6240\u793a: BullModule . registerQueue ({ name : 'audio' , }); info Hint \u901a\u8fc7\u5c06\u591a\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u914d\u7f6e\u5bf9\u8c61\u4f20\u9012\u7ed9 registerQueue() \u65b9\u6cd5\u6765\u521b\u5efa\u591a\u4e2a\u961f\u5217\u3002 registerQueue() \u65b9\u6cd5\u7528\u4e8e\u5b9e\u4f8b\u5316\u548c/\u6216\u6ce8\u518c\u961f\u5217\u3002 \u961f\u5217\u662f\u8de8\u6a21\u5757\u548c\u8fdb\u7a0b\u5171\u4eab\u7684\uff0c\u8fde\u63a5\u5230\u76f8\u540c\u7684\u57fa\u7840 Redis \u6570\u636e\u5e93\u5177\u6709\u76f8\u540c\u7684\u51ed\u636e\u3002 \u6bcf\u4e2a\u961f\u5217\u7684 name \u5c5e\u6027\u90fd\u662f\u552f\u4e00\u7684\u3002 \u961f\u5217\u540d\u65e2\u53ef\u4ee5\u7528\u4f5c\u6ce8\u5165\u4ee4\u724c(\u7528\u4e8e\u5c06\u961f\u5217\u6ce8\u5165\u5230\u63a7\u5236\u5668/\u63d0\u4f9b\u8005\u4e2d)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u88c5\u9970\u5668\u7684\u53c2\u6570\uff0c\u7528\u4e8e\u5c06\u6d88\u8d39\u8005\u7c7b\u548c\u4fa6\u542c\u5668\u4e0e\u961f\u5217\u5173\u8054\u8d77\u6765\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8986\u76d6\u7279\u5b9a\u961f\u5217\u7684\u4e00\u4e9b\u9884\u5148\u914d\u7f6e\u7684\u9009\u9879\uff0c\u5982\u4e0b\u6240\u793a: BullModule . registerQueue ({ name : 'audio' , redis : { port : 6380 , }, }); \u7531\u4e8e\u4efb\u52a1\u88ab\u6301\u4e45\u5316\u5728 Redis \u4e2d\uff0c\u6bcf\u6b21\u5b9e\u4f8b\u5316\u4e00\u4e2a\u7279\u5b9a\u7684\u547d\u540d\u961f\u5217(\u4f8b\u5982\uff0c\u5f53\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8/\u91cd\u542f)\uff0c\u5b83\u8bd5\u56fe\u5904\u7406\u4efb\u4f55\u65e7\u7684\u4efb\u52a1\uff0c\u53ef\u80fd\u5b58\u5728\u4e8e\u524d\u4e00\u4e2a\u672a\u5b8c\u6210\u7684\u4f1a\u8bdd\u3002 \u6bcf\u4e2a\u961f\u5217\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u751f\u4ea7\u8005\u3001\u6d88\u8d39\u8005\u548c\u4fa6\u542c\u5668\u3002\u6d88\u8d39\u8005\u6309\u7167\u7279\u5b9a\u7684\u987a\u5e8f\u4ece\u961f\u5217\u4e2d\u68c0\u7d22\u4f5c\u4e1a:FIFO(\u9ed8\u8ba4)\u3001LIFO \u6216\u6839\u636e\u4f18\u5148\u7ea7\u3002 \u8fd9\u91cc \u8ba8\u8bba\u4e86\u63a7\u5236\u961f\u5217\u5904\u7406\u987a\u5e8f\u3002 \u547d\u540d\u914d\u7f6e \u00b6 \u5982\u679c\u4f60\u7684\u961f\u5217\u8fde\u63a5\u5230\u591a\u4e2a\u4e0d\u540c\u7684 Redis \u5b9e\u4f8b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u53eb\u505a named configurations \u7684\u6280\u672f\u3002 \u8fd9\u4e2a\u7279\u6027\u5141\u8bb8\u60a8\u5728\u6307\u5b9a\u7684\u952e\u4e0b\u6ce8\u518c\u51e0\u4e2a\u914d\u7f6e\uff0c\u7136\u540e\u60a8\u53ef\u4ee5\u5728\u961f\u5217\u9009\u9879\u4e2d\u5f15\u7528\u5b83\u4eec\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u989d\u5916\u7684 Redis \u5b9e\u4f8b(\u9664\u4e86\u9ed8\u8ba4\u7684)\uff0c\u88ab\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ce8\u518c\u7684\u51e0\u4e2a\u961f\u5217\u4f7f\u7528\uff0c\u4f60\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u6ce8\u518c\u5b83\u7684\u914d\u7f6e: BullModule . forRoot ( 'alternative-config' , { redis : { port : 6381 , }, }); \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c 'alternative-config' \u53ea\u662f\u4e00\u4e2a\u914d\u7f6e\u952e(\u5b83\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32)\u3002 \u6709\u4e86\u8fd9\u4e2a\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u5728 registerQueue() \u9009\u9879\u5bf9\u8c61\u4e2d\u6307\u5411\u8fd9\u4e2a\u914d\u7f6e: BullModule . registerQueue ({ configKey : 'alternative-queue' name : 'video' , }); \u751f\u4ea7\u8005 \u00b6 \u4f5c\u4e1a\u751f\u6210\u5668\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002 \u751f\u4ea7\u8005\u901a\u5e38\u662f\u5e94\u7528\u670d\u52a1(Nest providers )\u3002\u8981\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u9996\u5148\u8981\u5c06\u961f\u5217\u6ce8\u5165\u5230\u670d\u52a1\u4e2d\uff0c\u5982\u4e0b\u6240\u793a: import { Injectable } from '@nestjs/common' ; import { Queue } from 'bull' ; import { InjectQueue } from '@nestjs/bull' ; @Injectable () export class AudioService { constructor ( @InjectQueue ( 'audio' ) private audioQueue : Queue ) {} } info Hint @InjectQueue() \u88c5\u9970\u5668\u901a\u8fc7\u5b83\u7684\u540d\u5b57\u6765\u6807\u8bc6\u961f\u5217\uff0c\u5c31\u50cf\u5728 registerQueue() \u65b9\u6cd5\u8c03\u7528\u4e2d\u63d0\u4f9b\u7684(\u4f8b\u5982\uff0c audio )\u3002 \u73b0\u5728\uff0c\u901a\u8fc7\u8c03\u7528\u961f\u5217\u7684 add() \u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u5e76\u4f20\u9012\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u4f5c\u4e1a\u5bf9\u8c61\u3002 \u4f5c\u4e1a\u88ab\u8868\u793a\u4e3a\u53ef\u5e8f\u5217\u5316\u7684 JavaScript \u5bf9\u8c61(\u56e0\u4e3a\u8fd9\u662f\u5b83\u4eec\u5b58\u50a8\u5728 Redis \u6570\u636e\u5e93\u4e2d\u7684\u65b9\u5f0f)\u3002 \u4f60\u901a\u8fc7\u7684\u4efb\u52a1\u7684\u5f62\u72b6\u662f\u4efb\u610f\u7684;\u4f7f\u7528\u5b83\u6765\u8868\u793a\u4f5c\u4e1a\u5bf9\u8c61\u7684\u8bed\u4e49\u3002 const job = await this . audioQueue . add ({ foo : 'bar' , }); \u6307\u5b9a\u7684\u5de5\u4f5c \u00b6 Jobs \u53ef\u80fd\u6709\u72ec\u7279\u7684\u540d\u5b57\u3002\u8fd9\u5141\u8bb8\u60a8\u521b\u5efa\u4e13\u95e8\u7684 consumer \uff0c\u5b83\u5c06\u53ea\u5904\u7406\u5177\u6709\u7ed9\u5b9a\u540d\u79f0\u7684\u4f5c\u4e1a\u3002 const job = await this . audioQueue . add ( 'transcode' , { foo : 'bar' , }); Warning Warning \u5728\u4f7f\u7528\u547d\u540d\u4f5c\u4e1a\u65f6\uff0c\u5fc5\u987b\u4e3a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u6bcf\u4e2a\u60df\u4e00\u540d\u79f0\u521b\u5efa\u5904\u7406\u5668\uff0c\u5426\u5219\u961f\u5217\u5c06\u62b1\u6028\u60a8\u7f3a\u5c11\u7ed9\u5b9a\u4f5c\u4e1a\u7684\u5904\u7406\u5668\u3002\u6709\u5173\u4f7f\u7528\u547d\u540d\u4f5c\u4e1a\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 here \u3002 \u4f5c\u4e1a\u9009\u9879 \u00b6 \u4f5c\u4e1a\u53ef\u4ee5\u6709\u4e0e\u4e4b\u5173\u8054\u7684\u5176\u4ed6\u9009\u9879\u3002\u5728 Queue.add() \u65b9\u6cd5\u7684 job \u53c2\u6570\u540e\u4f20\u9012\u4e00\u4e2a options \u5bf9\u8c61\u3002\u4f5c\u4e1a\u9009\u9879\u5c5e\u6027\u5982\u4e0b: priority : number - \u53ef\u9009\u7684\u4f18\u5148\u7ea7\u503c\u3002\u53d6\u503c\u8303\u56f4\u4e3a 1(\u6700\u9ad8\u4f18\u5148\u7ea7)\u5230 MAX_INT(\u6700\u4f4e\u4f18\u5148\u7ea7)\u3002\u6ce8\u610f\uff0c\u4f7f\u7528\u4f18\u5148\u7ea7\u5bf9\u6027\u80fd\u6709\u8f7b\u5fae\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u8981\u8c28\u614e\u4f7f\u7528\u3002 delay : number - \u7b49\u5f85\u8be5\u4f5c\u4e1a\u88ab\u5904\u7406\u4e4b\u524d\u7684\u65f6\u95f4(\u6beb\u79d2)\u3002\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u83b7\u5f97\u51c6\u786e\u7684\u5ef6\u8fdf\uff0c\u670d\u52a1\u5668\u548c\u5ba2\u6237\u673a\u7684\u65f6\u949f\u90fd\u5e94\u8be5\u540c\u6b65\u3002 attempts : number - \u5728\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u5c1d\u8bd5\u6267\u884c\u8be5\u4efb\u52a1\u7684\u603b\u6b21\u6570\u3002 repeat : RepeatOpts - \u6839\u636e cron \u89c4\u8303\u91cd\u590d\u4f5c\u4e1a\u3002\u67e5\u770b RepeatOpts . backoff : number | BackoffOpts - \u4efb\u52a1\u5931\u8d25\u65f6\u81ea\u52a8\u91cd\u8bd5\u7684\u540e\u9000\u8bbe\u7f6e\u3002\u67e5\u770b BackoffOpts . lifo : boolean - \u5982\u679c\u4e3a true\uff0c\u5219\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u7684\u53f3\u7aef\u800c\u4e0d\u662f\u5de6\u7aef(\u9ed8\u8ba4\u4e3a false)\u3002 timeout : number - \u4f5c\u4e1a\u5931\u8d25\u5e76\u51fa\u73b0\u8d85\u65f6\u9519\u8bef\u7684\u6beb\u79d2\u6570\u3002 jobId : number | string - \u8986\u76d6\u4f5c\u4e1a ID - \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f5c\u4e1a ID \u662f\u552f\u4e00\u7684\u6574\u6570\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u8bbe\u7f6e\u6765\u8986\u76d6\u5b83\u3002\u5982\u679c\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u5219\u7531\u60a8\u6765\u786e\u4fdd jobId \u662f\u552f\u4e00\u7684\u3002\u5982\u679c\u5c1d\u8bd5\u6dfb\u52a0 id \u5df2\u7ecf\u5b58\u5728\u7684\u4f5c\u4e1a\uff0c\u5219\u4e0d\u4f1a\u6dfb\u52a0\u8be5\u4f5c\u4e1a\u3002 removeOnComplete : boolean | number - \u5982\u679c\u4e3a true\uff0c\u5219\u5728\u4f5c\u4e1a\u6210\u529f\u5b8c\u6210\u65f6\u79fb\u9664\u4f5c\u4e1a\u3002\u4e00\u4e2a\u6570\u5b57\u6307\u5b9a\u8981\u4fdd\u7559\u7684\u4f5c\u4e1a\u6570\u91cf\u3002\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u4f5c\u4e1a\u4fdd\u5b58\u5728\u5df2\u5b8c\u6210\u7684\u96c6\u4e2d\u3002 removeOnFail : boolean | number - \u5982\u679c\u4e3a true\uff0c\u5219\u5728\u6240\u6709\u5c1d\u8bd5\u90fd\u5931\u8d25\u540e\u5220\u9664\u4f5c\u4e1a\u3002\u4e00\u4e2a\u6570\u5b57\u6307\u5b9a\u8981\u4fdd\u7559\u7684\u4f5c\u4e1a\u6570\u91cf\u3002\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u4f5c\u4e1a\u4fdd\u7559\u5728\u5931\u8d25\u96c6\u4e2d\u3002 stackTraceLimit : number - \u9650\u5236\u5c06\u5728\u5806\u6808\u8ddf\u8e2a\u4e2d\u8bb0\u5f55\u7684\u5806\u6808\u8ddf\u8e2a\u884c\u6570\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u4f7f\u7528\u5de5\u4f5c\u9009\u9879\u5b9a\u5236\u5de5\u4f5c\u7684\u4f8b\u5b50\u3002 \u82e5\u8981\u5ef6\u8fdf\u4f5c\u4e1a\u7684\u542f\u52a8\uff0c\u8bf7\u4f7f\u7528 delay \u914d\u7f6e\u5c5e\u6027\u3002 const job = await this . audioQueue . add ( { foo : 'bar' , }, { delay : 3000 }, // 3 seconds delayed ); \u8981\u5c06\u4e00\u4e2a\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u7684\u53f3\u7aef(\u5c06\u4f5c\u4e1a\u5904\u7406\u4e3a LIFO (\u540e\u8fdb\u5148\u51fa))\uff0c\u8bf7\u5c06\u914d\u7f6e\u5bf9\u8c61\u7684 lifo \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u3002 const job = await this . audioQueue . add ( { foo : 'bar' , }, { lifo : true }, ); \u8981\u5bf9\u5de5\u4f5c\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u8bf7\u4f7f\u7528 priority \u5c5e\u6027\u3002 const job = await this . audioQueue . add ( { foo : 'bar' , }, { priority : 2 }, ); \u6d88\u8d39\u8005 \u00b6 consumer \u662f\u4e00\u4e2a\u5b9a\u4e49\u65b9\u6cd5\u7684 \u7c7b \uff0c\u7528\u6765\u5904\u7406\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u4efb\u52a1\uff0c\u6216\u8005\u76d1\u542c\u961f\u5217\u4e0a\u7684\u4e8b\u4ef6\uff0c\u6216\u8005\u4e24\u8005\u517c\u6709\u3002\u4f7f\u7528 @Processor() \u88c5\u9970\u5668\u6765\u58f0\u660e\u4e00\u4e2a\u6d88\u8d39\u8005\u7c7b\uff0c\u5982\u4e0b\u6240\u793a: import { Processor } from '@nestjs/bull' ; @Processor ( 'audio' ) export class AudioConsumer {} info Hint \u6d88\u8d39\u8005\u5fc5\u987b\u6ce8\u518c\u4e3a providers \uff0c\u8fd9\u6837 @nestjs/bull \u5305\u624d\u80fd\u628a\u4ed6\u4eec\u53d6\u8d70\u3002 \u5176\u4e2d\uff0c\u88c5\u9970\u5668\u7684\u5b57\u7b26\u4e32\u53c2\u6570(e.g., 'audio' )\u662f\u8981\u4e0e\u7c7b\u65b9\u6cd5\u5173\u8054\u7684\u961f\u5217\u7684\u540d\u79f0\u3002 \u5728\u6d88\u8d39\u8005\u7c7b\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528 @Process() \u88c5\u9970\u5668\u88c5\u9970\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u6765\u58f0\u660e\u4f5c\u4e1a\u5904\u7406\u7a0b\u5e8f\u3002 import { Processor , Process } from '@nestjs/bull' ; import { Job } from 'bull' ; @Processor ( 'audio' ) export class AudioConsumer { @Process () async transcode ( job : Job < unknown > ) { let progress = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { await doSomething ( job . data ); progress += 10 ; await job . progress ( progress ); } return {}; } } \u6bcf\u5f53 worker \u7a7a\u95f2\u4e14\u961f\u5217\u4e2d\u6709\u4f5c\u4e1a\u9700\u8981\u5904\u7406\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u88c5\u9970\u65b9\u6cd5(\u4f8b\u5982, transcode() )\u3002 \u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u63a5\u6536 job \u5bf9\u8c61\u4f5c\u4e3a\u5b83\u7684\u552f\u4e00\u53c2\u6570\u3002 \u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u8fd4\u56de\u7684\u503c\u5b58\u50a8\u5728\u4f5c\u4e1a\u5bf9\u8c61\u4e2d\uff0c\u4ee5\u540e\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f8b\u5982\u5728\u5df2\u5b8c\u6210\u4e8b\u4ef6\u7684\u4fa6\u542c\u5668\u4e2d\u8bbf\u95ee\u3002 Job \u5bf9\u8c61\u6709\u591a\u4e2a\u65b9\u6cd5\uff0c\u5141\u8bb8\u4f60\u4e0e\u5b83\u4eec\u7684\u72b6\u6001\u8fdb\u884c\u4ea4\u4e92\u3002 \u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4f7f\u7528 progress() \u65b9\u6cd5\u6765\u66f4\u65b0\u4f5c\u4e1a\u7684\u8fdb\u5ea6\u3002 \u8bf7\u53c2\u9605 \u8fd9\u91cc \u83b7\u5f97\u5b8c\u6574\u7684 Job \u5bf9\u8c61 API \u53c2\u8003\u3002 \u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u4f5c\u4e1a\u5904\u7406\u65b9\u6cd5\u5c06\u53ea\u5904\u7406\u7279\u5b9a\u7c7b\u578b\u7684\u4f5c\u4e1a(\u5e26\u6709\u7279\u5b9a name \u7684\u4f5c\u4e1a)\uff0c\u65b9\u6cd5\u662f\u5c06\u8fd9\u4e2a name \u4f20\u9012\u7ed9 @Process() \u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6d88\u8d39\u8005\u7c7b\u4e2d\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a @Process() \u5904\u7406\u7a0b\u5e8f\uff0c\u5bf9\u5e94\u4e8e\u6bcf\u4e2a\u4f5c\u4e1a\u7c7b\u578b( name )\u3002 \u5728\u4f7f\u7528\u547d\u540d\u4f5c\u4e1a\u65f6\uff0c\u8bf7\u786e\u4fdd\u6bcf\u4e2a\u540d\u79f0\u5bf9\u5e94\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u3002 @Process ( 'transcode' ) async transcode ( job : Job < unknown > ) { ... } \u8bf7\u6c42\u8303\u56f4\u5185\u6d88\u8d39\u8005 \u00b6 \u5f53\u4e00\u4e2a\u6d88\u8d39\u8005\u88ab\u6807\u8bb0\u4e3a\u8bf7\u6c42\u4f5c\u7528\u57df(\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6ce8\u5165\u4f5c\u7528\u57df\u7684\u4fe1\u606f \u8fd9\u91cc )\u65f6\uff0c\u7c7b\u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u5c06\u4e13\u95e8\u4e3a\u6bcf\u4e2a\u4f5c\u4e1a\u521b\u5efa\u3002 \u8be5\u5b9e\u4f8b\u5c06\u5728\u4efb\u52a1\u5b8c\u6210\u540e\u88ab\u5783\u573e\u56de\u6536\u3002 @Processor ({ name : 'audio' , scope : Scope.REQUEST , }) \u7531\u4e8e\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u6d88\u8d39\u8005\u7c7b\u662f\u52a8\u6001\u5b9e\u4f8b\u5316\u7684\uff0c\u5e76\u4e14\u4f5c\u7528\u57df\u4e3a\u5355\u4e2a\u4f5c\u4e1a\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u65b9\u6cd5\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6ce8\u5165 JOB_REF \u3002 constructor ( @Inject ( JOB_REF ) jobRef : Job ) { console . log ( jobRef ); } info Hint \u4ee4\u724c JOB_REF \u662f\u4ece @nestjs/bull \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4e8b\u4ef6\u76d1\u542c\u5668 \u00b6 \u5f53\u961f\u5217\u548c/\u6216\u4f5c\u4e1a\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0cBull \u4f1a\u751f\u6210\u4e00\u7ec4\u6709\u7528\u7684\u4e8b\u4ef6\u3002Nest \u63d0\u4f9b\u4e86\u4e00\u7ec4\u88c5\u9970\u5668\uff0c\u5141\u8bb8\u8ba2\u9605\u4e00\u7ec4\u6838\u5fc3\u6807\u51c6\u4e8b\u4ef6\u3002\u8fd9\u4e9b\u90fd\u662f\u4ece @nestjs/bull \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 \u4e8b\u4ef6\u76d1\u542c\u5668\u5fc5\u987b\u5728 consumer \u7c7b\u4e2d\u58f0\u660e(\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u7528 @Processor() \u88c5\u9970\u5668\u88c5\u9970\u7684\u7c7b\u4e2d)\u3002 \u8981\u76d1\u542c\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8bf7\u4f7f\u7528\u4e0b\u8868\u4e2d\u7684\u4e00\u4e2a\u88c5\u9970\u5668\u6765\u58f0\u660e\u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u4f8b\u5982\uff0c\u8981\u76d1\u542c\u5f53\u4f5c\u4e1a\u8fdb\u5165 audio \u961f\u5217\u4e2d\u7684\u6d3b\u52a8\u72b6\u6001\u65f6\u53d1\u51fa\u7684\u4e8b\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020: import { Processor , Process } from '@nestjs/bull' ; import { Job } from 'bull' ; @Processor ( 'audio' ) export class AudioConsumer { @OnQueueActive () onActive ( job : Job ) { console . log ( `Processing job ${ job . id } of type ${ job . name } with data ${ job . data } ...` , ); } ... \u7531\u4e8e Bull \u662f\u5728\u5206\u5e03\u5f0f(\u591a\u8282\u70b9)\u73af\u5883\u4e2d\u8fd0\u884c\u7684\uff0c\u56e0\u6b64\u5b83\u5b9a\u4e49\u4e86\u4e8b\u4ef6\u5c40\u90e8\u6027\u7684\u6982\u5ff5\u3002 \u8fd9\u4e2a\u6982\u5ff5\u8ba4\u8bc6\u5230\uff0c\u4e8b\u4ef6\u53ef\u4ee5\u5b8c\u5168\u5728\u5355\u4e2a\u8fdb\u7a0b\u4e2d\u89e6\u53d1\uff0c\u4e5f\u53ef\u4ee5\u5728\u6765\u81ea\u4e0d\u540c\u8fdb\u7a0b\u7684\u5171\u4eab\u961f\u5217\u4e0a\u89e6\u53d1\u3002 \u5c40\u90e8 \u4e8b\u4ef6\u662f\u5728\u672c\u5730\u8fdb\u7a0b\u4e2d\u7684\u961f\u5217\u4e0a\u89e6\u53d1\u52a8\u4f5c\u6216\u72b6\u6001\u6539\u53d8\u65f6\u4ea7\u751f\u7684\u4e8b\u4ef6\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u4e8b\u4ef6\u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u662f\u5355\u4e2a\u8fdb\u7a0b\u7684\u672c\u5730\u65f6\uff0c\u961f\u5217\u4e0a\u53d1\u751f\u7684\u6240\u6709\u4e8b\u4ef6\u4e5f\u662f\u672c\u5730\u7684\u3002 \u5f53\u4e00\u4e2a\u961f\u5217\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9047\u5230 \u5168\u5c40 \u4e8b\u4ef6\u3002 \u4e3a\u4e86\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u4fa6\u542c\u5668\u63a5\u6536\u7531\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u89e6\u53d1\u7684\u4e8b\u4ef6\u901a\u77e5\uff0c\u5b83\u5fc5\u987b\u6ce8\u518c\u4e00\u4e2a\u5168\u5c40\u4e8b\u4ef6\u3002 \u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u5728\u89e6\u53d1\u76f8\u5e94\u4e8b\u4ef6\u65f6\u88ab\u8c03\u7528\u3002 \u4f7f\u7528\u4e0b\u8868\u6240\u793a\u7684\u7b7e\u540d\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\uff0c\u63d0\u4f9b\u5bf9\u4e0e\u4e8b\u4ef6\u76f8\u5173\u7684\u4fe1\u606f\u7684\u8bbf\u95ee\u3002 \u4e0b\u9762\u6211\u4eec\u5c06\u8ba8\u8bba\u5c40\u90e8\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u7b7e\u540d\u548c\u5168\u5c40\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u7b7e\u540d\u4e4b\u95f4\u7684\u4e00\u4e2a\u5173\u952e\u533a\u522b\u3002 \u672c\u5730\u4e8b\u4ef6\u76d1\u542c\u5668 \u5168\u7403\u4e8b\u4ef6\u76d1\u542c\u5668 Handler\u65b9\u6cd5\u7b7e\u540d/\u4f55\u65f6\u89e6\u53d1 @OnQueueError() @OnGlobalQueueError() handler(error: Error) - \u4e00\u4e2a\u9519\u8bef\u53d1\u751f\u3002 error \u5305\u542b\u89e6\u53d1\u9519\u8bef\u3002 @OnQueueWaiting() @OnGlobalQueueWaiting() handler(jobId: number | string) - \u5f53\u4e00\u4e2a\u5de5\u4eba\u7a7a\u95f2\u65f6\uff0c\u4e00\u4e2aJob\u6b63\u5728\u7b49\u5f85\u88ab\u5904\u7406\u3002 jobId \u5305\u542b\u5df2\u8fdb\u5165\u8be5\u72b6\u6001\u7684\u4f5c\u4e1a\u7684id\u3002 @OnQueueActive() @OnGlobalQueueActive() handler(job: Job) - Job job \u5df2\u7ecf\u5f00\u59cb\u3002 @OnQueueStalled() @OnGlobalQueueStalled() handler(job: Job) - Job job \u5df2\u88ab\u6807\u8bb0\u4e3a\u505c\u6ede\u3002 \u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u5d29\u6e83\u6216\u6682\u505c\u4e8b\u4ef6\u5faa\u73af\u7684\u4f5c\u4e1a\u64cd\u4f5c\u8005\u975e\u5e38\u6709\u7528\u3002 @OnQueueProgress() @OnGlobalQueueProgress() handler(job: Job, progress: number) - Job job \u7684\u8fdb\u5ea6\u88ab\u66f4\u65b0\u4e3a\u503c progress . @OnQueueCompleted() @OnGlobalQueueCompleted() handler(job: Job, result: any) Job job \u6210\u529f\u5b8c\u6210\uff0c\u7ed3\u679c result \u3002 @OnQueueFailed() @OnGlobalQueueFailed() handler(job: Job, err: Error) Job job \u5931\u8d25\uff0c\u539f\u56e0 err \u3002 @OnQueuePaused() @OnGlobalQueuePaused() handler() \u961f\u5217\u5df2\u6682\u505c\u3002 @OnQueueResumed() @OnGlobalQueueResumed() handler(job: Job) \u961f\u5217\u5df2\u6062\u590d\u3002 @OnQueueCleaned() @OnGlobalQueueCleaned() handler(jobs: Job[], type: string) \u4ee5\u524d\u7684\u5de5\u4f5c\u5df2\u7ecf\u4ece\u961f\u5217\u4e2d\u6e05\u9664\u4e86\u3002 jobs \u662f\u6e05\u7406\u540e\u7684job\u7684\u6570\u7ec4\uff0c type \u662f\u6e05\u7406\u540e\u7684job\u7684\u7c7b\u578b\u3002 @OnQueueDrained() @OnGlobalQueueDrained() handler() \u5f53\u961f\u5217\u5904\u7406\u5b8c\u6240\u6709\u7b49\u5f85\u7684\u4f5c\u4e1a\u65f6\u89e6\u53d1(\u5373\u4f7f\u53ef\u80fd\u6709\u4e00\u4e9b\u5ef6\u8fdf\u7684\u4f5c\u4e1a\u5c1a\u672a\u5904\u7406)\u3002 @OnQueueRemoved() @OnGlobalQueueRemoved() handler(job: Job) Job job \u5df2\u6210\u529f\u5220\u9664\u3002 \u5f53\u76d1\u542c\u5168\u5c40\u4e8b\u4ef6\u65f6\uff0c\u65b9\u6cd5\u7b7e\u540d\u53ef\u80fd\u4e0e\u5b83\u4eec\u7684\u672c\u5730\u5bf9\u7b49\u7269\u7565\u6709\u4e0d\u540c\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u4efb\u4f55\u5728\u672c\u5730\u7248\u672c\u4e2d\u63a5\u6536 job \u5bf9\u8c61\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c\u90fd\u4f1a\u5728\u5168\u5c40\u7248\u672c\u4e2d\u63a5\u6536\u5230\u4e00\u4e2a jobId ( number )\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8981\u83b7\u53d6\u5bf9\u5b9e\u9645 job \u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u8bf7\u4f7f\u7528 Queue#getJob \u65b9\u6cd5\u3002\u8fd9\u4e2a\u8c03\u7528\u5e94\u8be5\u88ab\u7b49\u5f85\uff0c\u56e0\u6b64\u5904\u7406\u7a0b\u5e8f\u5e94\u8be5\u88ab\u58f0\u660e\u4e3a async \u3002 \u4f8b\u5982: @OnGlobalQueueCompleted () async onGlobalCompleted ( jobId : number , result : any ) { const job = await this . immediateQueue . getJob ( jobId ); console . log ( '(Global) on completed: job ' , job . id , ' -> result: ' , result ); } info Hint \u8981\u8bbf\u95ee Queue \u5bf9\u8c61(\u8c03\u7528 getJob() )\uff0c\u4f60\u5f53\u7136\u5fc5\u987b\u6ce8\u5165\u5b83\u3002\u6b64\u5916\uff0cQueue \u5fc5\u987b\u5728\u6ce8\u5165\u5b83\u7684\u6a21\u5757\u4e2d\u6ce8\u518c\u3002 \u9664\u4e86\u7279\u5b9a\u7684\u4e8b\u4ef6\u76d1\u542c\u5668\u88c5\u9970\u5668\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u7684 @OnQueueEvent() \u88c5\u9970\u5668\u7ed3\u5408 BullQueueEvents \u6216 BullQueueGlobalEvents \u679a\u4e3e\u3002 \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u4e8b\u4ef6\u7684\u4fe1\u606f \u8fd9\u91cc . \u961f\u5217\u7ba1\u7406 \u00b6 Queue \u7684 API \u5141\u8bb8\u60a8\u6267\u884c\u7ba1\u7406\u529f\u80fd\uff0c\u6bd4\u5982\u6682\u505c\u548c\u6062\u590d\uff0c\u68c0\u7d22\u5904\u4e8e\u4e0d\u540c\u72b6\u6001\u7684\u4f5c\u4e1a\u7684\u8ba1\u6570\uff0c\u7b49\u7b49\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u5b8c\u6574\u7684\u961f\u5217 API. \u76f4\u63a5\u5728 Queue \u5bf9\u8c61\u4e0a\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u5982\u4e0b\u9762\u7684 pause/resume \u793a\u4f8b\u6240\u793a\u3002 \u4f7f\u7528 Pause() \u65b9\u6cd5\u8c03\u7528\u6682\u505c\u961f\u5217\u3002\u6682\u505c\u7684\u961f\u5217\u5728\u6062\u590d\u4e4b\u524d\u4e0d\u4f1a\u5904\u7406\u65b0\u4f5c\u4e1a\uff0c\u4f46\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u4f5c\u4e1a\u5c06\u7ee7\u7eed\u5904\u7406\uff0c\u76f4\u5230\u5b83\u4eec\u5b8c\u6210\u4e3a\u6b62\u3002 await audioQueue . pause (); \u8981\u6062\u590d\u6682\u505c\u7684\u961f\u5217\uff0c\u8bf7\u4f7f\u7528 resume() \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: await audioQueue . resume (); \u72ec\u7acb\u7684\u8fdb\u7a0b \u00b6 \u4f5c\u4e1a\u5904\u7406\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u5728\u5355\u72ec\u7684(\u5206\u53c9\u7684)\u8fdb\u7a0b\u4e2d\u8fd0\u884c ( source ). \u8fd9\u6709\u51e0\u4e2a\u4f18\u70b9: \u8fd9\u4e2a\u8fdb\u7a0b\u662f\u6c99\u7bb1\u5316\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u5b83\u5d29\u6e83\u4e86\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5de5\u4f5c\u8fdb\u7a0b\u3002 \u60a8\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u961f\u5217\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u963b\u585e\u4ee3\u7801(\u4f5c\u4e1a\u4e0d\u4f1a\u505c\u6b62)\u3002 \u66f4\u597d\u5730\u5229\u7528\u591a\u6838 cpu\u3002 \u51cf\u5c11\u4e0e redis \u7684\u8fde\u63a5\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { BullModule } from '@nestjs/bull' ; import { join } from 'path' ; @Module ({ imports : [ BullModule . registerQueue ({ name : 'audio' , processors : [ join ( __dirname , 'processor.js' )], }), ], }) export class AppModule {} \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u4f60\u7684\u51fd\u6570\u662f\u5728\u4e00\u4e2a\u5206\u53c9\u7684\u8fdb\u7a0b\u4e2d\u6267\u884c\u7684\uff0c\u6240\u4ee5\u4f9d\u8d56\u6ce8\u5165(\u548c IoC \u5bb9\u5668)\u5c06\u4e0d\u53ef\u7528\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u7684\u5904\u7406\u5668\u51fd\u6570\u5c06\u9700\u8981\u5305\u542b(\u6216\u521b\u5efa)\u5b83\u9700\u8981\u7684\u6240\u6709\u5916\u90e8\u4f9d\u8d56\u9879\u5b9e\u4f8b\u3002 @ @filename ( processor ) import { Job , DoneCallback } from 'bull' ; export default function ( job : Job , cb : DoneCallback ) { console . log ( `[ ${ process . pid } ] ${ JSON . stringify ( job . data ) } ` ); cb ( null , 'It works' ); } \u5f02\u6b65\u7684\u914d\u7f6e \u00b6 \u4f60\u53ef\u80fd\u60f3\u5f02\u6b65\u4f20\u9012 bull \u9009\u9879\uff0c\u800c\u4e0d\u662f\u9759\u6001\u4f20\u9012\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 forRootAsync() \u65b9\u6cd5\uff0c\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u65b9\u6cd5\u3002 \u540c\u6837\uff0c\u5982\u679c\u4f60\u60f3\u5f02\u6b65\u4f20\u9012\u961f\u5217\u9009\u9879\uff0c\u8bf7\u4f7f\u7528 registerQueueAsync() \u65b9\u6cd5\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: BullModule . forRootAsync ({ useFactory : () => ({ redis : { host : 'localhost' , port : 6379 , }, }), }); \u6211\u4eec\u7684\u5de5\u5382\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u4efb\u4f55\u5176\u4ed6\u7684 \u5f02\u6b65\u63d0\u4f9b\u7a0b\u5e8f (\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u662f async \uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002). BullModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ redis : { host : configService.get ( 'QUEUE_HOST' ), port : + configService . get ( 'QUEUE_PORT' ), }, }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useClass \u8bed\u6cd5: BullModule . forRootAsync ({ useClass : BullConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5c06\u5728 BullModule \u4e2d\u5b9e\u4f8b\u5316 BullConfigService \uff0c\u5e76\u901a\u8fc7\u8c03\u7528 createSharedConfiguration() \u6765\u63d0\u4f9b\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740 BullConfigService \u5fc5\u987b\u5b9e\u73b0 SharedBullConfigurationFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a: @Injectable () class BullConfigService implements SharedBullConfigurationFactory { createSharedConfiguration () : BullModuleOptions { return { redis : { host : 'localhost' , port : 6379 , }, }; } } \u4e3a\u4e86\u9632\u6b62\u5728 BullModule \u4e2d\u521b\u5efa BullConfigService \uff0c\u5e76\u4f7f\u7528\u4ece\u4e0d\u540c\u6a21\u5757\u5bfc\u5165\u7684\u63d0\u4f9b\u5546\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 BullModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u8fd9\u4e2a\u6784\u9020\u7684\u5de5\u4f5c\u539f\u7406\u4e0e useClass \u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b -- BullModule \u5c06\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757\u6765\u91cd\u7528\u73b0\u6709\u7684 ConfigService \uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684\u3002 \u4f8b\u5b50 \u00b6 \u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u961f\u5217"},{"location":"techniques/queues/#_1","text":"\u961f\u5217\u662f\u4e00\u79cd\u529f\u80fd\u5f3a\u5927\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u5904\u7406\u5e38\u89c1\u7684\u5e94\u7528\u7a0b\u5e8f\u6269\u5c55\u548c\u6027\u80fd\u6311\u6218\u3002 \u961f\u5217\u53ef\u4ee5\u5e2e\u52a9\u4f60\u89e3\u51b3\u7684\u4e00\u4e9b\u95ee\u9898\u793a\u4f8b\u5982\u4e0b: \u5e73\u6ed1\u5904\u7406\u5cf0\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u542f\u52a8\u8d44\u6e90\u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u5219\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4efb\u52a1\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u800c\u4e0d\u662f\u540c\u6b65\u6267\u884c\u5b83\u4eec\u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u8ba9\u5de5\u4f5c\u8fdb\u7a0b\u4ee5\u53d7\u63a7\u7684\u65b9\u5f0f\u4ece\u961f\u5217\u4e2d\u62c9\u51fa\u4efb\u52a1\u3002 \u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u6dfb\u52a0\u65b0\u7684\u961f\u5217\u4f7f\u7528\u8005\uff0c\u4ee5\u4fbf\u968f\u7740\u5e94\u7528\u7a0b\u5e8f\u7684\u6269\u5c55\u800c\u6269\u5c55\u540e\u7aef\u4efb\u52a1\u5904\u7406\u3002 \u5206\u89e3\u53ef\u80fd\u4f1a\u963b\u585e Node.js \u4e8b\u4ef6\u5faa\u73af\u7684\u5355\u5757\u4efb\u52a1\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u7528\u6237\u8bf7\u6c42\u9700\u8981\u50cf\u97f3\u9891\u8f6c\u7801\u8fd9\u6837\u7684 CPU \u5bc6\u96c6\u578b\u5de5\u4f5c\uff0c\u60a8\u53ef\u4ee5\u5c06\u6b64\u4efb\u52a1\u59d4\u6258\u7ed9\u5176\u4ed6\u8fdb\u7a0b\uff0c\u4ece\u800c\u91ca\u653e\u9762\u5411\u7528\u6237\u7684\u8fdb\u7a0b\u4ee5\u4fdd\u6301\u54cd\u5e94\u3002 \u5728\u5404\u79cd\u670d\u52a1\u4e4b\u95f4\u63d0\u4f9b\u53ef\u9760\u7684\u901a\u4fe1\u901a\u9053\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a\u8fdb\u7a0b\u6216\u670d\u52a1\u4e2d\u5bf9\u4efb\u52a1(\u4f5c\u4e1a)\u6392\u961f\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6216\u670d\u52a1\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002 \u60a8\u53ef\u4ee5\u5728\u4f5c\u4e1a\u751f\u547d\u5468\u671f\u4e2d\u7684\u4efb\u4f55\u6d41\u7a0b\u6216\u670d\u52a1\u5b8c\u6210\u3001\u9519\u8bef\u6216\u5176\u4ed6\u72b6\u6001\u66f4\u6539\u65f6\u6536\u5230\u901a\u77e5(\u901a\u8fc7\u4fa6\u542c\u72b6\u6001\u4e8b\u4ef6)\u3002 \u5f53\u961f\u5217\u7684\u751f\u4ea7\u8005\u6216\u6d88\u8d39\u8005\u5931\u8d25\u65f6\uff0c\u5b83\u4eec\u7684\u72b6\u6001\u88ab\u4fdd\u7559\uff0c\u4efb\u52a1\u5904\u7406\u53ef\u4ee5\u5728\u8282\u70b9\u91cd\u542f\u65f6\u81ea\u52a8\u91cd\u542f\u3002 Nest \u63d0\u4f9b\u4e86 @nestjs/bull \u5305\uff0c\u4f5c\u4e3a Bull \u7684\u62bd\u8c61/\u5305\u88c5\uff0c\u8fd9\u662f\u4e00\u4e2a\u6d41\u884c\u7684\u3001\u652f\u6301\u826f\u597d\u7684\u3001\u57fa\u4e8e Node.js \u7684\u9ad8\u6027\u80fd\u961f\u5217\u7cfb\u7edf\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u5305\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5c06 Bull Queues \u4ee5\u4e00\u79cd nest \u53cb\u597d\u7684\u65b9\u5f0f\u96c6\u6210\u5230\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 Bull \u4f7f\u7528 Redis \u6765\u4fdd\u5b58\u4f5c\u4e1a\u6570\u636e\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5728\u4f60\u7684\u7cfb\u7edf\u4e0a\u5b89\u88c5 Redis\u3002 \u56e0\u4e3a\u5b83\u662f Redis-backed\uff0c\u6240\u4ee5\u60a8\u7684 Queue \u4f53\u7cfb\u7ed3\u6784\u53ef\u4ee5\u662f\u5b8c\u5168\u5206\u5e03\u5f0f\u7684\u548c\u5e73\u53f0\u65e0\u5173\u7684\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8ba9\u4e00\u4e9b Queue \u751f\u4ea7\u8005 \u3001 \u6d88\u8d39\u8005 \u548c \u76d1\u542c\u5668 \u8fd0\u884c\u5728\u4e00\u4e2a(\u6216\u591a\u4e2a)\u8282\u70b9\u7684 Nest \u4e2d\uff0c\u800c\u5176\u4ed6\u751f\u4ea7\u8005\u3001\u6d88\u8d39\u8005\u548c\u76d1\u542c\u5668\u8fd0\u884c\u5728\u5176\u4ed6\u7f51\u7edc\u8282\u70b9\u7684\u5176\u4ed6 Node.js \u5e73\u53f0\u4e0a\u3002 \u672c\u7ae0\u4ecb\u7ecd\u4e86 @nestjs/bull \u5305\u3002 \u6211\u4eec\u8fd8\u5efa\u8bae\u9605\u8bfb Bull \u6587\u6863 \u4ee5\u83b7\u5f97\u66f4\u591a\u80cc\u666f\u548c\u5177\u4f53\u7684\u5b9e\u73b0\u7ec6\u8282\u3002","title":"\u961f\u5217"},{"location":"techniques/queues/#_2","text":"\u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm install --save @nestjs/bull bull $ npm install --save-dev @types/bull \u4e00\u65e6\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06 BullModule \u5bfc\u5165\u5230\u6839\u76ee\u5f55 AppModule \u4e2d\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { BullModule } from '@nestjs/bull' ; @Module ({ imports : [ BullModule . forRoot ({ redis : { host : 'localhost' , port : 6379 , }, }), ], }) export class AppModule {} forRoot() \u65b9\u6cd5\u7528\u4e8e\u6ce8\u518c\u4e00\u4e2a bull \u5305\u914d\u7f6e\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c06\u88ab\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ce8\u518c\u7684\u6240\u6709\u961f\u5217\u4f7f\u7528(\u9664\u975e\u53e6\u6709\u8bf4\u660e)\u3002\u914d\u7f6e\u5bf9\u8c61\u7531\u4ee5\u4e0b\u5c5e\u6027\u7ec4\u6210: limiter: RateLimiter - \u7528\u4e8e\u63a7\u5236\u961f\u5217\u4f5c\u4e1a\u7684\u5904\u7406\u901f\u5ea6\u7684\u9009\u9879\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 RateLimiter \u3002 \u53ef\u9009\u7684\u3002 redis: RedisOpts - \u914d\u7f6e Redis \u8fde\u63a5\u7684\u9009\u9879\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 RedisOpts \u3002 \u53ef\u9009\u7684\u3002 prefix: string - \u6240\u6709\u961f\u5217\u952e\u7684\u524d\u7f00\u3002\u53ef\u9009\u7684\u3002 defaultJobOptions: JobOpts - \u7528\u4e8e\u63a7\u5236\u65b0\u4f5c\u4e1a\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u9009\u9879\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 JobOpts \u3002 \u53ef\u9009\u7684\u3002 settings: AdvancedSettings - \u9ad8\u7ea7\u961f\u5217\u914d\u7f6e\u8bbe\u7f6e\u3002 \u8fd9\u4e9b\u901a\u5e38\u4e0d\u5e94\u66f4\u6539\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1 AdvancedSettings \u3002 \u53ef\u9009\u7684\u3002 \u6240\u6709\u9009\u9879\u90fd\u662f\u53ef\u9009\u7684\uff0c\u63d0\u4f9b\u4e86\u5bf9\u961f\u5217\u884c\u4e3a\u7684\u8be6\u7ec6\u63a7\u5236\u3002\u8fd9\u4e9b\u88ab\u76f4\u63a5\u4f20\u9012\u7ed9 Bull Queue \u6784\u9020\u51fd\u6570\u3002 \u6709\u5173\u8fd9\u4e9b\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f \u5728\u8fd9\u91cc \u3002 \u8981\u6ce8\u518c\u4e00\u4e2a\u961f\u5217\uff0c\u8bf7\u5bfc\u5165 BullModule#registerQueue() \u52a8\u6001\u6a21\u5757\uff0c\u5982\u4e0b\u6240\u793a: BullModule . registerQueue ({ name : 'audio' , }); info Hint \u901a\u8fc7\u5c06\u591a\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u914d\u7f6e\u5bf9\u8c61\u4f20\u9012\u7ed9 registerQueue() \u65b9\u6cd5\u6765\u521b\u5efa\u591a\u4e2a\u961f\u5217\u3002 registerQueue() \u65b9\u6cd5\u7528\u4e8e\u5b9e\u4f8b\u5316\u548c/\u6216\u6ce8\u518c\u961f\u5217\u3002 \u961f\u5217\u662f\u8de8\u6a21\u5757\u548c\u8fdb\u7a0b\u5171\u4eab\u7684\uff0c\u8fde\u63a5\u5230\u76f8\u540c\u7684\u57fa\u7840 Redis \u6570\u636e\u5e93\u5177\u6709\u76f8\u540c\u7684\u51ed\u636e\u3002 \u6bcf\u4e2a\u961f\u5217\u7684 name \u5c5e\u6027\u90fd\u662f\u552f\u4e00\u7684\u3002 \u961f\u5217\u540d\u65e2\u53ef\u4ee5\u7528\u4f5c\u6ce8\u5165\u4ee4\u724c(\u7528\u4e8e\u5c06\u961f\u5217\u6ce8\u5165\u5230\u63a7\u5236\u5668/\u63d0\u4f9b\u8005\u4e2d)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4f5c\u88c5\u9970\u5668\u7684\u53c2\u6570\uff0c\u7528\u4e8e\u5c06\u6d88\u8d39\u8005\u7c7b\u548c\u4fa6\u542c\u5668\u4e0e\u961f\u5217\u5173\u8054\u8d77\u6765\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8986\u76d6\u7279\u5b9a\u961f\u5217\u7684\u4e00\u4e9b\u9884\u5148\u914d\u7f6e\u7684\u9009\u9879\uff0c\u5982\u4e0b\u6240\u793a: BullModule . registerQueue ({ name : 'audio' , redis : { port : 6380 , }, }); \u7531\u4e8e\u4efb\u52a1\u88ab\u6301\u4e45\u5316\u5728 Redis \u4e2d\uff0c\u6bcf\u6b21\u5b9e\u4f8b\u5316\u4e00\u4e2a\u7279\u5b9a\u7684\u547d\u540d\u961f\u5217(\u4f8b\u5982\uff0c\u5f53\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8/\u91cd\u542f)\uff0c\u5b83\u8bd5\u56fe\u5904\u7406\u4efb\u4f55\u65e7\u7684\u4efb\u52a1\uff0c\u53ef\u80fd\u5b58\u5728\u4e8e\u524d\u4e00\u4e2a\u672a\u5b8c\u6210\u7684\u4f1a\u8bdd\u3002 \u6bcf\u4e2a\u961f\u5217\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u751f\u4ea7\u8005\u3001\u6d88\u8d39\u8005\u548c\u4fa6\u542c\u5668\u3002\u6d88\u8d39\u8005\u6309\u7167\u7279\u5b9a\u7684\u987a\u5e8f\u4ece\u961f\u5217\u4e2d\u68c0\u7d22\u4f5c\u4e1a:FIFO(\u9ed8\u8ba4)\u3001LIFO \u6216\u6839\u636e\u4f18\u5148\u7ea7\u3002 \u8fd9\u91cc \u8ba8\u8bba\u4e86\u63a7\u5236\u961f\u5217\u5904\u7406\u987a\u5e8f\u3002","title":"\u5b89\u88c5"},{"location":"techniques/queues/#_3","text":"\u5982\u679c\u4f60\u7684\u961f\u5217\u8fde\u63a5\u5230\u591a\u4e2a\u4e0d\u540c\u7684 Redis \u5b9e\u4f8b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u53eb\u505a named configurations \u7684\u6280\u672f\u3002 \u8fd9\u4e2a\u7279\u6027\u5141\u8bb8\u60a8\u5728\u6307\u5b9a\u7684\u952e\u4e0b\u6ce8\u518c\u51e0\u4e2a\u914d\u7f6e\uff0c\u7136\u540e\u60a8\u53ef\u4ee5\u5728\u961f\u5217\u9009\u9879\u4e2d\u5f15\u7528\u5b83\u4eec\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u989d\u5916\u7684 Redis \u5b9e\u4f8b(\u9664\u4e86\u9ed8\u8ba4\u7684)\uff0c\u88ab\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ce8\u518c\u7684\u51e0\u4e2a\u961f\u5217\u4f7f\u7528\uff0c\u4f60\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u6ce8\u518c\u5b83\u7684\u914d\u7f6e: BullModule . forRoot ( 'alternative-config' , { redis : { port : 6381 , }, }); \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c 'alternative-config' \u53ea\u662f\u4e00\u4e2a\u914d\u7f6e\u952e(\u5b83\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32)\u3002 \u6709\u4e86\u8fd9\u4e2a\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u5728 registerQueue() \u9009\u9879\u5bf9\u8c61\u4e2d\u6307\u5411\u8fd9\u4e2a\u914d\u7f6e: BullModule . registerQueue ({ configKey : 'alternative-queue' name : 'video' , });","title":"\u547d\u540d\u914d\u7f6e"},{"location":"techniques/queues/#_4","text":"\u4f5c\u4e1a\u751f\u6210\u5668\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002 \u751f\u4ea7\u8005\u901a\u5e38\u662f\u5e94\u7528\u670d\u52a1(Nest providers )\u3002\u8981\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\uff0c\u9996\u5148\u8981\u5c06\u961f\u5217\u6ce8\u5165\u5230\u670d\u52a1\u4e2d\uff0c\u5982\u4e0b\u6240\u793a: import { Injectable } from '@nestjs/common' ; import { Queue } from 'bull' ; import { InjectQueue } from '@nestjs/bull' ; @Injectable () export class AudioService { constructor ( @InjectQueue ( 'audio' ) private audioQueue : Queue ) {} } info Hint @InjectQueue() \u88c5\u9970\u5668\u901a\u8fc7\u5b83\u7684\u540d\u5b57\u6765\u6807\u8bc6\u961f\u5217\uff0c\u5c31\u50cf\u5728 registerQueue() \u65b9\u6cd5\u8c03\u7528\u4e2d\u63d0\u4f9b\u7684(\u4f8b\u5982\uff0c audio )\u3002 \u73b0\u5728\uff0c\u901a\u8fc7\u8c03\u7528\u961f\u5217\u7684 add() \u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u5e76\u4f20\u9012\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u4f5c\u4e1a\u5bf9\u8c61\u3002 \u4f5c\u4e1a\u88ab\u8868\u793a\u4e3a\u53ef\u5e8f\u5217\u5316\u7684 JavaScript \u5bf9\u8c61(\u56e0\u4e3a\u8fd9\u662f\u5b83\u4eec\u5b58\u50a8\u5728 Redis \u6570\u636e\u5e93\u4e2d\u7684\u65b9\u5f0f)\u3002 \u4f60\u901a\u8fc7\u7684\u4efb\u52a1\u7684\u5f62\u72b6\u662f\u4efb\u610f\u7684;\u4f7f\u7528\u5b83\u6765\u8868\u793a\u4f5c\u4e1a\u5bf9\u8c61\u7684\u8bed\u4e49\u3002 const job = await this . audioQueue . add ({ foo : 'bar' , });","title":"\u751f\u4ea7\u8005"},{"location":"techniques/queues/#_5","text":"Jobs \u53ef\u80fd\u6709\u72ec\u7279\u7684\u540d\u5b57\u3002\u8fd9\u5141\u8bb8\u60a8\u521b\u5efa\u4e13\u95e8\u7684 consumer \uff0c\u5b83\u5c06\u53ea\u5904\u7406\u5177\u6709\u7ed9\u5b9a\u540d\u79f0\u7684\u4f5c\u4e1a\u3002 const job = await this . audioQueue . add ( 'transcode' , { foo : 'bar' , }); Warning Warning \u5728\u4f7f\u7528\u547d\u540d\u4f5c\u4e1a\u65f6\uff0c\u5fc5\u987b\u4e3a\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u6bcf\u4e2a\u60df\u4e00\u540d\u79f0\u521b\u5efa\u5904\u7406\u5668\uff0c\u5426\u5219\u961f\u5217\u5c06\u62b1\u6028\u60a8\u7f3a\u5c11\u7ed9\u5b9a\u4f5c\u4e1a\u7684\u5904\u7406\u5668\u3002\u6709\u5173\u4f7f\u7528\u547d\u540d\u4f5c\u4e1a\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 here \u3002","title":"\u6307\u5b9a\u7684\u5de5\u4f5c"},{"location":"techniques/queues/#_6","text":"\u4f5c\u4e1a\u53ef\u4ee5\u6709\u4e0e\u4e4b\u5173\u8054\u7684\u5176\u4ed6\u9009\u9879\u3002\u5728 Queue.add() \u65b9\u6cd5\u7684 job \u53c2\u6570\u540e\u4f20\u9012\u4e00\u4e2a options \u5bf9\u8c61\u3002\u4f5c\u4e1a\u9009\u9879\u5c5e\u6027\u5982\u4e0b: priority : number - \u53ef\u9009\u7684\u4f18\u5148\u7ea7\u503c\u3002\u53d6\u503c\u8303\u56f4\u4e3a 1(\u6700\u9ad8\u4f18\u5148\u7ea7)\u5230 MAX_INT(\u6700\u4f4e\u4f18\u5148\u7ea7)\u3002\u6ce8\u610f\uff0c\u4f7f\u7528\u4f18\u5148\u7ea7\u5bf9\u6027\u80fd\u6709\u8f7b\u5fae\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u8981\u8c28\u614e\u4f7f\u7528\u3002 delay : number - \u7b49\u5f85\u8be5\u4f5c\u4e1a\u88ab\u5904\u7406\u4e4b\u524d\u7684\u65f6\u95f4(\u6beb\u79d2)\u3002\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u83b7\u5f97\u51c6\u786e\u7684\u5ef6\u8fdf\uff0c\u670d\u52a1\u5668\u548c\u5ba2\u6237\u673a\u7684\u65f6\u949f\u90fd\u5e94\u8be5\u540c\u6b65\u3002 attempts : number - \u5728\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u5c1d\u8bd5\u6267\u884c\u8be5\u4efb\u52a1\u7684\u603b\u6b21\u6570\u3002 repeat : RepeatOpts - \u6839\u636e cron \u89c4\u8303\u91cd\u590d\u4f5c\u4e1a\u3002\u67e5\u770b RepeatOpts . backoff : number | BackoffOpts - \u4efb\u52a1\u5931\u8d25\u65f6\u81ea\u52a8\u91cd\u8bd5\u7684\u540e\u9000\u8bbe\u7f6e\u3002\u67e5\u770b BackoffOpts . lifo : boolean - \u5982\u679c\u4e3a true\uff0c\u5219\u5c06\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u7684\u53f3\u7aef\u800c\u4e0d\u662f\u5de6\u7aef(\u9ed8\u8ba4\u4e3a false)\u3002 timeout : number - \u4f5c\u4e1a\u5931\u8d25\u5e76\u51fa\u73b0\u8d85\u65f6\u9519\u8bef\u7684\u6beb\u79d2\u6570\u3002 jobId : number | string - \u8986\u76d6\u4f5c\u4e1a ID - \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f5c\u4e1a ID \u662f\u552f\u4e00\u7684\u6574\u6570\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u8bbe\u7f6e\u6765\u8986\u76d6\u5b83\u3002\u5982\u679c\u4f7f\u7528\u6b64\u9009\u9879\uff0c\u5219\u7531\u60a8\u6765\u786e\u4fdd jobId \u662f\u552f\u4e00\u7684\u3002\u5982\u679c\u5c1d\u8bd5\u6dfb\u52a0 id \u5df2\u7ecf\u5b58\u5728\u7684\u4f5c\u4e1a\uff0c\u5219\u4e0d\u4f1a\u6dfb\u52a0\u8be5\u4f5c\u4e1a\u3002 removeOnComplete : boolean | number - \u5982\u679c\u4e3a true\uff0c\u5219\u5728\u4f5c\u4e1a\u6210\u529f\u5b8c\u6210\u65f6\u79fb\u9664\u4f5c\u4e1a\u3002\u4e00\u4e2a\u6570\u5b57\u6307\u5b9a\u8981\u4fdd\u7559\u7684\u4f5c\u4e1a\u6570\u91cf\u3002\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u4f5c\u4e1a\u4fdd\u5b58\u5728\u5df2\u5b8c\u6210\u7684\u96c6\u4e2d\u3002 removeOnFail : boolean | number - \u5982\u679c\u4e3a true\uff0c\u5219\u5728\u6240\u6709\u5c1d\u8bd5\u90fd\u5931\u8d25\u540e\u5220\u9664\u4f5c\u4e1a\u3002\u4e00\u4e2a\u6570\u5b57\u6307\u5b9a\u8981\u4fdd\u7559\u7684\u4f5c\u4e1a\u6570\u91cf\u3002\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u4f5c\u4e1a\u4fdd\u7559\u5728\u5931\u8d25\u96c6\u4e2d\u3002 stackTraceLimit : number - \u9650\u5236\u5c06\u5728\u5806\u6808\u8ddf\u8e2a\u4e2d\u8bb0\u5f55\u7684\u5806\u6808\u8ddf\u8e2a\u884c\u6570\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u4f7f\u7528\u5de5\u4f5c\u9009\u9879\u5b9a\u5236\u5de5\u4f5c\u7684\u4f8b\u5b50\u3002 \u82e5\u8981\u5ef6\u8fdf\u4f5c\u4e1a\u7684\u542f\u52a8\uff0c\u8bf7\u4f7f\u7528 delay \u914d\u7f6e\u5c5e\u6027\u3002 const job = await this . audioQueue . add ( { foo : 'bar' , }, { delay : 3000 }, // 3 seconds delayed ); \u8981\u5c06\u4e00\u4e2a\u4f5c\u4e1a\u6dfb\u52a0\u5230\u961f\u5217\u7684\u53f3\u7aef(\u5c06\u4f5c\u4e1a\u5904\u7406\u4e3a LIFO (\u540e\u8fdb\u5148\u51fa))\uff0c\u8bf7\u5c06\u914d\u7f6e\u5bf9\u8c61\u7684 lifo \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \u3002 const job = await this . audioQueue . add ( { foo : 'bar' , }, { lifo : true }, ); \u8981\u5bf9\u5de5\u4f5c\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u8bf7\u4f7f\u7528 priority \u5c5e\u6027\u3002 const job = await this . audioQueue . add ( { foo : 'bar' , }, { priority : 2 }, );","title":"\u4f5c\u4e1a\u9009\u9879"},{"location":"techniques/queues/#_7","text":"consumer \u662f\u4e00\u4e2a\u5b9a\u4e49\u65b9\u6cd5\u7684 \u7c7b \uff0c\u7528\u6765\u5904\u7406\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u7684\u4efb\u52a1\uff0c\u6216\u8005\u76d1\u542c\u961f\u5217\u4e0a\u7684\u4e8b\u4ef6\uff0c\u6216\u8005\u4e24\u8005\u517c\u6709\u3002\u4f7f\u7528 @Processor() \u88c5\u9970\u5668\u6765\u58f0\u660e\u4e00\u4e2a\u6d88\u8d39\u8005\u7c7b\uff0c\u5982\u4e0b\u6240\u793a: import { Processor } from '@nestjs/bull' ; @Processor ( 'audio' ) export class AudioConsumer {} info Hint \u6d88\u8d39\u8005\u5fc5\u987b\u6ce8\u518c\u4e3a providers \uff0c\u8fd9\u6837 @nestjs/bull \u5305\u624d\u80fd\u628a\u4ed6\u4eec\u53d6\u8d70\u3002 \u5176\u4e2d\uff0c\u88c5\u9970\u5668\u7684\u5b57\u7b26\u4e32\u53c2\u6570(e.g., 'audio' )\u662f\u8981\u4e0e\u7c7b\u65b9\u6cd5\u5173\u8054\u7684\u961f\u5217\u7684\u540d\u79f0\u3002 \u5728\u6d88\u8d39\u8005\u7c7b\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528 @Process() \u88c5\u9970\u5668\u88c5\u9970\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u6765\u58f0\u660e\u4f5c\u4e1a\u5904\u7406\u7a0b\u5e8f\u3002 import { Processor , Process } from '@nestjs/bull' ; import { Job } from 'bull' ; @Processor ( 'audio' ) export class AudioConsumer { @Process () async transcode ( job : Job < unknown > ) { let progress = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { await doSomething ( job . data ); progress += 10 ; await job . progress ( progress ); } return {}; } } \u6bcf\u5f53 worker \u7a7a\u95f2\u4e14\u961f\u5217\u4e2d\u6709\u4f5c\u4e1a\u9700\u8981\u5904\u7406\u65f6\uff0c\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u88c5\u9970\u65b9\u6cd5(\u4f8b\u5982, transcode() )\u3002 \u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u63a5\u6536 job \u5bf9\u8c61\u4f5c\u4e3a\u5b83\u7684\u552f\u4e00\u53c2\u6570\u3002 \u5904\u7406\u7a0b\u5e8f\u65b9\u6cd5\u8fd4\u56de\u7684\u503c\u5b58\u50a8\u5728\u4f5c\u4e1a\u5bf9\u8c61\u4e2d\uff0c\u4ee5\u540e\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f8b\u5982\u5728\u5df2\u5b8c\u6210\u4e8b\u4ef6\u7684\u4fa6\u542c\u5668\u4e2d\u8bbf\u95ee\u3002 Job \u5bf9\u8c61\u6709\u591a\u4e2a\u65b9\u6cd5\uff0c\u5141\u8bb8\u4f60\u4e0e\u5b83\u4eec\u7684\u72b6\u6001\u8fdb\u884c\u4ea4\u4e92\u3002 \u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u4f7f\u7528 progress() \u65b9\u6cd5\u6765\u66f4\u65b0\u4f5c\u4e1a\u7684\u8fdb\u5ea6\u3002 \u8bf7\u53c2\u9605 \u8fd9\u91cc \u83b7\u5f97\u5b8c\u6574\u7684 Job \u5bf9\u8c61 API \u53c2\u8003\u3002 \u4f60\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u4f5c\u4e1a\u5904\u7406\u65b9\u6cd5\u5c06\u53ea\u5904\u7406\u7279\u5b9a\u7c7b\u578b\u7684\u4f5c\u4e1a(\u5e26\u6709\u7279\u5b9a name \u7684\u4f5c\u4e1a)\uff0c\u65b9\u6cd5\u662f\u5c06\u8fd9\u4e2a name \u4f20\u9012\u7ed9 @Process() \u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6d88\u8d39\u8005\u7c7b\u4e2d\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a @Process() \u5904\u7406\u7a0b\u5e8f\uff0c\u5bf9\u5e94\u4e8e\u6bcf\u4e2a\u4f5c\u4e1a\u7c7b\u578b( name )\u3002 \u5728\u4f7f\u7528\u547d\u540d\u4f5c\u4e1a\u65f6\uff0c\u8bf7\u786e\u4fdd\u6bcf\u4e2a\u540d\u79f0\u5bf9\u5e94\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u3002 @Process ( 'transcode' ) async transcode ( job : Job < unknown > ) { ... }","title":"\u6d88\u8d39\u8005"},{"location":"techniques/queues/#_8","text":"\u5f53\u4e00\u4e2a\u6d88\u8d39\u8005\u88ab\u6807\u8bb0\u4e3a\u8bf7\u6c42\u4f5c\u7528\u57df(\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6ce8\u5165\u4f5c\u7528\u57df\u7684\u4fe1\u606f \u8fd9\u91cc )\u65f6\uff0c\u7c7b\u7684\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u5c06\u4e13\u95e8\u4e3a\u6bcf\u4e2a\u4f5c\u4e1a\u521b\u5efa\u3002 \u8be5\u5b9e\u4f8b\u5c06\u5728\u4efb\u52a1\u5b8c\u6210\u540e\u88ab\u5783\u573e\u56de\u6536\u3002 @Processor ({ name : 'audio' , scope : Scope.REQUEST , }) \u7531\u4e8e\u8bf7\u6c42\u4f5c\u7528\u57df\u7684\u6d88\u8d39\u8005\u7c7b\u662f\u52a8\u6001\u5b9e\u4f8b\u5316\u7684\uff0c\u5e76\u4e14\u4f5c\u7528\u57df\u4e3a\u5355\u4e2a\u4f5c\u4e1a\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u65b9\u6cd5\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6ce8\u5165 JOB_REF \u3002 constructor ( @Inject ( JOB_REF ) jobRef : Job ) { console . log ( jobRef ); } info Hint \u4ee4\u724c JOB_REF \u662f\u4ece @nestjs/bull \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u8bf7\u6c42\u8303\u56f4\u5185\u6d88\u8d39\u8005"},{"location":"techniques/queues/#_9","text":"\u5f53\u961f\u5217\u548c/\u6216\u4f5c\u4e1a\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0cBull \u4f1a\u751f\u6210\u4e00\u7ec4\u6709\u7528\u7684\u4e8b\u4ef6\u3002Nest \u63d0\u4f9b\u4e86\u4e00\u7ec4\u88c5\u9970\u5668\uff0c\u5141\u8bb8\u8ba2\u9605\u4e00\u7ec4\u6838\u5fc3\u6807\u51c6\u4e8b\u4ef6\u3002\u8fd9\u4e9b\u90fd\u662f\u4ece @nestjs/bull \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 \u4e8b\u4ef6\u76d1\u542c\u5668\u5fc5\u987b\u5728 consumer \u7c7b\u4e2d\u58f0\u660e(\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u7528 @Processor() \u88c5\u9970\u5668\u88c5\u9970\u7684\u7c7b\u4e2d)\u3002 \u8981\u76d1\u542c\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8bf7\u4f7f\u7528\u4e0b\u8868\u4e2d\u7684\u4e00\u4e2a\u88c5\u9970\u5668\u6765\u58f0\u660e\u8be5\u4e8b\u4ef6\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u4f8b\u5982\uff0c\u8981\u76d1\u542c\u5f53\u4f5c\u4e1a\u8fdb\u5165 audio \u961f\u5217\u4e2d\u7684\u6d3b\u52a8\u72b6\u6001\u65f6\u53d1\u51fa\u7684\u4e8b\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020: import { Processor , Process } from '@nestjs/bull' ; import { Job } from 'bull' ; @Processor ( 'audio' ) export class AudioConsumer { @OnQueueActive () onActive ( job : Job ) { console . log ( `Processing job ${ job . id } of type ${ job . name } with data ${ job . data } ...` , ); } ... \u7531\u4e8e Bull \u662f\u5728\u5206\u5e03\u5f0f(\u591a\u8282\u70b9)\u73af\u5883\u4e2d\u8fd0\u884c\u7684\uff0c\u56e0\u6b64\u5b83\u5b9a\u4e49\u4e86\u4e8b\u4ef6\u5c40\u90e8\u6027\u7684\u6982\u5ff5\u3002 \u8fd9\u4e2a\u6982\u5ff5\u8ba4\u8bc6\u5230\uff0c\u4e8b\u4ef6\u53ef\u4ee5\u5b8c\u5168\u5728\u5355\u4e2a\u8fdb\u7a0b\u4e2d\u89e6\u53d1\uff0c\u4e5f\u53ef\u4ee5\u5728\u6765\u81ea\u4e0d\u540c\u8fdb\u7a0b\u7684\u5171\u4eab\u961f\u5217\u4e0a\u89e6\u53d1\u3002 \u5c40\u90e8 \u4e8b\u4ef6\u662f\u5728\u672c\u5730\u8fdb\u7a0b\u4e2d\u7684\u961f\u5217\u4e0a\u89e6\u53d1\u52a8\u4f5c\u6216\u72b6\u6001\u6539\u53d8\u65f6\u4ea7\u751f\u7684\u4e8b\u4ef6\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u4e8b\u4ef6\u7684\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u662f\u5355\u4e2a\u8fdb\u7a0b\u7684\u672c\u5730\u65f6\uff0c\u961f\u5217\u4e0a\u53d1\u751f\u7684\u6240\u6709\u4e8b\u4ef6\u4e5f\u662f\u672c\u5730\u7684\u3002 \u5f53\u4e00\u4e2a\u961f\u5217\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9047\u5230 \u5168\u5c40 \u4e8b\u4ef6\u3002 \u4e3a\u4e86\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u4fa6\u542c\u5668\u63a5\u6536\u7531\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u89e6\u53d1\u7684\u4e8b\u4ef6\u901a\u77e5\uff0c\u5b83\u5fc5\u987b\u6ce8\u518c\u4e00\u4e2a\u5168\u5c40\u4e8b\u4ef6\u3002 \u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u5728\u89e6\u53d1\u76f8\u5e94\u4e8b\u4ef6\u65f6\u88ab\u8c03\u7528\u3002 \u4f7f\u7528\u4e0b\u8868\u6240\u793a\u7684\u7b7e\u540d\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\uff0c\u63d0\u4f9b\u5bf9\u4e0e\u4e8b\u4ef6\u76f8\u5173\u7684\u4fe1\u606f\u7684\u8bbf\u95ee\u3002 \u4e0b\u9762\u6211\u4eec\u5c06\u8ba8\u8bba\u5c40\u90e8\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u7b7e\u540d\u548c\u5168\u5c40\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u7b7e\u540d\u4e4b\u95f4\u7684\u4e00\u4e2a\u5173\u952e\u533a\u522b\u3002 \u672c\u5730\u4e8b\u4ef6\u76d1\u542c\u5668 \u5168\u7403\u4e8b\u4ef6\u76d1\u542c\u5668 Handler\u65b9\u6cd5\u7b7e\u540d/\u4f55\u65f6\u89e6\u53d1 @OnQueueError() @OnGlobalQueueError() handler(error: Error) - \u4e00\u4e2a\u9519\u8bef\u53d1\u751f\u3002 error \u5305\u542b\u89e6\u53d1\u9519\u8bef\u3002 @OnQueueWaiting() @OnGlobalQueueWaiting() handler(jobId: number | string) - \u5f53\u4e00\u4e2a\u5de5\u4eba\u7a7a\u95f2\u65f6\uff0c\u4e00\u4e2aJob\u6b63\u5728\u7b49\u5f85\u88ab\u5904\u7406\u3002 jobId \u5305\u542b\u5df2\u8fdb\u5165\u8be5\u72b6\u6001\u7684\u4f5c\u4e1a\u7684id\u3002 @OnQueueActive() @OnGlobalQueueActive() handler(job: Job) - Job job \u5df2\u7ecf\u5f00\u59cb\u3002 @OnQueueStalled() @OnGlobalQueueStalled() handler(job: Job) - Job job \u5df2\u88ab\u6807\u8bb0\u4e3a\u505c\u6ede\u3002 \u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u5d29\u6e83\u6216\u6682\u505c\u4e8b\u4ef6\u5faa\u73af\u7684\u4f5c\u4e1a\u64cd\u4f5c\u8005\u975e\u5e38\u6709\u7528\u3002 @OnQueueProgress() @OnGlobalQueueProgress() handler(job: Job, progress: number) - Job job \u7684\u8fdb\u5ea6\u88ab\u66f4\u65b0\u4e3a\u503c progress . @OnQueueCompleted() @OnGlobalQueueCompleted() handler(job: Job, result: any) Job job \u6210\u529f\u5b8c\u6210\uff0c\u7ed3\u679c result \u3002 @OnQueueFailed() @OnGlobalQueueFailed() handler(job: Job, err: Error) Job job \u5931\u8d25\uff0c\u539f\u56e0 err \u3002 @OnQueuePaused() @OnGlobalQueuePaused() handler() \u961f\u5217\u5df2\u6682\u505c\u3002 @OnQueueResumed() @OnGlobalQueueResumed() handler(job: Job) \u961f\u5217\u5df2\u6062\u590d\u3002 @OnQueueCleaned() @OnGlobalQueueCleaned() handler(jobs: Job[], type: string) \u4ee5\u524d\u7684\u5de5\u4f5c\u5df2\u7ecf\u4ece\u961f\u5217\u4e2d\u6e05\u9664\u4e86\u3002 jobs \u662f\u6e05\u7406\u540e\u7684job\u7684\u6570\u7ec4\uff0c type \u662f\u6e05\u7406\u540e\u7684job\u7684\u7c7b\u578b\u3002 @OnQueueDrained() @OnGlobalQueueDrained() handler() \u5f53\u961f\u5217\u5904\u7406\u5b8c\u6240\u6709\u7b49\u5f85\u7684\u4f5c\u4e1a\u65f6\u89e6\u53d1(\u5373\u4f7f\u53ef\u80fd\u6709\u4e00\u4e9b\u5ef6\u8fdf\u7684\u4f5c\u4e1a\u5c1a\u672a\u5904\u7406)\u3002 @OnQueueRemoved() @OnGlobalQueueRemoved() handler(job: Job) Job job \u5df2\u6210\u529f\u5220\u9664\u3002 \u5f53\u76d1\u542c\u5168\u5c40\u4e8b\u4ef6\u65f6\uff0c\u65b9\u6cd5\u7b7e\u540d\u53ef\u80fd\u4e0e\u5b83\u4eec\u7684\u672c\u5730\u5bf9\u7b49\u7269\u7565\u6709\u4e0d\u540c\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u4efb\u4f55\u5728\u672c\u5730\u7248\u672c\u4e2d\u63a5\u6536 job \u5bf9\u8c61\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c\u90fd\u4f1a\u5728\u5168\u5c40\u7248\u672c\u4e2d\u63a5\u6536\u5230\u4e00\u4e2a jobId ( number )\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8981\u83b7\u53d6\u5bf9\u5b9e\u9645 job \u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u8bf7\u4f7f\u7528 Queue#getJob \u65b9\u6cd5\u3002\u8fd9\u4e2a\u8c03\u7528\u5e94\u8be5\u88ab\u7b49\u5f85\uff0c\u56e0\u6b64\u5904\u7406\u7a0b\u5e8f\u5e94\u8be5\u88ab\u58f0\u660e\u4e3a async \u3002 \u4f8b\u5982: @OnGlobalQueueCompleted () async onGlobalCompleted ( jobId : number , result : any ) { const job = await this . immediateQueue . getJob ( jobId ); console . log ( '(Global) on completed: job ' , job . id , ' -> result: ' , result ); } info Hint \u8981\u8bbf\u95ee Queue \u5bf9\u8c61(\u8c03\u7528 getJob() )\uff0c\u4f60\u5f53\u7136\u5fc5\u987b\u6ce8\u5165\u5b83\u3002\u6b64\u5916\uff0cQueue \u5fc5\u987b\u5728\u6ce8\u5165\u5b83\u7684\u6a21\u5757\u4e2d\u6ce8\u518c\u3002 \u9664\u4e86\u7279\u5b9a\u7684\u4e8b\u4ef6\u76d1\u542c\u5668\u88c5\u9970\u5668\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u7684 @OnQueueEvent() \u88c5\u9970\u5668\u7ed3\u5408 BullQueueEvents \u6216 BullQueueGlobalEvents \u679a\u4e3e\u3002 \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u4e8b\u4ef6\u7684\u4fe1\u606f \u8fd9\u91cc .","title":"\u4e8b\u4ef6\u76d1\u542c\u5668"},{"location":"techniques/queues/#_10","text":"Queue \u7684 API \u5141\u8bb8\u60a8\u6267\u884c\u7ba1\u7406\u529f\u80fd\uff0c\u6bd4\u5982\u6682\u505c\u548c\u6062\u590d\uff0c\u68c0\u7d22\u5904\u4e8e\u4e0d\u540c\u72b6\u6001\u7684\u4f5c\u4e1a\u7684\u8ba1\u6570\uff0c\u7b49\u7b49\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u5b8c\u6574\u7684\u961f\u5217 API. \u76f4\u63a5\u5728 Queue \u5bf9\u8c61\u4e0a\u8c03\u7528\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u5982\u4e0b\u9762\u7684 pause/resume \u793a\u4f8b\u6240\u793a\u3002 \u4f7f\u7528 Pause() \u65b9\u6cd5\u8c03\u7528\u6682\u505c\u961f\u5217\u3002\u6682\u505c\u7684\u961f\u5217\u5728\u6062\u590d\u4e4b\u524d\u4e0d\u4f1a\u5904\u7406\u65b0\u4f5c\u4e1a\uff0c\u4f46\u6b63\u5728\u5904\u7406\u7684\u5f53\u524d\u4f5c\u4e1a\u5c06\u7ee7\u7eed\u5904\u7406\uff0c\u76f4\u5230\u5b83\u4eec\u5b8c\u6210\u4e3a\u6b62\u3002 await audioQueue . pause (); \u8981\u6062\u590d\u6682\u505c\u7684\u961f\u5217\uff0c\u8bf7\u4f7f\u7528 resume() \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: await audioQueue . resume ();","title":"\u961f\u5217\u7ba1\u7406"},{"location":"techniques/queues/#_11","text":"\u4f5c\u4e1a\u5904\u7406\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u5728\u5355\u72ec\u7684(\u5206\u53c9\u7684)\u8fdb\u7a0b\u4e2d\u8fd0\u884c ( source ). \u8fd9\u6709\u51e0\u4e2a\u4f18\u70b9: \u8fd9\u4e2a\u8fdb\u7a0b\u662f\u6c99\u7bb1\u5316\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u5b83\u5d29\u6e83\u4e86\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5de5\u4f5c\u8fdb\u7a0b\u3002 \u60a8\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u961f\u5217\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u963b\u585e\u4ee3\u7801(\u4f5c\u4e1a\u4e0d\u4f1a\u505c\u6b62)\u3002 \u66f4\u597d\u5730\u5229\u7528\u591a\u6838 cpu\u3002 \u51cf\u5c11\u4e0e redis \u7684\u8fde\u63a5\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { BullModule } from '@nestjs/bull' ; import { join } from 'path' ; @Module ({ imports : [ BullModule . registerQueue ({ name : 'audio' , processors : [ join ( __dirname , 'processor.js' )], }), ], }) export class AppModule {} \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u4f60\u7684\u51fd\u6570\u662f\u5728\u4e00\u4e2a\u5206\u53c9\u7684\u8fdb\u7a0b\u4e2d\u6267\u884c\u7684\uff0c\u6240\u4ee5\u4f9d\u8d56\u6ce8\u5165(\u548c IoC \u5bb9\u5668)\u5c06\u4e0d\u53ef\u7528\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u7684\u5904\u7406\u5668\u51fd\u6570\u5c06\u9700\u8981\u5305\u542b(\u6216\u521b\u5efa)\u5b83\u9700\u8981\u7684\u6240\u6709\u5916\u90e8\u4f9d\u8d56\u9879\u5b9e\u4f8b\u3002 @ @filename ( processor ) import { Job , DoneCallback } from 'bull' ; export default function ( job : Job , cb : DoneCallback ) { console . log ( `[ ${ process . pid } ] ${ JSON . stringify ( job . data ) } ` ); cb ( null , 'It works' ); }","title":"\u72ec\u7acb\u7684\u8fdb\u7a0b"},{"location":"techniques/queues/#_12","text":"\u4f60\u53ef\u80fd\u60f3\u5f02\u6b65\u4f20\u9012 bull \u9009\u9879\uff0c\u800c\u4e0d\u662f\u9759\u6001\u4f20\u9012\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 forRootAsync() \u65b9\u6cd5\uff0c\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u65b9\u6cd5\u3002 \u540c\u6837\uff0c\u5982\u679c\u4f60\u60f3\u5f02\u6b65\u4f20\u9012\u961f\u5217\u9009\u9879\uff0c\u8bf7\u4f7f\u7528 registerQueueAsync() \u65b9\u6cd5\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: BullModule . forRootAsync ({ useFactory : () => ({ redis : { host : 'localhost' , port : 6379 , }, }), }); \u6211\u4eec\u7684\u5de5\u5382\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u4efb\u4f55\u5176\u4ed6\u7684 \u5f02\u6b65\u63d0\u4f9b\u7a0b\u5e8f (\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u662f async \uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879\u3002). BullModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : async ( configService : ConfigService ) => ({ redis : { host : configService.get ( 'QUEUE_HOST' ), port : + configService . get ( 'QUEUE_PORT' ), }, }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useClass \u8bed\u6cd5: BullModule . forRootAsync ({ useClass : BullConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5c06\u5728 BullModule \u4e2d\u5b9e\u4f8b\u5316 BullConfigService \uff0c\u5e76\u901a\u8fc7\u8c03\u7528 createSharedConfiguration() \u6765\u63d0\u4f9b\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740 BullConfigService \u5fc5\u987b\u5b9e\u73b0 SharedBullConfigurationFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a: @Injectable () class BullConfigService implements SharedBullConfigurationFactory { createSharedConfiguration () : BullModuleOptions { return { redis : { host : 'localhost' , port : 6379 , }, }; } } \u4e3a\u4e86\u9632\u6b62\u5728 BullModule \u4e2d\u521b\u5efa BullConfigService \uff0c\u5e76\u4f7f\u7528\u4ece\u4e0d\u540c\u6a21\u5757\u5bfc\u5165\u7684\u63d0\u4f9b\u5546\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 BullModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u8fd9\u4e2a\u6784\u9020\u7684\u5de5\u4f5c\u539f\u7406\u4e0e useClass \u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b -- BullModule \u5c06\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757\u6765\u91cd\u7528\u73b0\u6709\u7684 ConfigService \uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684\u3002","title":"\u5f02\u6b65\u7684\u914d\u7f6e"},{"location":"techniques/queues/#_13","text":"\u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u4f8b\u5b50"},{"location":"techniques/serialization/","text":"Serialization \u00b6 Serialization is a process that happens before objects are returned in a network response. This is an appropriate place to provide rules for transforming and sanitizing the data to be returned to the client. For example, sensitive data like passwords should always be excluded from the response. Or, certain properties might require additional transformation, such as sending only a subset of properties of an entity. Performing these transformations manually can be tedious and error prone, and can leave you uncertain that all cases have been covered. Overview \u00b6 Nest provides a built-in capability to help ensure that these operations can be performed in a straightforward way. The ClassSerializerInterceptor interceptor uses the powerful class-transformer package to provide a declarative and extensible way of transforming objects. The basic operation it performs is to take the value returned by a method handler and apply the classToPlain() function from class-transformer . In doing so, it can apply rules expressed by class-transformer decorators on an entity/DTO class, as described below. Exclude properties \u00b6 Let's assume that we want to automatically exclude a password property from a user entity. We annotate the entity as follows: import { Exclude } from 'class-transformer' ; export class UserEntity { id : number ; firstName : string ; lastName : string ; @Exclude () password : string ; constructor ( partial : Partial < UserEntity > ) { Object . assign ( this , partial ); } } Now consider a controller with a method handler that returns an instance of this class. @UseInterceptors ( ClassSerializerInterceptor ) @Get () findOne () : UserEntity { return new UserEntity ({ id : 1 , firstName : 'Kamil' , lastName : 'Mysliwiec' , password : 'password' , }); } Warning Note that we must return an instance of the class. If you return a plain JavaScript object, for example, {{ '{' }} user: new UserEntity() {{ '}' }} , the object won't be properly serialized. info Hint The ClassSerializerInterceptor is imported from @nestjs/common . When this endpoint is requested, the client receives the following response: { \"id\" : 1 , \"firstName\" : \"Kamil\" , \"lastName\" : \"Mysliwiec\" } Note that the interceptor can be applied application-wide (as covered here ). The combination of the interceptor and the entity class declaration ensures that any method that returns a UserEntity will be sure to remove the password property. This gives you a measure of centralized enforcement of this business rule. Expose properties \u00b6 You can use the @Expose() decorator to provide alias names for properties, or to execute a function to calculate a property value (analogous to getter functions), as shown below. @Expose () get fullName () : string { return ` ${ this . firstName } ${ this . lastName } ` ; } Transform \u00b6 You can perform additional data transformation using the @Transform() decorator. For example, the following construct returns the name property of the RoleEntity instead of returning the whole object. @Transform (({ value }) => value . name ) role : RoleEntity ; Pass options \u00b6 You may want to modify the default behavior of the transformation functions. To override default settings, pass them in an options object with the @SerializeOptions() decorator. @SerializeOptions ({ excludePrefixes : [ '_' ], }) @Get () findOne () : UserEntity { return new UserEntity (); } info Hint The @SerializeOptions() decorator is imported from @nestjs/common . Options passed via @SerializeOptions() are passed as the second argument of the underlying classToPlain() function. In this example, we are automatically excluding all properties that begin with the _ prefix. Example \u00b6 A working example is available here . WebSockets and Microservices \u00b6 While this chapter shows examples using HTTP style applications (e.g., Express or Fastify), the ClassSerializerInterceptor works the same for WebSockets and Microservices, regardless of the transport method that is used. Learn more \u00b6 Read more about available decorators and options as provided by the class-transformer package here .","title":"\u5e8f\u5217\u5316"},{"location":"techniques/serialization/#serialization","text":"Serialization is a process that happens before objects are returned in a network response. This is an appropriate place to provide rules for transforming and sanitizing the data to be returned to the client. For example, sensitive data like passwords should always be excluded from the response. Or, certain properties might require additional transformation, such as sending only a subset of properties of an entity. Performing these transformations manually can be tedious and error prone, and can leave you uncertain that all cases have been covered.","title":"Serialization"},{"location":"techniques/serialization/#overview","text":"Nest provides a built-in capability to help ensure that these operations can be performed in a straightforward way. The ClassSerializerInterceptor interceptor uses the powerful class-transformer package to provide a declarative and extensible way of transforming objects. The basic operation it performs is to take the value returned by a method handler and apply the classToPlain() function from class-transformer . In doing so, it can apply rules expressed by class-transformer decorators on an entity/DTO class, as described below.","title":"Overview"},{"location":"techniques/serialization/#exclude-properties","text":"Let's assume that we want to automatically exclude a password property from a user entity. We annotate the entity as follows: import { Exclude } from 'class-transformer' ; export class UserEntity { id : number ; firstName : string ; lastName : string ; @Exclude () password : string ; constructor ( partial : Partial < UserEntity > ) { Object . assign ( this , partial ); } } Now consider a controller with a method handler that returns an instance of this class. @UseInterceptors ( ClassSerializerInterceptor ) @Get () findOne () : UserEntity { return new UserEntity ({ id : 1 , firstName : 'Kamil' , lastName : 'Mysliwiec' , password : 'password' , }); } Warning Note that we must return an instance of the class. If you return a plain JavaScript object, for example, {{ '{' }} user: new UserEntity() {{ '}' }} , the object won't be properly serialized. info Hint The ClassSerializerInterceptor is imported from @nestjs/common . When this endpoint is requested, the client receives the following response: { \"id\" : 1 , \"firstName\" : \"Kamil\" , \"lastName\" : \"Mysliwiec\" } Note that the interceptor can be applied application-wide (as covered here ). The combination of the interceptor and the entity class declaration ensures that any method that returns a UserEntity will be sure to remove the password property. This gives you a measure of centralized enforcement of this business rule.","title":"Exclude properties"},{"location":"techniques/serialization/#expose-properties","text":"You can use the @Expose() decorator to provide alias names for properties, or to execute a function to calculate a property value (analogous to getter functions), as shown below. @Expose () get fullName () : string { return ` ${ this . firstName } ${ this . lastName } ` ; }","title":"Expose properties"},{"location":"techniques/serialization/#transform","text":"You can perform additional data transformation using the @Transform() decorator. For example, the following construct returns the name property of the RoleEntity instead of returning the whole object. @Transform (({ value }) => value . name ) role : RoleEntity ;","title":"Transform"},{"location":"techniques/serialization/#pass-options","text":"You may want to modify the default behavior of the transformation functions. To override default settings, pass them in an options object with the @SerializeOptions() decorator. @SerializeOptions ({ excludePrefixes : [ '_' ], }) @Get () findOne () : UserEntity { return new UserEntity (); } info Hint The @SerializeOptions() decorator is imported from @nestjs/common . Options passed via @SerializeOptions() are passed as the second argument of the underlying classToPlain() function. In this example, we are automatically excluding all properties that begin with the _ prefix.","title":"Pass options"},{"location":"techniques/serialization/#example","text":"A working example is available here .","title":"Example"},{"location":"techniques/serialization/#websockets-and-microservices","text":"While this chapter shows examples using HTTP style applications (e.g., Express or Fastify), the ClassSerializerInterceptor works the same for WebSockets and Microservices, regardless of the transport method that is used.","title":"WebSockets and Microservices"},{"location":"techniques/serialization/#learn-more","text":"Read more about available decorators and options as provided by the class-transformer package here .","title":"Learn more"},{"location":"techniques/server-sent-events/","text":"Server-Sent Events \u00b6 Server-Sent Events (SSE) is a server push technology enabling a client to receive automatic updates from a server via HTTP connection. Each notification is sent as a block of text terminated by a pair of newlines (learn more here ). Usage \u00b6 To enable Server-Sent events on a route (route registered within a controller class ), annotate the method handler with the @Sse() decorator. @Sse ( 'sse' ) sse () : Observable < MessageEvent > { return interval ( 1000 ). pipe ( map (( _ ) => ({ data : { hello : 'world' } }))); } info Hint The @Sse() decorator and MessageEvent interface are imported from the @nestjs/common , while Observable , interval , and map are imported from the rxjs package. warning Warning Server-Sent Events routes must return an Observable stream. In the example above, we defined a route named sse that will allow us to propagate real-time updates. These events can be listened to using the EventSource API . The sse method returns an Observable that emits multiple MessageEvent (in this example, it emits a new MessageEvent every second). The MessageEvent object should respect the following interface to match the specification: export interface MessageEvent { data : string | object ; id? : string ; type ? : string ; retry? : number ; } With this in place, we can now create an instance of the EventSource class in our client-side application, passing the /sse route (which matches the endpoint we have passed into the @Sse() decorator above) as a constructor argument. EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format. The connection remains open until closed by calling EventSource.close() . Once the connection is opened, incoming messages from the server are delivered to your code in the form of events. If there is an event field in the incoming message, the triggered event is the same as the event field value. If no event field is present, then a generic message event is fired ( source ). const eventSource = new EventSource ( '/sse' ); eventSource . onmessage = ({ data }) => { console . log ( 'New message' , JSON . parse ( data )); }; Example \u00b6 A working example is available here .","title":"\u670d\u52a1\u5668\u53d1\u9001\u7684\u4e8b\u4ef6"},{"location":"techniques/server-sent-events/#server-sent-events","text":"Server-Sent Events (SSE) is a server push technology enabling a client to receive automatic updates from a server via HTTP connection. Each notification is sent as a block of text terminated by a pair of newlines (learn more here ).","title":"Server-Sent Events"},{"location":"techniques/server-sent-events/#usage","text":"To enable Server-Sent events on a route (route registered within a controller class ), annotate the method handler with the @Sse() decorator. @Sse ( 'sse' ) sse () : Observable < MessageEvent > { return interval ( 1000 ). pipe ( map (( _ ) => ({ data : { hello : 'world' } }))); } info Hint The @Sse() decorator and MessageEvent interface are imported from the @nestjs/common , while Observable , interval , and map are imported from the rxjs package. warning Warning Server-Sent Events routes must return an Observable stream. In the example above, we defined a route named sse that will allow us to propagate real-time updates. These events can be listened to using the EventSource API . The sse method returns an Observable that emits multiple MessageEvent (in this example, it emits a new MessageEvent every second). The MessageEvent object should respect the following interface to match the specification: export interface MessageEvent { data : string | object ; id? : string ; type ? : string ; retry? : number ; } With this in place, we can now create an instance of the EventSource class in our client-side application, passing the /sse route (which matches the endpoint we have passed into the @Sse() decorator above) as a constructor argument. EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format. The connection remains open until closed by calling EventSource.close() . Once the connection is opened, incoming messages from the server are delivered to your code in the form of events. If there is an event field in the incoming message, the triggered event is the same as the event field value. If no event field is present, then a generic message event is fired ( source ). const eventSource = new EventSource ( '/sse' ); eventSource . onmessage = ({ data }) => { console . log ( 'New message' , JSON . parse ( data )); };","title":"Usage"},{"location":"techniques/server-sent-events/#example","text":"A working example is available here .","title":"Example"},{"location":"techniques/sessions/","text":"Session \u00b6 HTTP sessions provide a way to store information about the user across multiple requests, which is particularly useful for MVC applications. Use with Express (default) \u00b6 First install the required package (and its types for TypeScript users): $ npm i express-session $ npm i -D @types/express-session Once the installation is complete, apply the express-session middleware as global middleware (for example, in your main.ts file). import * as session from 'express-session' ; // somewhere in your initialization file app . use ( session ({ secret : 'my-secret' , resave : false , saveUninitialized : false , }), ); warning Notice The default server-side session storage is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing. Read more in the official repository . The secret is used to sign the session ID cookie. This can be either a string for a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. Enabling the resave option forces the session to be saved back to the session store, even if the session was never modified during the request. The default value is true , but using the default has been deprecated, as the default will change in the future. Likewise, enabling the saveUninitialized option Forces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing false is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing false will also help with race conditions where a client makes multiple parallel requests without a session ( source ). You can pass several other options to the session middleware, read more about them in the API documentation . info Hint Please note that secure: true is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If secure is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using secure: true , you need to set \"trust proxy\" in express. With this in place, you can now set and read session values from within the route handlers, as follows: @Get () findAll ( @Req () request : Request ) { request . session . visits = request . session . visits ? request . session . visits + 1 : 1 ; } info Hint The @Req() decorator is imported from the @nestjs/common , while Request from the express package. Alternatively, you can use the @Session() decorator to extract a session object from the request, as follows: @Get () findAll ( @Session () session : Record < string , any > ) { session . visits = session . visits ? session . visits + 1 : 1 ; } info Hint The @Session() decorator is imported from the @nestjs/common package. Use with Fastify \u00b6 First install the required package: $ npm i fastify-secure-session Once the installation is complete, register the fastify-secure-session plugin: import secureSession from 'fastify-secure-session' ; // somewhere in your initialization file const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter (), ); app . register ( secureSession , { secret : 'averylogphrasebiggerthanthirtytwochars' , salt : 'mq9hDxBVDbspDR6n' , }); info Hint You can also pregenerate a key ( see instructions ) or use keys rotation . Read more about the available options in the official repository . With this in place, you can now set and read session values from within the route handlers, as follows: @Get () findAll ( @Req () request : FastifyRequest ) { const visits = request . session . get ( 'visits' ); request . session . set ( 'visits' , visits ? visits + 1 : 1 ); } Alternatively, you can use the @Session() decorator to extract a session object from the request, as follows: @Get () findAll ( @Session () session : secureSession.Session ) { const visits = session . get ( 'visits' ); session . set ( 'visits' , visits ? visits + 1 : 1 ); } info Hint The @Session() decorator is imported from the @nestjs/common , while secureSession.Session from the fastify-secure-session package (import statement: import * as secureSession from 'fastify-secure-session' ).","title":"Session"},{"location":"techniques/sessions/#session","text":"HTTP sessions provide a way to store information about the user across multiple requests, which is particularly useful for MVC applications.","title":"Session"},{"location":"techniques/sessions/#use-with-express-default","text":"First install the required package (and its types for TypeScript users): $ npm i express-session $ npm i -D @types/express-session Once the installation is complete, apply the express-session middleware as global middleware (for example, in your main.ts file). import * as session from 'express-session' ; // somewhere in your initialization file app . use ( session ({ secret : 'my-secret' , resave : false , saveUninitialized : false , }), ); warning Notice The default server-side session storage is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing. Read more in the official repository . The secret is used to sign the session ID cookie. This can be either a string for a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. Enabling the resave option forces the session to be saved back to the session store, even if the session was never modified during the request. The default value is true , but using the default has been deprecated, as the default will change in the future. Likewise, enabling the saveUninitialized option Forces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing false is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing false will also help with race conditions where a client makes multiple parallel requests without a session ( source ). You can pass several other options to the session middleware, read more about them in the API documentation . info Hint Please note that secure: true is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If secure is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using secure: true , you need to set \"trust proxy\" in express. With this in place, you can now set and read session values from within the route handlers, as follows: @Get () findAll ( @Req () request : Request ) { request . session . visits = request . session . visits ? request . session . visits + 1 : 1 ; } info Hint The @Req() decorator is imported from the @nestjs/common , while Request from the express package. Alternatively, you can use the @Session() decorator to extract a session object from the request, as follows: @Get () findAll ( @Session () session : Record < string , any > ) { session . visits = session . visits ? session . visits + 1 : 1 ; } info Hint The @Session() decorator is imported from the @nestjs/common package.","title":"Use with Express (default)"},{"location":"techniques/sessions/#use-with-fastify","text":"First install the required package: $ npm i fastify-secure-session Once the installation is complete, register the fastify-secure-session plugin: import secureSession from 'fastify-secure-session' ; // somewhere in your initialization file const app = await NestFactory . create < NestFastifyApplication > ( AppModule , new FastifyAdapter (), ); app . register ( secureSession , { secret : 'averylogphrasebiggerthanthirtytwochars' , salt : 'mq9hDxBVDbspDR6n' , }); info Hint You can also pregenerate a key ( see instructions ) or use keys rotation . Read more about the available options in the official repository . With this in place, you can now set and read session values from within the route handlers, as follows: @Get () findAll ( @Req () request : FastifyRequest ) { const visits = request . session . get ( 'visits' ); request . session . set ( 'visits' , visits ? visits + 1 : 1 ); } Alternatively, you can use the @Session() decorator to extract a session object from the request, as follows: @Get () findAll ( @Session () session : secureSession.Session ) { const visits = session . get ( 'visits' ); session . set ( 'visits' , visits ? visits + 1 : 1 ); } info Hint The @Session() decorator is imported from the @nestjs/common , while secureSession.Session from the fastify-secure-session package (import statement: import * as secureSession from 'fastify-secure-session' ).","title":"Use with Fastify"},{"location":"techniques/sql/","text":"\u6570\u636e\u5e93 \u00b6 Nest \u4e0e\u6570\u636e\u5e93\u65e0\u5173\uff0c\u5141\u8bb8\u60a8\u8f7b\u677e\u5730\u4e0e\u4efb\u4f55 SQL \u6216 NoSQL \u6570\u636e\u5e93\u96c6\u6210\u3002 \u6839\u636e\u60a8\u7684\u504f\u597d\uff0c\u60a8\u6709\u8bb8\u591a\u53ef\u4f9b\u9009\u62e9\u7684\u9009\u9879\u3002 \u5728\u6700\u4e00\u822c\u7684\u5c42\u9762\u4e0a\uff0c\u8fde\u63a5 Nest \u5230\u6570\u636e\u5e93\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u4e3a\u6570\u636e\u5e93\u52a0\u8f7d\u4e00\u4e2a\u5408\u9002\u7684 Node.js \u9a71\u52a8\u7a0b\u5e8f\uff0c\u5c31\u50cf\u4f60\u4f7f\u7528 Express \u6216 fasttify \u4e00\u6837\u3002 \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4efb\u4f55\u901a\u7528\u7684 Node.js \u6570\u636e\u5e93\u96c6\u6210 \u5e93 \u6216 ORM, such as MikroORM also check the recipe here , Sequelize (navigate to the Sequelize integration section), Knex.js ( tutorial ), TypeORM , and Prisma ( recipe ) , \u4ee5\u5728\u66f4\u9ad8\u7684\u62bd\u8c61\u7ea7\u522b\u4e0a\u64cd\u4f5c\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0cNest \u63d0\u4f9b\u4e86\u4e0e TypeORM \u548c Sequelize \u7684\u7d27\u5bc6\u96c6\u6210\uff0c\u5b83\u4eec\u5206\u522b\u662f @nestjs/typeorm \u548c @nestjs/sequelize \u5305\uff0c\u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u4ecb\u7ecd\uff0c\u800c Mongoose \u4e0e @nestjs/mongoose \u5305\uff0c\u8fd9\u5728 \u672c\u7ae0 \u4e2d\u4ecb\u7ecd\u3002 \u8fd9\u4e9b\u96c6\u6210\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u7279\u5b9a\u4e8e nestjs \u7684\u7279\u6027\uff0c\u4f8b\u5982\u6a21\u578b/\u5b58\u50a8\u5e93\u6ce8\u5165\u3001\u53ef\u6d4b\u8bd5\u6027\u548c\u5f02\u6b65\u914d\u7f6e\uff0c\u4f7f\u8bbf\u95ee\u60a8\u9009\u62e9\u7684\u6570\u636e\u5e93\u66f4\u52a0\u5bb9\u6613\u3002 TypeORM \u96c6\u6210 \u00b6 \u4e3a\u4e86\u96c6\u6210 SQL \u548c NoSQL \u6570\u636e\u5e93\uff0cNest \u63d0\u4f9b\u4e86 @nestjs/typeform \u5305\u3002 Nest \u4f7f\u7528 TypeORM \u662f\u56e0\u4e3a\u5b83\u662f TypeScript \u53ef\u7528\u7684\u6700\u6210\u719f\u7684\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668(Object Relational Mapper, ORM)\u3002 \u56e0\u4e3a\u5b83\u662f\u7528 TypeScript \u7f16\u5199\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f88\u597d\u5730\u4e0e Nest \u6846\u67b6\u96c6\u6210\u3002 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u4f7f\u7528\u6d41\u884c\u7684 MySQL \u5173\u7cfb\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff0c\u4f46 TypeORM \u63d0\u4f9b\u4e86\u8bb8\u591a\u5173\u7cfb\u6570\u636e\u5e93\u7684\u652f\u6301\uff0c\u5982 PostgreSQL, Oracle, Microsoft SQL Server, SQLite\uff0c\u751a\u81f3 NoSQL \u6570\u636e\u5e93\uff0c\u5982 MongoDB\u3002 \u5bf9\u4e8e TypeORM \u652f\u6301\u7684\u4efb\u4f55\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5728\u672c\u7ae0\u4e2d\u6240\u7ecf\u5386\u7684\u8fc7\u7a0b\u90fd\u662f\u76f8\u540c\u7684\u3002 \u60a8\u53ea\u9700\u8981\u4e3a\u6240\u9009\u6570\u636e\u5e93\u5b89\u88c5\u76f8\u5173\u7684\u5ba2\u6237\u7aef API \u5e93\u3002 $ npm install --save @nestjs/typeorm typeorm mysql2 \u4e00\u65e6\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a TypeOrmModule \u5bfc\u5165\u5230\u6839\u76ee\u5f55 AppModule \u4e2d\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; @Module ({ imports : [ TypeOrmModule . forRoot ({ type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [], synchronize : true , }), ], }) export class AppModule {} warning Warning \u8bbe\u7f6e synchronize: true \u4e0d\u5e94\u8be5\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\uff0c\u5426\u5219\u60a8\u53ef\u80fd\u4f1a\u4e22\u5931\u751f\u4ea7\u6570\u636e\u3002 forRoot() \u65b9\u6cd5\u652f\u6301\u6240\u6709\u7531 TypeORM \u5305\u4e2d\u7684 createConnection() \u51fd\u6570\u516c\u5f00\u7684\u914d\u7f6e\u5c5e\u6027\u3002 \u6b64\u5916\uff0c\u4e0b\u9762\u8fd8\u63cf\u8ff0\u4e86\u51e0\u4e2a\u989d\u5916\u7684\u914d\u7f6e\u5c5e\u6027\u3002 retryAttempts \u5c1d\u8bd5\u8fde\u63a5\u6570\u636e\u5e93\u7684\u6b21\u6570 (default: 10 ) retryDelay \u8fde\u63a5\u91cd\u8bd5\u4e4b\u95f4\u7684\u5ef6\u8fdf(ms) (default: 3000 ) autoLoadEntities \u5982\u679c true \uff0c\u5b9e\u4f53\u5c06\u88ab\u81ea\u52a8\u52a0\u8f7d (default: false ) keepConnectionAlive \u5982\u679c true \uff0c\u8fde\u63a5\u5c06\u4e0d\u4f1a\u5728\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u5173\u95ed (default: false ) info Hint \u6709\u5173\u8fde\u63a5\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f \u8fd9\u91cc \u3002 \u6216\u8005\uff0c\u4e0d\u9700\u8981\u5c06\u914d\u7f6e\u5bf9\u8c61\u4f20\u9012\u7ed9 forRoot() \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a ormconfig.json \u6587\u4ef6\u3002 { \"type\" : \"mysql\" , \"host\" : \"localhost\" , \"port\" : 3306 , \"username\" : \"root\" , \"password\" : \"root\" , \"database\" : \"test\" , \"entities\" : [ \"dist/**/*.entity{.ts,.js}\" ], \"synchronize\" : true } \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u5e26\u4efb\u4f55\u9009\u9879\u8c03\u7528 forRoot() : @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; @Module ({ imports : [ TypeOrmModule . forRoot ()], }) export class AppModule {} warning Warning \u9759\u6001\u7684 glob \u8def\u5f84(e.g., dist/**/*.entity{{ '{' }} .ts,.js{{ '}' }} )\u4e0d\u4f1a\u6b63\u5e38\u5de5\u4f5c webpack . info Hint \u6ce8\u610f ormconfig.json \u6587\u4ef6\u662f\u7531 typeform \u5e93\u52a0\u8f7d\u7684\u3002 \u56e0\u6b64\uff0c\u4e0a\u9762\u63cf\u8ff0\u7684\u4efb\u4f55\u989d\u5916\u5c5e\u6027(\u901a\u8fc7\u5185\u90e8\u7684 forRoot() \u65b9\u6cd5\u652f\u6301-\u4f8b\u5982\uff0c autoLoadEntities \u548c retryDelay )\u5c06\u4e0d\u4f1a\u88ab\u5e94\u7528\u3002 \u5e78\u8fd0\u7684\u662f\uff0cTypeORM \u63d0\u4f9b\u4e86 getConnectionOptions \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4ece ormconfig \u6587\u4ef6\u6216\u73af\u5883\u53d8\u91cf\u4e2d\u8bfb\u53d6\u8fde\u63a5\u9009\u9879\u3002 \u8fd9\u6837\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u5e76\u8bbe\u7f6e\u7279\u5b9a\u4e8e nest \u7684\u9009\u9879\uff0c\u5982\u4e0b\u6240\u793a: TypeOrmModule . forRootAsync ({ useFactory : async () => Object . assign ( await getConnectionOptions (), { autoLoadEntities : true , }), }); \u4e00\u65e6\u5b8c\u6210\uff0cTypeORM Connection \u548c EntityManager \u5bf9\u8c61\u5c06\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u6ce8\u5165(\u4e0d\u9700\u8981\u5bfc\u5165\u4efb\u4f55\u6a21\u5757)\uff0c\u4f8b\u5982: @ @filename ( app . module ) import { Connection } from 'typeorm' ; @Module ({ imports : [ TypeOrmModule . forRoot (), UsersModule ], }) export class AppModule { constructor ( private connection : Connection ) {} } @ @switch import { Connection } from 'typeorm' ; @Dependencies ( Connection ) @Module ({ imports : [ TypeOrmModule . forRoot (), UsersModule ], }) export class AppModule { constructor ( connection ) { this . connection = connection ; } } \u5e93\u6a21\u5f0f \u00b6 TypeORM \u652f\u6301 \u5e93\u8bbe\u8ba1\u6a21\u5f0f \uff0c\u56e0\u6b64\u6bcf\u4e2a\u5b9e\u4f53\u90fd\u6709\u81ea\u5df1\u7684\u5e93\u3002 \u8fd9\u4e9b\u5b58\u50a8\u5e93\u53ef\u4ee5\u4ece\u6570\u636e\u5e93\u8fde\u63a5\u4e2d\u83b7\u5f97\u3002 \u4e3a\u4e86\u7ee7\u7eed\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u5b9e\u4f53\u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49\u201c\u7528\u6237\u201d\u5b9e\u4f53\u3002 @ @filename ( user . entity ) import { Entity , Column , PrimaryGeneratedColumn } from 'typeorm' ; @Entity () export class User { @PrimaryGeneratedColumn () id : number ; @Column () firstName : string ; @Column () lastName : string ; @Column ({ default : true }) isActive : boolean ; } info Hint \u5173\u4e8e\u5b9e\u4f53\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 TypeORM \u6587\u6863 \u3002 User \u5b9e\u4f53\u6587\u4ef6\u4f4d\u4e8e users \u76ee\u5f55\u4e2d\u3002 \u8fd9\u4e2a\u76ee\u5f55\u5305\u542b\u6240\u6709\u4e0e UsersModule \u76f8\u5173\u7684\u6587\u4ef6\u3002 \u4f60\u53ef\u4ee5\u51b3\u5b9a\u5728\u54ea\u91cc\u4fdd\u5b58\u4f60\u7684\u6a21\u578b\u6587\u4ef6\uff0c\u7136\u800c\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u5b83\u4eec\u7684 \u57df \u9644\u8fd1\u521b\u5efa\u5b83\u4eec\uff0c\u5728\u76f8\u5e94\u7684\u6a21\u5757\u76ee\u5f55\u4e2d\u3002 \u4e3a\u4e86\u5f00\u59cb\u4f7f\u7528 User \u5b9e\u4f53\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5b83\u63d2\u5165\u5230\u6a21\u5757\u7684 forRoot() \u65b9\u6cd5\u9009\u9879\u4e2d\u7684 entities \u6570\u7ec4\u4e2d\uff0c\u8ba9 TypeORM \u77e5\u9053\u5b83(\u9664\u975e\u4f60\u4f7f\u7528\u4e00\u4e2a\u9759\u6001\u7684 glob \u8def\u5f84): @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { User } from './users/user.entity' ; @Module ({ imports : [ TypeOrmModule . forRoot ({ type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [ User ], synchronize : true , }), ], }) export class AppModule {} \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b UsersModule : @ @filename ( users . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { UsersService } from './users.service' ; import { UsersController } from './users.controller' ; import { User } from './user.entity' ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ])], providers : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} \u8fd9\u4e2a\u6a21\u5757\u4f7f\u7528 forFeature() \u65b9\u6cd5\u6765\u5b9a\u4e49\u54ea\u4e9b\u5b58\u50a8\u5e93\u6ce8\u518c\u5728\u5f53\u524d\u8303\u56f4\u5185\u3002 \u6709\u4e86\u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 @InjectRepository() \u88c5\u9970\u5668\u5c06 UsersRepository \u6ce8\u5165\u5230 UsersService \u4e2d: @ @filename ( users . service ) import { Injectable } from '@nestjs/common' ; import { InjectRepository } from '@nestjs/typeorm' ; import { Repository } from 'typeorm' ; import { User } from './user.entity' ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository : Repository < User > , ) {} findAll () : Promise < User [] > { return this . usersRepository . find (); } findOne ( id : string ) : Promise < User > { return this . usersRepository . findOne ( id ); } async remove ( id : string ) : Promise < void > { await this . usersRepository . delete ( id ); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { getRepositoryToken } from '@nestjs/typeorm' ; import { User } from './user.entity' ; @Injectable () @Dependencies ( getRepositoryToken ( User )) export class UsersService { constructor ( usersRepository ) { this . usersRepository = usersRepository ; } findAll () { return this . usersRepository . find (); } findOne ( id ) { return this . usersRepository . findOne ( id ); } async remove ( id ) { await this . usersRepository . delete ( id ); } } warning Notice \u522b\u5fd8\u4e86\u628a UsersModule \u5bfc\u5165\u6839\u6a21\u5757 AppModule \u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u6a21\u5757\u5916\u90e8\u7684\u5b58\u50a8\u5e93\uff0c\u8be5\u6a21\u5757\u5bfc\u5165\u4e86 TypeOrmModule.forFeature() \uff0c\u4f60\u9700\u8981\u91cd\u65b0\u5bfc\u51fa\u5b83\u751f\u6210\u7684\u63d0\u4f9b\u5668\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5bfc\u51fa\u6574\u4e2a\u6a21\u5757\u6765\u5b9e\u73b0\uff0c\u50cf\u8fd9\u6837: @ @filename ( users . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { User } from './user.entity' ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ])], exports : [ TypeOrmModule ] }) export class UsersModule {} \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u5728 UserHttpModule \u4e2d\u5bfc\u5165 UsersModule \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u540e\u4e00\u4e2a\u6a21\u5757\u7684 providers \u4e2d\u4f7f\u7528 @InjectRepository(User) \u3002 @ @filename ( users - http . module ) import { Module } from '@nestjs/common' ; import { UsersModule } from './users.module' ; import { UsersService } from './users.service' ; import { UsersController } from './users.controller' ; @Module ({ imports : [ UsersModule ], providers : [ UsersService ], controllers : [ UsersController ] }) export class UserHttpModule {} \u5173\u7cfb \u00b6 \u5173\u7cfb\u662f\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u8868\u4e4b\u95f4\u5efa\u7acb\u7684\u5173\u8054\u3002 \u5173\u7cfb\u57fa\u4e8e\u6bcf\u4e2a\u8868\u7684\u516c\u5171\u5b57\u6bb5\uff0c\u901a\u5e38\u6d89\u53ca\u4e3b\u952e\u548c\u5916\u952e\u3002 \u6709\u4e09\u79cd\u5173\u7cfb: One-to-one \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5173\u8054\u884c\u3002\u4f7f\u7528 @OneToOne() \u88c5\u9970\u5668\u6765\u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u5173\u7cfb\u3002 One-to-many / Many-to-one \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u90fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u76f8\u5173\u884c\u3002\u4f7f\u7528 @OneToMany() \u548c @ManyToOne() \u88c5\u9970\u5668\u6765\u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u5173\u7cfb\u3002 Many-to-many \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u6709\u8bb8\u591a\u76f8\u5173\u884c\uff0c\u800c\u5916\u90e8\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\u5728\u4e3b\u8868\u4e2d\u6709\u8bb8\u591a\u76f8\u5173\u884c\u3002\u4f7f\u7528 @ManyToMany() \u88c5\u9970\u5668\u6765\u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u5173\u7cfb\u3002 \u8981\u5b9a\u4e49\u5b9e\u4f53\u4e2d\u7684\u5173\u7cfb\uff0c\u8bf7\u4f7f\u7528\u76f8\u5e94\u7684 \u88c5\u9970\u5668 \u3002 \u4f8b\u5982\uff0c\u8981\u5b9a\u4e49\u6bcf\u4e2a User \u53ef\u4ee5\u6709\u591a\u4e2a\u7167\u7247\uff0c\u8bf7\u4f7f\u7528 @OneToMany() \u88c5\u9970\u5668\u3002 @ @filename ( user . entity ) import { Entity , Column , PrimaryGeneratedColumn , OneToMany } from 'typeorm' ; import { Photo } from '../photos/photo.entity' ; @Entity () export class User { @PrimaryGeneratedColumn () id : number ; @Column () firstName : string ; @Column () lastName : string ; @Column ({ default : true }) isActive : boolean ; @OneToMany ( type => Photo , photo => photo . user ) photos : Photo []; } info Hint \u8981\u4e86\u89e3 TypeORM \u4e2d\u7684\u66f4\u591a\u5173\u7cfb\uff0c\u8bf7\u8bbf\u95ee TypeORM \u6587\u6863 \u3002 \u81ea\u52a8\u52a0\u8f7d\u5b9e\u4f53 \u00b6 \u624b\u52a8\u6dfb\u52a0\u5b9e\u4f53\u5230\u8fde\u63a5\u9009\u9879\u7684 entities \u6570\u7ec4\u4e2d\u53ef\u80fd\u5f88\u7e41\u7410\u3002 \u6b64\u5916\uff0c\u4ece\u6839\u6a21\u5757\u5f15\u7528\u5b9e\u4f53\u4f1a\u6253\u7834\u5e94\u7528\u7a0b\u5e8f\u57df\u8fb9\u754c\uff0c\u5e76\u5bfc\u81f4\u5b9e\u73b0\u7ec6\u8282\u6cc4\u9732\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u9759\u6001 glob \u8def\u5f84 (e.g., dist/**/*.entity{{ '{' }} .ts,.js{{ '}' }} ). \u4f46\u662f\u8bf7\u6ce8\u610f\uff0cwebpack \u4e0d\u652f\u6301 glob \u8def\u5f84\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u5728 monorepo \u4e2d\u6784\u5efa\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u5c06\u65e0\u6cd5\u4f7f\u7528\u5b83\u4eec\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002 \u8981\u81ea\u52a8\u52a0\u8f7d\u5b9e\u4f53\uff0c\u9700\u8981\u5c06\u914d\u7f6e\u5bf9\u8c61(\u4f20\u5165 forRoot() \u65b9\u6cd5)\u7684 autoLoadEntities \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; @Module ({ imports : [ TypeOrmModule . forRoot ({ ... autoLoadEntities : true , }), ], }) export class AppModule {} \u6307\u5b9a\u8be5\u9009\u9879\u540e\uff0c\u6bcf\u4e2a\u901a\u8fc7 forFeature() \u65b9\u6cd5\u6ce8\u518c\u7684\u5b9e\u4f53\u90fd\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u914d\u7f6e\u5bf9\u8c61\u7684 entities \u6570\u7ec4\u4e2d\u3002 warning Warning \u8bf7\u6ce8\u610f\uff0c\u6ca1\u6709\u901a\u8fc7 forFeature() \u65b9\u6cd5\u6ce8\u518c\u7684\u5b9e\u4f53\uff0c\u4f46\u4ec5\u4ece\u5b9e\u4f53\u5f15\u7528(\u901a\u8fc7\u5173\u7cfb)\uff0c\u5c06\u4e0d\u5305\u62ec\u5728 autoLoadEntities \u8bbe\u7f6e\u7684\u65b9\u5f0f\u3002 \u5206\u79bb\u7684\u5b9e\u4f53\u5b9a\u4e49 \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u5728\u6a21\u578b\u4e2d\u76f4\u63a5\u5b9a\u4e49\u5b9e\u4f53\u53ca\u5176\u5217\u3002 \u4f46\u662f\u6709\u4e9b\u4eba\u559c\u6b22\u4f7f\u7528 \u5b9e\u4f53\u6a21\u5f0f \u5728\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u5b9a\u4e49\u5b9e\u4f53\u548c\u5b83\u4eec\u7684\u5217\u3002 import { EntitySchema } from 'typeorm' ; import { User } from './user.entity' ; export const UserSchema = new EntitySchema < User > ({ name : 'User' , target : User , columns : { id : { type : Number , primary : true , generated : true , }, firstName : { type : String , }, lastName : { type : String , }, isActive : { type : Boolean , default : true , }, }, relations : { photos : { type : 'one-to-many' , target : 'Photo' , // the name of the PhotoSchema }, }, }); warning error Warning \u5982\u679c\u60a8\u63d0\u4f9b\u4e86 target \u9009\u9879\uff0c name \u9009\u9879\u7684\u503c\u5fc5\u987b\u4e0e\u76ee\u6807\u7c7b\u7684\u540d\u79f0\u76f8\u540c\u3002 \u5982\u679c\u60a8\u4e0d\u63d0\u4f9b target \uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u540d\u79f0\u3002 \u5d4c\u5957\u5141\u8bb8\u4f60\u5728\u4efb\u4f55\u9700\u8981 Entity \u7684\u5730\u65b9\u4f7f\u7528 EntitySchema \u5b9e\u4f8b\uff0c\u4f8b\u5982: import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { UserSchema } from './user.schema' ; import { UsersController } from './users.controller' ; import { UsersService } from './users.service' ; @Module ({ imports : [ TypeOrmModule . forFeature ([ UserSchema ])], providers : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} \u4e8b\u52a1 \u00b6 \u6570\u636e\u5e93\u4e8b\u52a1\u4ee3\u8868\u5728\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u4e2d\u9488\u5bf9\u6570\u636e\u5e93\u6267\u884c\u7684\u5de5\u4f5c\u5355\u5143\uff0c\u5e76\u4ee5\u72ec\u7acb\u4e8e\u5176\u4ed6\u4e8b\u52a1\u7684\u4e00\u81f4\u548c\u53ef\u9760\u7684\u65b9\u5f0f\u5904\u7406\u3002 \u4e8b\u52a1\u901a\u5e38\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4efb\u4f55\u53d8\u5316( \u4e86\u89e3\u66f4\u591a\u4fe1\u606f )\u3002 \u6709\u8bb8\u591a\u4e0d\u540c\u7684\u7b56\u7565\u6765\u5904\u7406 TypeORM \u4e8b\u52a1 \u3002 \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 QueryRunner \u7c7b\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u5bf9\u4e8b\u52a1\u7684\u5b8c\u5168\u63a7\u5236\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u6b63\u5e38\u7684\u65b9\u5f0f\u5c06 Connection \u5bf9\u8c61\u6ce8\u5165\u5230\u7c7b\u4e2d: @Injectable () export class UsersService { constructor ( private connection : Connection ) {} } info Hint Connection \u7c7b\u662f\u4ece type \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u6765\u521b\u5efa\u4e8b\u52a1\u3002 async createMany ( users : User []) { const queryRunner = this . connection . createQueryRunner (); await queryRunner . connect (); await queryRunner . startTransaction (); try { await queryRunner . manager . save ( users [ 0 ]); await queryRunner . manager . save ( users [ 1 ]); await queryRunner . commitTransaction (); } catch ( err ) { // since we have errors lets rollback the changes we made await queryRunner . rollbackTransaction (); } finally { // you need to release a queryRunner which was manually instantiated await queryRunner . release (); } } info Hint \u6ce8\u610f connection \u4ec5\u7528\u4e8e\u521b\u5efa QueryRunner \u3002 \u4f46\u662f\uff0c\u8981\u6d4b\u8bd5\u8fd9\u4e2a\u7c7b\uff0c\u9700\u8981\u6a21\u62df\u6574\u4e2a Connection \u5bf9\u8c61(\u5b83\u516c\u5f00\u4e86\u51e0\u4e2a\u65b9\u6cd5)\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u4e00\u4e2a\u52a9\u624b\u5de5\u5382\u7c7b(\u4f8b\u5982\uff0c QueryRunnerFactory )\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u5305\u542b\u4e00\u7ec4\u7ef4\u62a4\u4e8b\u52a1\u6240\u9700\u7684\u6709\u9650\u65b9\u6cd5\u3002 \u8fd9\u79cd\u6280\u672f\u4f7f\u5f97\u6a21\u4eff\u8fd9\u4e9b\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u56de\u8c03\u98ce\u683c\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528 Connection \u5bf9\u8c61\u7684 transaction \u65b9\u6cd5( read more )\u3002 async createMany ( users : User []) { await this . connection . transaction ( async manager => { await manager . save ( users [ 0 ]); await manager . save ( users [ 1 ]); }); } \u4e0d\u5efa\u8bae\u4f7f\u7528\u88c5\u9970\u5668\u6765\u63a7\u5236\u4e8b\u52a1( @Transaction() \u548c @TransactionManager() )\u3002 \u8ba2\u9605\u8005 \u00b6 \u4f7f\u7528 TypeORM \u8ba2\u9605\u8005 \uff0c\u60a8\u53ef\u4ee5\u76d1\u542c\u7279\u5b9a\u7684\u5b9e\u4f53\u4e8b\u4ef6\u3002 import { Connection , EntitySubscriberInterface , EventSubscriber , InsertEvent , } from 'typeorm' ; import { User } from './user.entity' ; @EventSubscriber () export class UserSubscriber implements EntitySubscriberInterface < User > { constructor ( connection : Connection ) { connection . subscribers . push ( this ); } listenTo () { return User ; } beforeInsert ( event : InsertEvent < User > ) { console . log ( `BEFORE USER INSERTED: ` , event . entity ); } } error Warning \u4e8b\u4ef6\u8ba2\u9605\u8005\u4e0d\u80fd \u4ee5\u8bf7\u6c42\u4e3a\u8303\u56f4 . \u73b0\u5728\uff0c\u5c06 UserSubscriber \u7c7b\u6dfb\u52a0\u5230 providers \u6570\u7ec4\u4e2d: import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { User } from './user.entity' ; import { UsersController } from './users.controller' ; import { UsersService } from './users.service' ; import { UserSubscriber } from './user.subscriber' ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ])], providers : [ UsersService , UserSubscriber ], controllers : [ UsersController ], }) export class UsersModule {} info Hint \u4e86\u89e3\u66f4\u591a\u5b9e\u4f53\u8ba2\u9605\u8005 \u6b64\u5904 . \u8fc1\u79fb \u00b6 Migrations \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u589e\u91cf\u5730\u66f4\u65b0\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u4f7f\u5176\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u6a21\u578b\u4fdd\u6301\u540c\u6b65\uff0c\u540c\u65f6\u4fdd\u7559\u6570\u636e\u5e93\u4e2d\u7684\u73b0\u6709\u6570\u636e\u3002 \u4e3a\u4e86\u751f\u6210\u3001\u8fd0\u884c\u548c\u6062\u590d\u8fc1\u79fb\uff0cTypeORM \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e13\u7528\u7684 CLI . \u8fc1\u79fb\u7c7b\u4e0e Nest \u5e94\u7528\u7a0b\u5e8f\u6e90\u4ee3\u7801\u662f\u5206\u5f00\u7684\u3002 \u5b83\u4eec\u7684\u751f\u547d\u5468\u671f\u662f\u7531 TypeORM CLI \u7ef4\u62a4\u7684\u3002 \u56e0\u6b64\uff0c\u60a8\u4e0d\u80fd\u901a\u8fc7\u8fc1\u79fb\u6765\u5229\u7528\u4f9d\u8d56\u6ce8\u5165\u548c\u5176\u4ed6 Nest \u7279\u5b9a\u7684\u7279\u6027\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fc1\u79fb\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 TypeORM \u6587\u6863 \u4e2d\u7684\u6307\u5357\u3002 \u591a\u4e2a\u6570\u636e\u5e93 \u00b6 \u6709\u4e9b\u9879\u76ee\u9700\u8981\u591a\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6a21\u5757\u5b9e\u73b0\u3002 \u8981\u5904\u7406\u591a\u4e2a\u8fde\u63a5\uff0c\u9996\u5148\u8981\u521b\u5efa\u8fde\u63a5\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u547d\u540d\u6210\u4e3a \u5fc5\u987b\u7684 \u3002 \u5047\u8bbe\u60a8\u6709\u4e00\u4e2a Album \u5b9e\u4f53\u5b58\u50a8\u5728\u81ea\u5df1\u7684\u6570\u636e\u5e93\u4e2d\u3002 const defaultOptions = { type : 'postgres' , port : 5432 , username : 'user' , password : 'password' , database : 'db' , synchronize : true , }; @Module ({ imports : [ TypeOrmModule . forRoot ({ ... defaultOptions , host : 'user_db_host' , entities : [ User ], }), TypeOrmModule . forRoot ({ ... defaultOptions , name : 'albumsConnection' , host : 'album_db_host' , entities : [ Album ], }), ], }) export class AppModule {} warning Notice \u5982\u679c\u4f60\u6ca1\u6709\u4e3a\u4e00\u4e2a\u8fde\u63a5\u8bbe\u7f6e name \uff0c\u5b83\u7684\u540d\u79f0\u5c06\u88ab\u8bbe\u7f6e\u4e3a default \u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u4e0d\u5e94\u8be5\u6709\u591a\u4e2a\u6ca1\u6709\u540d\u79f0\u6216\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u8fde\u63a5\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u88ab\u8986\u76d6\u3002 \u6b64\u65f6\uff0c\u4f60\u6709 User \u548c Album \u5b9e\u4f53\u6ce8\u518c\u5230\u5b83\u4eec\u81ea\u5df1\u7684\u8fde\u63a5\u3002 \u5728\u8fd9\u4e2a\u8bbe\u7f6e\u4e2d\uff0c\u4f60\u5fc5\u987b\u544a\u8bc9 TypeOrmModule.forFeature() \u65b9\u6cd5\u548c @InjectRepository() \u88c5\u9970\u5668\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u8fde\u63a5\u3002 \u5982\u679c\u60a8\u6ca1\u6709\u4f20\u9012\u4efb\u4f55\u8fde\u63a5\u540d\u79f0\uff0c\u5219\u4f7f\u7528 default \u8fde\u63a5\u3002 @Module ({ imports : [ TypeOrmModule . forFeature ([ User ]), TypeOrmModule . forFeature ([ Album ], 'albumsConnection' ), ], }) export class AppModule {} \u4f60\u4e5f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8fde\u63a5\u6ce8\u5165 Connection \u6216 EntityManager : @Injectable () export class AlbumsService { constructor ( @InjectConnection ( 'albumsConnection' ) private connection : Connection , @InjectEntityManager ( 'albumsConnection' ) private entityManager : EntityManager , ) {} } \u4e5f\u53ef\u4ee5\u5c06\u4efb\u4f55 Connection \u6ce8\u5165\u5230\u63d0\u4f9b\u5668: @Module ({ providers : [ { provide : AlbumsService , useFactory : ( albumsConnection : Connection ) => { return new AlbumsService ( albumsConnection ); }, inject : [ getConnectionToken ( 'albumsConnection' )], }, ], }) export class AlbumsModule {} \u6d4b\u8bd5 \u00b6 \u5f53\u6d89\u53ca\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u907f\u514d\u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4fdd\u6301\u6d4b\u8bd5\u5957\u4ef6\u7684\u72ec\u7acb\u6027\uff0c\u5e76\u5c3d\u53ef\u80fd\u5feb\u5730\u6267\u884c\u5b83\u4eec\u3002 \u4f46\u662f\u6211\u4eec\u7684\u7c7b\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4ece\u8fde\u63a5\u5b9e\u4f8b\u4e2d\u63d0\u53d6\u7684\u5b58\u50a8\u5e93\u3002 \u6211\u4eec\u8be5\u5982\u4f55\u5904\u7406\u5462?\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u6a21\u62df\u5b58\u50a8\u5e93\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86 custom providers \u3002 \u6bcf\u4e2a\u6ce8\u518c\u7684\u5b58\u50a8\u5e93\u90fd\u81ea\u52a8\u7531 <EntityName>Repository \u4ee4\u724c\u8868\u793a\uff0c\u5176\u4e2d EntityName \u662f\u60a8\u7684\u5b9e\u4f53\u7c7b\u7684\u540d\u79f0\u3002 @nestjs/typeform \u5305\u516c\u5f00\u4e86 getRepositoryToken() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6839\u636e\u7ed9\u5b9a\u7684\u5b9e\u4f53\u8fd4\u56de\u4e00\u4e2a\u51c6\u5907\u597d\u7684\u4ee4\u724c\u3002 @Module ({ providers : [ UsersService , { provide : getRepositoryToken ( User ), useValue : mockRepository , }, ], }) export class UsersModule {} \u73b0\u5728\uff0c\u5c06\u4f7f\u7528\u4e00\u4e2a\u66ff\u4ee3\u7684 mockRepository \u4f5c\u4e3a UsersRepository \u3002 \u6bcf\u5f53\u4efb\u4f55\u7c7b\u4f7f\u7528 @InjectRepository() \u88c5\u9970\u5668\u8bf7\u6c42 UsersRepository \u65f6\uff0cNest \u5c31\u4f1a\u4f7f\u7528\u6ce8\u518c\u7684 mockRepository \u5bf9\u8c61\u3002 \u81ea\u5b9a\u4e49\u5e93 \u00b6 TypeORM \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb\u505a\u81ea\u5b9a\u4e49\u5e93\u7684\u7279\u6027\u3002 \u81ea\u5b9a\u4e49\u5b58\u50a8\u5e93\u5141\u8bb8\u60a8\u6269\u5c55\u57fa\u5b58\u50a8\u5e93\u7c7b\uff0c\u5e76\u4f7f\u7528\u51e0\u4e2a\u7279\u6b8a\u7684\u65b9\u6cd5\u5145\u5b9e\u5b83\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6b64\u529f\u80fd\u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee \u672c\u9875 \u3002 \u4e3a\u4e86\u521b\u5efa\u60a8\u7684\u81ea\u5b9a\u4e49\u5b58\u50a8\u5e93\uff0c\u8bf7\u4f7f\u7528 @EntityRepository() \u88c5\u9970\u5668\u5e76\u6269\u5c55 repository \u7c7b\u3002 @EntityRepository ( Author ) export class AuthorRepository extends Repository < Author > {} info Hint @EntityRepository() \u548c Repository \u90fd\u662f\u4ece typeform \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4e00\u65e6\u521b\u5efa\u4e86\u7c7b\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u5c06\u5b9e\u4f8b\u5316\u8d23\u4efb\u59d4\u6258\u7ed9 Nest\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u5c06 AuthorRepository \u7c7b\u4f20\u9012\u7ed9 TypeOrm.forFeature() \u65b9\u6cd5\u3002 @Module ({ imports : [ TypeOrmModule . forFeature ([ AuthorRepository ])], controller : [ AuthorController ], providers : [ AuthorService ], }) export class AuthorModule {} \u4e4b\u540e\uff0c\u53ea\u9700\u4f7f\u7528\u4e0b\u9762\u7684\u6784\u9020\u6ce8\u5165\u5b58\u50a8\u5e93: @Injectable () export class AuthorService { constructor ( private authorRepository : AuthorRepository ) {} } \u5f02\u6b65\u7684\u914d\u7f6e \u00b6 \u60a8\u53ef\u80fd\u5e0c\u671b\u5f02\u6b65\u4f20\u9012\u5b58\u50a8\u5e93\u6a21\u5757\u9009\u9879\uff0c\u800c\u4e0d\u662f\u9759\u6001\u4f20\u9012\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 forRootAsync() \u65b9\u6cd5\uff0c\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u65b9\u6cd5\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: TypeOrmModule . forRootAsync ({ useFactory : () => ({ type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [ __dirname + '/**/*.entity{.ts,.js}' ], synchronize : true , }), }); \u6211\u4eec\u7684\u5de5\u5382\u7684\u884c\u4e3a\u548c\u5176\u4ed6 \u5f02\u6b65\u63d0\u4f9b\u5668 \u4e00\u6837(\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u662f async \uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879)\u3002 TypeOrmModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : ( configService : ConfigService ) => ({ type : 'mysql' , host : configService.get ( 'HOST' ), port : + configService . get < number > ( 'PORT' ), username : configService.get ( 'USERNAME' ), password : configService.get ( 'PASSWORD' ), database : configService.get ( 'DATABASE' ), entities : [ __dirname + '/**/*.entity{.ts,.js}' ], synchronize : true , }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useClass \u8bed\u6cd5: TypeOrmModule . forRootAsync ({ useClass : TypeOrmConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5c06\u5728 TypeOrmModule \u4e2d\u5b9e\u4f8b\u5316 TypeOrmConfigService \uff0c\u5e76\u901a\u8fc7\u8c03\u7528 createTypeOrmOptions() \u6765\u4f7f\u7528\u5b83\u6765\u63d0\u4f9b\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740 TypeOrmConfigService \u5fc5\u987b\u5b9e\u73b0 TypeOrmOptionsFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a: @Injectable () class TypeOrmConfigService implements TypeOrmOptionsFactory { createTypeOrmOptions () : TypeOrmModuleOptions { return { type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [ __dirname + '/**/*.entity{.ts,.js}' ], synchronize : true , }; } } \u4e3a\u4e86\u9632\u6b62\u5728 TypeOrmModule \u4e2d\u521b\u5efa TypeOrmConfigService \uff0c\u5e76\u4f7f\u7528\u4ece\u4e0d\u540c\u6a21\u5757\u5bfc\u5165\u7684\u63d0\u4f9b\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 TypeOrmModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u8fd9\u4e2a\u6784\u9020\u7684\u5de5\u4f5c\u539f\u7406\u4e0e useClass \u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b\u2014\u2014 TypeOrmModule \u5c06\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757\u6765\u91cd\u7528\u73b0\u6709\u7684 ConfigService \uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684\u3002 info Hint \u786e\u4fdd name \u5c5e\u6027\u4e0e useFactory \u3001 useClass \u6216 useValue \u5c5e\u6027\u5b9a\u4e49\u5728\u540c\u4e00\u7ea7\u522b\u3002 \u8fd9\u5c06\u5141\u8bb8 Nest \u5728\u9002\u5f53\u7684\u6ce8\u5165\u4ee4\u724c\u4e0b\u6b63\u786e\u5730\u6ce8\u518c\u8fde\u63a5\u3002 \u81ea\u5b9a\u4e49\u8fde\u63a5\u5de5\u5382 \u00b6 \u5728\u4f7f\u7528 useFactory \uff0c useClass \uff0c\u6216 useExisting \u7684 async \u914d\u7f6e\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u6307\u5b9a\u4e00\u4e2a connectionFactory \u51fd\u6570\uff0c\u5b83\u5c06\u5141\u8bb8\u4f60\u63d0\u4f9b\u81ea\u5df1\u7684 TypeORM \u8fde\u63a5\uff0c\u800c\u4e0d\u662f\u5141\u8bb8 TypeOrmModule \u6765\u521b\u5efa\u8fde\u63a5\u3002 connectionFactory \u63a5\u6536\u5230\u5728\u5f02\u6b65\u914d\u7f6e\u671f\u95f4\u4f7f\u7528 useFactory \uff0c useClass \u6216 useExisting \u914d\u7f6e\u7684 TypeORM ConnectionOptions \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a Promise \u6765\u89e3\u6790 TypeORM Connection \u3002 TypeOrmModule . forRootAsync ({ imports : [ ConfigModule ], inject : [ ConfigService ], // Use useFactory, useClass, or useExisting // to configure the ConnectionOptions. useFactory : ( configService : ConfigService ) => ({ type : 'mysql' , host : configService.get ( 'HOST' ), port : + configService . get < number > ( 'PORT' ), username : configService.get ( 'USERNAME' ), password : configService.get ( 'PASSWORD' ), database : configService.get ( 'DATABASE' ), entities : [ __dirname + '/**/*.entity{.ts,.js}' ], synchronize : true , }), // connectionFactory receives the configured ConnectionOptions // and returns a Promise<Connection>. connectionFactory : async ( options ) => { const connection = await createConnection ( options ); return connection ; }, }); info Hint createConnection \u51fd\u6570\u662f\u4ece typeform \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4f8b\u5b50 \u00b6 \u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc . Sequelize \u96c6\u6210 \u00b6 \u4f7f\u7528 TypeORM \u7684\u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u4f7f\u7528 Sequelize ORM \u548c @nestjs/sequelize \u5305\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5229\u7528\u4e86 sequelize-typescript \u5305\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u989d\u5916\u7684\u88c5\u9970\u5668\u6765\u58f0\u660e\u6027\u5730\u5b9a\u4e49\u5b9e\u4f53\u3002 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u6d41\u884c\u7684 MySQL \u5173\u7cfb\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff0c\u4f46\u662f Sequelize \u63d0\u4f9b\u4e86\u5bf9\u8bb8\u591a\u5173\u7cfb\u6570\u636e\u5e93\u7684\u652f\u6301\uff0c\u5982 PostgreSQL\u3001MySQL\u3001Microsoft SQL Server\u3001SQLite \u548c MariaDB\u3002 \u5bf9\u4e8e Sequelize \u652f\u6301\u7684\u4efb\u4f55\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5728\u672c\u7ae0\u4e2d\u6240\u7ecf\u5386\u7684\u8fc7\u7a0b\u90fd\u662f\u76f8\u540c\u7684\u3002 \u60a8\u53ea\u9700\u8981\u4e3a\u6240\u9009\u6570\u636e\u5e93\u5b89\u88c5\u76f8\u5173\u7684\u5ba2\u6237\u7aef API \u5e93\u3002 $ npm install --save @nestjs/sequelize sequelize sequelize-typescript mysql2 $ npm install --save-dev @types/sequelize \u4e00\u65e6\u5b89\u88c5\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a SequelizeModule \u5bfc\u5165\u5230\u6839\u76ee\u5f55 AppModule \u4e2d\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; @Module ({ imports : [ SequelizeModule . forRoot ({ dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , models : [], }), ], }) export class AppModule {} forRoot()\u65b9\u6cd5\u652f\u6301 Sequelize \u6784\u9020\u51fd\u6570\u516c\u5f00\u7684\u6240\u6709\u914d\u7f6e\u5c5e\u6027( read more )\u3002 \u6b64\u5916\uff0c\u4e0b\u9762\u8fd8\u63cf\u8ff0\u4e86\u51e0\u4e2a\u989d\u5916\u7684\u914d\u7f6e\u5c5e\u6027\u3002 retryAttempts \u5c1d\u8bd5\u8fde\u63a5\u6570\u636e\u5e93\u7684\u6b21\u6570 (default: 10 ) retryDelay \u8fde\u63a5\u91cd\u8bd5\u4e4b\u95f4\u7684\u5ef6\u8fdf(ms) (default: 3000 ) autoLoadModels \u5982\u679c true \uff0c\u6a21\u578b\u5c06\u81ea\u52a8\u52a0\u8f7d (default: false ) keepConnectionAlive \u5982\u679c true \uff0c\u8fde\u63a5\u5c06\u4e0d\u4f1a\u5728\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u5173\u95ed (default: false ) synchronize \u5982\u679c true \uff0c\u81ea\u52a8\u52a0\u8f7d\u7684\u6a21\u578b\u5c06\u88ab\u540c\u6b65 (default: true ) \u4e00\u65e6\u5b8c\u6210\uff0c Sequelize \u5bf9\u8c61\u5c06\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u6ce8\u5165(\u4e0d\u9700\u8981\u5bfc\u5165\u4efb\u4f55\u6a21\u5757)\uff0c\u4f8b\u5982: @ @filename ( app . service ) import { Injectable } from '@nestjs/common' ; import { Sequelize } from 'sequelize-typescript' ; @Injectable () export class AppService { constructor ( private sequelize : Sequelize ) {} } @ @switch import { Injectable } from '@nestjs/common' ; import { Sequelize } from 'sequelize-typescript' ; @Dependencies ( Sequelize ) @Injectable () export class AppService { constructor ( sequelize ) { this . sequelize = sequelize ; } } \u6a21\u578b \u00b6 Sequelize \u5b9e\u73b0\u6d3b\u52a8\u8bb0\u5f55\u6a21\u5f0f\u3002 \u4f7f\u7528\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6a21\u578b\u7c7b\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002 \u4e3a\u4e86\u7ee7\u7eed\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u6a21\u578b\u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49 User \u6a21\u578b\u3002 @ @filename ( user . model ) import { Column , Model , Table } from 'sequelize-typescript' ; @Table export class User extends Model { @Column firstName : string ; @Column lastName : string ; @Column ({ defaultValue : true }) isActive : boolean ; } info Hint \u4e86\u89e3\u66f4\u591a\u53ef\u7528\u7684 decorator \u8fd9\u91cc . User \u6a21\u578b\u6587\u4ef6\u4f4d\u4e8e users \u76ee\u5f55\u4e2d\u3002 \u8fd9\u4e2a\u76ee\u5f55\u5305\u542b\u6240\u6709\u4e0e UsersModule \u76f8\u5173\u7684\u6587\u4ef6\u3002 \u4f60\u53ef\u4ee5\u51b3\u5b9a\u5728\u54ea\u91cc\u4fdd\u5b58\u4f60\u7684\u6a21\u578b\u6587\u4ef6\uff0c\u7136\u800c\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u5b83\u4eec\u7684 \u57df \u9644\u8fd1\u521b\u5efa\u5b83\u4eec\uff0c\u5728\u76f8\u5e94\u7684\u6a21\u5757\u76ee\u5f55\u4e2d\u3002 \u4e3a\u4e86\u5f00\u59cb\u4f7f\u7528\u201cUser\u201d\u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u63d2\u5165\u5230\u6a21\u5757\u7684\u201cforRoot()\u201d\u65b9\u6cd5\u9009\u9879\u4e2d\u7684\u201cmodels\u201d\u6570\u7ec4\u4e2d\uff0c\u8ba9 Sequelize \u77e5\u9053\u5b83: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; import { User } from './users/user.model' ; @Module ({ imports : [ SequelizeModule . forRoot ({ dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , models : [ User ], }), ], }) export class AppModule {} \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u201cUsersModule\u201d: @ @filename ( users . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; import { User } from './user.model' ; import { UsersController } from './users.controller' ; import { UsersService } from './users.service' ; @Module ({ imports : [ SequelizeModule . forFeature ([ User ])], providers : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} \u8fd9\u4e2a\u6a21\u5757\u4f7f\u7528 forFeature() \u65b9\u6cd5\u6765\u5b9a\u4e49\u54ea\u4e9b\u6a21\u578b\u6ce8\u518c\u5728\u5f53\u524d\u8303\u56f4\u5185\u3002 \u6709\u4e86\u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 @InjectModel() \u88c5\u9970\u5668\u5c06 UserModel \u6ce8\u5165\u5230 UsersService \u4e2d: @ @filename ( users . service ) import { Injectable } from '@nestjs/common' ; import { InjectModel } from '@nestjs/sequelize' ; import { User } from './user.model' ; @Injectable () export class UsersService { constructor ( @InjectModel ( User ) private userModel : typeof User , ) {} async findAll () : Promise < User [] > { return this . userModel . findAll (); } findOne ( id : string ) : Promise < User > { return this . userModel . findOne ({ where : { id , }, }); } async remove ( id : string ) : Promise < void > { const user = await this . findOne ( id ); await user . destroy (); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { getModelToken } from '@nestjs/sequelize' ; import { User } from './user.model' ; @Injectable () @Dependencies ( getModelToken ( User )) export class UsersService { constructor ( usersRepository ) { this . usersRepository = usersRepository ; } async findAll () { return this . userModel . findAll (); } findOne ( id ) { return this . userModel . findOne ({ where : { id , }, }); } async remove ( id ) { const user = await this . findOne ( id ); await user . destroy (); } } warning Notice \u522b\u5fd8\u4e86\u628a UsersModule \u5bfc\u5165\u6839\u6a21\u5757 AppModule \u3002 \u5982\u679c\u4f60\u60f3\u5728\u5bfc\u5165 SequelizeModulefor.Feature \u7684\u6a21\u5757\u5916\u90e8\u4f7f\u7528\u5b58\u50a8\u5e93\uff0c\u4f60\u9700\u8981\u91cd\u65b0\u5bfc\u51fa\u5b83\u751f\u6210\u7684\u63d0\u4f9b\u5668\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5bfc\u51fa\u6574\u4e2a\u6a21\u5757\u6765\u5b9e\u73b0\uff0c\u50cf\u8fd9\u6837: @ @filename ( users . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; import { User } from './user.entity' ; @Module ({ imports : [ SequelizeModule . forFeature ([ User ])], exports : [ SequelizeModule ] }) export class UsersModule {} \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u5728 UserHttpModule \u4e2d\u5bfc\u5165 UsersModule \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u540e\u4e00\u4e2a\u6a21\u5757\u7684 providers \u4e2d\u4f7f\u7528 @InjectModel(User) \u3002 @ @filename ( users - http . module ) import { Module } from '@nestjs/common' ; import { UsersModule } from './users.module' ; import { UsersService } from './users.service' ; import { UsersController } from './users.controller' ; @Module ({ imports : [ UsersModule ], providers : [ UsersService ], controllers : [ UsersController ] }) export class UserHttpModule {} \u5173\u7cfb \u00b6 \u5173\u7cfb\u662f\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u8868\u4e4b\u95f4\u5efa\u7acb\u7684\u5173\u8054\u3002 \u5173\u7cfb\u57fa\u4e8e\u6bcf\u4e2a\u8868\u7684\u516c\u5171\u5b57\u6bb5\uff0c\u901a\u5e38\u6d89\u53ca\u4e3b\u952e\u548c\u5916\u952e\u3002 \u6709\u4e09\u79cd\u5173\u7cfb: One-to-one \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5173\u8054\u884c One-to-many / Many-to-one \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u90fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u76f8\u5173\u884c Many-to-many \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u6709\u8bb8\u591a\u76f8\u5173\u884c\uff0c\u800c\u5916\u90e8\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\u5728\u4e3b\u8868\u4e2d\u6709\u8bb8\u591a\u76f8\u5173\u884c \u8981\u5b9a\u4e49\u5b9e\u4f53\u4e2d\u7684\u5173\u7cfb\uff0c\u8bf7\u4f7f\u7528\u76f8\u5e94\u7684 \u88c5\u9970\u5668 \u3002 \u4f8b\u5982\uff0c\u8981\u5b9a\u4e49\u6bcf\u4e2a User \u53ef\u4ee5\u6709\u591a\u4e2a\u7167\u7247\uff0c\u8bf7\u4f7f\u7528 @HasMany() \u88c5\u9970\u5668\u3002 @ @filename ( user . entity ) import { Column , Model , Table , HasMany } from 'sequelize-typescript' ; import { Photo } from '../photos/photo.model' ; @Table export class User extends Model { @Column firstName : string ; @Column lastName : string ; @Column ({ defaultValue : true }) isActive : boolean ; @HasMany (() => Photo ) photos : Photo []; } info Hint \u8981\u5728 Sequelize \u4e2d\u4e86\u89e3\u66f4\u591a\u6709\u5173\u5173\u8054\u7684\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb this \u8fd9\u4e00\u7ae0\u3002 \u81ea\u52a8\u8d1f\u8f7d\u6a21\u578b \u00b6 \u624b\u52a8\u6dfb\u52a0\u6a21\u578b\u5230\u8fde\u63a5\u9009\u9879\u7684 models \u6570\u7ec4\u4e2d\u53ef\u80fd\u4f1a\u5f88\u7e41\u7410\u3002 \u6b64\u5916\uff0c\u4ece\u6839\u6a21\u5757\u5f15\u7528\u6a21\u578b\u4f1a\u6253\u7834\u5e94\u7528\u7a0b\u5e8f\u57df\u8fb9\u754c\uff0c\u5e76\u5bfc\u81f4\u5b9e\u73b0\u7ec6\u8282\u6cc4\u9732\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u8fc7\u5c06\u914d\u7f6e\u5bf9\u8c61\u7684 autoLoadModels \u548c synchronize \u5c5e\u6027(\u4f20\u5165\u5230 forRoot() \u65b9\u6cd5\u4e2d)\u8bbe\u7f6e\u4e3a true \u6765\u81ea\u52a8\u52a0\u8f7d\u6a21\u578b\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; @Module ({ imports : [ SequelizeModule . forRoot ({ ... autoLoadModels : true , synchronize : true , }), ], }) export class AppModule {} \u6307\u5b9a\u4e86\u8fd9\u4e2a\u9009\u9879\u540e\uff0c\u6bcf\u4e2a\u901a\u8fc7 forFeature() \u65b9\u6cd5\u6ce8\u518c\u7684\u6a21\u578b\u90fd\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u914d\u7f6e\u5bf9\u8c61\u7684 models \u6570\u7ec4\u4e2d\u3002 warning Warning \u8bf7\u6ce8\u610f\uff0c\u6ca1\u6709\u901a\u8fc7 forFeature() \u65b9\u6cd5\u6ce8\u518c\u7684\u6a21\u578b\uff0c\u4f46\u4ec5\u4ece\u6a21\u578b\u5f15\u7528(\u901a\u8fc7\u5173\u8054)\uff0c\u5c06\u4e0d\u5305\u62ec\u5728\u5185\u3002 \u4e8b\u52a1 \u00b6 \u6570\u636e\u5e93\u4e8b\u52a1\u4ee3\u8868\u5728\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u4e2d\u9488\u5bf9\u6570\u636e\u5e93\u6267\u884c\u7684\u5de5\u4f5c\u5355\u5143\uff0c\u5e76\u4ee5\u72ec\u7acb\u4e8e\u5176\u4ed6\u4e8b\u52a1\u7684\u4e00\u81f4\u548c\u53ef\u9760\u7684\u65b9\u5f0f\u5904\u7406\u3002 \u4e8b\u52a1\u901a\u5e38\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4efb\u4f55\u53d8\u5316( \u4e86\u89e3\u66f4\u591a\u4fe1\u606f )\u3002 \u6709\u8bb8\u591a\u4e0d\u540c\u7684\u7b56\u7565\u6765\u5904\u7406 Sequelize transaction \u3002 \u4e0b\u9762\u662f\u6258\u7ba1\u4e8b\u52a1(\u81ea\u52a8\u56de\u8c03)\u7684\u793a\u4f8b\u5b9e\u73b0\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u6b63\u5e38\u7684\u65b9\u5f0f\u5c06 Sequelize \u5bf9\u8c61\u6ce8\u5165\u5230\u7c7b\u4e2d: @Injectable () export class UsersService { constructor ( private sequelize : Sequelize ) {} } info Hint Sequelize \u7c7b\u662f\u4ece sequelize-typescript \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u6765\u521b\u5efa\u4e8b\u52a1\u3002 async createMany () { try { await this . sequelize . transaction ( async t => { const transactionHost = { transaction : t }; await this . userModel . create ( { firstName : 'Abraham' , lastName : 'Lincoln' }, transactionHost , ); await this . userModel . create ( { firstName : 'John' , lastName : 'Boothe' }, transactionHost , ); }); } catch ( err ) { // Transaction has been rolled back // err is whatever rejected the promise chain returned to the transaction callback } } info Hint Note that the Sequelize instance is used only to start the transaction. However, to test this class would require mocking the entire Sequelize object (which exposes several methods). Thus, we recommend using a helper factory class (e.g., TransactionRunner ) and defining an interface with a limited set of methods required to maintain transactions. This technique makes mocking these methods pretty straightforward. \u8fc1\u79fb \u00b6 Migrations \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u589e\u91cf\u5730\u66f4\u65b0\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u4f7f\u5176\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u6a21\u578b\u4fdd\u6301\u540c\u6b65\uff0c\u540c\u65f6\u4fdd\u7559\u6570\u636e\u5e93\u4e2d\u7684\u73b0\u6709\u6570\u636e\u3002 \u4e3a\u4e86\u751f\u6210\u3001\u8fd0\u884c\u548c\u6062\u590d\u8fc1\u79fb\uff0cSequelize \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e13\u7528\u7684 CLI \u3002 \u8fc1\u79fb\u7c7b\u4e0e Nest \u5e94\u7528\u7a0b\u5e8f\u6e90\u4ee3\u7801\u662f\u5206\u5f00\u7684\u3002 \u5b83\u4eec\u7684\u751f\u547d\u5468\u671f\u662f\u7531 Sequelize CLI \u7ef4\u62a4\u7684\u3002 \u56e0\u6b64\uff0c\u60a8\u4e0d\u80fd\u901a\u8fc7\u8fc1\u79fb\u6765\u5229\u7528\u4f9d\u8d56\u6ce8\u5165\u548c\u5176\u4ed6 Nest \u7279\u5b9a\u7684\u7279\u6027\u3002 \u8981\u4e86\u89e3\u5173\u4e8e\u8fc1\u79fb\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 Sequelize \u6587\u6863 \u4e2d\u7684\u6307\u5357\u3002 \u591a\u4e2a\u6570\u636e\u5e93 \u00b6 \u6709\u4e9b\u9879\u76ee\u9700\u8981\u591a\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6a21\u5757\u5b9e\u73b0\u3002 \u8981\u5904\u7406\u591a\u4e2a\u8fde\u63a5\uff0c\u9996\u5148\u8981\u521b\u5efa\u8fde\u63a5\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u547d\u540d\u6210\u4e3a \u5fc5\u987b\u7684 \u3002 \u5047\u8bbe\u60a8\u6709\u4e00\u4e2a Album \u5b9e\u4f53\u5b58\u50a8\u5728\u81ea\u5df1\u7684\u6570\u636e\u5e93\u4e2d\u3002 const defaultOptions = { dialect : 'postgres' , port : 5432 , username : 'user' , password : 'password' , database : 'db' , synchronize : true , }; @Module ({ imports : [ SequelizeModule . forRoot ({ ... defaultOptions , host : 'user_db_host' , models : [ User ], }), SequelizeModule . forRoot ({ ... defaultOptions , name : 'albumsConnection' , host : 'album_db_host' , models : [ Album ], }), ], }) export class AppModule {} warning Notice \u5982\u679c\u4f60\u6ca1\u6709\u4e3a\u4e00\u4e2a\u8fde\u63a5\u8bbe\u7f6e\u201cname\u201d\uff0c\u5b83\u7684\u540d\u79f0\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u201cdefault\u201d\u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u4e0d\u5e94\u8be5\u6709\u591a\u4e2a\u6ca1\u6709\u540d\u79f0\u6216\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u8fde\u63a5\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u88ab\u8986\u76d6\u3002 \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60\u6709 User and Album \u6a21\u578b\u6ce8\u518c\u5230\u4ed6\u4eec\u81ea\u5df1\u7684\u8fde\u63a5\u3002 \u5728\u8fd9\u4e2a\u8bbe\u7f6e\u4e2d\uff0c\u4f60\u5fc5\u987b\u544a\u8bc9 SequelizeModule.forFeature() \u65b9\u6cd5\u548c @InjectModel() \u88c5\u9970\u5668\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u8fde\u63a5\u3002 \u5982\u679c\u60a8\u6ca1\u6709\u4f20\u9012\u4efb\u4f55\u8fde\u63a5\u540d\u79f0\uff0c\u5219\u4f7f\u7528 default \u8fde\u63a5\u3002 @Module ({ imports : [ SequelizeModule . forFeature ([ User ]), SequelizeModule . forFeature ([ Album ], 'albumsConnection' ), ], }) export class AppModule {} \u4f60\u4e5f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8fde\u63a5\u6ce8\u5165 Sequelize \u5b9e\u4f8b: @Injectable () export class AlbumsService { constructor ( @InjectConnection ( 'albumsConnection' ) private sequelize : Sequelize , ) {} } \u4e5f\u53ef\u4ee5\u5c06\u4efb\u4f55 Sequelize \u5b9e\u4f8b\u6ce8\u5165\u5230\u63d0\u4f9b\u5668: @Module ({ providers : [ { provide : AlbumsService , useFactory : ( albumsSequelize : Sequelize ) => { return new AlbumsService ( albumsSequelize ); }, inject : [ getConnectionToken ( 'albumsConnection' )], }, ], }) export class AlbumsModule {} \u6d4b\u8bd5 \u00b6 \u5f53\u6d89\u53ca\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u907f\u514d\u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4fdd\u6301\u6d4b\u8bd5\u5957\u4ef6\u7684\u72ec\u7acb\u6027\uff0c\u5e76\u5c3d\u53ef\u80fd\u5feb\u5730\u6267\u884c\u5b83\u4eec\u3002 \u4f46\u662f\u6211\u4eec\u7684\u7c7b\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4ece\u8fde\u63a5\u5b9e\u4f8b\u4e2d\u63d0\u53d6\u7684\u6a21\u578b\u3002 \u6211\u4eec\u8be5\u5982\u4f55\u5904\u7406\u5462?\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u6a21\u62df\u6a21\u578b\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86 custom providers \u3002 \u6bcf\u4e2a\u6ce8\u518c\u7684\u6a21\u578b\u90fd\u7531\u4e00\u4e2a <ModelName>model \u4ee4\u724c\u81ea\u52a8\u8868\u793a\uff0c\u5176\u4e2d ModelName \u662f\u60a8\u7684\u6a21\u578b\u7c7b\u7684\u540d\u79f0\u3002 @nestjs/sequelize \u5305\u516c\u5f00\u4e86 getModelToken() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6839\u636e\u7ed9\u5b9a\u7684\u6a21\u578b\u8fd4\u56de\u4e00\u4e2a\u51c6\u5907\u597d\u7684\u4ee4\u724c\u3002 @Module ({ providers : [ UsersService , { provide : getModelToken ( User ), useValue : mockModel , }, ], }) export class UsersModule {} \u73b0\u5728\uff0c mockModel \u5c06\u88ab\u7528\u4f5c UserModel \u3002 \u5f53\u4efb\u4f55\u7c7b\u4f7f\u7528 @InjectModel() \u88c5\u9970\u5668\u8bf7\u6c42 UserModel \u65f6\uff0cNest \u5c06\u4f7f\u7528\u6ce8\u518c\u7684 mockModel \u5bf9\u8c61\u3002 \u5f02\u6b65\u7684\u914d\u7f6e \u00b6 \u4f60\u53ef\u80fd\u60f3\u8981\u5f02\u6b65\u4f20\u9012\u4f60\u7684\u201cSequelizeModule\u201d\u9009\u9879\uff0c\u800c\u4e0d\u662f\u9759\u6001\u7684\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 forRootAsync() \u65b9\u6cd5\uff0c\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u65b9\u6cd5\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: SequelizeModule . forRootAsync ({ useFactory : () => ({ dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , models : [], }), }); \u6211\u4eec\u7684\u5de5\u5382\u7684\u884c\u4e3a\u548c\u5176\u4ed6 \u5f02\u6b65\u63d0\u4f9b\u5668 \u4e00\u6837(\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u662f async \uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879)\u3002 SequelizeModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : ( configService : ConfigService ) => ({ dialect : 'mysql' , host : configService.get ( 'HOST' ), port : + configService . get ( 'PORT' ), username : configService.get ( 'USERNAME' ), password : configService.get ( 'PASSWORD' ), database : configService.get ( 'DATABASE' ), models : [], }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useClass \u8bed\u6cd5: SequelizeModule . forRootAsync ({ useClass : SequelizeConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5c06\u5728 SequelizeModule \u5b9e\u4f8b\u5316 SequelizeConfigService \uff0c\u5e76\u901a\u8fc7\u8c03\u7528 createSequelizeOptions() \u6765\u4f7f\u7528\u5b83\u6765\u63d0\u4f9b\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740 SequelizeConfigService \u5fc5\u987b\u5b9e\u73b0 SequelizeOptionsFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a: @Injectable () class SequelizeConfigService implements SequelizeOptionsFactory { createSequelizeOptions () : SequelizeModuleOptions { return { dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , models : [], }; } } \u4e3a\u4e86\u9632\u6b62\u5728 SequelizeModule \u4e2d\u521b\u5efa SequelizeConfigService \uff0c\u5e76\u4f7f\u7528\u4ece\u4e0d\u540c\u6a21\u5757\u5bfc\u5165\u7684\u63d0\u4f9b\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 SequelizeModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u8fd9\u4e2a\u6784\u9020\u7684\u5de5\u4f5c\u539f\u7406\u4e0e useClass \u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b\u2014\u2014 SequelizeModule \u5c06\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757\u6765\u91cd\u7528\u73b0\u6709\u7684 ConfigService \uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684\u3002 \u4f8b\u5b50 \u00b6 \u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u6570\u636e\u5e93"},{"location":"techniques/sql/#_1","text":"Nest \u4e0e\u6570\u636e\u5e93\u65e0\u5173\uff0c\u5141\u8bb8\u60a8\u8f7b\u677e\u5730\u4e0e\u4efb\u4f55 SQL \u6216 NoSQL \u6570\u636e\u5e93\u96c6\u6210\u3002 \u6839\u636e\u60a8\u7684\u504f\u597d\uff0c\u60a8\u6709\u8bb8\u591a\u53ef\u4f9b\u9009\u62e9\u7684\u9009\u9879\u3002 \u5728\u6700\u4e00\u822c\u7684\u5c42\u9762\u4e0a\uff0c\u8fde\u63a5 Nest \u5230\u6570\u636e\u5e93\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u4e3a\u6570\u636e\u5e93\u52a0\u8f7d\u4e00\u4e2a\u5408\u9002\u7684 Node.js \u9a71\u52a8\u7a0b\u5e8f\uff0c\u5c31\u50cf\u4f60\u4f7f\u7528 Express \u6216 fasttify \u4e00\u6837\u3002 \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4efb\u4f55\u901a\u7528\u7684 Node.js \u6570\u636e\u5e93\u96c6\u6210 \u5e93 \u6216 ORM, such as MikroORM also check the recipe here , Sequelize (navigate to the Sequelize integration section), Knex.js ( tutorial ), TypeORM , and Prisma ( recipe ) , \u4ee5\u5728\u66f4\u9ad8\u7684\u62bd\u8c61\u7ea7\u522b\u4e0a\u64cd\u4f5c\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0cNest \u63d0\u4f9b\u4e86\u4e0e TypeORM \u548c Sequelize \u7684\u7d27\u5bc6\u96c6\u6210\uff0c\u5b83\u4eec\u5206\u522b\u662f @nestjs/typeorm \u548c @nestjs/sequelize \u5305\uff0c\u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u4ecb\u7ecd\uff0c\u800c Mongoose \u4e0e @nestjs/mongoose \u5305\uff0c\u8fd9\u5728 \u672c\u7ae0 \u4e2d\u4ecb\u7ecd\u3002 \u8fd9\u4e9b\u96c6\u6210\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u7279\u5b9a\u4e8e nestjs \u7684\u7279\u6027\uff0c\u4f8b\u5982\u6a21\u578b/\u5b58\u50a8\u5e93\u6ce8\u5165\u3001\u53ef\u6d4b\u8bd5\u6027\u548c\u5f02\u6b65\u914d\u7f6e\uff0c\u4f7f\u8bbf\u95ee\u60a8\u9009\u62e9\u7684\u6570\u636e\u5e93\u66f4\u52a0\u5bb9\u6613\u3002","title":"\u6570\u636e\u5e93"},{"location":"techniques/sql/#typeorm","text":"\u4e3a\u4e86\u96c6\u6210 SQL \u548c NoSQL \u6570\u636e\u5e93\uff0cNest \u63d0\u4f9b\u4e86 @nestjs/typeform \u5305\u3002 Nest \u4f7f\u7528 TypeORM \u662f\u56e0\u4e3a\u5b83\u662f TypeScript \u53ef\u7528\u7684\u6700\u6210\u719f\u7684\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\u5668(Object Relational Mapper, ORM)\u3002 \u56e0\u4e3a\u5b83\u662f\u7528 TypeScript \u7f16\u5199\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f88\u597d\u5730\u4e0e Nest \u6846\u67b6\u96c6\u6210\u3002 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u4f7f\u7528\u6d41\u884c\u7684 MySQL \u5173\u7cfb\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff0c\u4f46 TypeORM \u63d0\u4f9b\u4e86\u8bb8\u591a\u5173\u7cfb\u6570\u636e\u5e93\u7684\u652f\u6301\uff0c\u5982 PostgreSQL, Oracle, Microsoft SQL Server, SQLite\uff0c\u751a\u81f3 NoSQL \u6570\u636e\u5e93\uff0c\u5982 MongoDB\u3002 \u5bf9\u4e8e TypeORM \u652f\u6301\u7684\u4efb\u4f55\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5728\u672c\u7ae0\u4e2d\u6240\u7ecf\u5386\u7684\u8fc7\u7a0b\u90fd\u662f\u76f8\u540c\u7684\u3002 \u60a8\u53ea\u9700\u8981\u4e3a\u6240\u9009\u6570\u636e\u5e93\u5b89\u88c5\u76f8\u5173\u7684\u5ba2\u6237\u7aef API \u5e93\u3002 $ npm install --save @nestjs/typeorm typeorm mysql2 \u4e00\u65e6\u5b89\u88c5\u8fc7\u7a0b\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a TypeOrmModule \u5bfc\u5165\u5230\u6839\u76ee\u5f55 AppModule \u4e2d\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; @Module ({ imports : [ TypeOrmModule . forRoot ({ type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [], synchronize : true , }), ], }) export class AppModule {} warning Warning \u8bbe\u7f6e synchronize: true \u4e0d\u5e94\u8be5\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\uff0c\u5426\u5219\u60a8\u53ef\u80fd\u4f1a\u4e22\u5931\u751f\u4ea7\u6570\u636e\u3002 forRoot() \u65b9\u6cd5\u652f\u6301\u6240\u6709\u7531 TypeORM \u5305\u4e2d\u7684 createConnection() \u51fd\u6570\u516c\u5f00\u7684\u914d\u7f6e\u5c5e\u6027\u3002 \u6b64\u5916\uff0c\u4e0b\u9762\u8fd8\u63cf\u8ff0\u4e86\u51e0\u4e2a\u989d\u5916\u7684\u914d\u7f6e\u5c5e\u6027\u3002 retryAttempts \u5c1d\u8bd5\u8fde\u63a5\u6570\u636e\u5e93\u7684\u6b21\u6570 (default: 10 ) retryDelay \u8fde\u63a5\u91cd\u8bd5\u4e4b\u95f4\u7684\u5ef6\u8fdf(ms) (default: 3000 ) autoLoadEntities \u5982\u679c true \uff0c\u5b9e\u4f53\u5c06\u88ab\u81ea\u52a8\u52a0\u8f7d (default: false ) keepConnectionAlive \u5982\u679c true \uff0c\u8fde\u63a5\u5c06\u4e0d\u4f1a\u5728\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u5173\u95ed (default: false ) info Hint \u6709\u5173\u8fde\u63a5\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f \u8fd9\u91cc \u3002 \u6216\u8005\uff0c\u4e0d\u9700\u8981\u5c06\u914d\u7f6e\u5bf9\u8c61\u4f20\u9012\u7ed9 forRoot() \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a ormconfig.json \u6587\u4ef6\u3002 { \"type\" : \"mysql\" , \"host\" : \"localhost\" , \"port\" : 3306 , \"username\" : \"root\" , \"password\" : \"root\" , \"database\" : \"test\" , \"entities\" : [ \"dist/**/*.entity{.ts,.js}\" ], \"synchronize\" : true } \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u5e26\u4efb\u4f55\u9009\u9879\u8c03\u7528 forRoot() : @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; @Module ({ imports : [ TypeOrmModule . forRoot ()], }) export class AppModule {} warning Warning \u9759\u6001\u7684 glob \u8def\u5f84(e.g., dist/**/*.entity{{ '{' }} .ts,.js{{ '}' }} )\u4e0d\u4f1a\u6b63\u5e38\u5de5\u4f5c webpack . info Hint \u6ce8\u610f ormconfig.json \u6587\u4ef6\u662f\u7531 typeform \u5e93\u52a0\u8f7d\u7684\u3002 \u56e0\u6b64\uff0c\u4e0a\u9762\u63cf\u8ff0\u7684\u4efb\u4f55\u989d\u5916\u5c5e\u6027(\u901a\u8fc7\u5185\u90e8\u7684 forRoot() \u65b9\u6cd5\u652f\u6301-\u4f8b\u5982\uff0c autoLoadEntities \u548c retryDelay )\u5c06\u4e0d\u4f1a\u88ab\u5e94\u7528\u3002 \u5e78\u8fd0\u7684\u662f\uff0cTypeORM \u63d0\u4f9b\u4e86 getConnectionOptions \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4ece ormconfig \u6587\u4ef6\u6216\u73af\u5883\u53d8\u91cf\u4e2d\u8bfb\u53d6\u8fde\u63a5\u9009\u9879\u3002 \u8fd9\u6837\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u5e76\u8bbe\u7f6e\u7279\u5b9a\u4e8e nest \u7684\u9009\u9879\uff0c\u5982\u4e0b\u6240\u793a: TypeOrmModule . forRootAsync ({ useFactory : async () => Object . assign ( await getConnectionOptions (), { autoLoadEntities : true , }), }); \u4e00\u65e6\u5b8c\u6210\uff0cTypeORM Connection \u548c EntityManager \u5bf9\u8c61\u5c06\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u6ce8\u5165(\u4e0d\u9700\u8981\u5bfc\u5165\u4efb\u4f55\u6a21\u5757)\uff0c\u4f8b\u5982: @ @filename ( app . module ) import { Connection } from 'typeorm' ; @Module ({ imports : [ TypeOrmModule . forRoot (), UsersModule ], }) export class AppModule { constructor ( private connection : Connection ) {} } @ @switch import { Connection } from 'typeorm' ; @Dependencies ( Connection ) @Module ({ imports : [ TypeOrmModule . forRoot (), UsersModule ], }) export class AppModule { constructor ( connection ) { this . connection = connection ; } }","title":"TypeORM \u96c6\u6210"},{"location":"techniques/sql/#_2","text":"TypeORM \u652f\u6301 \u5e93\u8bbe\u8ba1\u6a21\u5f0f \uff0c\u56e0\u6b64\u6bcf\u4e2a\u5b9e\u4f53\u90fd\u6709\u81ea\u5df1\u7684\u5e93\u3002 \u8fd9\u4e9b\u5b58\u50a8\u5e93\u53ef\u4ee5\u4ece\u6570\u636e\u5e93\u8fde\u63a5\u4e2d\u83b7\u5f97\u3002 \u4e3a\u4e86\u7ee7\u7eed\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u5b9e\u4f53\u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49\u201c\u7528\u6237\u201d\u5b9e\u4f53\u3002 @ @filename ( user . entity ) import { Entity , Column , PrimaryGeneratedColumn } from 'typeorm' ; @Entity () export class User { @PrimaryGeneratedColumn () id : number ; @Column () firstName : string ; @Column () lastName : string ; @Column ({ default : true }) isActive : boolean ; } info Hint \u5173\u4e8e\u5b9e\u4f53\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 TypeORM \u6587\u6863 \u3002 User \u5b9e\u4f53\u6587\u4ef6\u4f4d\u4e8e users \u76ee\u5f55\u4e2d\u3002 \u8fd9\u4e2a\u76ee\u5f55\u5305\u542b\u6240\u6709\u4e0e UsersModule \u76f8\u5173\u7684\u6587\u4ef6\u3002 \u4f60\u53ef\u4ee5\u51b3\u5b9a\u5728\u54ea\u91cc\u4fdd\u5b58\u4f60\u7684\u6a21\u578b\u6587\u4ef6\uff0c\u7136\u800c\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u5b83\u4eec\u7684 \u57df \u9644\u8fd1\u521b\u5efa\u5b83\u4eec\uff0c\u5728\u76f8\u5e94\u7684\u6a21\u5757\u76ee\u5f55\u4e2d\u3002 \u4e3a\u4e86\u5f00\u59cb\u4f7f\u7528 User \u5b9e\u4f53\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5b83\u63d2\u5165\u5230\u6a21\u5757\u7684 forRoot() \u65b9\u6cd5\u9009\u9879\u4e2d\u7684 entities \u6570\u7ec4\u4e2d\uff0c\u8ba9 TypeORM \u77e5\u9053\u5b83(\u9664\u975e\u4f60\u4f7f\u7528\u4e00\u4e2a\u9759\u6001\u7684 glob \u8def\u5f84): @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { User } from './users/user.entity' ; @Module ({ imports : [ TypeOrmModule . forRoot ({ type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [ User ], synchronize : true , }), ], }) export class AppModule {} \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b UsersModule : @ @filename ( users . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { UsersService } from './users.service' ; import { UsersController } from './users.controller' ; import { User } from './user.entity' ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ])], providers : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} \u8fd9\u4e2a\u6a21\u5757\u4f7f\u7528 forFeature() \u65b9\u6cd5\u6765\u5b9a\u4e49\u54ea\u4e9b\u5b58\u50a8\u5e93\u6ce8\u518c\u5728\u5f53\u524d\u8303\u56f4\u5185\u3002 \u6709\u4e86\u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 @InjectRepository() \u88c5\u9970\u5668\u5c06 UsersRepository \u6ce8\u5165\u5230 UsersService \u4e2d: @ @filename ( users . service ) import { Injectable } from '@nestjs/common' ; import { InjectRepository } from '@nestjs/typeorm' ; import { Repository } from 'typeorm' ; import { User } from './user.entity' ; @Injectable () export class UsersService { constructor ( @InjectRepository ( User ) private usersRepository : Repository < User > , ) {} findAll () : Promise < User [] > { return this . usersRepository . find (); } findOne ( id : string ) : Promise < User > { return this . usersRepository . findOne ( id ); } async remove ( id : string ) : Promise < void > { await this . usersRepository . delete ( id ); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { getRepositoryToken } from '@nestjs/typeorm' ; import { User } from './user.entity' ; @Injectable () @Dependencies ( getRepositoryToken ( User )) export class UsersService { constructor ( usersRepository ) { this . usersRepository = usersRepository ; } findAll () { return this . usersRepository . find (); } findOne ( id ) { return this . usersRepository . findOne ( id ); } async remove ( id ) { await this . usersRepository . delete ( id ); } } warning Notice \u522b\u5fd8\u4e86\u628a UsersModule \u5bfc\u5165\u6839\u6a21\u5757 AppModule \u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u6a21\u5757\u5916\u90e8\u7684\u5b58\u50a8\u5e93\uff0c\u8be5\u6a21\u5757\u5bfc\u5165\u4e86 TypeOrmModule.forFeature() \uff0c\u4f60\u9700\u8981\u91cd\u65b0\u5bfc\u51fa\u5b83\u751f\u6210\u7684\u63d0\u4f9b\u5668\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5bfc\u51fa\u6574\u4e2a\u6a21\u5757\u6765\u5b9e\u73b0\uff0c\u50cf\u8fd9\u6837: @ @filename ( users . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { User } from './user.entity' ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ])], exports : [ TypeOrmModule ] }) export class UsersModule {} \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u5728 UserHttpModule \u4e2d\u5bfc\u5165 UsersModule \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u540e\u4e00\u4e2a\u6a21\u5757\u7684 providers \u4e2d\u4f7f\u7528 @InjectRepository(User) \u3002 @ @filename ( users - http . module ) import { Module } from '@nestjs/common' ; import { UsersModule } from './users.module' ; import { UsersService } from './users.service' ; import { UsersController } from './users.controller' ; @Module ({ imports : [ UsersModule ], providers : [ UsersService ], controllers : [ UsersController ] }) export class UserHttpModule {}","title":"\u5e93\u6a21\u5f0f"},{"location":"techniques/sql/#_3","text":"\u5173\u7cfb\u662f\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u8868\u4e4b\u95f4\u5efa\u7acb\u7684\u5173\u8054\u3002 \u5173\u7cfb\u57fa\u4e8e\u6bcf\u4e2a\u8868\u7684\u516c\u5171\u5b57\u6bb5\uff0c\u901a\u5e38\u6d89\u53ca\u4e3b\u952e\u548c\u5916\u952e\u3002 \u6709\u4e09\u79cd\u5173\u7cfb: One-to-one \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5173\u8054\u884c\u3002\u4f7f\u7528 @OneToOne() \u88c5\u9970\u5668\u6765\u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u5173\u7cfb\u3002 One-to-many / Many-to-one \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u90fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u76f8\u5173\u884c\u3002\u4f7f\u7528 @OneToMany() \u548c @ManyToOne() \u88c5\u9970\u5668\u6765\u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u5173\u7cfb\u3002 Many-to-many \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u6709\u8bb8\u591a\u76f8\u5173\u884c\uff0c\u800c\u5916\u90e8\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\u5728\u4e3b\u8868\u4e2d\u6709\u8bb8\u591a\u76f8\u5173\u884c\u3002\u4f7f\u7528 @ManyToMany() \u88c5\u9970\u5668\u6765\u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u5173\u7cfb\u3002 \u8981\u5b9a\u4e49\u5b9e\u4f53\u4e2d\u7684\u5173\u7cfb\uff0c\u8bf7\u4f7f\u7528\u76f8\u5e94\u7684 \u88c5\u9970\u5668 \u3002 \u4f8b\u5982\uff0c\u8981\u5b9a\u4e49\u6bcf\u4e2a User \u53ef\u4ee5\u6709\u591a\u4e2a\u7167\u7247\uff0c\u8bf7\u4f7f\u7528 @OneToMany() \u88c5\u9970\u5668\u3002 @ @filename ( user . entity ) import { Entity , Column , PrimaryGeneratedColumn , OneToMany } from 'typeorm' ; import { Photo } from '../photos/photo.entity' ; @Entity () export class User { @PrimaryGeneratedColumn () id : number ; @Column () firstName : string ; @Column () lastName : string ; @Column ({ default : true }) isActive : boolean ; @OneToMany ( type => Photo , photo => photo . user ) photos : Photo []; } info Hint \u8981\u4e86\u89e3 TypeORM \u4e2d\u7684\u66f4\u591a\u5173\u7cfb\uff0c\u8bf7\u8bbf\u95ee TypeORM \u6587\u6863 \u3002","title":"\u5173\u7cfb"},{"location":"techniques/sql/#_4","text":"\u624b\u52a8\u6dfb\u52a0\u5b9e\u4f53\u5230\u8fde\u63a5\u9009\u9879\u7684 entities \u6570\u7ec4\u4e2d\u53ef\u80fd\u5f88\u7e41\u7410\u3002 \u6b64\u5916\uff0c\u4ece\u6839\u6a21\u5757\u5f15\u7528\u5b9e\u4f53\u4f1a\u6253\u7834\u5e94\u7528\u7a0b\u5e8f\u57df\u8fb9\u754c\uff0c\u5e76\u5bfc\u81f4\u5b9e\u73b0\u7ec6\u8282\u6cc4\u9732\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u9759\u6001 glob \u8def\u5f84 (e.g., dist/**/*.entity{{ '{' }} .ts,.js{{ '}' }} ). \u4f46\u662f\u8bf7\u6ce8\u610f\uff0cwebpack \u4e0d\u652f\u6301 glob \u8def\u5f84\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u5728 monorepo \u4e2d\u6784\u5efa\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u5c06\u65e0\u6cd5\u4f7f\u7528\u5b83\u4eec\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002 \u8981\u81ea\u52a8\u52a0\u8f7d\u5b9e\u4f53\uff0c\u9700\u8981\u5c06\u914d\u7f6e\u5bf9\u8c61(\u4f20\u5165 forRoot() \u65b9\u6cd5)\u7684 autoLoadEntities \u5c5e\u6027\u8bbe\u7f6e\u4e3a true \uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; @Module ({ imports : [ TypeOrmModule . forRoot ({ ... autoLoadEntities : true , }), ], }) export class AppModule {} \u6307\u5b9a\u8be5\u9009\u9879\u540e\uff0c\u6bcf\u4e2a\u901a\u8fc7 forFeature() \u65b9\u6cd5\u6ce8\u518c\u7684\u5b9e\u4f53\u90fd\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u914d\u7f6e\u5bf9\u8c61\u7684 entities \u6570\u7ec4\u4e2d\u3002 warning Warning \u8bf7\u6ce8\u610f\uff0c\u6ca1\u6709\u901a\u8fc7 forFeature() \u65b9\u6cd5\u6ce8\u518c\u7684\u5b9e\u4f53\uff0c\u4f46\u4ec5\u4ece\u5b9e\u4f53\u5f15\u7528(\u901a\u8fc7\u5173\u7cfb)\uff0c\u5c06\u4e0d\u5305\u62ec\u5728 autoLoadEntities \u8bbe\u7f6e\u7684\u65b9\u5f0f\u3002","title":"\u81ea\u52a8\u52a0\u8f7d\u5b9e\u4f53"},{"location":"techniques/sql/#_5","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u5728\u6a21\u578b\u4e2d\u76f4\u63a5\u5b9a\u4e49\u5b9e\u4f53\u53ca\u5176\u5217\u3002 \u4f46\u662f\u6709\u4e9b\u4eba\u559c\u6b22\u4f7f\u7528 \u5b9e\u4f53\u6a21\u5f0f \u5728\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u5b9a\u4e49\u5b9e\u4f53\u548c\u5b83\u4eec\u7684\u5217\u3002 import { EntitySchema } from 'typeorm' ; import { User } from './user.entity' ; export const UserSchema = new EntitySchema < User > ({ name : 'User' , target : User , columns : { id : { type : Number , primary : true , generated : true , }, firstName : { type : String , }, lastName : { type : String , }, isActive : { type : Boolean , default : true , }, }, relations : { photos : { type : 'one-to-many' , target : 'Photo' , // the name of the PhotoSchema }, }, }); warning error Warning \u5982\u679c\u60a8\u63d0\u4f9b\u4e86 target \u9009\u9879\uff0c name \u9009\u9879\u7684\u503c\u5fc5\u987b\u4e0e\u76ee\u6807\u7c7b\u7684\u540d\u79f0\u76f8\u540c\u3002 \u5982\u679c\u60a8\u4e0d\u63d0\u4f9b target \uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u540d\u79f0\u3002 \u5d4c\u5957\u5141\u8bb8\u4f60\u5728\u4efb\u4f55\u9700\u8981 Entity \u7684\u5730\u65b9\u4f7f\u7528 EntitySchema \u5b9e\u4f8b\uff0c\u4f8b\u5982: import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { UserSchema } from './user.schema' ; import { UsersController } from './users.controller' ; import { UsersService } from './users.service' ; @Module ({ imports : [ TypeOrmModule . forFeature ([ UserSchema ])], providers : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {}","title":"\u5206\u79bb\u7684\u5b9e\u4f53\u5b9a\u4e49"},{"location":"techniques/sql/#_6","text":"\u6570\u636e\u5e93\u4e8b\u52a1\u4ee3\u8868\u5728\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u4e2d\u9488\u5bf9\u6570\u636e\u5e93\u6267\u884c\u7684\u5de5\u4f5c\u5355\u5143\uff0c\u5e76\u4ee5\u72ec\u7acb\u4e8e\u5176\u4ed6\u4e8b\u52a1\u7684\u4e00\u81f4\u548c\u53ef\u9760\u7684\u65b9\u5f0f\u5904\u7406\u3002 \u4e8b\u52a1\u901a\u5e38\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4efb\u4f55\u53d8\u5316( \u4e86\u89e3\u66f4\u591a\u4fe1\u606f )\u3002 \u6709\u8bb8\u591a\u4e0d\u540c\u7684\u7b56\u7565\u6765\u5904\u7406 TypeORM \u4e8b\u52a1 \u3002 \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 QueryRunner \u7c7b\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u5bf9\u4e8b\u52a1\u7684\u5b8c\u5168\u63a7\u5236\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u6b63\u5e38\u7684\u65b9\u5f0f\u5c06 Connection \u5bf9\u8c61\u6ce8\u5165\u5230\u7c7b\u4e2d: @Injectable () export class UsersService { constructor ( private connection : Connection ) {} } info Hint Connection \u7c7b\u662f\u4ece type \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u6765\u521b\u5efa\u4e8b\u52a1\u3002 async createMany ( users : User []) { const queryRunner = this . connection . createQueryRunner (); await queryRunner . connect (); await queryRunner . startTransaction (); try { await queryRunner . manager . save ( users [ 0 ]); await queryRunner . manager . save ( users [ 1 ]); await queryRunner . commitTransaction (); } catch ( err ) { // since we have errors lets rollback the changes we made await queryRunner . rollbackTransaction (); } finally { // you need to release a queryRunner which was manually instantiated await queryRunner . release (); } } info Hint \u6ce8\u610f connection \u4ec5\u7528\u4e8e\u521b\u5efa QueryRunner \u3002 \u4f46\u662f\uff0c\u8981\u6d4b\u8bd5\u8fd9\u4e2a\u7c7b\uff0c\u9700\u8981\u6a21\u62df\u6574\u4e2a Connection \u5bf9\u8c61(\u5b83\u516c\u5f00\u4e86\u51e0\u4e2a\u65b9\u6cd5)\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u4e00\u4e2a\u52a9\u624b\u5de5\u5382\u7c7b(\u4f8b\u5982\uff0c QueryRunnerFactory )\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u5305\u542b\u4e00\u7ec4\u7ef4\u62a4\u4e8b\u52a1\u6240\u9700\u7684\u6709\u9650\u65b9\u6cd5\u3002 \u8fd9\u79cd\u6280\u672f\u4f7f\u5f97\u6a21\u4eff\u8fd9\u4e9b\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u56de\u8c03\u98ce\u683c\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528 Connection \u5bf9\u8c61\u7684 transaction \u65b9\u6cd5( read more )\u3002 async createMany ( users : User []) { await this . connection . transaction ( async manager => { await manager . save ( users [ 0 ]); await manager . save ( users [ 1 ]); }); } \u4e0d\u5efa\u8bae\u4f7f\u7528\u88c5\u9970\u5668\u6765\u63a7\u5236\u4e8b\u52a1( @Transaction() \u548c @TransactionManager() )\u3002","title":"\u4e8b\u52a1"},{"location":"techniques/sql/#_7","text":"\u4f7f\u7528 TypeORM \u8ba2\u9605\u8005 \uff0c\u60a8\u53ef\u4ee5\u76d1\u542c\u7279\u5b9a\u7684\u5b9e\u4f53\u4e8b\u4ef6\u3002 import { Connection , EntitySubscriberInterface , EventSubscriber , InsertEvent , } from 'typeorm' ; import { User } from './user.entity' ; @EventSubscriber () export class UserSubscriber implements EntitySubscriberInterface < User > { constructor ( connection : Connection ) { connection . subscribers . push ( this ); } listenTo () { return User ; } beforeInsert ( event : InsertEvent < User > ) { console . log ( `BEFORE USER INSERTED: ` , event . entity ); } } error Warning \u4e8b\u4ef6\u8ba2\u9605\u8005\u4e0d\u80fd \u4ee5\u8bf7\u6c42\u4e3a\u8303\u56f4 . \u73b0\u5728\uff0c\u5c06 UserSubscriber \u7c7b\u6dfb\u52a0\u5230 providers \u6570\u7ec4\u4e2d: import { Module } from '@nestjs/common' ; import { TypeOrmModule } from '@nestjs/typeorm' ; import { User } from './user.entity' ; import { UsersController } from './users.controller' ; import { UsersService } from './users.service' ; import { UserSubscriber } from './user.subscriber' ; @Module ({ imports : [ TypeOrmModule . forFeature ([ User ])], providers : [ UsersService , UserSubscriber ], controllers : [ UsersController ], }) export class UsersModule {} info Hint \u4e86\u89e3\u66f4\u591a\u5b9e\u4f53\u8ba2\u9605\u8005 \u6b64\u5904 .","title":"\u8ba2\u9605\u8005"},{"location":"techniques/sql/#_8","text":"Migrations \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u589e\u91cf\u5730\u66f4\u65b0\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u4f7f\u5176\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u6a21\u578b\u4fdd\u6301\u540c\u6b65\uff0c\u540c\u65f6\u4fdd\u7559\u6570\u636e\u5e93\u4e2d\u7684\u73b0\u6709\u6570\u636e\u3002 \u4e3a\u4e86\u751f\u6210\u3001\u8fd0\u884c\u548c\u6062\u590d\u8fc1\u79fb\uff0cTypeORM \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e13\u7528\u7684 CLI . \u8fc1\u79fb\u7c7b\u4e0e Nest \u5e94\u7528\u7a0b\u5e8f\u6e90\u4ee3\u7801\u662f\u5206\u5f00\u7684\u3002 \u5b83\u4eec\u7684\u751f\u547d\u5468\u671f\u662f\u7531 TypeORM CLI \u7ef4\u62a4\u7684\u3002 \u56e0\u6b64\uff0c\u60a8\u4e0d\u80fd\u901a\u8fc7\u8fc1\u79fb\u6765\u5229\u7528\u4f9d\u8d56\u6ce8\u5165\u548c\u5176\u4ed6 Nest \u7279\u5b9a\u7684\u7279\u6027\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8fc1\u79fb\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 TypeORM \u6587\u6863 \u4e2d\u7684\u6307\u5357\u3002","title":"\u8fc1\u79fb"},{"location":"techniques/sql/#_9","text":"\u6709\u4e9b\u9879\u76ee\u9700\u8981\u591a\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6a21\u5757\u5b9e\u73b0\u3002 \u8981\u5904\u7406\u591a\u4e2a\u8fde\u63a5\uff0c\u9996\u5148\u8981\u521b\u5efa\u8fde\u63a5\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u547d\u540d\u6210\u4e3a \u5fc5\u987b\u7684 \u3002 \u5047\u8bbe\u60a8\u6709\u4e00\u4e2a Album \u5b9e\u4f53\u5b58\u50a8\u5728\u81ea\u5df1\u7684\u6570\u636e\u5e93\u4e2d\u3002 const defaultOptions = { type : 'postgres' , port : 5432 , username : 'user' , password : 'password' , database : 'db' , synchronize : true , }; @Module ({ imports : [ TypeOrmModule . forRoot ({ ... defaultOptions , host : 'user_db_host' , entities : [ User ], }), TypeOrmModule . forRoot ({ ... defaultOptions , name : 'albumsConnection' , host : 'album_db_host' , entities : [ Album ], }), ], }) export class AppModule {} warning Notice \u5982\u679c\u4f60\u6ca1\u6709\u4e3a\u4e00\u4e2a\u8fde\u63a5\u8bbe\u7f6e name \uff0c\u5b83\u7684\u540d\u79f0\u5c06\u88ab\u8bbe\u7f6e\u4e3a default \u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u4e0d\u5e94\u8be5\u6709\u591a\u4e2a\u6ca1\u6709\u540d\u79f0\u6216\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u8fde\u63a5\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u88ab\u8986\u76d6\u3002 \u6b64\u65f6\uff0c\u4f60\u6709 User \u548c Album \u5b9e\u4f53\u6ce8\u518c\u5230\u5b83\u4eec\u81ea\u5df1\u7684\u8fde\u63a5\u3002 \u5728\u8fd9\u4e2a\u8bbe\u7f6e\u4e2d\uff0c\u4f60\u5fc5\u987b\u544a\u8bc9 TypeOrmModule.forFeature() \u65b9\u6cd5\u548c @InjectRepository() \u88c5\u9970\u5668\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u8fde\u63a5\u3002 \u5982\u679c\u60a8\u6ca1\u6709\u4f20\u9012\u4efb\u4f55\u8fde\u63a5\u540d\u79f0\uff0c\u5219\u4f7f\u7528 default \u8fde\u63a5\u3002 @Module ({ imports : [ TypeOrmModule . forFeature ([ User ]), TypeOrmModule . forFeature ([ Album ], 'albumsConnection' ), ], }) export class AppModule {} \u4f60\u4e5f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8fde\u63a5\u6ce8\u5165 Connection \u6216 EntityManager : @Injectable () export class AlbumsService { constructor ( @InjectConnection ( 'albumsConnection' ) private connection : Connection , @InjectEntityManager ( 'albumsConnection' ) private entityManager : EntityManager , ) {} } \u4e5f\u53ef\u4ee5\u5c06\u4efb\u4f55 Connection \u6ce8\u5165\u5230\u63d0\u4f9b\u5668: @Module ({ providers : [ { provide : AlbumsService , useFactory : ( albumsConnection : Connection ) => { return new AlbumsService ( albumsConnection ); }, inject : [ getConnectionToken ( 'albumsConnection' )], }, ], }) export class AlbumsModule {}","title":"\u591a\u4e2a\u6570\u636e\u5e93"},{"location":"techniques/sql/#_10","text":"\u5f53\u6d89\u53ca\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u907f\u514d\u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4fdd\u6301\u6d4b\u8bd5\u5957\u4ef6\u7684\u72ec\u7acb\u6027\uff0c\u5e76\u5c3d\u53ef\u80fd\u5feb\u5730\u6267\u884c\u5b83\u4eec\u3002 \u4f46\u662f\u6211\u4eec\u7684\u7c7b\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4ece\u8fde\u63a5\u5b9e\u4f8b\u4e2d\u63d0\u53d6\u7684\u5b58\u50a8\u5e93\u3002 \u6211\u4eec\u8be5\u5982\u4f55\u5904\u7406\u5462?\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u6a21\u62df\u5b58\u50a8\u5e93\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86 custom providers \u3002 \u6bcf\u4e2a\u6ce8\u518c\u7684\u5b58\u50a8\u5e93\u90fd\u81ea\u52a8\u7531 <EntityName>Repository \u4ee4\u724c\u8868\u793a\uff0c\u5176\u4e2d EntityName \u662f\u60a8\u7684\u5b9e\u4f53\u7c7b\u7684\u540d\u79f0\u3002 @nestjs/typeform \u5305\u516c\u5f00\u4e86 getRepositoryToken() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6839\u636e\u7ed9\u5b9a\u7684\u5b9e\u4f53\u8fd4\u56de\u4e00\u4e2a\u51c6\u5907\u597d\u7684\u4ee4\u724c\u3002 @Module ({ providers : [ UsersService , { provide : getRepositoryToken ( User ), useValue : mockRepository , }, ], }) export class UsersModule {} \u73b0\u5728\uff0c\u5c06\u4f7f\u7528\u4e00\u4e2a\u66ff\u4ee3\u7684 mockRepository \u4f5c\u4e3a UsersRepository \u3002 \u6bcf\u5f53\u4efb\u4f55\u7c7b\u4f7f\u7528 @InjectRepository() \u88c5\u9970\u5668\u8bf7\u6c42 UsersRepository \u65f6\uff0cNest \u5c31\u4f1a\u4f7f\u7528\u6ce8\u518c\u7684 mockRepository \u5bf9\u8c61\u3002","title":"\u6d4b\u8bd5"},{"location":"techniques/sql/#_11","text":"TypeORM \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb\u505a\u81ea\u5b9a\u4e49\u5e93\u7684\u7279\u6027\u3002 \u81ea\u5b9a\u4e49\u5b58\u50a8\u5e93\u5141\u8bb8\u60a8\u6269\u5c55\u57fa\u5b58\u50a8\u5e93\u7c7b\uff0c\u5e76\u4f7f\u7528\u51e0\u4e2a\u7279\u6b8a\u7684\u65b9\u6cd5\u5145\u5b9e\u5b83\u3002 \u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6b64\u529f\u80fd\u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee \u672c\u9875 \u3002 \u4e3a\u4e86\u521b\u5efa\u60a8\u7684\u81ea\u5b9a\u4e49\u5b58\u50a8\u5e93\uff0c\u8bf7\u4f7f\u7528 @EntityRepository() \u88c5\u9970\u5668\u5e76\u6269\u5c55 repository \u7c7b\u3002 @EntityRepository ( Author ) export class AuthorRepository extends Repository < Author > {} info Hint @EntityRepository() \u548c Repository \u90fd\u662f\u4ece typeform \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4e00\u65e6\u521b\u5efa\u4e86\u7c7b\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u5c06\u5b9e\u4f8b\u5316\u8d23\u4efb\u59d4\u6258\u7ed9 Nest\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u5c06 AuthorRepository \u7c7b\u4f20\u9012\u7ed9 TypeOrm.forFeature() \u65b9\u6cd5\u3002 @Module ({ imports : [ TypeOrmModule . forFeature ([ AuthorRepository ])], controller : [ AuthorController ], providers : [ AuthorService ], }) export class AuthorModule {} \u4e4b\u540e\uff0c\u53ea\u9700\u4f7f\u7528\u4e0b\u9762\u7684\u6784\u9020\u6ce8\u5165\u5b58\u50a8\u5e93: @Injectable () export class AuthorService { constructor ( private authorRepository : AuthorRepository ) {} }","title":"\u81ea\u5b9a\u4e49\u5e93"},{"location":"techniques/sql/#_12","text":"\u60a8\u53ef\u80fd\u5e0c\u671b\u5f02\u6b65\u4f20\u9012\u5b58\u50a8\u5e93\u6a21\u5757\u9009\u9879\uff0c\u800c\u4e0d\u662f\u9759\u6001\u4f20\u9012\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 forRootAsync() \u65b9\u6cd5\uff0c\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u65b9\u6cd5\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: TypeOrmModule . forRootAsync ({ useFactory : () => ({ type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [ __dirname + '/**/*.entity{.ts,.js}' ], synchronize : true , }), }); \u6211\u4eec\u7684\u5de5\u5382\u7684\u884c\u4e3a\u548c\u5176\u4ed6 \u5f02\u6b65\u63d0\u4f9b\u5668 \u4e00\u6837(\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u662f async \uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879)\u3002 TypeOrmModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : ( configService : ConfigService ) => ({ type : 'mysql' , host : configService.get ( 'HOST' ), port : + configService . get < number > ( 'PORT' ), username : configService.get ( 'USERNAME' ), password : configService.get ( 'PASSWORD' ), database : configService.get ( 'DATABASE' ), entities : [ __dirname + '/**/*.entity{.ts,.js}' ], synchronize : true , }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useClass \u8bed\u6cd5: TypeOrmModule . forRootAsync ({ useClass : TypeOrmConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5c06\u5728 TypeOrmModule \u4e2d\u5b9e\u4f8b\u5316 TypeOrmConfigService \uff0c\u5e76\u901a\u8fc7\u8c03\u7528 createTypeOrmOptions() \u6765\u4f7f\u7528\u5b83\u6765\u63d0\u4f9b\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740 TypeOrmConfigService \u5fc5\u987b\u5b9e\u73b0 TypeOrmOptionsFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a: @Injectable () class TypeOrmConfigService implements TypeOrmOptionsFactory { createTypeOrmOptions () : TypeOrmModuleOptions { return { type : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , entities : [ __dirname + '/**/*.entity{.ts,.js}' ], synchronize : true , }; } } \u4e3a\u4e86\u9632\u6b62\u5728 TypeOrmModule \u4e2d\u521b\u5efa TypeOrmConfigService \uff0c\u5e76\u4f7f\u7528\u4ece\u4e0d\u540c\u6a21\u5757\u5bfc\u5165\u7684\u63d0\u4f9b\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 TypeOrmModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u8fd9\u4e2a\u6784\u9020\u7684\u5de5\u4f5c\u539f\u7406\u4e0e useClass \u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b\u2014\u2014 TypeOrmModule \u5c06\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757\u6765\u91cd\u7528\u73b0\u6709\u7684 ConfigService \uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684\u3002 info Hint \u786e\u4fdd name \u5c5e\u6027\u4e0e useFactory \u3001 useClass \u6216 useValue \u5c5e\u6027\u5b9a\u4e49\u5728\u540c\u4e00\u7ea7\u522b\u3002 \u8fd9\u5c06\u5141\u8bb8 Nest \u5728\u9002\u5f53\u7684\u6ce8\u5165\u4ee4\u724c\u4e0b\u6b63\u786e\u5730\u6ce8\u518c\u8fde\u63a5\u3002","title":"\u5f02\u6b65\u7684\u914d\u7f6e"},{"location":"techniques/sql/#_13","text":"\u5728\u4f7f\u7528 useFactory \uff0c useClass \uff0c\u6216 useExisting \u7684 async \u914d\u7f6e\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u6307\u5b9a\u4e00\u4e2a connectionFactory \u51fd\u6570\uff0c\u5b83\u5c06\u5141\u8bb8\u4f60\u63d0\u4f9b\u81ea\u5df1\u7684 TypeORM \u8fde\u63a5\uff0c\u800c\u4e0d\u662f\u5141\u8bb8 TypeOrmModule \u6765\u521b\u5efa\u8fde\u63a5\u3002 connectionFactory \u63a5\u6536\u5230\u5728\u5f02\u6b65\u914d\u7f6e\u671f\u95f4\u4f7f\u7528 useFactory \uff0c useClass \u6216 useExisting \u914d\u7f6e\u7684 TypeORM ConnectionOptions \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a Promise \u6765\u89e3\u6790 TypeORM Connection \u3002 TypeOrmModule . forRootAsync ({ imports : [ ConfigModule ], inject : [ ConfigService ], // Use useFactory, useClass, or useExisting // to configure the ConnectionOptions. useFactory : ( configService : ConfigService ) => ({ type : 'mysql' , host : configService.get ( 'HOST' ), port : + configService . get < number > ( 'PORT' ), username : configService.get ( 'USERNAME' ), password : configService.get ( 'PASSWORD' ), database : configService.get ( 'DATABASE' ), entities : [ __dirname + '/**/*.entity{.ts,.js}' ], synchronize : true , }), // connectionFactory receives the configured ConnectionOptions // and returns a Promise<Connection>. connectionFactory : async ( options ) => { const connection = await createConnection ( options ); return connection ; }, }); info Hint createConnection \u51fd\u6570\u662f\u4ece typeform \u5305\u4e2d\u5bfc\u5165\u7684\u3002","title":"\u81ea\u5b9a\u4e49\u8fde\u63a5\u5de5\u5382"},{"location":"techniques/sql/#_14","text":"\u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u4f8b\u5b50"},{"location":"techniques/sql/#sequelize","text":"\u4f7f\u7528 TypeORM \u7684\u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u4f7f\u7528 Sequelize ORM \u548c @nestjs/sequelize \u5305\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5229\u7528\u4e86 sequelize-typescript \u5305\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u989d\u5916\u7684\u88c5\u9970\u5668\u6765\u58f0\u660e\u6027\u5730\u5b9a\u4e49\u5b9e\u4f53\u3002 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u6d41\u884c\u7684 MySQL \u5173\u7cfb\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff0c\u4f46\u662f Sequelize \u63d0\u4f9b\u4e86\u5bf9\u8bb8\u591a\u5173\u7cfb\u6570\u636e\u5e93\u7684\u652f\u6301\uff0c\u5982 PostgreSQL\u3001MySQL\u3001Microsoft SQL Server\u3001SQLite \u548c MariaDB\u3002 \u5bf9\u4e8e Sequelize \u652f\u6301\u7684\u4efb\u4f55\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5728\u672c\u7ae0\u4e2d\u6240\u7ecf\u5386\u7684\u8fc7\u7a0b\u90fd\u662f\u76f8\u540c\u7684\u3002 \u60a8\u53ea\u9700\u8981\u4e3a\u6240\u9009\u6570\u636e\u5e93\u5b89\u88c5\u76f8\u5173\u7684\u5ba2\u6237\u7aef API \u5e93\u3002 $ npm install --save @nestjs/sequelize sequelize sequelize-typescript mysql2 $ npm install --save-dev @types/sequelize \u4e00\u65e6\u5b89\u88c5\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a SequelizeModule \u5bfc\u5165\u5230\u6839\u76ee\u5f55 AppModule \u4e2d\u3002 @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; @Module ({ imports : [ SequelizeModule . forRoot ({ dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , models : [], }), ], }) export class AppModule {} forRoot()\u65b9\u6cd5\u652f\u6301 Sequelize \u6784\u9020\u51fd\u6570\u516c\u5f00\u7684\u6240\u6709\u914d\u7f6e\u5c5e\u6027( read more )\u3002 \u6b64\u5916\uff0c\u4e0b\u9762\u8fd8\u63cf\u8ff0\u4e86\u51e0\u4e2a\u989d\u5916\u7684\u914d\u7f6e\u5c5e\u6027\u3002 retryAttempts \u5c1d\u8bd5\u8fde\u63a5\u6570\u636e\u5e93\u7684\u6b21\u6570 (default: 10 ) retryDelay \u8fde\u63a5\u91cd\u8bd5\u4e4b\u95f4\u7684\u5ef6\u8fdf(ms) (default: 3000 ) autoLoadModels \u5982\u679c true \uff0c\u6a21\u578b\u5c06\u81ea\u52a8\u52a0\u8f7d (default: false ) keepConnectionAlive \u5982\u679c true \uff0c\u8fde\u63a5\u5c06\u4e0d\u4f1a\u5728\u5e94\u7528\u7a0b\u5e8f\u5173\u95ed\u65f6\u5173\u95ed (default: false ) synchronize \u5982\u679c true \uff0c\u81ea\u52a8\u52a0\u8f7d\u7684\u6a21\u578b\u5c06\u88ab\u540c\u6b65 (default: true ) \u4e00\u65e6\u5b8c\u6210\uff0c Sequelize \u5bf9\u8c61\u5c06\u53ef\u4ee5\u5728\u6574\u4e2a\u9879\u76ee\u4e2d\u6ce8\u5165(\u4e0d\u9700\u8981\u5bfc\u5165\u4efb\u4f55\u6a21\u5757)\uff0c\u4f8b\u5982: @ @filename ( app . service ) import { Injectable } from '@nestjs/common' ; import { Sequelize } from 'sequelize-typescript' ; @Injectable () export class AppService { constructor ( private sequelize : Sequelize ) {} } @ @switch import { Injectable } from '@nestjs/common' ; import { Sequelize } from 'sequelize-typescript' ; @Dependencies ( Sequelize ) @Injectable () export class AppService { constructor ( sequelize ) { this . sequelize = sequelize ; } }","title":"Sequelize \u96c6\u6210"},{"location":"techniques/sql/#_15","text":"Sequelize \u5b9e\u73b0\u6d3b\u52a8\u8bb0\u5f55\u6a21\u5f0f\u3002 \u4f7f\u7528\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6a21\u578b\u7c7b\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002 \u4e3a\u4e86\u7ee7\u7eed\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u6a21\u578b\u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49 User \u6a21\u578b\u3002 @ @filename ( user . model ) import { Column , Model , Table } from 'sequelize-typescript' ; @Table export class User extends Model { @Column firstName : string ; @Column lastName : string ; @Column ({ defaultValue : true }) isActive : boolean ; } info Hint \u4e86\u89e3\u66f4\u591a\u53ef\u7528\u7684 decorator \u8fd9\u91cc . User \u6a21\u578b\u6587\u4ef6\u4f4d\u4e8e users \u76ee\u5f55\u4e2d\u3002 \u8fd9\u4e2a\u76ee\u5f55\u5305\u542b\u6240\u6709\u4e0e UsersModule \u76f8\u5173\u7684\u6587\u4ef6\u3002 \u4f60\u53ef\u4ee5\u51b3\u5b9a\u5728\u54ea\u91cc\u4fdd\u5b58\u4f60\u7684\u6a21\u578b\u6587\u4ef6\uff0c\u7136\u800c\uff0c\u6211\u4eec\u5efa\u8bae\u5728\u5b83\u4eec\u7684 \u57df \u9644\u8fd1\u521b\u5efa\u5b83\u4eec\uff0c\u5728\u76f8\u5e94\u7684\u6a21\u5757\u76ee\u5f55\u4e2d\u3002 \u4e3a\u4e86\u5f00\u59cb\u4f7f\u7528\u201cUser\u201d\u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u63d2\u5165\u5230\u6a21\u5757\u7684\u201cforRoot()\u201d\u65b9\u6cd5\u9009\u9879\u4e2d\u7684\u201cmodels\u201d\u6570\u7ec4\u4e2d\uff0c\u8ba9 Sequelize \u77e5\u9053\u5b83: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; import { User } from './users/user.model' ; @Module ({ imports : [ SequelizeModule . forRoot ({ dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , models : [ User ], }), ], }) export class AppModule {} \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u201cUsersModule\u201d: @ @filename ( users . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; import { User } from './user.model' ; import { UsersController } from './users.controller' ; import { UsersService } from './users.service' ; @Module ({ imports : [ SequelizeModule . forFeature ([ User ])], providers : [ UsersService ], controllers : [ UsersController ], }) export class UsersModule {} \u8fd9\u4e2a\u6a21\u5757\u4f7f\u7528 forFeature() \u65b9\u6cd5\u6765\u5b9a\u4e49\u54ea\u4e9b\u6a21\u578b\u6ce8\u518c\u5728\u5f53\u524d\u8303\u56f4\u5185\u3002 \u6709\u4e86\u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 @InjectModel() \u88c5\u9970\u5668\u5c06 UserModel \u6ce8\u5165\u5230 UsersService \u4e2d: @ @filename ( users . service ) import { Injectable } from '@nestjs/common' ; import { InjectModel } from '@nestjs/sequelize' ; import { User } from './user.model' ; @Injectable () export class UsersService { constructor ( @InjectModel ( User ) private userModel : typeof User , ) {} async findAll () : Promise < User [] > { return this . userModel . findAll (); } findOne ( id : string ) : Promise < User > { return this . userModel . findOne ({ where : { id , }, }); } async remove ( id : string ) : Promise < void > { const user = await this . findOne ( id ); await user . destroy (); } } @ @switch import { Injectable , Dependencies } from '@nestjs/common' ; import { getModelToken } from '@nestjs/sequelize' ; import { User } from './user.model' ; @Injectable () @Dependencies ( getModelToken ( User )) export class UsersService { constructor ( usersRepository ) { this . usersRepository = usersRepository ; } async findAll () { return this . userModel . findAll (); } findOne ( id ) { return this . userModel . findOne ({ where : { id , }, }); } async remove ( id ) { const user = await this . findOne ( id ); await user . destroy (); } } warning Notice \u522b\u5fd8\u4e86\u628a UsersModule \u5bfc\u5165\u6839\u6a21\u5757 AppModule \u3002 \u5982\u679c\u4f60\u60f3\u5728\u5bfc\u5165 SequelizeModulefor.Feature \u7684\u6a21\u5757\u5916\u90e8\u4f7f\u7528\u5b58\u50a8\u5e93\uff0c\u4f60\u9700\u8981\u91cd\u65b0\u5bfc\u51fa\u5b83\u751f\u6210\u7684\u63d0\u4f9b\u5668\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5bfc\u51fa\u6574\u4e2a\u6a21\u5757\u6765\u5b9e\u73b0\uff0c\u50cf\u8fd9\u6837: @ @filename ( users . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; import { User } from './user.entity' ; @Module ({ imports : [ SequelizeModule . forFeature ([ User ])], exports : [ SequelizeModule ] }) export class UsersModule {} \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u5728 UserHttpModule \u4e2d\u5bfc\u5165 UsersModule \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u540e\u4e00\u4e2a\u6a21\u5757\u7684 providers \u4e2d\u4f7f\u7528 @InjectModel(User) \u3002 @ @filename ( users - http . module ) import { Module } from '@nestjs/common' ; import { UsersModule } from './users.module' ; import { UsersService } from './users.service' ; import { UsersController } from './users.controller' ; @Module ({ imports : [ UsersModule ], providers : [ UsersService ], controllers : [ UsersController ] }) export class UserHttpModule {}","title":"\u6a21\u578b"},{"location":"techniques/sql/#_16","text":"\u5173\u7cfb\u662f\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u8868\u4e4b\u95f4\u5efa\u7acb\u7684\u5173\u8054\u3002 \u5173\u7cfb\u57fa\u4e8e\u6bcf\u4e2a\u8868\u7684\u516c\u5171\u5b57\u6bb5\uff0c\u901a\u5e38\u6d89\u53ca\u4e3b\u952e\u548c\u5916\u952e\u3002 \u6709\u4e09\u79cd\u5173\u7cfb: One-to-one \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5173\u8054\u884c One-to-many / Many-to-one \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u90fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u76f8\u5173\u884c Many-to-many \u4e3b\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u5728\u5916\u90e8\u8868\u4e2d\u6709\u8bb8\u591a\u76f8\u5173\u884c\uff0c\u800c\u5916\u90e8\u8868\u4e2d\u7684\u6bcf\u6761\u8bb0\u5f55\u5728\u4e3b\u8868\u4e2d\u6709\u8bb8\u591a\u76f8\u5173\u884c \u8981\u5b9a\u4e49\u5b9e\u4f53\u4e2d\u7684\u5173\u7cfb\uff0c\u8bf7\u4f7f\u7528\u76f8\u5e94\u7684 \u88c5\u9970\u5668 \u3002 \u4f8b\u5982\uff0c\u8981\u5b9a\u4e49\u6bcf\u4e2a User \u53ef\u4ee5\u6709\u591a\u4e2a\u7167\u7247\uff0c\u8bf7\u4f7f\u7528 @HasMany() \u88c5\u9970\u5668\u3002 @ @filename ( user . entity ) import { Column , Model , Table , HasMany } from 'sequelize-typescript' ; import { Photo } from '../photos/photo.model' ; @Table export class User extends Model { @Column firstName : string ; @Column lastName : string ; @Column ({ defaultValue : true }) isActive : boolean ; @HasMany (() => Photo ) photos : Photo []; } info Hint \u8981\u5728 Sequelize \u4e2d\u4e86\u89e3\u66f4\u591a\u6709\u5173\u5173\u8054\u7684\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb this \u8fd9\u4e00\u7ae0\u3002","title":"\u5173\u7cfb"},{"location":"techniques/sql/#_17","text":"\u624b\u52a8\u6dfb\u52a0\u6a21\u578b\u5230\u8fde\u63a5\u9009\u9879\u7684 models \u6570\u7ec4\u4e2d\u53ef\u80fd\u4f1a\u5f88\u7e41\u7410\u3002 \u6b64\u5916\uff0c\u4ece\u6839\u6a21\u5757\u5f15\u7528\u6a21\u578b\u4f1a\u6253\u7834\u5e94\u7528\u7a0b\u5e8f\u57df\u8fb9\u754c\uff0c\u5e76\u5bfc\u81f4\u5b9e\u73b0\u7ec6\u8282\u6cc4\u9732\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u8fc7\u5c06\u914d\u7f6e\u5bf9\u8c61\u7684 autoLoadModels \u548c synchronize \u5c5e\u6027(\u4f20\u5165\u5230 forRoot() \u65b9\u6cd5\u4e2d)\u8bbe\u7f6e\u4e3a true \u6765\u81ea\u52a8\u52a0\u8f7d\u6a21\u578b\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { SequelizeModule } from '@nestjs/sequelize' ; @Module ({ imports : [ SequelizeModule . forRoot ({ ... autoLoadModels : true , synchronize : true , }), ], }) export class AppModule {} \u6307\u5b9a\u4e86\u8fd9\u4e2a\u9009\u9879\u540e\uff0c\u6bcf\u4e2a\u901a\u8fc7 forFeature() \u65b9\u6cd5\u6ce8\u518c\u7684\u6a21\u578b\u90fd\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u914d\u7f6e\u5bf9\u8c61\u7684 models \u6570\u7ec4\u4e2d\u3002 warning Warning \u8bf7\u6ce8\u610f\uff0c\u6ca1\u6709\u901a\u8fc7 forFeature() \u65b9\u6cd5\u6ce8\u518c\u7684\u6a21\u578b\uff0c\u4f46\u4ec5\u4ece\u6a21\u578b\u5f15\u7528(\u901a\u8fc7\u5173\u8054)\uff0c\u5c06\u4e0d\u5305\u62ec\u5728\u5185\u3002","title":"\u81ea\u52a8\u8d1f\u8f7d\u6a21\u578b"},{"location":"techniques/sql/#_18","text":"\u6570\u636e\u5e93\u4e8b\u52a1\u4ee3\u8868\u5728\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u4e2d\u9488\u5bf9\u6570\u636e\u5e93\u6267\u884c\u7684\u5de5\u4f5c\u5355\u5143\uff0c\u5e76\u4ee5\u72ec\u7acb\u4e8e\u5176\u4ed6\u4e8b\u52a1\u7684\u4e00\u81f4\u548c\u53ef\u9760\u7684\u65b9\u5f0f\u5904\u7406\u3002 \u4e8b\u52a1\u901a\u5e38\u4ee3\u8868\u6570\u636e\u5e93\u4e2d\u7684\u4efb\u4f55\u53d8\u5316( \u4e86\u89e3\u66f4\u591a\u4fe1\u606f )\u3002 \u6709\u8bb8\u591a\u4e0d\u540c\u7684\u7b56\u7565\u6765\u5904\u7406 Sequelize transaction \u3002 \u4e0b\u9762\u662f\u6258\u7ba1\u4e8b\u52a1(\u81ea\u52a8\u56de\u8c03)\u7684\u793a\u4f8b\u5b9e\u73b0\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u6b63\u5e38\u7684\u65b9\u5f0f\u5c06 Sequelize \u5bf9\u8c61\u6ce8\u5165\u5230\u7c7b\u4e2d: @Injectable () export class UsersService { constructor ( private sequelize : Sequelize ) {} } info Hint Sequelize \u7c7b\u662f\u4ece sequelize-typescript \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u6765\u521b\u5efa\u4e8b\u52a1\u3002 async createMany () { try { await this . sequelize . transaction ( async t => { const transactionHost = { transaction : t }; await this . userModel . create ( { firstName : 'Abraham' , lastName : 'Lincoln' }, transactionHost , ); await this . userModel . create ( { firstName : 'John' , lastName : 'Boothe' }, transactionHost , ); }); } catch ( err ) { // Transaction has been rolled back // err is whatever rejected the promise chain returned to the transaction callback } } info Hint Note that the Sequelize instance is used only to start the transaction. However, to test this class would require mocking the entire Sequelize object (which exposes several methods). Thus, we recommend using a helper factory class (e.g., TransactionRunner ) and defining an interface with a limited set of methods required to maintain transactions. This technique makes mocking these methods pretty straightforward.","title":"\u4e8b\u52a1"},{"location":"techniques/sql/#_19","text":"Migrations \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u589e\u91cf\u5730\u66f4\u65b0\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u4f7f\u5176\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u6a21\u578b\u4fdd\u6301\u540c\u6b65\uff0c\u540c\u65f6\u4fdd\u7559\u6570\u636e\u5e93\u4e2d\u7684\u73b0\u6709\u6570\u636e\u3002 \u4e3a\u4e86\u751f\u6210\u3001\u8fd0\u884c\u548c\u6062\u590d\u8fc1\u79fb\uff0cSequelize \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e13\u7528\u7684 CLI \u3002 \u8fc1\u79fb\u7c7b\u4e0e Nest \u5e94\u7528\u7a0b\u5e8f\u6e90\u4ee3\u7801\u662f\u5206\u5f00\u7684\u3002 \u5b83\u4eec\u7684\u751f\u547d\u5468\u671f\u662f\u7531 Sequelize CLI \u7ef4\u62a4\u7684\u3002 \u56e0\u6b64\uff0c\u60a8\u4e0d\u80fd\u901a\u8fc7\u8fc1\u79fb\u6765\u5229\u7528\u4f9d\u8d56\u6ce8\u5165\u548c\u5176\u4ed6 Nest \u7279\u5b9a\u7684\u7279\u6027\u3002 \u8981\u4e86\u89e3\u5173\u4e8e\u8fc1\u79fb\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 Sequelize \u6587\u6863 \u4e2d\u7684\u6307\u5357\u3002","title":"\u8fc1\u79fb"},{"location":"techniques/sql/#_20","text":"\u6709\u4e9b\u9879\u76ee\u9700\u8981\u591a\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6a21\u5757\u5b9e\u73b0\u3002 \u8981\u5904\u7406\u591a\u4e2a\u8fde\u63a5\uff0c\u9996\u5148\u8981\u521b\u5efa\u8fde\u63a5\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u547d\u540d\u6210\u4e3a \u5fc5\u987b\u7684 \u3002 \u5047\u8bbe\u60a8\u6709\u4e00\u4e2a Album \u5b9e\u4f53\u5b58\u50a8\u5728\u81ea\u5df1\u7684\u6570\u636e\u5e93\u4e2d\u3002 const defaultOptions = { dialect : 'postgres' , port : 5432 , username : 'user' , password : 'password' , database : 'db' , synchronize : true , }; @Module ({ imports : [ SequelizeModule . forRoot ({ ... defaultOptions , host : 'user_db_host' , models : [ User ], }), SequelizeModule . forRoot ({ ... defaultOptions , name : 'albumsConnection' , host : 'album_db_host' , models : [ Album ], }), ], }) export class AppModule {} warning Notice \u5982\u679c\u4f60\u6ca1\u6709\u4e3a\u4e00\u4e2a\u8fde\u63a5\u8bbe\u7f6e\u201cname\u201d\uff0c\u5b83\u7684\u540d\u79f0\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u201cdefault\u201d\u3002 \u8bf7\u6ce8\u610f\uff0c\u60a8\u4e0d\u5e94\u8be5\u6709\u591a\u4e2a\u6ca1\u6709\u540d\u79f0\u6216\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u8fde\u63a5\uff0c\u5426\u5219\u5b83\u4eec\u5c06\u88ab\u8986\u76d6\u3002 \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60\u6709 User and Album \u6a21\u578b\u6ce8\u518c\u5230\u4ed6\u4eec\u81ea\u5df1\u7684\u8fde\u63a5\u3002 \u5728\u8fd9\u4e2a\u8bbe\u7f6e\u4e2d\uff0c\u4f60\u5fc5\u987b\u544a\u8bc9 SequelizeModule.forFeature() \u65b9\u6cd5\u548c @InjectModel() \u88c5\u9970\u5668\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u8fde\u63a5\u3002 \u5982\u679c\u60a8\u6ca1\u6709\u4f20\u9012\u4efb\u4f55\u8fde\u63a5\u540d\u79f0\uff0c\u5219\u4f7f\u7528 default \u8fde\u63a5\u3002 @Module ({ imports : [ SequelizeModule . forFeature ([ User ]), SequelizeModule . forFeature ([ Album ], 'albumsConnection' ), ], }) export class AppModule {} \u4f60\u4e5f\u53ef\u4ee5\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8fde\u63a5\u6ce8\u5165 Sequelize \u5b9e\u4f8b: @Injectable () export class AlbumsService { constructor ( @InjectConnection ( 'albumsConnection' ) private sequelize : Sequelize , ) {} } \u4e5f\u53ef\u4ee5\u5c06\u4efb\u4f55 Sequelize \u5b9e\u4f8b\u6ce8\u5165\u5230\u63d0\u4f9b\u5668: @Module ({ providers : [ { provide : AlbumsService , useFactory : ( albumsSequelize : Sequelize ) => { return new AlbumsService ( albumsSequelize ); }, inject : [ getConnectionToken ( 'albumsConnection' )], }, ], }) export class AlbumsModule {}","title":"\u591a\u4e2a\u6570\u636e\u5e93"},{"location":"techniques/sql/#_21","text":"\u5f53\u6d89\u53ca\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u907f\u514d\u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u4fdd\u6301\u6d4b\u8bd5\u5957\u4ef6\u7684\u72ec\u7acb\u6027\uff0c\u5e76\u5c3d\u53ef\u80fd\u5feb\u5730\u6267\u884c\u5b83\u4eec\u3002 \u4f46\u662f\u6211\u4eec\u7684\u7c7b\u53ef\u80fd\u4f9d\u8d56\u4e8e\u4ece\u8fde\u63a5\u5b9e\u4f8b\u4e2d\u63d0\u53d6\u7684\u6a21\u578b\u3002 \u6211\u4eec\u8be5\u5982\u4f55\u5904\u7406\u5462?\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u6a21\u62df\u6a21\u578b\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86 custom providers \u3002 \u6bcf\u4e2a\u6ce8\u518c\u7684\u6a21\u578b\u90fd\u7531\u4e00\u4e2a <ModelName>model \u4ee4\u724c\u81ea\u52a8\u8868\u793a\uff0c\u5176\u4e2d ModelName \u662f\u60a8\u7684\u6a21\u578b\u7c7b\u7684\u540d\u79f0\u3002 @nestjs/sequelize \u5305\u516c\u5f00\u4e86 getModelToken() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6839\u636e\u7ed9\u5b9a\u7684\u6a21\u578b\u8fd4\u56de\u4e00\u4e2a\u51c6\u5907\u597d\u7684\u4ee4\u724c\u3002 @Module ({ providers : [ UsersService , { provide : getModelToken ( User ), useValue : mockModel , }, ], }) export class UsersModule {} \u73b0\u5728\uff0c mockModel \u5c06\u88ab\u7528\u4f5c UserModel \u3002 \u5f53\u4efb\u4f55\u7c7b\u4f7f\u7528 @InjectModel() \u88c5\u9970\u5668\u8bf7\u6c42 UserModel \u65f6\uff0cNest \u5c06\u4f7f\u7528\u6ce8\u518c\u7684 mockModel \u5bf9\u8c61\u3002","title":"\u6d4b\u8bd5"},{"location":"techniques/sql/#_22","text":"\u4f60\u53ef\u80fd\u60f3\u8981\u5f02\u6b65\u4f20\u9012\u4f60\u7684\u201cSequelizeModule\u201d\u9009\u9879\uff0c\u800c\u4e0d\u662f\u9759\u6001\u7684\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 forRootAsync() \u65b9\u6cd5\uff0c\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u5904\u7406\u5f02\u6b65\u914d\u7f6e\u7684\u65b9\u6cd5\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5de5\u5382\u51fd\u6570: SequelizeModule . forRootAsync ({ useFactory : () => ({ dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , models : [], }), }); \u6211\u4eec\u7684\u5de5\u5382\u7684\u884c\u4e3a\u548c\u5176\u4ed6 \u5f02\u6b65\u63d0\u4f9b\u5668 \u4e00\u6837(\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u662f async \uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 inject \u6ce8\u5165\u4f9d\u8d56\u9879)\u3002 SequelizeModule . forRootAsync ({ imports : [ ConfigModule ], useFactory : ( configService : ConfigService ) => ({ dialect : 'mysql' , host : configService.get ( 'HOST' ), port : + configService . get ( 'PORT' ), username : configService.get ( 'USERNAME' ), password : configService.get ( 'PASSWORD' ), database : configService.get ( 'DATABASE' ), models : [], }), inject : [ ConfigService ], }); \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useClass \u8bed\u6cd5: SequelizeModule . forRootAsync ({ useClass : SequelizeConfigService , }); \u4e0a\u9762\u7684\u6784\u9020\u5c06\u5728 SequelizeModule \u5b9e\u4f8b\u5316 SequelizeConfigService \uff0c\u5e76\u901a\u8fc7\u8c03\u7528 createSequelizeOptions() \u6765\u4f7f\u7528\u5b83\u6765\u63d0\u4f9b\u4e00\u4e2a\u9009\u9879\u5bf9\u8c61\u3002 \u6ce8\u610f\uff0c\u8fd9\u610f\u5473\u7740 SequelizeConfigService \u5fc5\u987b\u5b9e\u73b0 SequelizeOptionsFactory \u63a5\u53e3\uff0c\u5982\u4e0b\u6240\u793a: @Injectable () class SequelizeConfigService implements SequelizeOptionsFactory { createSequelizeOptions () : SequelizeModuleOptions { return { dialect : 'mysql' , host : 'localhost' , port : 3306 , username : 'root' , password : 'root' , database : 'test' , models : [], }; } } \u4e3a\u4e86\u9632\u6b62\u5728 SequelizeModule \u4e2d\u521b\u5efa SequelizeConfigService \uff0c\u5e76\u4f7f\u7528\u4ece\u4e0d\u540c\u6a21\u5757\u5bfc\u5165\u7684\u63d0\u4f9b\u5668\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 useExisting \u8bed\u6cd5\u3002 SequelizeModule . forRootAsync ({ imports : [ ConfigModule ], useExisting : ConfigService , }); \u8fd9\u4e2a\u6784\u9020\u7684\u5de5\u4f5c\u539f\u7406\u4e0e useClass \u76f8\u540c\uff0c\u4f46\u6709\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b\u2014\u2014 SequelizeModule \u5c06\u67e5\u627e\u5bfc\u5165\u7684\u6a21\u5757\u6765\u91cd\u7528\u73b0\u6709\u7684 ConfigService \uff0c\u800c\u4e0d\u662f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684\u3002","title":"\u5f02\u6b65\u7684\u914d\u7f6e"},{"location":"techniques/sql/#_23","text":"\u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u4f8b\u5b50"},{"location":"techniques/streaming-files/","text":"Streaming files \u00b6 info Note This chapter shows how you can stream files from your HTTP application . The examples presented below do not apply to GraphQL or Microservice applications. There may be times where you would like to send back a file from your REST API to the client. To do this with Nest, normally you'd do the following: @Controller ( 'file' ) export class FileController { @Get () getFile ( @Res () res : Response ) { const file = createReadStream ( join ( process . cwd (), 'package.json' )); file . pipe ( res ); } } But in doing so you end up losing access to your post-controller interceptor logic. To handle this, you can return a StreamableFile instance and under the hood, the framework will take care of piping the response. Streamable File class \u00b6 A StreamableFile is a class that holds onto the stream that is to be returned. To create a new StreamableFile , you can pass either a Buffer or a Stream to the StreamableFile constructor. info hint The StreamableFile class can be imported from @nestjs/common . Cross-platform support \u00b6 Fastify, by default, can support sending files without needing to call stream.pipe(res) , so you don't need to use the StreamableFile class at all. However, Nest supports the use of StreamableFile in both platform types, so if you end up switching between Express and Fastify there's no need to worry about compatibility between the two engines. Example \u00b6 You can find a simple example of returning the package.json as a file instead of a JSON below, but the idea extends out naturally to images, documents, and any other file type. import { Controller , Get , StreamableFile } from '@nestjs/common' ; import { createReadStream } from 'fs' ; import { join } from 'path' ; @Controller ( 'file' ) export class FileController { @Get () getFile () : StreamableFile { const file = createReadStream ( join ( process . cwd (), 'package.json' )); return new StreamableFile ( file ); } } The default content type is application/octet-stream , if you need to customize the response you can use the res.set method. import { Controller , Get , StreamableFile , Response } from '@nestjs/common' ; import { createReadStream } from 'fs' ; import { join } from 'path' ; @Controller ( 'file' ) export class FileController { @Get () getFile ( @Response ({ passthrough : true }) res ) : StreamableFile { const file = createReadStream ( join ( process . cwd (), 'package.json' )); res . set ({ 'Content-Type' : 'application/json' , 'Content-Disposition' : 'attachment; filename=\"package.json\"' , }); return new StreamableFile ( file ); } }","title":"\u6d41\u6587\u4ef6"},{"location":"techniques/streaming-files/#streaming-files","text":"info Note This chapter shows how you can stream files from your HTTP application . The examples presented below do not apply to GraphQL or Microservice applications. There may be times where you would like to send back a file from your REST API to the client. To do this with Nest, normally you'd do the following: @Controller ( 'file' ) export class FileController { @Get () getFile ( @Res () res : Response ) { const file = createReadStream ( join ( process . cwd (), 'package.json' )); file . pipe ( res ); } } But in doing so you end up losing access to your post-controller interceptor logic. To handle this, you can return a StreamableFile instance and under the hood, the framework will take care of piping the response.","title":"Streaming files"},{"location":"techniques/streaming-files/#streamable-file-class","text":"A StreamableFile is a class that holds onto the stream that is to be returned. To create a new StreamableFile , you can pass either a Buffer or a Stream to the StreamableFile constructor. info hint The StreamableFile class can be imported from @nestjs/common .","title":"Streamable File class"},{"location":"techniques/streaming-files/#cross-platform-support","text":"Fastify, by default, can support sending files without needing to call stream.pipe(res) , so you don't need to use the StreamableFile class at all. However, Nest supports the use of StreamableFile in both platform types, so if you end up switching between Express and Fastify there's no need to worry about compatibility between the two engines.","title":"Cross-platform support"},{"location":"techniques/streaming-files/#example","text":"You can find a simple example of returning the package.json as a file instead of a JSON below, but the idea extends out naturally to images, documents, and any other file type. import { Controller , Get , StreamableFile } from '@nestjs/common' ; import { createReadStream } from 'fs' ; import { join } from 'path' ; @Controller ( 'file' ) export class FileController { @Get () getFile () : StreamableFile { const file = createReadStream ( join ( process . cwd (), 'package.json' )); return new StreamableFile ( file ); } } The default content type is application/octet-stream , if you need to customize the response you can use the res.set method. import { Controller , Get , StreamableFile , Response } from '@nestjs/common' ; import { createReadStream } from 'fs' ; import { join } from 'path' ; @Controller ( 'file' ) export class FileController { @Get () getFile ( @Response ({ passthrough : true }) res ) : StreamableFile { const file = createReadStream ( join ( process . cwd (), 'package.json' )); res . set ({ 'Content-Type' : 'application/json' , 'Content-Disposition' : 'attachment; filename=\"package.json\"' , }); return new StreamableFile ( file ); } }","title":"Example"},{"location":"techniques/task-scheduling/","text":"\u4efb\u52a1\u8c03\u5ea6 \u00b6 \u4efb\u52a1\u8c03\u5ea6\u5141\u8bb8\u60a8\u5b89\u6392\u4efb\u610f\u4ee3\u7801(\u65b9\u6cd5/\u51fd\u6570)\u5728\u56fa\u5b9a\u7684\u65e5\u671f/\u65f6\u95f4\u3001\u91cd\u590d\u7684\u95f4\u9694\u6216\u5728\u6307\u5b9a\u95f4\u9694\u540e\u6267\u884c\u4e00\u6b21\u3002 \u5728 Linux \u4e16\u754c\u4e2d\uff0c\u8fd9\u901a\u5e38\u662f\u7531\u50cf cron \u8fd9\u6837\u7684\u5305\u5728\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u4e0a\u5904\u7406\u7684\u3002 \u5bf9\u4e8e Node.js \u5e94\u7528\u7a0b\u5e8f\uff0c\u6709\u51e0\u4e2a\u5305\u6a21\u62df\u4e86\u7c7b\u4f3c cron \u7684\u529f\u80fd\u3002 Nest \u63d0\u4f9b\u4e86 @nestjs/schedule \u5305\uff0c\u5b83\u96c6\u6210\u4e86\u6d41\u884c\u7684 Node.js node-cron \u5305\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u8ba8\u8bba\u8fd9\u4e2a\u5305\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm install --save @nestjs/schedule $ npm install --save-dev @types/cron \u8981\u6fc0\u6d3b\u4f5c\u4e1a\u8c03\u5ea6\uff0c\u8bf7\u5c06 ScheduleModule \u5bfc\u5165\u5230\u6839\u6a21\u5757 AppModule \u4e2d\uff0c\u5e76\u8fd0\u884c forRoot() \u9759\u6001\u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { ScheduleModule } from '@nestjs/schedule' ; @Module ({ imports : [ ScheduleModule . forRoot () ], }) export class AppModule {} .forroot() \u8c03\u7528\u521d\u59cb\u5316\u8c03\u5ea6\u5668\uff0c\u5e76\u6ce8\u518c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5b58\u5728\u7684\u4efb\u4f55\u58f0\u660e\u6027 cron job \u3001 timeout \u548c interval \u3002 \u5f53 onApplicationBootstrap \u751f\u547d\u5468\u671f\u94a9\u5b50\u53d1\u751f\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u6ce8\u518c\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u6a21\u5757\u90fd\u5df2\u52a0\u8f7d\u5e76\u58f0\u660e\u4e86\u4efb\u4f55\u8c03\u5ea6\u7684\u4f5c\u4e1a\u3002 \u58f0\u660e\u5f0f cron jobs \u00b6 cron \u4f5c\u4e1a\u8c03\u5ea6\u4efb\u610f\u51fd\u6570(\u65b9\u6cd5\u8c03\u7528)\u4ee5\u81ea\u52a8\u8fd0\u884c\u3002Cron \u4f5c\u4e1a\u53ef\u4ee5\u8fd0\u884c: \u4e00\u6b21\uff0c\u5728\u6307\u5b9a\u7684\u65e5\u671f/\u65f6\u95f4\u3002 \u7ecf\u5e38\u6027\u5730;\u5faa\u73af\u4f5c\u4e1a\u53ef\u4ee5\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u5185(\u4f8b\u5982\uff0c\u6bcf\u5c0f\u65f6\u8fd0\u884c\u4e00\u6b21\u3001\u6bcf\u5468\u8fd0\u884c\u4e00\u6b21\u3001\u6bcf 5 \u5206\u949f\u8fd0\u884c\u4e00\u6b21)\u3002 \u7528 @Cron() \u88c5\u9970\u5668\u5728\u5305\u542b\u8981\u6267\u884c\u7684\u4ee3\u7801\u7684\u65b9\u6cd5\u5b9a\u4e49\u4e4b\u524d\u58f0\u660e\u4e00\u4e2a cron \u4f5c\u4e1a\uff0c\u5982\u4e0b\u6240\u793a: import { Injectable , Logger } from '@nestjs/common' ; import { Cron } from '@nestjs/schedule' ; @Injectable () export class TasksService { private readonly logger = new Logger ( TasksService . name ); @Cron ( '45 * * * * *' ) handleCron () { this . logger . debug ( 'Called when the current second is 45' ); } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c handleCron() \u65b9\u6cd5\u5c06\u5728\u5f53\u524d\u79d2\u4e3a 45 \u65f6\u88ab\u8c03\u7528\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8be5\u65b9\u6cd5\u5c06\u5728\u6bcf\u5206\u949f 45 \u79d2\u65f6\u8fd0\u884c\u4e00\u6b21\u3002 @Cron() \u88c5\u9970\u5668\u652f\u6301\u6240\u6709\u6807\u51c6\u7684 cron \u6a21\u5f0f : \u661f\u53f7 (e.g. * ) \u8303\u56f4 (e.g. 1-3,5 ) \u6b65\u9891 (e.g. */2 ) \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06 45 * * * * * \u4f20\u9012\u7ed9\u88c5\u9970\u5668\u3002 \u4e0b\u9762\u7684\u952e\u663e\u793a\u4e86\u5982\u4f55\u89e3\u91ca cron \u6a21\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e: * * * * * * | | | | | | | | | | | day of week | | | | month | | | day of month | | hour | minute second (optional) \u4e00\u4e9b\u6837\u672c cron \u6a21\u5f0f\u662f: * * * * * * \u6bcf\u4e00\u79d2 45 * * * * * \u6bcf\u4e00\u5206\u949f\uff0c45\u79d2 0 10 * * * * \u6bcf\u5c0f\u65f6\uff0c\u7b2c\u5341\u5206\u949f\u5f00\u59cb 0 */30 9-17 * * * \u65e9\u4e0a9\u70b9\u5230\u4e0b\u53485\u70b9\u6bcf\u969430\u5206\u949f\u4e00\u6b21 0 30 11 * * 1-5 \u661f\u671f\u4e00\u81f3\u4e94\u4e0a\u534811\u65f630\u5206 @nestjs/schedule \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u679a\u4e3e\uff0c\u5176\u4e2d\u5305\u542b\u5e38\u7528\u7684 cron \u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528\u8fd9\u4e2a enum: import { Injectable , Logger } from '@nestjs/common' ; import { Cron , CronExpression } from '@nestjs/schedule' ; @Injectable () export class TasksService { private readonly logger = new Logger ( TasksService . name ); @Cron ( CronExpression . EVERY_30_SECONDS ) handleCron () { this . logger . debug ( 'Called every 30 seconds' ); } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c handleCron() \u65b9\u6cd5\u5c06\u6bcf 30 \u79d2\u88ab\u8c03\u7528\u4e00\u6b21\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4e3a @Cron() \u88c5\u9970\u5668\u63d0\u4f9b\u4e00\u4e2a JavaScript \u7684 Date \u5bf9\u8c61\u3002 \u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u4f5c\u4e1a\u5728\u6307\u5b9a\u65e5\u671f\u53ea\u6267\u884c\u4e00\u6b21\u3002 info \u63d0\u793a \u4f7f\u7528 JavaScript \u65e5\u671f\u7b97\u6cd5\u6765\u5b89\u6392\u76f8\u5bf9\u4e8e\u5f53\u524d\u65e5\u671f\u7684\u4f5c\u4e1a\u3002 \u4f8b\u5982\uff0c @Cron(new Date(Date.now() + 10 * 1000)) \u6765\u8c03\u5ea6\u4e00\u4e2a\u4f5c\u4e1a\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8 10 \u79d2\u540e\u8fd0\u884c\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u989d\u5916\u7684\u9009\u9879\u4f5c\u4e3a @Cron() \u88c5\u9970\u5668\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 name \u5728\u58f0\u660ecron\u4f5c\u4e1a\u4e4b\u540e\uff0c\u8bbf\u95ee\u548c\u63a7\u5236cron\u4f5c\u4e1a\u5f88\u6709\u7528\u3002 timeZone \u6307\u5b9a\u6267\u884c\u7684\u65f6\u533a\u3002\u8fd9\u5c06\u4fee\u6539\u76f8\u5bf9\u4e8e\u60a8\u7684\u65f6\u533a\u7684\u5b9e\u9645\u65f6\u95f4\u3002\u5982\u679c\u65f6\u533a\u65e0\u6548\uff0c\u5219\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002\u60a8\u53ef\u4ee5\u5728[Moment Timezone](http://momentjs.com/timezone/)\u7f51\u7ad9\u4e0a\u67e5\u770b\u6240\u6709\u53ef\u7528\u7684\u65f6\u533a\u3002 utcOffset \u8fd9\u5141\u8bb8\u60a8\u6307\u5b9a\u65f6\u533a\u7684\u504f\u79fb\u91cf\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 timezone \u53c2\u6570\u3002 import { Injectable } from '@nestjs/common' ; import { Cron , CronExpression } from '@nestjs/schedule' ; @Injectable () export class NotificationService { @Cron ( '* * 0 * * *' , { name : 'notifications' , timeZone : 'Europe/Paris' , }) triggerNotifications () {} } \u4f60\u53ef\u4ee5\u5728 cron \u4f5c\u4e1a\u58f0\u660e\u4e4b\u540e\u8bbf\u95ee\u548c\u63a7\u5236\u5b83\uff0c\u6216\u8005\u4f7f\u7528 Dynamic API \u52a8\u6001\u521b\u5efa\u4e00\u4e2a cron \u4f5c\u4e1a(\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\u5b83\u7684 cron \u6a21\u5f0f)\u3002 \u8981\u901a\u8fc7 API \u8bbf\u95ee\u4e00\u4e2a\u58f0\u660e\u6027\u7684 cron \u4f5c\u4e1a\uff0c\u4f60\u5fc5\u987b\u5c06 name \u5c5e\u6027\u4f5c\u4e3a\u88c5\u9970\u5668\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u5230\u4e00\u4e2a\u53ef\u9009\u7684 options \u5bf9\u8c61\u4e2d\uff0c\u4ece\u800c\u5c06\u4f5c\u4e1a\u4e0e\u4e00\u4e2a\u540d\u79f0\u5173\u8054\u8d77\u6765\u3002 \u58f0\u660e\u5f0f interval \u00b6 \u8981\u58f0\u660e\u4e00\u4e2a\u65b9\u6cd5\u5e94\u8be5\u4ee5\u6307\u5b9a\u7684(\u91cd\u590d)\u65f6\u95f4\u95f4\u9694\u8fd0\u884c\uff0c\u8bf7\u5728\u65b9\u6cd5\u5b9a\u4e49\u524d\u52a0\u4e0a @Interval() \u88c5\u9970\u5668\u3002 \u5c06 interval \u503c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u4f20\u9012\u7ed9\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @Interval ( 10000 ) handleInterval () { this . logger . debug ( 'Called every 10 seconds' ); } info \u63d0\u793a \u8fd9\u4e2a\u673a\u5236\u5728\u5e95\u5c42\u4f7f\u7528\u4e86 JavaScript \u7684 setInterval() \u51fd\u6570\u3002\u60a8\u8fd8\u53ef\u4ee5\u5229\u7528 cron \u4f5c\u4e1a\u6765\u8c03\u5ea6\u5faa\u73af\u4f5c\u4e1a\u3002 \u5982\u679c\u4f60\u60f3\u901a\u8fc7 Dynamic API \u4ece\u5916\u90e8\u63a7\u5236\u4f60\u7684\u58f0\u660e\u6027\u95f4\u9694\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020\u5c06\u95f4\u9694\u4e0e\u4e00\u4e2a\u540d\u79f0\u5173\u8054\u8d77\u6765: @Interval ( 'notifications' , 2500 ) handleInterval () {} Dynamic API \u8fd8\u652f\u6301 \u521b\u5efa \u52a8\u6001\u95f4\u9694\uff0c\u5176\u4e2d\u95f4\u9694\u7684\u5c5e\u6027\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\uff0c\u5e76 \u5217\u51fa\u548c\u5220\u9664 \u5b83\u4eec\u3002 \u58f0\u660e\u5f0f timeout \u00b6 \u8981\u58f0\u660e\u4e00\u4e2a\u65b9\u6cd5\u5e94\u8be5\u5728\u6307\u5b9a\u7684\u8d85\u65f6\u65f6\u95f4\u8fd0\u884c(\u4e00\u6b21)\uff0c\u8bf7\u5728\u65b9\u6cd5\u5b9a\u4e49\u524d\u52a0\u4e0a @Timeout() \u88c5\u9970\u5668\u3002 \u5c06\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u7684\u76f8\u5bf9\u65f6\u95f4\u504f\u79fb(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u4f20\u9012\u7ed9\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @Timeout ( 5000 ) handleTimeout () { this . logger . debug ( 'Called once after 5 seconds' ); } info \u63d0\u793a \u8fd9\u4e2a\u673a\u5236\u5728\u5e95\u5c42\u4f7f\u7528\u4e86 JavaScript \u7684 setTimeout() \u51fd\u6570\u3002 \u5982\u679c\u4f60\u60f3\u901a\u8fc7 Dynamic API \u4ece\u5916\u90e8\u63a7\u5236\u4f60\u7684\u58f0\u660e\u6027\u8d85\u65f6\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020\u5c06\u8d85\u65f6\u4e0e\u4e00\u4e2a\u540d\u79f0\u5173\u8054\u8d77\u6765: @Timeout ( 'notifications' , 2500 ) handleTimeout () {} Dynamic API \u8fd8\u652f\u6301 \u521b\u5efa \u52a8\u6001\u8d85\u65f6\uff0c\u5176\u4e2d\u8d85\u65f6\u7684\u5c5e\u6027\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\uff0c\u5e76 \u5217\u51fa\u548c\u5220\u9664 \u5b83\u4eec\u3002 \u52a8\u6001\u8c03\u5ea6\u6a21\u5757 API \u00b6 @nestjs/schedule \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u52a8\u6001 API\uff0c\u652f\u6301\u7ba1\u7406\u58f0\u660e\u5f0f\u7684 cron jobs \u3001 timeout \u548c interval \u3002 \u8be5 API \u8fd8\u652f\u6301\u521b\u5efa\u548c\u7ba1\u7406 \u52a8\u6001 cron jobs\u3001timeout \u548c interval\uff0c\u5176\u4e2d\u7684\u5c5e\u6027\u662f\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\u7684\u3002 \u52a8\u6001 cron jobs \u00b6 \u4f7f\u7528 SchedulerRegistry API\uff0c\u4ece\u4f60\u7684\u4ee3\u7801\u4e2d\u4efb\u4f55\u5730\u65b9\u83b7\u53d6\u4e00\u4e2a CronJob \u5b9e\u4f8b\u7684\u540d\u79f0\u5f15\u7528\u3002 \u9996\u5148\uff0c\u4f7f\u7528\u6807\u51c6\u6784\u9020\u51fd\u6570\u6ce8\u5165 SchedulerRegistry : constructor ( private schedulerRegistry : SchedulerRegistry ) {} info Hint \u4ece @nestjs/schedule \u5305\u4e2d\u5bfc\u5165 SchedulerRegistry \u3002 \u7136\u540e\u50cf\u4e0b\u9762\u8fd9\u6837\u5728\u7c7b\u4e2d\u4f7f\u7528\u5b83\u3002\u5047\u8bbe\u4e00\u4e2a cron \u4f5c\u4e1a\u662f\u901a\u8fc7\u4ee5\u4e0b\u58f0\u660e\u521b\u5efa\u7684: @Cron ( '* * 8 * * *' , { name : 'notifications' , }) triggerNotifications () {} \u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u8bbf\u95ee\u6b64\u4f5c\u4e1a: const job = this . schedulerRegistry . getCronJob ( 'notifications' ); job . stop (); console . log ( job . lastDate ()); getCronJob() \u65b9\u6cd5\u8fd4\u56de\u6307\u5b9a\u7684 cron \u4f5c\u4e1a\u3002\u8fd4\u56de\u7684 CronJob \u5bf9\u8c61\u6709\u4ee5\u4e0b\u65b9\u6cd5: stop() - \u505c\u6b62\u8ba1\u5212\u8fd0\u884c\u7684\u4f5c\u4e1a\u3002 start() - \u91cd\u65b0\u542f\u52a8\u5df2\u505c\u6b62\u7684\u4f5c\u4e1a\u3002 setTime(time: CronTime) - \u505c\u6b62\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u4e3a\u5b83\u8bbe\u7f6e\u4e00\u4e2a\u65b0\u7684\u65f6\u95f4\uff0c\u7136\u540e\u5f00\u59cb\u5b83 lastDate() - \u8fd4\u56de\u4f5c\u4e1a\u6700\u8fd1\u6267\u884c\u65e5\u671f\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f nextDates(count: number) - \u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u5373\u5c06\u5230\u6765\u7684\u4f5c\u4e1a\u6267\u884c\u65e5\u671f\u7684 moment \u5bf9\u8c61\u7684\u6570\u7ec4(\u5927\u5c0f\u4e3a count )\u3002 info Hint \u5728 moment \u5bf9\u8c61\u4e0a\u4f7f\u7528 toDate() \u5c06\u5176\u5448\u73b0\u4e3a\u4eba\u7c7b\u53ef\u8bfb\u7684\u5f62\u5f0f\u3002 \u4f7f\u7528 SchedulerRegistry.addCronJob() \u65b9\u6cd5\u52a8\u6001 \u521b\u5efa \u4e00\u4e2a\u65b0\u7684 cron job\uff0c\u5982\u4e0b\u6240\u793a: addCronJob ( name : string , seconds : string ) { const job = new CronJob ( ` ${ seconds } * * * * *` , () => { this . logger . warn ( `time ( ${ seconds } ) for job ${ name } to run!` ); }); this . schedulerRegistry . addCronJob ( name , job ); job . start (); this . logger . warn ( `job ${ name } added for each minute at ${ seconds } seconds!` , ); } \u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 cron \u5305\u4e2d\u7684 CronJob \u5bf9\u8c61\u6765\u521b\u5efa cron \u4f5c\u4e1a\u3002 CronJob \u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f cron \u6a21\u5f0f(\u5c31\u50cf @Cron() decorator )\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f cron \u8ba1\u65f6\u5668\u89e6\u53d1\u65f6\u6267\u884c\u7684\u56de\u8c03\u3002 SchedulerRegistry.addCronJob() \u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570: CronJob \u7684\u540d\u79f0\u548c CronJob \u5bf9\u8c61\u672c\u8eab\u3002 warning Warning \u8bb0\u5f97\u5728\u8bbf\u95ee\u4e4b\u524d\u6ce8\u5165 SchedulerRegistry \u3002\u4ece cron \u5305\u4e2d\u5bfc\u5165 CronJob \u3002 \u4f7f\u7528 SchedulerRegistry.deleteCronJob() \u65b9\u6cd5 \u5220\u9664 \u4e00\u4e2a\u540d\u4e3a cron \u7684\u4efb\u52a1\uff0c\u5982\u4e0b\u6240\u793a: deleteCron ( name : string ) { this . schedulerRegistry . deleteCronJob ( name ); this . logger . warn ( `job ${ name } deleted!` ); } \u4f7f\u7528 SchedulerRegistry.getCronJobs() \u65b9\u6cd5 \u5217\u51fa \u6240\u6709 cron \u4efb\u52a1\uff0c\u5982\u4e0b\u6240\u793a: getCrons () { const jobs = this . schedulerRegistry . getCronJobs (); jobs . forEach (( value , key , map ) => { let next ; try { next = value . nextDates (). toDate (); } catch ( e ) { next = '\u9519\u8bef:\u4e0b\u4e00\u4e2a\u70b9\u706b\u65e5\u671f\u5df2\u7ecf\u8fc7\u53bb!' ; } this . logger . log ( `job: ${ key } -> next: ${ next } ` ); }); } getCronJobs() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a map \u3002 \u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5bf9\u6620\u5c04\u8fdb\u884c\u8fed\u4ee3\uff0c\u5e76\u5c1d\u8bd5\u8bbf\u95ee\u6bcf\u4e2a CronJob \u7684 nextDates() \u65b9\u6cd5\u3002 \u5728 CronJob API \u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u5df2\u7ecf\u88ab\u89e6\u53d1\uff0c\u5e76\u4e14\u6ca1\u6709\u672a\u6765\u7684\u89e6\u53d1\u65e5\u671f\uff0c\u5b83\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002 \u52a8\u6001 intervals \u00b6 Obtain a reference to an interval with the SchedulerRegistry.getInterval() method. As above, inject SchedulerRegistry using standard constructor injection: constructor ( private schedulerRegistry : SchedulerRegistry ) {} And use it as follows: const interval = this . schedulerRegistry . getInterval ( 'notifications' ); clearInterval ( interval ); Create a new interval dynamically using the SchedulerRegistry.addInterval() method, as follows: addInterval ( name : string , milliseconds : number ) { const callback = () => { this . logger . warn ( `Interval ${ name } executing at time ( ${ milliseconds } )!` ); }; const interval = setInterval ( callback , milliseconds ); this . schedulerRegistry . addInterval ( name , interval ); } In this code, we create a standard JavaScript interval, then pass it to the ScheduleRegistry.addInterval() method. That method takes two arguments: a name for the interval, and the interval itself. Delete a named interval using the SchedulerRegistry.deleteInterval() method, as follows: deleteInterval ( name : string ) { this . schedulerRegistry . deleteInterval ( name ); this . logger . warn ( `Interval ${ name } deleted!` ); } List all intervals using the SchedulerRegistry.getIntervals() method as follows: getIntervals () { const intervals = this . schedulerRegistry . getIntervals (); intervals . forEach ( key => this . logger . log ( `Interval: ${ key } ` )); } \u52a8\u6001 timeouts \u00b6 Obtain a reference to a timeout with the SchedulerRegistry.getTimeout() method. As above, inject SchedulerRegistry using standard constructor injection: constructor ( private schedulerRegistry : SchedulerRegistry ) {} And use it as follows: const timeout = this . schedulerRegistry . getTimeout ( 'notifications' ); clearTimeout ( timeout ); Create a new timeout dynamically using the SchedulerRegistry.addTimeout() method, as follows: addTimeout ( name : string , milliseconds : number ) { const callback = () => { this . logger . warn ( `Timeout ${ name } executing after ( ${ milliseconds } )!` ); }; const timeout = setTimeout ( callback , milliseconds ); this . schedulerRegistry . addTimeout ( name , timeout ); } In this code, we create a standard JavaScript timeout, then pass it to the ScheduleRegistry.addTimeout() method. That method takes two arguments: a name for the timeout, and the timeout itself. Delete a named timeout using the SchedulerRegistry.deleteTimeout() method, as follows: deleteTimeout ( name : string ) { this . schedulerRegistry . deleteTimeout ( name ); this . logger . warn ( `Timeout ${ name } deleted!` ); } List all timeouts using the SchedulerRegistry.getTimeouts() method as follows: getTimeouts () { const timeouts = this . schedulerRegistry . getTimeouts (); timeouts . forEach ( key => this . logger . log ( `Timeout: ${ key } ` )); } \u4f8b\u5b50 \u00b6 \u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u4efb\u52a1\u8c03\u5ea6"},{"location":"techniques/task-scheduling/#_1","text":"\u4efb\u52a1\u8c03\u5ea6\u5141\u8bb8\u60a8\u5b89\u6392\u4efb\u610f\u4ee3\u7801(\u65b9\u6cd5/\u51fd\u6570)\u5728\u56fa\u5b9a\u7684\u65e5\u671f/\u65f6\u95f4\u3001\u91cd\u590d\u7684\u95f4\u9694\u6216\u5728\u6307\u5b9a\u95f4\u9694\u540e\u6267\u884c\u4e00\u6b21\u3002 \u5728 Linux \u4e16\u754c\u4e2d\uff0c\u8fd9\u901a\u5e38\u662f\u7531\u50cf cron \u8fd9\u6837\u7684\u5305\u5728\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u4e0a\u5904\u7406\u7684\u3002 \u5bf9\u4e8e Node.js \u5e94\u7528\u7a0b\u5e8f\uff0c\u6709\u51e0\u4e2a\u5305\u6a21\u62df\u4e86\u7c7b\u4f3c cron \u7684\u529f\u80fd\u3002 Nest \u63d0\u4f9b\u4e86 @nestjs/schedule \u5305\uff0c\u5b83\u96c6\u6210\u4e86\u6d41\u884c\u7684 Node.js node-cron \u5305\u3002 \u6211\u4eec\u5c06\u5728\u672c\u7ae0\u4e2d\u8ba8\u8bba\u8fd9\u4e2a\u5305\u3002","title":"\u4efb\u52a1\u8c03\u5ea6"},{"location":"techniques/task-scheduling/#_2","text":"\u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm install --save @nestjs/schedule $ npm install --save-dev @types/cron \u8981\u6fc0\u6d3b\u4f5c\u4e1a\u8c03\u5ea6\uff0c\u8bf7\u5c06 ScheduleModule \u5bfc\u5165\u5230\u6839\u6a21\u5757 AppModule \u4e2d\uff0c\u5e76\u8fd0\u884c forRoot() \u9759\u6001\u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a: @ @filename ( app . module ) import { Module } from '@nestjs/common' ; import { ScheduleModule } from '@nestjs/schedule' ; @Module ({ imports : [ ScheduleModule . forRoot () ], }) export class AppModule {} .forroot() \u8c03\u7528\u521d\u59cb\u5316\u8c03\u5ea6\u5668\uff0c\u5e76\u6ce8\u518c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5b58\u5728\u7684\u4efb\u4f55\u58f0\u660e\u6027 cron job \u3001 timeout \u548c interval \u3002 \u5f53 onApplicationBootstrap \u751f\u547d\u5468\u671f\u94a9\u5b50\u53d1\u751f\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u6ce8\u518c\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u6a21\u5757\u90fd\u5df2\u52a0\u8f7d\u5e76\u58f0\u660e\u4e86\u4efb\u4f55\u8c03\u5ea6\u7684\u4f5c\u4e1a\u3002","title":"\u5b89\u88c5"},{"location":"techniques/task-scheduling/#cron-jobs","text":"cron \u4f5c\u4e1a\u8c03\u5ea6\u4efb\u610f\u51fd\u6570(\u65b9\u6cd5\u8c03\u7528)\u4ee5\u81ea\u52a8\u8fd0\u884c\u3002Cron \u4f5c\u4e1a\u53ef\u4ee5\u8fd0\u884c: \u4e00\u6b21\uff0c\u5728\u6307\u5b9a\u7684\u65e5\u671f/\u65f6\u95f4\u3002 \u7ecf\u5e38\u6027\u5730;\u5faa\u73af\u4f5c\u4e1a\u53ef\u4ee5\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u5185(\u4f8b\u5982\uff0c\u6bcf\u5c0f\u65f6\u8fd0\u884c\u4e00\u6b21\u3001\u6bcf\u5468\u8fd0\u884c\u4e00\u6b21\u3001\u6bcf 5 \u5206\u949f\u8fd0\u884c\u4e00\u6b21)\u3002 \u7528 @Cron() \u88c5\u9970\u5668\u5728\u5305\u542b\u8981\u6267\u884c\u7684\u4ee3\u7801\u7684\u65b9\u6cd5\u5b9a\u4e49\u4e4b\u524d\u58f0\u660e\u4e00\u4e2a cron \u4f5c\u4e1a\uff0c\u5982\u4e0b\u6240\u793a: import { Injectable , Logger } from '@nestjs/common' ; import { Cron } from '@nestjs/schedule' ; @Injectable () export class TasksService { private readonly logger = new Logger ( TasksService . name ); @Cron ( '45 * * * * *' ) handleCron () { this . logger . debug ( 'Called when the current second is 45' ); } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c handleCron() \u65b9\u6cd5\u5c06\u5728\u5f53\u524d\u79d2\u4e3a 45 \u65f6\u88ab\u8c03\u7528\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8be5\u65b9\u6cd5\u5c06\u5728\u6bcf\u5206\u949f 45 \u79d2\u65f6\u8fd0\u884c\u4e00\u6b21\u3002 @Cron() \u88c5\u9970\u5668\u652f\u6301\u6240\u6709\u6807\u51c6\u7684 cron \u6a21\u5f0f : \u661f\u53f7 (e.g. * ) \u8303\u56f4 (e.g. 1-3,5 ) \u6b65\u9891 (e.g. */2 ) \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06 45 * * * * * \u4f20\u9012\u7ed9\u88c5\u9970\u5668\u3002 \u4e0b\u9762\u7684\u952e\u663e\u793a\u4e86\u5982\u4f55\u89e3\u91ca cron \u6a21\u5f0f\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e: * * * * * * | | | | | | | | | | | day of week | | | | month | | | day of month | | hour | minute second (optional) \u4e00\u4e9b\u6837\u672c cron \u6a21\u5f0f\u662f: * * * * * * \u6bcf\u4e00\u79d2 45 * * * * * \u6bcf\u4e00\u5206\u949f\uff0c45\u79d2 0 10 * * * * \u6bcf\u5c0f\u65f6\uff0c\u7b2c\u5341\u5206\u949f\u5f00\u59cb 0 */30 9-17 * * * \u65e9\u4e0a9\u70b9\u5230\u4e0b\u53485\u70b9\u6bcf\u969430\u5206\u949f\u4e00\u6b21 0 30 11 * * 1-5 \u661f\u671f\u4e00\u81f3\u4e94\u4e0a\u534811\u65f630\u5206 @nestjs/schedule \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u679a\u4e3e\uff0c\u5176\u4e2d\u5305\u542b\u5e38\u7528\u7684 cron \u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528\u8fd9\u4e2a enum: import { Injectable , Logger } from '@nestjs/common' ; import { Cron , CronExpression } from '@nestjs/schedule' ; @Injectable () export class TasksService { private readonly logger = new Logger ( TasksService . name ); @Cron ( CronExpression . EVERY_30_SECONDS ) handleCron () { this . logger . debug ( 'Called every 30 seconds' ); } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c handleCron() \u65b9\u6cd5\u5c06\u6bcf 30 \u79d2\u88ab\u8c03\u7528\u4e00\u6b21\u3002 \u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4e3a @Cron() \u88c5\u9970\u5668\u63d0\u4f9b\u4e00\u4e2a JavaScript \u7684 Date \u5bf9\u8c61\u3002 \u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u4f5c\u4e1a\u5728\u6307\u5b9a\u65e5\u671f\u53ea\u6267\u884c\u4e00\u6b21\u3002 info \u63d0\u793a \u4f7f\u7528 JavaScript \u65e5\u671f\u7b97\u6cd5\u6765\u5b89\u6392\u76f8\u5bf9\u4e8e\u5f53\u524d\u65e5\u671f\u7684\u4f5c\u4e1a\u3002 \u4f8b\u5982\uff0c @Cron(new Date(Date.now() + 10 * 1000)) \u6765\u8c03\u5ea6\u4e00\u4e2a\u4f5c\u4e1a\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8 10 \u79d2\u540e\u8fd0\u884c\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u63d0\u4f9b\u989d\u5916\u7684\u9009\u9879\u4f5c\u4e3a @Cron() \u88c5\u9970\u5668\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 name \u5728\u58f0\u660ecron\u4f5c\u4e1a\u4e4b\u540e\uff0c\u8bbf\u95ee\u548c\u63a7\u5236cron\u4f5c\u4e1a\u5f88\u6709\u7528\u3002 timeZone \u6307\u5b9a\u6267\u884c\u7684\u65f6\u533a\u3002\u8fd9\u5c06\u4fee\u6539\u76f8\u5bf9\u4e8e\u60a8\u7684\u65f6\u533a\u7684\u5b9e\u9645\u65f6\u95f4\u3002\u5982\u679c\u65f6\u533a\u65e0\u6548\uff0c\u5219\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002\u60a8\u53ef\u4ee5\u5728[Moment Timezone](http://momentjs.com/timezone/)\u7f51\u7ad9\u4e0a\u67e5\u770b\u6240\u6709\u53ef\u7528\u7684\u65f6\u533a\u3002 utcOffset \u8fd9\u5141\u8bb8\u60a8\u6307\u5b9a\u65f6\u533a\u7684\u504f\u79fb\u91cf\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 timezone \u53c2\u6570\u3002 import { Injectable } from '@nestjs/common' ; import { Cron , CronExpression } from '@nestjs/schedule' ; @Injectable () export class NotificationService { @Cron ( '* * 0 * * *' , { name : 'notifications' , timeZone : 'Europe/Paris' , }) triggerNotifications () {} } \u4f60\u53ef\u4ee5\u5728 cron \u4f5c\u4e1a\u58f0\u660e\u4e4b\u540e\u8bbf\u95ee\u548c\u63a7\u5236\u5b83\uff0c\u6216\u8005\u4f7f\u7528 Dynamic API \u52a8\u6001\u521b\u5efa\u4e00\u4e2a cron \u4f5c\u4e1a(\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\u5b83\u7684 cron \u6a21\u5f0f)\u3002 \u8981\u901a\u8fc7 API \u8bbf\u95ee\u4e00\u4e2a\u58f0\u660e\u6027\u7684 cron \u4f5c\u4e1a\uff0c\u4f60\u5fc5\u987b\u5c06 name \u5c5e\u6027\u4f5c\u4e3a\u88c5\u9970\u5668\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u5230\u4e00\u4e2a\u53ef\u9009\u7684 options \u5bf9\u8c61\u4e2d\uff0c\u4ece\u800c\u5c06\u4f5c\u4e1a\u4e0e\u4e00\u4e2a\u540d\u79f0\u5173\u8054\u8d77\u6765\u3002","title":"\u58f0\u660e\u5f0f cron jobs"},{"location":"techniques/task-scheduling/#interval","text":"\u8981\u58f0\u660e\u4e00\u4e2a\u65b9\u6cd5\u5e94\u8be5\u4ee5\u6307\u5b9a\u7684(\u91cd\u590d)\u65f6\u95f4\u95f4\u9694\u8fd0\u884c\uff0c\u8bf7\u5728\u65b9\u6cd5\u5b9a\u4e49\u524d\u52a0\u4e0a @Interval() \u88c5\u9970\u5668\u3002 \u5c06 interval \u503c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u4f20\u9012\u7ed9\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @Interval ( 10000 ) handleInterval () { this . logger . debug ( 'Called every 10 seconds' ); } info \u63d0\u793a \u8fd9\u4e2a\u673a\u5236\u5728\u5e95\u5c42\u4f7f\u7528\u4e86 JavaScript \u7684 setInterval() \u51fd\u6570\u3002\u60a8\u8fd8\u53ef\u4ee5\u5229\u7528 cron \u4f5c\u4e1a\u6765\u8c03\u5ea6\u5faa\u73af\u4f5c\u4e1a\u3002 \u5982\u679c\u4f60\u60f3\u901a\u8fc7 Dynamic API \u4ece\u5916\u90e8\u63a7\u5236\u4f60\u7684\u58f0\u660e\u6027\u95f4\u9694\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020\u5c06\u95f4\u9694\u4e0e\u4e00\u4e2a\u540d\u79f0\u5173\u8054\u8d77\u6765: @Interval ( 'notifications' , 2500 ) handleInterval () {} Dynamic API \u8fd8\u652f\u6301 \u521b\u5efa \u52a8\u6001\u95f4\u9694\uff0c\u5176\u4e2d\u95f4\u9694\u7684\u5c5e\u6027\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\uff0c\u5e76 \u5217\u51fa\u548c\u5220\u9664 \u5b83\u4eec\u3002","title":"\u58f0\u660e\u5f0f interval"},{"location":"techniques/task-scheduling/#timeout","text":"\u8981\u58f0\u660e\u4e00\u4e2a\u65b9\u6cd5\u5e94\u8be5\u5728\u6307\u5b9a\u7684\u8d85\u65f6\u65f6\u95f4\u8fd0\u884c(\u4e00\u6b21)\uff0c\u8bf7\u5728\u65b9\u6cd5\u5b9a\u4e49\u524d\u52a0\u4e0a @Timeout() \u88c5\u9970\u5668\u3002 \u5c06\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u7684\u76f8\u5bf9\u65f6\u95f4\u504f\u79fb(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)\u4f20\u9012\u7ed9\u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @Timeout ( 5000 ) handleTimeout () { this . logger . debug ( 'Called once after 5 seconds' ); } info \u63d0\u793a \u8fd9\u4e2a\u673a\u5236\u5728\u5e95\u5c42\u4f7f\u7528\u4e86 JavaScript \u7684 setTimeout() \u51fd\u6570\u3002 \u5982\u679c\u4f60\u60f3\u901a\u8fc7 Dynamic API \u4ece\u5916\u90e8\u63a7\u5236\u4f60\u7684\u58f0\u660e\u6027\u8d85\u65f6\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020\u5c06\u8d85\u65f6\u4e0e\u4e00\u4e2a\u540d\u79f0\u5173\u8054\u8d77\u6765: @Timeout ( 'notifications' , 2500 ) handleTimeout () {} Dynamic API \u8fd8\u652f\u6301 \u521b\u5efa \u52a8\u6001\u8d85\u65f6\uff0c\u5176\u4e2d\u8d85\u65f6\u7684\u5c5e\u6027\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\uff0c\u5e76 \u5217\u51fa\u548c\u5220\u9664 \u5b83\u4eec\u3002","title":"\u58f0\u660e\u5f0f timeout"},{"location":"techniques/task-scheduling/#api","text":"@nestjs/schedule \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u52a8\u6001 API\uff0c\u652f\u6301\u7ba1\u7406\u58f0\u660e\u5f0f\u7684 cron jobs \u3001 timeout \u548c interval \u3002 \u8be5 API \u8fd8\u652f\u6301\u521b\u5efa\u548c\u7ba1\u7406 \u52a8\u6001 cron jobs\u3001timeout \u548c interval\uff0c\u5176\u4e2d\u7684\u5c5e\u6027\u662f\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\u7684\u3002","title":"\u52a8\u6001\u8c03\u5ea6\u6a21\u5757 API"},{"location":"techniques/task-scheduling/#cron-jobs_1","text":"\u4f7f\u7528 SchedulerRegistry API\uff0c\u4ece\u4f60\u7684\u4ee3\u7801\u4e2d\u4efb\u4f55\u5730\u65b9\u83b7\u53d6\u4e00\u4e2a CronJob \u5b9e\u4f8b\u7684\u540d\u79f0\u5f15\u7528\u3002 \u9996\u5148\uff0c\u4f7f\u7528\u6807\u51c6\u6784\u9020\u51fd\u6570\u6ce8\u5165 SchedulerRegistry : constructor ( private schedulerRegistry : SchedulerRegistry ) {} info Hint \u4ece @nestjs/schedule \u5305\u4e2d\u5bfc\u5165 SchedulerRegistry \u3002 \u7136\u540e\u50cf\u4e0b\u9762\u8fd9\u6837\u5728\u7c7b\u4e2d\u4f7f\u7528\u5b83\u3002\u5047\u8bbe\u4e00\u4e2a cron \u4f5c\u4e1a\u662f\u901a\u8fc7\u4ee5\u4e0b\u58f0\u660e\u521b\u5efa\u7684: @Cron ( '* * 8 * * *' , { name : 'notifications' , }) triggerNotifications () {} \u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u8bbf\u95ee\u6b64\u4f5c\u4e1a: const job = this . schedulerRegistry . getCronJob ( 'notifications' ); job . stop (); console . log ( job . lastDate ()); getCronJob() \u65b9\u6cd5\u8fd4\u56de\u6307\u5b9a\u7684 cron \u4f5c\u4e1a\u3002\u8fd4\u56de\u7684 CronJob \u5bf9\u8c61\u6709\u4ee5\u4e0b\u65b9\u6cd5: stop() - \u505c\u6b62\u8ba1\u5212\u8fd0\u884c\u7684\u4f5c\u4e1a\u3002 start() - \u91cd\u65b0\u542f\u52a8\u5df2\u505c\u6b62\u7684\u4f5c\u4e1a\u3002 setTime(time: CronTime) - \u505c\u6b62\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u4e3a\u5b83\u8bbe\u7f6e\u4e00\u4e2a\u65b0\u7684\u65f6\u95f4\uff0c\u7136\u540e\u5f00\u59cb\u5b83 lastDate() - \u8fd4\u56de\u4f5c\u4e1a\u6700\u8fd1\u6267\u884c\u65e5\u671f\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f nextDates(count: number) - \u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u5373\u5c06\u5230\u6765\u7684\u4f5c\u4e1a\u6267\u884c\u65e5\u671f\u7684 moment \u5bf9\u8c61\u7684\u6570\u7ec4(\u5927\u5c0f\u4e3a count )\u3002 info Hint \u5728 moment \u5bf9\u8c61\u4e0a\u4f7f\u7528 toDate() \u5c06\u5176\u5448\u73b0\u4e3a\u4eba\u7c7b\u53ef\u8bfb\u7684\u5f62\u5f0f\u3002 \u4f7f\u7528 SchedulerRegistry.addCronJob() \u65b9\u6cd5\u52a8\u6001 \u521b\u5efa \u4e00\u4e2a\u65b0\u7684 cron job\uff0c\u5982\u4e0b\u6240\u793a: addCronJob ( name : string , seconds : string ) { const job = new CronJob ( ` ${ seconds } * * * * *` , () => { this . logger . warn ( `time ( ${ seconds } ) for job ${ name } to run!` ); }); this . schedulerRegistry . addCronJob ( name , job ); job . start (); this . logger . warn ( `job ${ name } added for each minute at ${ seconds } seconds!` , ); } \u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 cron \u5305\u4e2d\u7684 CronJob \u5bf9\u8c61\u6765\u521b\u5efa cron \u4f5c\u4e1a\u3002 CronJob \u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f cron \u6a21\u5f0f(\u5c31\u50cf @Cron() decorator )\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f cron \u8ba1\u65f6\u5668\u89e6\u53d1\u65f6\u6267\u884c\u7684\u56de\u8c03\u3002 SchedulerRegistry.addCronJob() \u65b9\u6cd5\u6709\u4e24\u4e2a\u53c2\u6570: CronJob \u7684\u540d\u79f0\u548c CronJob \u5bf9\u8c61\u672c\u8eab\u3002 warning Warning \u8bb0\u5f97\u5728\u8bbf\u95ee\u4e4b\u524d\u6ce8\u5165 SchedulerRegistry \u3002\u4ece cron \u5305\u4e2d\u5bfc\u5165 CronJob \u3002 \u4f7f\u7528 SchedulerRegistry.deleteCronJob() \u65b9\u6cd5 \u5220\u9664 \u4e00\u4e2a\u540d\u4e3a cron \u7684\u4efb\u52a1\uff0c\u5982\u4e0b\u6240\u793a: deleteCron ( name : string ) { this . schedulerRegistry . deleteCronJob ( name ); this . logger . warn ( `job ${ name } deleted!` ); } \u4f7f\u7528 SchedulerRegistry.getCronJobs() \u65b9\u6cd5 \u5217\u51fa \u6240\u6709 cron \u4efb\u52a1\uff0c\u5982\u4e0b\u6240\u793a: getCrons () { const jobs = this . schedulerRegistry . getCronJobs (); jobs . forEach (( value , key , map ) => { let next ; try { next = value . nextDates (). toDate (); } catch ( e ) { next = '\u9519\u8bef:\u4e0b\u4e00\u4e2a\u70b9\u706b\u65e5\u671f\u5df2\u7ecf\u8fc7\u53bb!' ; } this . logger . log ( `job: ${ key } -> next: ${ next } ` ); }); } getCronJobs() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a map \u3002 \u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5bf9\u6620\u5c04\u8fdb\u884c\u8fed\u4ee3\uff0c\u5e76\u5c1d\u8bd5\u8bbf\u95ee\u6bcf\u4e2a CronJob \u7684 nextDates() \u65b9\u6cd5\u3002 \u5728 CronJob API \u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u5df2\u7ecf\u88ab\u89e6\u53d1\uff0c\u5e76\u4e14\u6ca1\u6709\u672a\u6765\u7684\u89e6\u53d1\u65e5\u671f\uff0c\u5b83\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002","title":"\u52a8\u6001 cron jobs"},{"location":"techniques/task-scheduling/#intervals","text":"Obtain a reference to an interval with the SchedulerRegistry.getInterval() method. As above, inject SchedulerRegistry using standard constructor injection: constructor ( private schedulerRegistry : SchedulerRegistry ) {} And use it as follows: const interval = this . schedulerRegistry . getInterval ( 'notifications' ); clearInterval ( interval ); Create a new interval dynamically using the SchedulerRegistry.addInterval() method, as follows: addInterval ( name : string , milliseconds : number ) { const callback = () => { this . logger . warn ( `Interval ${ name } executing at time ( ${ milliseconds } )!` ); }; const interval = setInterval ( callback , milliseconds ); this . schedulerRegistry . addInterval ( name , interval ); } In this code, we create a standard JavaScript interval, then pass it to the ScheduleRegistry.addInterval() method. That method takes two arguments: a name for the interval, and the interval itself. Delete a named interval using the SchedulerRegistry.deleteInterval() method, as follows: deleteInterval ( name : string ) { this . schedulerRegistry . deleteInterval ( name ); this . logger . warn ( `Interval ${ name } deleted!` ); } List all intervals using the SchedulerRegistry.getIntervals() method as follows: getIntervals () { const intervals = this . schedulerRegistry . getIntervals (); intervals . forEach ( key => this . logger . log ( `Interval: ${ key } ` )); }","title":"\u52a8\u6001 intervals"},{"location":"techniques/task-scheduling/#timeouts","text":"Obtain a reference to a timeout with the SchedulerRegistry.getTimeout() method. As above, inject SchedulerRegistry using standard constructor injection: constructor ( private schedulerRegistry : SchedulerRegistry ) {} And use it as follows: const timeout = this . schedulerRegistry . getTimeout ( 'notifications' ); clearTimeout ( timeout ); Create a new timeout dynamically using the SchedulerRegistry.addTimeout() method, as follows: addTimeout ( name : string , milliseconds : number ) { const callback = () => { this . logger . warn ( `Timeout ${ name } executing after ( ${ milliseconds } )!` ); }; const timeout = setTimeout ( callback , milliseconds ); this . schedulerRegistry . addTimeout ( name , timeout ); } In this code, we create a standard JavaScript timeout, then pass it to the ScheduleRegistry.addTimeout() method. That method takes two arguments: a name for the timeout, and the timeout itself. Delete a named timeout using the SchedulerRegistry.deleteTimeout() method, as follows: deleteTimeout ( name : string ) { this . schedulerRegistry . deleteTimeout ( name ); this . logger . warn ( `Timeout ${ name } deleted!` ); } List all timeouts using the SchedulerRegistry.getTimeouts() method as follows: getTimeouts () { const timeouts = this . schedulerRegistry . getTimeouts (); timeouts . forEach ( key => this . logger . log ( `Timeout: ${ key } ` )); }","title":"\u52a8\u6001 timeouts"},{"location":"techniques/task-scheduling/#_3","text":"\u4e00\u4e2a\u53ef\u7528\u7684\u4f8b\u5b50 \u5728\u8fd9\u91cc .","title":"\u4f8b\u5b50"},{"location":"techniques/validation/","text":"\u9a8c\u8bc1 \u00b6 \u6700\u597d\u7684\u505a\u6cd5\u662f\u9a8c\u8bc1\u53d1\u9001\u5230 web \u5e94\u7528\u7a0b\u5e8f\u7684\u4efb\u4f55\u6570\u636e\u7684\u6b63\u786e\u6027\u3002 \u4e3a\u4e86\u81ea\u52a8\u9a8c\u8bc1\u4f20\u5165\u7684\u8bf7\u6c42\uff0cNest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u73b0\u6210\u7684\u53ef\u7528\u7ba1\u9053: ValidationPipe ParseIntPipe ParseBoolPipe ParseArrayPipe ParseUUIDPipe ValidationPipe \u4f7f\u7528\u4e86\u529f\u80fd\u5f3a\u5927\u7684 class-validator \u5305\u53ca\u5176\u58f0\u660e\u6027\u9a8c\u8bc1\u88c5\u9970\u5668\u3002 ValidationPipe \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u6cd5\u6765\u4e3a\u6240\u6709\u4f20\u5165\u7684\u5ba2\u6237\u673a\u6709\u6548\u8d1f\u8f7d\u5f3a\u5236\u9a8c\u8bc1\u89c4\u5219\uff0c\u5176\u4e2d\u7279\u5b9a\u7684\u89c4\u5219\u5728\u6bcf\u4e2a\u6a21\u5757\u7684\u672c\u5730\u7c7b/DTO \u58f0\u660e\u4e2d\u4f7f\u7528\u7b80\u5355\u7684\u6ce8\u91ca\u58f0\u660e\u3002 \u6982\u8ff0 \u00b6 \u5728 Pipes \u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u6784\u5efa\u7b80\u5355\u7684\u7ba1\u9053\uff0c\u5e76\u5c06\u5b83\u4eec\u7ed1\u5b9a\u5230\u63a7\u5236\u5668\u3001\u65b9\u6cd5\u6216\u5168\u5c40\u5e94\u7528\u4e2d\uff0c\u4ee5\u6f14\u793a\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u672c\u7ae0\u7684\u4e3b\u9898\uff0c\u4e00\u5b9a\u8981\u56de\u987e\u90a3\u4e00\u7ae0\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8 ValidationPipe \u7684\u5404\u79cd \u771f\u5b9e\u4e16\u754c \u7528\u4f8b\uff0c\u5e76\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u4e00\u4e9b\u9ad8\u7ea7\u5b9a\u5236\u7279\u6027\u3002 \u4f7f\u7528\u5185\u7f6e\u7684 ValidationPipe \u00b6 \u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm i --save class-validator class-transformer info Hint ValidationPipe \u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u7ba1\u9053\u4f7f\u7528\u4e86 class-validator \u548c class-transformer \u5e93\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u53ef\u7528\u7684\u9009\u9879\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u7ed9\u7ba1\u9053\u7684\u914d\u7f6e\u5bf9\u8c61\u914d\u7f6e\u8fd9\u4e9b\u8bbe\u7f6e\u3002 \u4ee5\u4e0b\u662f\u5185\u7f6e\u9009\u9879: export interface ValidationPipeOptions extends ValidatorOptions { transform? : boolean ; disableErrorMessages? : boolean ; exceptionFactory ?: ( errors : ValidationError []) => any ; } \u9664\u6b64\u4e4b\u5916\uff0c\u6240\u6709\u7684 class-validator \u9009\u9879(\u7ee7\u627f\u81ea ValidatorOptions \u63a5\u53e3)\u90fd\u662f\u53ef\u7528\u7684: \u9009\u9879 \u7c7b\u578b \u63cf\u8ff0 enableDebugMessages boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u9a8c\u8bc1\u5668\u5c06\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u989d\u5916\u7684\u8b66\u544a\u6d88\u606f\u3002 skipUndefinedProperties boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u8df3\u8fc7\u9a8c\u8bc1\u5bf9\u8c61\u4e2d\u6240\u6709\u4e3a\u7a7a\u7684\u5c5e\u6027\u7684\u9a8c\u8bc1\u3002 skipNullProperties boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u8df3\u8fc7\u9a8c\u8bc1\u5bf9\u8c61\u4e2d\u6240\u6709\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\u7684\u5c5e\u6027\u7684\u9a8c\u8bc1\u3002 skipMissingProperties boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u8df3\u8fc7\u5bf9\u9a8c\u8bc1\u5bf9\u8c61\u4e2d\u7f3a\u5931\u7684\u6240\u6709\u5c5e\u6027\u7684\u9a8c\u8bc1\u3002 whitelist boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u5220\u9664\u5df2\u9a8c\u8bc1(\u8fd4\u56de)\u5bf9\u8c61\u4e2d\u4e0d\u4f7f\u7528\u4efb\u4f55\u9a8c\u8bc1\u88c5\u9970\u5668\u7684\u4efb\u4f55\u5c5e\u6027\u3002 forbidNonWhitelisted boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u5265\u79bb\u975e\u767d\u540d\u5355\u5c5e\u6027\u3002 forbidUnknownValues boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5c1d\u8bd5\u9a8c\u8bc1\u672a\u77e5\u5bf9\u8c61\u5c06\u7acb\u5373\u5931\u8d25\u3002 disableErrorMessages boolean If set to true, validation errors will not be returned to the client. errorHttpStatusCode number This setting allows you to specify which exception type will be used in case of an error. By default it throws BadRequestException . exceptionFactory Function Takes an array of the validation errors and returns an exception object to be thrown. groups string[] Groups to be used during validation of the object. always boolean Set default for always option of decorators. Default can be overridden in decorator options strictGroups boolean If groups is not given or is empty, ignore decorators with at least one group. dismissDefaultMessages boolean If set to true, the validation will not use default messages. Error message always will be undefined if its not explicitly set. validationError.target boolean Indicates if target should be exposed in ValidationError . validationError.value boolean Indicates if validated value should be exposed in ValidationError . stopAtFirstError boolean When set to true, validation of the given property will stop after encountering the first error. Defaults to false. info Notice \u5728\u5b83\u7684 \u5b58\u50a8\u5e93 \u4e2d\u627e\u5230\u5173\u4e8e class-validator \u5305\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u81ea\u52a8\u9a8c\u8bc1 \u00b6 \u6211\u4eec\u5c06\u9996\u5148\u5728\u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b\u7ed1\u5b9a ValidationPipe \uff0c\u4ece\u800c\u786e\u4fdd\u6240\u6709\u7aef\u70b9\u90fd\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u63a5\u6536\u4e0d\u6b63\u786e\u7684\u6570\u636e\u3002 async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . useGlobalPipes ( new ValidationPipe ()); await app . listen ( 3000 ); } bootstrap (); \u4e3a\u4e86\u6d4b\u8bd5\u7ba1\u9053\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u7aef\u70b9\u3002 @Post () create ( @Body () createUserDto : CreateUserDto ) { return 'This action adds a new user' ; } info Hint \u7531\u4e8e TypeScript \u4e0d\u5b58\u50a8\u5173\u4e8e\u6cdb\u578b\u6216\u63a5\u53e3\u7684\u5143\u6570\u636e\uff0c\u5f53\u4f60\u5728 DTOs \u4e2d\u4f7f\u7528\u5b83\u4eec\u65f6\uff0c ValidationPipe \u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u5730\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002 \u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u8bf7\u8003\u8651\u5728 DTOs \u4e2d\u4f7f\u7528\u5177\u4f53\u7c7b\u3002 info Hint \u5f53\u5bfc\u5165\u4f60\u7684 DTOs \u65f6\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u4ec5\u7c7b\u578b\u5bfc\u5165\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5728\u8fd0\u884c\u65f6\u88ab\u5220\u9664\u3002 \u8bb0\u5f97 import {{ '{' }} CreateUserDto {{ '}' }} \u800c\u4e0d\u662f import type {{ '{' }} CreateUserDto {{ '}' }} . \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728 CreateUserDto \u4e2d\u6dfb\u52a0\u4e00\u4e9b\u9a8c\u8bc1\u89c4\u5219\u3002 \u6211\u4eec\u4f7f\u7528 class-validator \u5305\u63d0\u4f9b\u7684\u88c5\u9970\u5668\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u8be6\u7ec6\u63cf\u8ff0 \u5728\u8fd9\u91cc \u3002 \u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c\u4efb\u4f55\u4f7f\u7528 CreateUserDto \u7684\u8def\u7531\u90fd\u4f1a\u81ea\u52a8\u6267\u884c\u8fd9\u4e9b\u9a8c\u8bc1\u89c4\u5219\u3002 import { IsEmail , IsNotEmpty } from 'class-validator' ; export class CreateUserDto { @IsEmail () email : string ; @IsNotEmpty () password : string ; } \u6709\u4e86\u8fd9\u4e9b\u89c4\u5219\uff0c\u5982\u679c\u4e00\u4e2a\u8bf7\u6c42\u5728\u8bf7\u6c42\u4f53\u4e2d\u6709\u4e00\u4e2a\u65e0\u6548\u7684 email \u5c5e\u6027\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c06\u81ea\u52a8\u54cd\u5e94\u4e00\u4e2a 400 Bad request \u4ee3\u7801\uff0c\u4ee5\u53ca\u4e0b\u9762\u7684\u54cd\u5e94\u4f53: { \"statusCode\" : 400 , \"error\" : \"Bad Request\" , \"message\" : [ \"email must be an email\" ] } \u9664\u4e86\u9a8c\u8bc1\u8bf7\u6c42\u4f53\u4e4b\u5916\uff0c ValidationPipe \u8fd8\u53ef\u4ee5\u4e0e\u5176\u4ed6\u8bf7\u6c42\u5bf9\u8c61\u5c5e\u6027\u4e00\u8d77\u4f7f\u7528\u3002 \u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u5728\u7aef\u70b9\u8def\u5f84\u4e2d\u63a5\u53d7 :id \u3002 \u4e3a\u4e86\u786e\u4fdd\u8fd9\u4e2a\u8bf7\u6c42\u53c2\u6570\u53ea\u63a5\u53d7\u6570\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020: @Get ( ':id' ) findOne ( @Param () params : FindOneParams ) { return 'This action returns a user' ; } \u50cf DTO \u4e00\u6837\uff0c FindOneParams \u53ea\u662f\u4e00\u4e2a\u4f7f\u7528 class-validator \u5b9a\u4e49\u9a8c\u8bc1\u89c4\u5219\u7684\u7c7b\u3002 \u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684: import { IsNumberString } from 'class-validator' ; export class FindOneParams { @IsNumberString () id : number ; } \u7981\u7528\u8be6\u7ec6\u9519\u8bef \u00b6 \u9519\u8bef\u6d88\u606f\u6709\u52a9\u4e8e\u89e3\u91ca\u8bf7\u6c42\u4e2d\u7684\u9519\u8bef\u3002 \u7136\u800c\uff0c\u4e00\u4e9b\u751f\u4ea7\u73af\u5883\u503e\u5411\u4e8e\u7981\u7528\u8be6\u7ec6\u9519\u8bef\u3002 \u901a\u8fc7\u5c06\u4e00\u4e2a options \u5bf9\u8c61\u4f20\u9012\u7ed9 ValidationPipe \u6765\u5b9e\u73b0: app . useGlobalPipes ( new ValidationPipe ({ disableErrorMessages : true })); \u56e0\u6b64\uff0c\u8be6\u7ec6\u7684\u9519\u8bef\u6d88\u606f\u5c06\u4e0d\u4f1a\u663e\u793a\u5728\u54cd\u5e94\u4f53\u4e2d\u3002 \u5265\u79bb\u6027\u80fd \u00b6 \u6211\u4eec\u7684 ValidationPipe \u8fd8\u53ef\u4ee5\u8fc7\u6ee4\u6389\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u63a5\u6536\u7684\u5c5e\u6027\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u53ef\u63a5\u53d7\u7684\u5c5e\u6027 \u767d\u540d\u5355 \uff0c\u800c\u4efb\u4f55\u672a\u5305\u542b\u5728\u767d\u540d\u5355\u4e2d\u7684\u5c5e\u6027\u5c06\u81ea\u52a8\u4ece\u7ed3\u679c\u5bf9\u8c61\u4e2d\u5220\u9664\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7684\u5904\u7406\u7a0b\u5e8f\u9700\u8981 email \u548c password \u5c5e\u6027\uff0c\u4f46\u8bf7\u6c42\u8fd8\u5305\u542b age \u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u81ea\u52a8\u4ece\u7ed3\u679c DTO \u4e2d\u5220\u9664\u8be5\u5c5e\u6027\u3002 \u8981\u542f\u7528\u8fd9\u79cd\u884c\u4e3a\uff0c\u8bf7\u5c06 whitelist \u8bbe\u7f6e\u4e3a true \u3002 app . useGlobalPipes ( new ValidationPipe ({ whitelist : true })); \u5f53\u8bbe\u7f6e\u4e3a true \u65f6\uff0c\u8fd9\u5c06\u81ea\u52a8\u5220\u9664\u975e\u767d\u540d\u5355\u5c5e\u6027(\u5728\u9a8c\u8bc1\u7c7b\u4e2d\u6ca1\u6709\u4efb\u4f55\u88c5\u9970\u5668\u7684\u5c5e\u6027)\u3002 \u6216\u8005\uff0c\u5f53\u51fa\u73b0\u975e\u767d\u540d\u5355\u5c5e\u6027\u65f6\uff0c\u60a8\u53ef\u4ee5\u505c\u6b62\u5904\u7406\u8bf7\u6c42\uff0c\u5e76\u5411\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u54cd\u5e94\u3002 \u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u8bf7\u5c06 forbidNonWhitelisted \u9009\u9879\u5c5e\u6027\u8bbe\u7f6e\u4e3a true \uff0c\u540c\u65f6\u5c06 whitelist \u8bbe\u7f6e\u4e3a true \u3002 \u53d8\u6362\u8d1f\u8f7d\u5bf9\u8c61 \u00b6 \u901a\u8fc7\u7f51\u7edc\u4f20\u5165\u7684\u6709\u6548\u8d1f\u8f7d\u662f\u666e\u901a\u7684 JavaScript \u5bf9\u8c61\u3002 ValidationPipe \u53ef\u4ee5\u6839\u636e DTO \u7c7b\u81ea\u52a8\u5c06\u6709\u6548\u8d1f\u8f7d\u8f6c\u6362\u4e3a\u5bf9\u8c61\u7c7b\u578b\u3002 \u8981\u542f\u7528\u81ea\u52a8\u8f6c\u6362\uff0c\u8bf7\u5c06 transform \u8bbe\u7f6e\u4e3a' true '\u3002 \u8fd9\u53ef\u4ee5\u5728\u65b9\u6cd5\u7ea7\u522b\u5b8c\u6210: @ @filename ( cats . controller ) @Post () @UsePipes ( new ValidationPipe ({ transform : true })) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } \u8981\u5168\u5c40\u542f\u7528\u6b64\u884c\u4e3a\uff0c\u8bf7\u5728\u5168\u5c40\u7ba1\u9053\u4e0a\u8bbe\u7f6e\u8be5\u9009\u9879: app . useGlobalPipes ( new ValidationPipe ({ transform : true })); \u542f\u7528\u81ea\u52a8\u8f6c\u6362\u9009\u9879\u540e\uff0c ValidationPipe \u4e5f\u5c06\u6267\u884c\u57fa\u5143\u7c7b\u578b\u7684\u8f6c\u6362\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c findOne() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5b83\u8868\u793a\u63d0\u53d6\u7684 id \u8def\u5f84\u53c2\u6570: @Get ( ':id' ) findOne ( @Param ( 'id' ) id : number ) { console . log ( typeof id === 'number' ); // true return 'This action returns a user' ; } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e2a\u8def\u5f84\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570\u90fd\u662f\u4e00\u4e2a string \u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06 id \u7c7b\u578b\u6307\u5b9a\u4e3a number (\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d)\u3002 \u56e0\u6b64\uff0c ValidationPipe \u5c06\u5c1d\u8bd5\u81ea\u52a8\u5c06\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\u3002 \u663e\u5f0f\u8f6c\u6362 \u00b6 \u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86 ValidationPipe \u5982\u4f55\u6839\u636e\u9884\u671f\u7684\u7c7b\u578b\u9690\u5f0f\u5730\u8f6c\u6362\u67e5\u8be2\u548c\u8def\u5f84\u53c2\u6570\u3002 \u7136\u800c\uff0c\u8be5\u7279\u6027\u9700\u8981\u542f\u7528\u81ea\u52a8\u8f6c\u6362\u3002 \u6216\u8005(\u7981\u7528\u81ea\u52a8\u8f6c\u6362)\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 ParseIntPipe \u6216 ParseBoolPipe \u663e\u5f0f\u5730\u5f3a\u5236\u8f6c\u6362\u503c(\u6ce8\u610f\uff0c ParseStringPipe \u662f\u4e0d\u9700\u8981\u7684\uff0c\u56e0\u4e3a\u6b63\u5982\u524d\u9762\u63d0\u5230\u7684\uff0c\u6bcf\u4e2a\u8def\u5f84\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570\u9ed8\u8ba4\u90fd\u4f5c\u4e3a string \u901a\u8fc7\u7f51\u7edc\u4f20\u9012)\u3002 @Get ( ':id' ) findOne ( @Param ( 'id' , ParseIntPipe ) id : number , @Query ( 'sort' , ParseBoolPipe ) sort : boolean ,) { console . log ( typeof id === 'number' ); // true console . log ( typeof sort === 'boolean' ); // true return 'This action returns a user' ; } info Hint ParseIntPipe \u548c ParseBoolPipe \u662f\u4ece @nestjs/common \u5305\u5bfc\u51fa\u7684\u3002 \u6620\u5c04\u7c7b\u578b \u00b6 \u5f53\u4f60\u6784\u5efa\u50cf CRUD (\u521b\u5efa/\u8bfb\u53d6/\u66f4\u65b0/\u5220\u9664)\u8fd9\u6837\u7684\u7279\u6027\u65f6\uff0c\u5728\u57fa\u672c\u5b9e\u4f53\u7c7b\u578b\u4e0a\u6784\u9020\u53d8\u91cf\u901a\u5e38\u5f88\u6709\u7528\u3002 Nest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u6267\u884c\u7c7b\u578b\u8f6c\u6362\u7684\u5b9e\u7528\u51fd\u6570\uff0c\u4f7f\u8fd9\u9879\u4efb\u52a1\u66f4\u52a0\u65b9\u4fbf\u3002 Warning \u5982\u679c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 @nestjs/swagger \u5305\uff0c\u8bf7\u53c2\u9605 \u672c\u7ae0 \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Mapped Types \u7684\u4fe1\u606f\u3002 Likewise, if you use the @nestjs/graphql package see this chapter . \u8fd9\u4e24\u4e2a\u5305\u90fd\u4e25\u91cd\u4f9d\u8d56\u4e8e\u7c7b\u578b\uff0c\u56e0\u6b64\u5b83\u4eec\u9700\u8981\u4f7f\u7528\u4e0d\u540c\u7684\u5bfc\u5165\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u4f7f\u7528' @nestjs/mapped-types '(\u800c\u4e0d\u662f\u4e00\u4e2a\u9002\u5f53\u7684\uff0c' @nestjs/swagger '\u6216' @nestjs/graphql '\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7c7b\u578b)\uff0c\u4f60\u53ef\u80fd\u4f1a\u9762\u4e34\u5404\u79cd\u5404\u6837\u7684\uff0c\u6ca1\u6709\u6587\u6863\u5316\u7684\u526f\u4f5c\u7528\u3002 \u5f53\u6784\u5efa\u8f93\u5165\u9a8c\u8bc1\u7c7b\u578b(\u4e5f\u79f0\u4e3a dto)\u65f6\uff0c\u5728\u540c\u4e00\u7c7b\u578b\u4e0a\u6784\u5efa create \u548c update \u53d8\u4f53\u901a\u5e38\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c create \u53d8\u91cf\u53ef\u80fd\u9700\u8981\u6240\u6709\u5b57\u6bb5\uff0c\u800c update \u53d8\u91cf\u53ef\u80fd\u8ba9\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\u3002 Nest \u63d0\u4f9b\u4e86 PartialType() \u5b9e\u7528\u51fd\u6570\u6765\u7b80\u5316\u6b64\u4efb\u52a1\u5e76\u6700\u5c0f\u5316\u6837\u677f\u6587\u4ef6\u3002 PartialType() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b(\u7c7b)\uff0c\u5176\u4e2d\u8f93\u5165\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u53ef\u9009\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5982\u4e0b\u7684 create \u7c7b\u578b: export class CreateCatDto { name : string ; age : number ; breed : string ; } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u662f\u5fc5\u9700\u7684\u3002 \u8981\u521b\u5efa\u5177\u6709\u76f8\u540c\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u4f46\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\uff0c\u4f7f\u7528 PartialType() \u4f20\u9012\u7c7b\u5f15\u7528( CreateCatDto )\u4f5c\u4e3a\u53c2\u6570: export class UpdateCatDto extends PartialType ( CreateCatDto ) {} info Hint ' PartialType() '\u51fd\u6570\u662f\u4ece' @nestjs/mapped-types '\u5305\u4e2d\u5bfc\u5165\u7684\u3002 ' PickType() '\u51fd\u6570\u901a\u8fc7\u4ece\u8f93\u5165\u7c7b\u578b\u4e2d\u9009\u53d6\u4e00\u7ec4\u5c5e\u6027\u6765\u6784\u9020\u4e00\u4e2a\u65b0\u7c7b\u578b(\u7c7b)\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u5982\u4e0b\u7c7b\u578b\u5f00\u59cb: export class CreateCatDto { name : string ; age : number ; breed : string ; } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528' PickType() '\u5b9e\u7528\u51fd\u6570\u4ece\u8fd9\u4e2a\u7c7b\u4e2d\u9009\u53d6\u4e00\u7ec4\u5c5e\u6027: export class UpdateCatAgeDto extends PickType ( CreateCatDto , [ 'age' ] as const ) {} info Hint ' PickType() '\u51fd\u6570\u662f\u4ece' @nestjs/mapped-types '\u5305\u4e2d\u5bfc\u5165\u7684\u3002 ' OmitType() '\u51fd\u6570\u901a\u8fc7\u4ece\u8f93\u5165\u7c7b\u578b\u4e2d\u9009\u53d6\u6240\u6709\u5c5e\u6027\uff0c\u7136\u540e\u5220\u9664\u4e00\u7ec4\u7279\u5b9a\u7684\u952e\u6765\u6784\u9020\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u5982\u4e0b\u7c7b\u578b\u5f00\u59cb: export class CreateCatDto { name : string ; age : number ; breed : string ; } \u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u5177\u6709 \u9664 ' name '\u4e4b\u5916\u7684\u6240\u6709\u5c5e\u6027\u7684\u6d3e\u751f\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5728\u8fd9\u4e2a\u6784\u9020\u4e2d\uff0c' OmitType '\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5c5e\u6027\u540d\u6570\u7ec4\u3002 export class UpdateCatDto extends OmitType ( CreateCatDto , [ 'name' ] as const ) {} info Hint ' OmitType() '\u51fd\u6570\u662f\u4ece' @nestjs/mapped-types '\u5305\u4e2d\u5bfc\u5165\u7684\u3002 ' IntersectionType() '\u51fd\u6570\u5c06\u4e24\u79cd\u7c7b\u578b\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b(\u7c7b)\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ece\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\u5f00\u59cb: export class CreateCatDto { name : string ; breed : string ; } export class AdditionalCatInfo { color : string ; } \u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u65b0\u7c7b\u578b\uff0c\u5b83\u7ed3\u5408\u4e86\u8fd9\u4e24\u79cd\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u3002 export class UpdateCatDto extends IntersectionType ( CreateCatDto , AdditionalCatInfo , ) {} info Hint IntersectionType()\u51fd\u6570\u662f\u4ece' @nestjs/mapped-types '\u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u7c7b\u578b\u6620\u5c04\u5b9e\u7528\u51fd\u6570\u662f\u53ef\u7ec4\u5408\u7684\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u5c06\u751f\u6210\u4e00\u4e2a\u7c7b\u578b(\u7c7b)\uff0c\u5b83\u62e5\u6709' CreateCatDto '\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\uff0c\u9664\u4e86' name '\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u53ef\u9009: export class UpdateCatDto extends PartialType ( OmitType ( CreateCatDto , [ 'name' ] as const ), ) {} \u89e3\u6790\u548c\u9a8c\u8bc1\u6570\u7ec4 \u00b6 TypeScript \u4e0d\u5b58\u50a8\u5173\u4e8e\u6cdb\u578b\u6216\u63a5\u53e3\u7684\u5143\u6570\u636e\uff0c\u6240\u4ee5\u5f53\u4f60\u5728 dto \u4e2d\u4f7f\u7528\u5b83\u4eec\u65f6\uff0c' ValidationPipe '\u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u5730\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c' createUserDtos '\u5c06\u4e0d\u4f1a\u88ab\u6b63\u786e\u9a8c\u8bc1: @Post () createBulk ( @Body () createUserDtos : CreateUserDto []) { return 'This action adds new users' ; } \u8981\u9a8c\u8bc1\u6570\u7ec4\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u4e13\u7528\u7c7b\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u5305\u88c5\u6570\u7ec4\u7684\u5c5e\u6027\uff0c\u6216\u8005\u4f7f\u7528' ParseArrayPipe '\u3002 @Post () createBulk ( @Body ( new ParseArrayPipe ({ items : CreateUserDto })) createUserDtos : CreateUserDto [], ) { return 'This action adds new users' ; } \u6b64\u5916\uff0c\u5728\u89e3\u6790\u67e5\u8be2\u53c2\u6570\u65f6\uff0c' ParseArrayPipe '\u53ef\u80fd\u4f1a\u6d3e\u4e0a\u7528\u573a\u3002 \u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e2a' findByIds() '\u65b9\u6cd5\uff0c\u5b83\u6839\u636e\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\u4f20\u9012\u7684\u6807\u8bc6\u7b26\u8fd4\u56de\u7528\u6237\u3002 @Get () findByIds ( @Query ( 'ids' , new ParseArrayPipe ({ items : Number , separator : ',' })) ids : number [],) { return 'This action returns users by ids' ; } \u8fd9\u4e2a\u6784\u9020\u9a8c\u8bc1\u6765\u81ea HTTP ' GET '\u8bf7\u6c42\u7684\u4f20\u5165\u67e5\u8be2\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a: GET /?ids = 1 ,2,3 WebSockets and Microservices \u00b6 \u867d\u7136\u672c\u7ae0\u5c55\u793a\u4e86\u4f7f\u7528 HTTP \u98ce\u683c\u5e94\u7528\u7a0b\u5e8f\u7684\u4f8b\u5b50(\u5982 Express \u6216 Fastify)\uff0c\u4f46\u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u4f20\u8f93\u65b9\u6cd5\uff0c\u201cValidationPipe\u201d\u5bf9\u4e8e WebSockets \u548c\u5fae\u670d\u52a1\u90fd\u662f\u4e00\u6837\u7684\u3002 \u4e86\u89e3\u66f4\u591a \u00b6 \u66f4\u591a\u5173\u4e8e\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\u3001\u9519\u8bef\u6d88\u606f\u548c\u201c\u7c7b\u9a8c\u8bc1\u5668\u201d\u5305\u63d0\u4f9b\u7684\u53ef\u7528\u88c5\u9970\u5668\u7684\u4fe1\u606f\u8bf7\u53c2\u89c1 \u8fd9\u91cc \u3002","title":"\u9a8c\u8bc1"},{"location":"techniques/validation/#_1","text":"\u6700\u597d\u7684\u505a\u6cd5\u662f\u9a8c\u8bc1\u53d1\u9001\u5230 web \u5e94\u7528\u7a0b\u5e8f\u7684\u4efb\u4f55\u6570\u636e\u7684\u6b63\u786e\u6027\u3002 \u4e3a\u4e86\u81ea\u52a8\u9a8c\u8bc1\u4f20\u5165\u7684\u8bf7\u6c42\uff0cNest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u73b0\u6210\u7684\u53ef\u7528\u7ba1\u9053: ValidationPipe ParseIntPipe ParseBoolPipe ParseArrayPipe ParseUUIDPipe ValidationPipe \u4f7f\u7528\u4e86\u529f\u80fd\u5f3a\u5927\u7684 class-validator \u5305\u53ca\u5176\u58f0\u660e\u6027\u9a8c\u8bc1\u88c5\u9970\u5668\u3002 ValidationPipe \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u6cd5\u6765\u4e3a\u6240\u6709\u4f20\u5165\u7684\u5ba2\u6237\u673a\u6709\u6548\u8d1f\u8f7d\u5f3a\u5236\u9a8c\u8bc1\u89c4\u5219\uff0c\u5176\u4e2d\u7279\u5b9a\u7684\u89c4\u5219\u5728\u6bcf\u4e2a\u6a21\u5757\u7684\u672c\u5730\u7c7b/DTO \u58f0\u660e\u4e2d\u4f7f\u7528\u7b80\u5355\u7684\u6ce8\u91ca\u58f0\u660e\u3002","title":"\u9a8c\u8bc1"},{"location":"techniques/validation/#_2","text":"\u5728 Pipes \u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u6784\u5efa\u7b80\u5355\u7684\u7ba1\u9053\uff0c\u5e76\u5c06\u5b83\u4eec\u7ed1\u5b9a\u5230\u63a7\u5236\u5668\u3001\u65b9\u6cd5\u6216\u5168\u5c40\u5e94\u7528\u4e2d\uff0c\u4ee5\u6f14\u793a\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u672c\u7ae0\u7684\u4e3b\u9898\uff0c\u4e00\u5b9a\u8981\u56de\u987e\u90a3\u4e00\u7ae0\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8 ValidationPipe \u7684\u5404\u79cd \u771f\u5b9e\u4e16\u754c \u7528\u4f8b\uff0c\u5e76\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u4e00\u4e9b\u9ad8\u7ea7\u5b9a\u5236\u7279\u6027\u3002","title":"\u6982\u8ff0"},{"location":"techniques/validation/#validationpipe","text":"\u8981\u5f00\u59cb\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u9996\u5148\u5b89\u88c5\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002 $ npm i --save class-validator class-transformer info Hint ValidationPipe \u662f\u4ece @nestjs/common \u5305\u4e2d\u5bfc\u51fa\u7684\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u7ba1\u9053\u4f7f\u7528\u4e86 class-validator \u548c class-transformer \u5e93\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u53ef\u7528\u7684\u9009\u9879\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u7ed9\u7ba1\u9053\u7684\u914d\u7f6e\u5bf9\u8c61\u914d\u7f6e\u8fd9\u4e9b\u8bbe\u7f6e\u3002 \u4ee5\u4e0b\u662f\u5185\u7f6e\u9009\u9879: export interface ValidationPipeOptions extends ValidatorOptions { transform? : boolean ; disableErrorMessages? : boolean ; exceptionFactory ?: ( errors : ValidationError []) => any ; } \u9664\u6b64\u4e4b\u5916\uff0c\u6240\u6709\u7684 class-validator \u9009\u9879(\u7ee7\u627f\u81ea ValidatorOptions \u63a5\u53e3)\u90fd\u662f\u53ef\u7528\u7684: \u9009\u9879 \u7c7b\u578b \u63cf\u8ff0 enableDebugMessages boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5f53\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u9a8c\u8bc1\u5668\u5c06\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u989d\u5916\u7684\u8b66\u544a\u6d88\u606f\u3002 skipUndefinedProperties boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u8df3\u8fc7\u9a8c\u8bc1\u5bf9\u8c61\u4e2d\u6240\u6709\u4e3a\u7a7a\u7684\u5c5e\u6027\u7684\u9a8c\u8bc1\u3002 skipNullProperties boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u8df3\u8fc7\u9a8c\u8bc1\u5bf9\u8c61\u4e2d\u6240\u6709\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\u7684\u5c5e\u6027\u7684\u9a8c\u8bc1\u3002 skipMissingProperties boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u8df3\u8fc7\u5bf9\u9a8c\u8bc1\u5bf9\u8c61\u4e2d\u7f3a\u5931\u7684\u6240\u6709\u5c5e\u6027\u7684\u9a8c\u8bc1\u3002 whitelist boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u5220\u9664\u5df2\u9a8c\u8bc1(\u8fd4\u56de)\u5bf9\u8c61\u4e2d\u4e0d\u4f7f\u7528\u4efb\u4f55\u9a8c\u8bc1\u88c5\u9970\u5668\u7684\u4efb\u4f55\u5c5e\u6027\u3002 forbidNonWhitelisted boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u9a8c\u8bc1\u5668\u5c06\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u5265\u79bb\u975e\u767d\u540d\u5355\u5c5e\u6027\u3002 forbidUnknownValues boolean \u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u5c1d\u8bd5\u9a8c\u8bc1\u672a\u77e5\u5bf9\u8c61\u5c06\u7acb\u5373\u5931\u8d25\u3002 disableErrorMessages boolean If set to true, validation errors will not be returned to the client. errorHttpStatusCode number This setting allows you to specify which exception type will be used in case of an error. By default it throws BadRequestException . exceptionFactory Function Takes an array of the validation errors and returns an exception object to be thrown. groups string[] Groups to be used during validation of the object. always boolean Set default for always option of decorators. Default can be overridden in decorator options strictGroups boolean If groups is not given or is empty, ignore decorators with at least one group. dismissDefaultMessages boolean If set to true, the validation will not use default messages. Error message always will be undefined if its not explicitly set. validationError.target boolean Indicates if target should be exposed in ValidationError . validationError.value boolean Indicates if validated value should be exposed in ValidationError . stopAtFirstError boolean When set to true, validation of the given property will stop after encountering the first error. Defaults to false. info Notice \u5728\u5b83\u7684 \u5b58\u50a8\u5e93 \u4e2d\u627e\u5230\u5173\u4e8e class-validator \u5305\u7684\u66f4\u591a\u4fe1\u606f\u3002","title":"\u4f7f\u7528\u5185\u7f6e\u7684 ValidationPipe"},{"location":"techniques/validation/#_3","text":"\u6211\u4eec\u5c06\u9996\u5148\u5728\u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b\u7ed1\u5b9a ValidationPipe \uff0c\u4ece\u800c\u786e\u4fdd\u6240\u6709\u7aef\u70b9\u90fd\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u63a5\u6536\u4e0d\u6b63\u786e\u7684\u6570\u636e\u3002 async function bootstrap () { const app = await NestFactory . create ( AppModule ); app . useGlobalPipes ( new ValidationPipe ()); await app . listen ( 3000 ); } bootstrap (); \u4e3a\u4e86\u6d4b\u8bd5\u7ba1\u9053\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u7aef\u70b9\u3002 @Post () create ( @Body () createUserDto : CreateUserDto ) { return 'This action adds a new user' ; } info Hint \u7531\u4e8e TypeScript \u4e0d\u5b58\u50a8\u5173\u4e8e\u6cdb\u578b\u6216\u63a5\u53e3\u7684\u5143\u6570\u636e\uff0c\u5f53\u4f60\u5728 DTOs \u4e2d\u4f7f\u7528\u5b83\u4eec\u65f6\uff0c ValidationPipe \u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u5730\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002 \u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u8bf7\u8003\u8651\u5728 DTOs \u4e2d\u4f7f\u7528\u5177\u4f53\u7c7b\u3002 info Hint \u5f53\u5bfc\u5165\u4f60\u7684 DTOs \u65f6\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528\u4ec5\u7c7b\u578b\u5bfc\u5165\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5728\u8fd0\u884c\u65f6\u88ab\u5220\u9664\u3002 \u8bb0\u5f97 import {{ '{' }} CreateUserDto {{ '}' }} \u800c\u4e0d\u662f import type {{ '{' }} CreateUserDto {{ '}' }} . \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728 CreateUserDto \u4e2d\u6dfb\u52a0\u4e00\u4e9b\u9a8c\u8bc1\u89c4\u5219\u3002 \u6211\u4eec\u4f7f\u7528 class-validator \u5305\u63d0\u4f9b\u7684\u88c5\u9970\u5668\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u8be6\u7ec6\u63cf\u8ff0 \u5728\u8fd9\u91cc \u3002 \u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c\u4efb\u4f55\u4f7f\u7528 CreateUserDto \u7684\u8def\u7531\u90fd\u4f1a\u81ea\u52a8\u6267\u884c\u8fd9\u4e9b\u9a8c\u8bc1\u89c4\u5219\u3002 import { IsEmail , IsNotEmpty } from 'class-validator' ; export class CreateUserDto { @IsEmail () email : string ; @IsNotEmpty () password : string ; } \u6709\u4e86\u8fd9\u4e9b\u89c4\u5219\uff0c\u5982\u679c\u4e00\u4e2a\u8bf7\u6c42\u5728\u8bf7\u6c42\u4f53\u4e2d\u6709\u4e00\u4e2a\u65e0\u6548\u7684 email \u5c5e\u6027\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c06\u81ea\u52a8\u54cd\u5e94\u4e00\u4e2a 400 Bad request \u4ee3\u7801\uff0c\u4ee5\u53ca\u4e0b\u9762\u7684\u54cd\u5e94\u4f53: { \"statusCode\" : 400 , \"error\" : \"Bad Request\" , \"message\" : [ \"email must be an email\" ] } \u9664\u4e86\u9a8c\u8bc1\u8bf7\u6c42\u4f53\u4e4b\u5916\uff0c ValidationPipe \u8fd8\u53ef\u4ee5\u4e0e\u5176\u4ed6\u8bf7\u6c42\u5bf9\u8c61\u5c5e\u6027\u4e00\u8d77\u4f7f\u7528\u3002 \u5047\u8bbe\u6211\u4eec\u5e0c\u671b\u5728\u7aef\u70b9\u8def\u5f84\u4e2d\u63a5\u53d7 :id \u3002 \u4e3a\u4e86\u786e\u4fdd\u8fd9\u4e2a\u8bf7\u6c42\u53c2\u6570\u53ea\u63a5\u53d7\u6570\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6784\u9020: @Get ( ':id' ) findOne ( @Param () params : FindOneParams ) { return 'This action returns a user' ; } \u50cf DTO \u4e00\u6837\uff0c FindOneParams \u53ea\u662f\u4e00\u4e2a\u4f7f\u7528 class-validator \u5b9a\u4e49\u9a8c\u8bc1\u89c4\u5219\u7684\u7c7b\u3002 \u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684: import { IsNumberString } from 'class-validator' ; export class FindOneParams { @IsNumberString () id : number ; }","title":"\u81ea\u52a8\u9a8c\u8bc1"},{"location":"techniques/validation/#_4","text":"\u9519\u8bef\u6d88\u606f\u6709\u52a9\u4e8e\u89e3\u91ca\u8bf7\u6c42\u4e2d\u7684\u9519\u8bef\u3002 \u7136\u800c\uff0c\u4e00\u4e9b\u751f\u4ea7\u73af\u5883\u503e\u5411\u4e8e\u7981\u7528\u8be6\u7ec6\u9519\u8bef\u3002 \u901a\u8fc7\u5c06\u4e00\u4e2a options \u5bf9\u8c61\u4f20\u9012\u7ed9 ValidationPipe \u6765\u5b9e\u73b0: app . useGlobalPipes ( new ValidationPipe ({ disableErrorMessages : true })); \u56e0\u6b64\uff0c\u8be6\u7ec6\u7684\u9519\u8bef\u6d88\u606f\u5c06\u4e0d\u4f1a\u663e\u793a\u5728\u54cd\u5e94\u4f53\u4e2d\u3002","title":"\u7981\u7528\u8be6\u7ec6\u9519\u8bef"},{"location":"techniques/validation/#_5","text":"\u6211\u4eec\u7684 ValidationPipe \u8fd8\u53ef\u4ee5\u8fc7\u6ee4\u6389\u65b9\u6cd5\u5904\u7406\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u63a5\u6536\u7684\u5c5e\u6027\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u53ef\u63a5\u53d7\u7684\u5c5e\u6027 \u767d\u540d\u5355 \uff0c\u800c\u4efb\u4f55\u672a\u5305\u542b\u5728\u767d\u540d\u5355\u4e2d\u7684\u5c5e\u6027\u5c06\u81ea\u52a8\u4ece\u7ed3\u679c\u5bf9\u8c61\u4e2d\u5220\u9664\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7684\u5904\u7406\u7a0b\u5e8f\u9700\u8981 email \u548c password \u5c5e\u6027\uff0c\u4f46\u8bf7\u6c42\u8fd8\u5305\u542b age \u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u81ea\u52a8\u4ece\u7ed3\u679c DTO \u4e2d\u5220\u9664\u8be5\u5c5e\u6027\u3002 \u8981\u542f\u7528\u8fd9\u79cd\u884c\u4e3a\uff0c\u8bf7\u5c06 whitelist \u8bbe\u7f6e\u4e3a true \u3002 app . useGlobalPipes ( new ValidationPipe ({ whitelist : true })); \u5f53\u8bbe\u7f6e\u4e3a true \u65f6\uff0c\u8fd9\u5c06\u81ea\u52a8\u5220\u9664\u975e\u767d\u540d\u5355\u5c5e\u6027(\u5728\u9a8c\u8bc1\u7c7b\u4e2d\u6ca1\u6709\u4efb\u4f55\u88c5\u9970\u5668\u7684\u5c5e\u6027)\u3002 \u6216\u8005\uff0c\u5f53\u51fa\u73b0\u975e\u767d\u540d\u5355\u5c5e\u6027\u65f6\uff0c\u60a8\u53ef\u4ee5\u505c\u6b62\u5904\u7406\u8bf7\u6c42\uff0c\u5e76\u5411\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u54cd\u5e94\u3002 \u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u8bf7\u5c06 forbidNonWhitelisted \u9009\u9879\u5c5e\u6027\u8bbe\u7f6e\u4e3a true \uff0c\u540c\u65f6\u5c06 whitelist \u8bbe\u7f6e\u4e3a true \u3002","title":"\u5265\u79bb\u6027\u80fd"},{"location":"techniques/validation/#_6","text":"\u901a\u8fc7\u7f51\u7edc\u4f20\u5165\u7684\u6709\u6548\u8d1f\u8f7d\u662f\u666e\u901a\u7684 JavaScript \u5bf9\u8c61\u3002 ValidationPipe \u53ef\u4ee5\u6839\u636e DTO \u7c7b\u81ea\u52a8\u5c06\u6709\u6548\u8d1f\u8f7d\u8f6c\u6362\u4e3a\u5bf9\u8c61\u7c7b\u578b\u3002 \u8981\u542f\u7528\u81ea\u52a8\u8f6c\u6362\uff0c\u8bf7\u5c06 transform \u8bbe\u7f6e\u4e3a' true '\u3002 \u8fd9\u53ef\u4ee5\u5728\u65b9\u6cd5\u7ea7\u522b\u5b8c\u6210: @ @filename ( cats . controller ) @Post () @UsePipes ( new ValidationPipe ({ transform : true })) async create ( @Body () createCatDto : CreateCatDto ) { this . catsService . create ( createCatDto ); } \u8981\u5168\u5c40\u542f\u7528\u6b64\u884c\u4e3a\uff0c\u8bf7\u5728\u5168\u5c40\u7ba1\u9053\u4e0a\u8bbe\u7f6e\u8be5\u9009\u9879: app . useGlobalPipes ( new ValidationPipe ({ transform : true })); \u542f\u7528\u81ea\u52a8\u8f6c\u6362\u9009\u9879\u540e\uff0c ValidationPipe \u4e5f\u5c06\u6267\u884c\u57fa\u5143\u7c7b\u578b\u7684\u8f6c\u6362\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c findOne() \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u5b83\u8868\u793a\u63d0\u53d6\u7684 id \u8def\u5f84\u53c2\u6570: @Get ( ':id' ) findOne ( @Param ( 'id' ) id : number ) { console . log ( typeof id === 'number' ); // true return 'This action returns a user' ; } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e2a\u8def\u5f84\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570\u90fd\u662f\u4e00\u4e2a string \u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06 id \u7c7b\u578b\u6307\u5b9a\u4e3a number (\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d)\u3002 \u56e0\u6b64\uff0c ValidationPipe \u5c06\u5c1d\u8bd5\u81ea\u52a8\u5c06\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u8f6c\u6362\u4e3a\u6570\u5b57\u3002","title":"\u53d8\u6362\u8d1f\u8f7d\u5bf9\u8c61"},{"location":"techniques/validation/#_7","text":"\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86 ValidationPipe \u5982\u4f55\u6839\u636e\u9884\u671f\u7684\u7c7b\u578b\u9690\u5f0f\u5730\u8f6c\u6362\u67e5\u8be2\u548c\u8def\u5f84\u53c2\u6570\u3002 \u7136\u800c\uff0c\u8be5\u7279\u6027\u9700\u8981\u542f\u7528\u81ea\u52a8\u8f6c\u6362\u3002 \u6216\u8005(\u7981\u7528\u81ea\u52a8\u8f6c\u6362)\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 ParseIntPipe \u6216 ParseBoolPipe \u663e\u5f0f\u5730\u5f3a\u5236\u8f6c\u6362\u503c(\u6ce8\u610f\uff0c ParseStringPipe \u662f\u4e0d\u9700\u8981\u7684\uff0c\u56e0\u4e3a\u6b63\u5982\u524d\u9762\u63d0\u5230\u7684\uff0c\u6bcf\u4e2a\u8def\u5f84\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570\u9ed8\u8ba4\u90fd\u4f5c\u4e3a string \u901a\u8fc7\u7f51\u7edc\u4f20\u9012)\u3002 @Get ( ':id' ) findOne ( @Param ( 'id' , ParseIntPipe ) id : number , @Query ( 'sort' , ParseBoolPipe ) sort : boolean ,) { console . log ( typeof id === 'number' ); // true console . log ( typeof sort === 'boolean' ); // true return 'This action returns a user' ; } info Hint ParseIntPipe \u548c ParseBoolPipe \u662f\u4ece @nestjs/common \u5305\u5bfc\u51fa\u7684\u3002","title":"\u663e\u5f0f\u8f6c\u6362"},{"location":"techniques/validation/#_8","text":"\u5f53\u4f60\u6784\u5efa\u50cf CRUD (\u521b\u5efa/\u8bfb\u53d6/\u66f4\u65b0/\u5220\u9664)\u8fd9\u6837\u7684\u7279\u6027\u65f6\uff0c\u5728\u57fa\u672c\u5b9e\u4f53\u7c7b\u578b\u4e0a\u6784\u9020\u53d8\u91cf\u901a\u5e38\u5f88\u6709\u7528\u3002 Nest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u6267\u884c\u7c7b\u578b\u8f6c\u6362\u7684\u5b9e\u7528\u51fd\u6570\uff0c\u4f7f\u8fd9\u9879\u4efb\u52a1\u66f4\u52a0\u65b9\u4fbf\u3002 Warning \u5982\u679c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 @nestjs/swagger \u5305\uff0c\u8bf7\u53c2\u9605 \u672c\u7ae0 \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Mapped Types \u7684\u4fe1\u606f\u3002 Likewise, if you use the @nestjs/graphql package see this chapter . \u8fd9\u4e24\u4e2a\u5305\u90fd\u4e25\u91cd\u4f9d\u8d56\u4e8e\u7c7b\u578b\uff0c\u56e0\u6b64\u5b83\u4eec\u9700\u8981\u4f7f\u7528\u4e0d\u540c\u7684\u5bfc\u5165\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u4f7f\u7528' @nestjs/mapped-types '(\u800c\u4e0d\u662f\u4e00\u4e2a\u9002\u5f53\u7684\uff0c' @nestjs/swagger '\u6216' @nestjs/graphql '\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7c7b\u578b)\uff0c\u4f60\u53ef\u80fd\u4f1a\u9762\u4e34\u5404\u79cd\u5404\u6837\u7684\uff0c\u6ca1\u6709\u6587\u6863\u5316\u7684\u526f\u4f5c\u7528\u3002 \u5f53\u6784\u5efa\u8f93\u5165\u9a8c\u8bc1\u7c7b\u578b(\u4e5f\u79f0\u4e3a dto)\u65f6\uff0c\u5728\u540c\u4e00\u7c7b\u578b\u4e0a\u6784\u5efa create \u548c update \u53d8\u4f53\u901a\u5e38\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c create \u53d8\u91cf\u53ef\u80fd\u9700\u8981\u6240\u6709\u5b57\u6bb5\uff0c\u800c update \u53d8\u91cf\u53ef\u80fd\u8ba9\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\u3002 Nest \u63d0\u4f9b\u4e86 PartialType() \u5b9e\u7528\u51fd\u6570\u6765\u7b80\u5316\u6b64\u4efb\u52a1\u5e76\u6700\u5c0f\u5316\u6837\u677f\u6587\u4ef6\u3002 PartialType() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b(\u7c7b)\uff0c\u5176\u4e2d\u8f93\u5165\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u53ef\u9009\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5982\u4e0b\u7684 create \u7c7b\u578b: export class CreateCatDto { name : string ; age : number ; breed : string ; } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u8fd9\u4e9b\u5b57\u6bb5\u90fd\u662f\u5fc5\u9700\u7684\u3002 \u8981\u521b\u5efa\u5177\u6709\u76f8\u540c\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u4f46\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u662f\u53ef\u9009\u7684\uff0c\u4f7f\u7528 PartialType() \u4f20\u9012\u7c7b\u5f15\u7528( CreateCatDto )\u4f5c\u4e3a\u53c2\u6570: export class UpdateCatDto extends PartialType ( CreateCatDto ) {} info Hint ' PartialType() '\u51fd\u6570\u662f\u4ece' @nestjs/mapped-types '\u5305\u4e2d\u5bfc\u5165\u7684\u3002 ' PickType() '\u51fd\u6570\u901a\u8fc7\u4ece\u8f93\u5165\u7c7b\u578b\u4e2d\u9009\u53d6\u4e00\u7ec4\u5c5e\u6027\u6765\u6784\u9020\u4e00\u4e2a\u65b0\u7c7b\u578b(\u7c7b)\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u5982\u4e0b\u7c7b\u578b\u5f00\u59cb: export class CreateCatDto { name : string ; age : number ; breed : string ; } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528' PickType() '\u5b9e\u7528\u51fd\u6570\u4ece\u8fd9\u4e2a\u7c7b\u4e2d\u9009\u53d6\u4e00\u7ec4\u5c5e\u6027: export class UpdateCatAgeDto extends PickType ( CreateCatDto , [ 'age' ] as const ) {} info Hint ' PickType() '\u51fd\u6570\u662f\u4ece' @nestjs/mapped-types '\u5305\u4e2d\u5bfc\u5165\u7684\u3002 ' OmitType() '\u51fd\u6570\u901a\u8fc7\u4ece\u8f93\u5165\u7c7b\u578b\u4e2d\u9009\u53d6\u6240\u6709\u5c5e\u6027\uff0c\u7136\u540e\u5220\u9664\u4e00\u7ec4\u7279\u5b9a\u7684\u952e\u6765\u6784\u9020\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u5982\u4e0b\u7c7b\u578b\u5f00\u59cb: export class CreateCatDto { name : string ; age : number ; breed : string ; } \u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u5177\u6709 \u9664 ' name '\u4e4b\u5916\u7684\u6240\u6709\u5c5e\u6027\u7684\u6d3e\u751f\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\u3002 \u5728\u8fd9\u4e2a\u6784\u9020\u4e2d\uff0c' OmitType '\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5c5e\u6027\u540d\u6570\u7ec4\u3002 export class UpdateCatDto extends OmitType ( CreateCatDto , [ 'name' ] as const ) {} info Hint ' OmitType() '\u51fd\u6570\u662f\u4ece' @nestjs/mapped-types '\u5305\u4e2d\u5bfc\u5165\u7684\u3002 ' IntersectionType() '\u51fd\u6570\u5c06\u4e24\u79cd\u7c7b\u578b\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b(\u7c7b)\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u4ece\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\u5f00\u59cb: export class CreateCatDto { name : string ; breed : string ; } export class AdditionalCatInfo { color : string ; } \u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u65b0\u7c7b\u578b\uff0c\u5b83\u7ed3\u5408\u4e86\u8fd9\u4e24\u79cd\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u5c5e\u6027\u3002 export class UpdateCatDto extends IntersectionType ( CreateCatDto , AdditionalCatInfo , ) {} info Hint IntersectionType()\u51fd\u6570\u662f\u4ece' @nestjs/mapped-types '\u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u7c7b\u578b\u6620\u5c04\u5b9e\u7528\u51fd\u6570\u662f\u53ef\u7ec4\u5408\u7684\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u5c06\u751f\u6210\u4e00\u4e2a\u7c7b\u578b(\u7c7b)\uff0c\u5b83\u62e5\u6709' CreateCatDto '\u7c7b\u578b\u7684\u6240\u6709\u5c5e\u6027\uff0c\u9664\u4e86' name '\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5c06\u88ab\u8bbe\u7f6e\u4e3a\u53ef\u9009: export class UpdateCatDto extends PartialType ( OmitType ( CreateCatDto , [ 'name' ] as const ), ) {}","title":"\u6620\u5c04\u7c7b\u578b"},{"location":"techniques/validation/#_9","text":"TypeScript \u4e0d\u5b58\u50a8\u5173\u4e8e\u6cdb\u578b\u6216\u63a5\u53e3\u7684\u5143\u6570\u636e\uff0c\u6240\u4ee5\u5f53\u4f60\u5728 dto \u4e2d\u4f7f\u7528\u5b83\u4eec\u65f6\uff0c' ValidationPipe '\u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u5730\u9a8c\u8bc1\u4f20\u5165\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c' createUserDtos '\u5c06\u4e0d\u4f1a\u88ab\u6b63\u786e\u9a8c\u8bc1: @Post () createBulk ( @Body () createUserDtos : CreateUserDto []) { return 'This action adds new users' ; } \u8981\u9a8c\u8bc1\u6570\u7ec4\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u4e13\u7528\u7c7b\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u5305\u88c5\u6570\u7ec4\u7684\u5c5e\u6027\uff0c\u6216\u8005\u4f7f\u7528' ParseArrayPipe '\u3002 @Post () createBulk ( @Body ( new ParseArrayPipe ({ items : CreateUserDto })) createUserDtos : CreateUserDto [], ) { return 'This action adds new users' ; } \u6b64\u5916\uff0c\u5728\u89e3\u6790\u67e5\u8be2\u53c2\u6570\u65f6\uff0c' ParseArrayPipe '\u53ef\u80fd\u4f1a\u6d3e\u4e0a\u7528\u573a\u3002 \u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e2a' findByIds() '\u65b9\u6cd5\uff0c\u5b83\u6839\u636e\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\u4f20\u9012\u7684\u6807\u8bc6\u7b26\u8fd4\u56de\u7528\u6237\u3002 @Get () findByIds ( @Query ( 'ids' , new ParseArrayPipe ({ items : Number , separator : ',' })) ids : number [],) { return 'This action returns users by ids' ; } \u8fd9\u4e2a\u6784\u9020\u9a8c\u8bc1\u6765\u81ea HTTP ' GET '\u8bf7\u6c42\u7684\u4f20\u5165\u67e5\u8be2\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a: GET /?ids = 1 ,2,3","title":"\u89e3\u6790\u548c\u9a8c\u8bc1\u6570\u7ec4"},{"location":"techniques/validation/#websockets-and-microservices","text":"\u867d\u7136\u672c\u7ae0\u5c55\u793a\u4e86\u4f7f\u7528 HTTP \u98ce\u683c\u5e94\u7528\u7a0b\u5e8f\u7684\u4f8b\u5b50(\u5982 Express \u6216 Fastify)\uff0c\u4f46\u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u4f20\u8f93\u65b9\u6cd5\uff0c\u201cValidationPipe\u201d\u5bf9\u4e8e WebSockets \u548c\u5fae\u670d\u52a1\u90fd\u662f\u4e00\u6837\u7684\u3002","title":"WebSockets and Microservices"},{"location":"techniques/validation/#_10","text":"\u66f4\u591a\u5173\u4e8e\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\u3001\u9519\u8bef\u6d88\u606f\u548c\u201c\u7c7b\u9a8c\u8bc1\u5668\u201d\u5305\u63d0\u4f9b\u7684\u53ef\u7528\u88c5\u9970\u5668\u7684\u4fe1\u606f\u8bf7\u53c2\u89c1 \u8fd9\u91cc \u3002","title":"\u4e86\u89e3\u66f4\u591a"},{"location":"techniques/versioning/","text":"Versioning \u00b6 info Hint This chapter is only relevant to HTTP-based applications. Versioning allows you to have different versions of your controllers or individual routes running within the same application. Applications change very often and it is not unusual that there are breaking changes that you need to make while still needing to support the previous version of the application. There are 3 types of versioning that are supported: URI Versioning The version will be passed within the URI of the request (default) Header Versioning A custom request header will specify the version Media Type Versioning The Accept header of the request will specify the version URI Versioning Type \u00b6 URI Versioning uses the version passed within the URI of the request, such as https://example.com/v1/route and https://example.com/v2/route . warning Notice With URI Versioning the version will be automatically added to the URI after the global path prefix (if one exists), and before any controller or route paths. To enable URI Versioning for your application, do the following: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); // or \"app.enableVersioning()\" app . enableVersioning ({ type : VersioningType . URI , }); await app . listen ( 3000 ); warning Notice The version in the URI will be automatically prefixed with v by default, however the prefix value can be configured by setting the prefix key to your desired prefix or false if you wish to disable it. info Hint The VersioningType enum is available to use for the type property and is imported from the @nestjs/common package. Header Versioning Type \u00b6 Header Versioning uses a custom, user specified, request header to specify the version where the value of the header will be the version to use for the request. Example HTTP Requests for Header Versioning: To enable Header Versioning for your application, do the following: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); app . enableVersioning ({ type : VersioningType . HEADER , header : 'Custom-Header' , }); await app . listen ( 3000 ); The header property should be the name of the header that will contain the version of the request. info Hint The VersioningType enum is available to use for the type property and is imported from the @nestjs/common package. Media Type Versioning Type \u00b6 Media Type Versioning uses the Accept header of the request to specify the version. Within the Accept header, the version will be separated from the media type with a semi-colon, ; . It should then contain a key-value pair that represents the version to use for the request, such as Accept: application/json;v=2 . They key is treated more as a prefix when determining the version will to be configured to include the key and separator. To enable Media Type Versioning for your application, do the following: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); app . enableVersioning ({ type : VersioningType . MEDIA_TYPE , key : 'v=' , }); await app . listen ( 3000 ); The key property should be the key and separator of the key-value pair that contains the version. For the example Accept: application/json;v=2 , the key property would be set to v= . info Hint The VersioningType enum is available to use for the type property and is imported from the @nestjs/common package. Usage \u00b6 Versioning allows you to version controllers, individual routes, and also provides a way for certain resources to opt-out of versioning. The usage of versioning is the same regardless of the Versioning Type your application uses. warning Notice If versioning is enabled for the application but the controller or route does not specify the version, any requests to that controller/route will be returned a 404 response status. Similarly, if a request is received containing a version that does not have a corresponding controller or route, it will also be returned a 404 response status. Controller versions \u00b6 A version can be applied to a controller, setting the version for all routes within the controller. To add a version to a controller do the following: @ @filename ( cats . controller ) @Controller ({ version : '1' , }) export class CatsControllerV1 { @Get ( 'cats' ) findAll () : string { return 'This action returns all cats for version 1' ; } } @ @switch @Controller ({ version : '1' , }) export class CatsControllerV1 { @Get ( 'cats' ) findAll () { return 'This action returns all cats for version 1' ; } } Route versions \u00b6 A version can be applied to an individual route. This version will override any other version that would effect the route, such as the Controller Version. To add a version to an individual route do the following: @ @filename ( cats . controller ) import { Controller , Get , Version } from '@nestjs/common' ; @Controller () export class CatsController { @Version ( '1' ) @Get ( 'cats' ) findAllV1 () : string { return 'This action returns all cats for version 1' ; } @Version ( '2' ) @Get ( 'cats' ) findAllV2 () : string { return 'This action returns all cats for version 2' ; } } @ @switch import { Controller , Get , Version } from '@nestjs/common' ; @Controller () export class CatsController { @Version ( '1' ) @Get ( 'cats' ) findAllV1 () { return 'This action returns all cats for version 1' ; } @Version ( '2' ) @Get ( 'cats' ) findAllV2 () { return 'This action returns all cats for version 2' ; } } Multiple versions \u00b6 Multiple versions can be applied to a controller or route. To use multiple versions, you would set the version to be an Array. To add multiple versions do the following: @ @filename ( cats . controller ) @Controller ({ version : [ '1' , '2' ], }) export class CatsController { @Get ( 'cats' ) findAll () : string { return 'This action returns all cats for version 1 or 2' ; } } @ @switch @Controller ({ version : [ '1' , '2' ], }) export class CatsController { @Get ( 'cats' ) findAll () { return 'This action returns all cats for version 1 or 2' ; } } Version \"Neutral\" \u00b6 Some controllers or routes may not care about the version and would have the same functionality regardless of the version. To accommodate this, the version can be set to VERSION_NEUTRAL symbol. An incoming request will be mapped to a VERSION_NEUTRAL controller or route regardless of the version sent in the request in addition to if the request does not contain a version at all. warning Notice For URI Versioning, a VERSION_NEUTRAL resource would not have the version present in the URI. To add a version neutral controller or route do the following: @ @filename ( cats . controller ) import { Controller , Get , VERSION_NEUTRAL } from '@nestjs/common' ; @Controller ({ version : VERSION_NEUTRAL , }) export class CatsController { @Get ( 'cats' ) findAll () : string { return 'This action returns all cats regardless of version' ; } } @ @switch import { Controller , Get , VERSION_NEUTRAL } from '@nestjs/common' ; @Controller ({ version : VERSION_NEUTRAL , }) export class CatsController { @Get ( 'cats' ) findAll () { return 'This action returns all cats regardless of version' ; } } Global default version \u00b6 If you do not want to provide a version for each controller/or individual routes, or if you want to have a specific version set as the default version for every controller/route that don't have the version specified, you could set the defaultVersion as follows: @ @filename ( main ) app . enableVersioning ({ // ... defaultVersion : '1' // or defaultVersion : [ '1' , '2' ] // or defaultVersion : VERSION_NEUTRAL });","title":"\u7248\u672c\u63a7\u5236"},{"location":"techniques/versioning/#versioning","text":"info Hint This chapter is only relevant to HTTP-based applications. Versioning allows you to have different versions of your controllers or individual routes running within the same application. Applications change very often and it is not unusual that there are breaking changes that you need to make while still needing to support the previous version of the application. There are 3 types of versioning that are supported: URI Versioning The version will be passed within the URI of the request (default) Header Versioning A custom request header will specify the version Media Type Versioning The Accept header of the request will specify the version","title":"Versioning"},{"location":"techniques/versioning/#uri-versioning-type","text":"URI Versioning uses the version passed within the URI of the request, such as https://example.com/v1/route and https://example.com/v2/route . warning Notice With URI Versioning the version will be automatically added to the URI after the global path prefix (if one exists), and before any controller or route paths. To enable URI Versioning for your application, do the following: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); // or \"app.enableVersioning()\" app . enableVersioning ({ type : VersioningType . URI , }); await app . listen ( 3000 ); warning Notice The version in the URI will be automatically prefixed with v by default, however the prefix value can be configured by setting the prefix key to your desired prefix or false if you wish to disable it. info Hint The VersioningType enum is available to use for the type property and is imported from the @nestjs/common package.","title":"URI Versioning Type"},{"location":"techniques/versioning/#header-versioning-type","text":"Header Versioning uses a custom, user specified, request header to specify the version where the value of the header will be the version to use for the request. Example HTTP Requests for Header Versioning: To enable Header Versioning for your application, do the following: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); app . enableVersioning ({ type : VersioningType . HEADER , header : 'Custom-Header' , }); await app . listen ( 3000 ); The header property should be the name of the header that will contain the version of the request. info Hint The VersioningType enum is available to use for the type property and is imported from the @nestjs/common package.","title":"Header Versioning Type"},{"location":"techniques/versioning/#media-type-versioning-type","text":"Media Type Versioning uses the Accept header of the request to specify the version. Within the Accept header, the version will be separated from the media type with a semi-colon, ; . It should then contain a key-value pair that represents the version to use for the request, such as Accept: application/json;v=2 . They key is treated more as a prefix when determining the version will to be configured to include the key and separator. To enable Media Type Versioning for your application, do the following: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); app . enableVersioning ({ type : VersioningType . MEDIA_TYPE , key : 'v=' , }); await app . listen ( 3000 ); The key property should be the key and separator of the key-value pair that contains the version. For the example Accept: application/json;v=2 , the key property would be set to v= . info Hint The VersioningType enum is available to use for the type property and is imported from the @nestjs/common package.","title":"Media Type Versioning Type"},{"location":"techniques/versioning/#usage","text":"Versioning allows you to version controllers, individual routes, and also provides a way for certain resources to opt-out of versioning. The usage of versioning is the same regardless of the Versioning Type your application uses. warning Notice If versioning is enabled for the application but the controller or route does not specify the version, any requests to that controller/route will be returned a 404 response status. Similarly, if a request is received containing a version that does not have a corresponding controller or route, it will also be returned a 404 response status.","title":"Usage"},{"location":"techniques/versioning/#controller-versions","text":"A version can be applied to a controller, setting the version for all routes within the controller. To add a version to a controller do the following: @ @filename ( cats . controller ) @Controller ({ version : '1' , }) export class CatsControllerV1 { @Get ( 'cats' ) findAll () : string { return 'This action returns all cats for version 1' ; } } @ @switch @Controller ({ version : '1' , }) export class CatsControllerV1 { @Get ( 'cats' ) findAll () { return 'This action returns all cats for version 1' ; } }","title":"Controller versions"},{"location":"techniques/versioning/#route-versions","text":"A version can be applied to an individual route. This version will override any other version that would effect the route, such as the Controller Version. To add a version to an individual route do the following: @ @filename ( cats . controller ) import { Controller , Get , Version } from '@nestjs/common' ; @Controller () export class CatsController { @Version ( '1' ) @Get ( 'cats' ) findAllV1 () : string { return 'This action returns all cats for version 1' ; } @Version ( '2' ) @Get ( 'cats' ) findAllV2 () : string { return 'This action returns all cats for version 2' ; } } @ @switch import { Controller , Get , Version } from '@nestjs/common' ; @Controller () export class CatsController { @Version ( '1' ) @Get ( 'cats' ) findAllV1 () { return 'This action returns all cats for version 1' ; } @Version ( '2' ) @Get ( 'cats' ) findAllV2 () { return 'This action returns all cats for version 2' ; } }","title":"Route versions"},{"location":"techniques/versioning/#multiple-versions","text":"Multiple versions can be applied to a controller or route. To use multiple versions, you would set the version to be an Array. To add multiple versions do the following: @ @filename ( cats . controller ) @Controller ({ version : [ '1' , '2' ], }) export class CatsController { @Get ( 'cats' ) findAll () : string { return 'This action returns all cats for version 1 or 2' ; } } @ @switch @Controller ({ version : [ '1' , '2' ], }) export class CatsController { @Get ( 'cats' ) findAll () { return 'This action returns all cats for version 1 or 2' ; } }","title":"Multiple versions"},{"location":"techniques/versioning/#version-neutral","text":"Some controllers or routes may not care about the version and would have the same functionality regardless of the version. To accommodate this, the version can be set to VERSION_NEUTRAL symbol. An incoming request will be mapped to a VERSION_NEUTRAL controller or route regardless of the version sent in the request in addition to if the request does not contain a version at all. warning Notice For URI Versioning, a VERSION_NEUTRAL resource would not have the version present in the URI. To add a version neutral controller or route do the following: @ @filename ( cats . controller ) import { Controller , Get , VERSION_NEUTRAL } from '@nestjs/common' ; @Controller ({ version : VERSION_NEUTRAL , }) export class CatsController { @Get ( 'cats' ) findAll () : string { return 'This action returns all cats regardless of version' ; } } @ @switch import { Controller , Get , VERSION_NEUTRAL } from '@nestjs/common' ; @Controller ({ version : VERSION_NEUTRAL , }) export class CatsController { @Get ( 'cats' ) findAll () { return 'This action returns all cats regardless of version' ; } }","title":"Version \"Neutral\""},{"location":"techniques/versioning/#global-default-version","text":"If you do not want to provide a version for each controller/or individual routes, or if you want to have a specific version set as the default version for every controller/route that don't have the version specified, you could set the defaultVersion as follows: @ @filename ( main ) app . enableVersioning ({ // ... defaultVersion : '1' // or defaultVersion : [ '1' , '2' ] // or defaultVersion : VERSION_NEUTRAL });","title":"Global default version"},{"location":"websockets/adapter/","text":"\u9002\u914d\u5668 \u00b6 WebSockets\u6a21\u5757\u662f\u5e73\u53f0\u65e0\u5173\u7684\uff0c\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 WebSocketAdapter \u63a5\u53e3\u5e26\u6765\u81ea\u5df1\u7684\u5e93(\u751a\u81f3\u662f\u672c\u5730\u5b9e\u73b0)\u3002 \u8be5\u63a5\u53e3\u5f3a\u5236\u5b9e\u73b0\u4ee5\u4e0b\u8868\u4e2d\u63cf\u8ff0\u7684\u51e0\u79cd\u65b9\u6cd5: create \u57fa\u4e8e\u4f20\u9012\u7684\u53c2\u6570\u521b\u5efa\u5957\u63a5\u5b57\u5b9e\u4f8b bindClientConnect \u7ed1\u5b9a\u5ba2\u6237\u7aef\u8fde\u63a5\u4e8b\u4ef6 bindClientDisconnect \u7ed1\u5b9a\u5ba2\u6237\u7aef\u65ad\u5f00\u4e8b\u4ef6(\u53ef\u9009*) bindMessageHandlers \u5c06\u4f20\u5165\u6d88\u606f\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684\u6d88\u606f\u5904\u7406\u7a0b\u5e8f close \u7ec8\u6b62\u670d\u52a1\u5668\u5b9e\u4f8b \u6269\u5c55 socket.io \u00b6 socket.io \u5305\u88ab\u5305\u88c5\u5728\u4e00\u4e2a IoAdapter \u7c7b\u4e2d\u3002 \u5982\u679c\u60a8\u60f3\u589e\u5f3a\u9002\u914d\u5668\u7684\u57fa\u672c\u529f\u80fd\uff0c\u8be5\u600e\u4e48\u529e\u5462? \u4f8b\u5982\uff0c\u60a8\u7684\u6280\u672f\u9700\u6c42\u8981\u6c42\u80fd\u591f\u8de8web\u670d\u52a1\u7684\u591a\u4e2a\u8d1f\u8f7d\u5e73\u8861\u5b9e\u4f8b\u5e7f\u64ad\u4e8b\u4ef6\u3002 \u4e3a\u6b64\uff0c\u4f60\u53ef\u4ee5\u6269\u5c55 IoAdapter \u5e76\u8986\u76d6\u5355\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8d1f\u8d23\u5b9e\u4f8b\u5316\u65b0\u7684 socket.io \u670d\u52a1\u5668\u3002 \u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b89\u88c5\u6240\u9700\u7684\u5305\u3002 $ npm i --save socket.io-redis \u4e00\u65e6\u5b89\u88c5\u4e86\u5305\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a RedisIoAdapter \u7c7b\u3002 import { IoAdapter } from '@nestjs/platform-socket.io' ; import { RedisClient } from 'redis' ; import { ServerOptions } from 'socket.io' ; import { createAdapter } from 'socket.io-redis' ; const pubClient = new RedisClient ({ host : 'localhost' , port : 6379 }); const subClient = pubClient . duplicate (); const redisAdapter = createAdapter ({ pubClient , subClient }); export class RedisIoAdapter extends IoAdapter { createIOServer ( port : number , options? : ServerOptions ) : any { const server = super . createIOServer ( port , options ); server . adapter ( redisAdapter ); return server ; } } \u4e4b\u540e\uff0c\u53ea\u9700\u5207\u6362\u5230\u65b0\u521b\u5efa\u7684Redis\u9002\u914d\u5668\u3002 const app = await NestFactory . create ( AppModule ); app . useWebSocketAdapter ( new RedisIoAdapter ( app )); Ws \u5e93 \u00b6 \u53e6\u4e00\u4e2a\u53ef\u7528\u7684\u9002\u914d\u5668\u662f\u201cWsAdapter\u201d\uff0c\u5b83\u5145\u5f53\u6846\u67b6\u4e4b\u95f4\u7684\u4ee3\u7406\uff0c\u96c6\u6210\u4e86\u5feb\u901f\u4e14\u7ecf\u8fc7\u5f7b\u5e95\u6d4b\u8bd5\u7684 ws \u5e93\u3002 \u8fd9\u4e2a\u9002\u914d\u5668\u4e0e\u672c\u5730\u6d4f\u89c8\u5668WebSockets\u5b8c\u5168\u517c\u5bb9\uff0c\u800c\u4e14\u6bd4socket.io\u5305\u5feb\u5f97\u591a\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u7684\u53ef\u7528\u529f\u80fd\u5c11\u5f97\u591a\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e76\u4e0d\u9700\u8981\u5b83\u4eec\u3002 info Hint ws \u5e93\u4e0d\u652f\u6301\u540d\u79f0\u7a7a\u95f4(\u7531 socket.io \u666e\u53ca\u7684\u901a\u4fe1\u901a\u9053)\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6a21\u62df\u8fd9\u4e2a\u7279\u6027\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u8def\u5f84\u4e0a\u6302\u8f7d\u591a\u4e2a ws \u670d\u52a1\u5668 (\u4f8b\u5982: @WebSocketGateway({{ '{' }} path: '/users' {{ '}' }}) ). \u4e3a\u4e86\u4f7f\u7528 ws \uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save @nestjs/platform-ws \u5b89\u88c5\u5305\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5207\u6362\u9002\u914d\u5668: const app = await NestFactory . create ( AppModule ); app . useWebSocketAdapter ( new WsAdapter ( app )); info Hint WsAdapter \u662f\u4ece @nestjs/platform-ws \u5bfc\u5165\u7684\u3002 \u9ad8\u7ea7(\u81ea\u5b9a\u4e49\u9002\u914d\u5668) \u00b6 \u51fa\u4e8e\u6f14\u793a\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u624b\u52a8\u96c6\u6210 ws \u5e93\u3002 \u6b63\u5982\u524d\u9762\u63d0\u5230\u7684\uff0c\u8fd9\u4e2a\u5e93\u7684\u9002\u914d\u5668\u5df2\u7ecf\u521b\u5efa\uff0c\u5e76\u4f5c\u4e3a\u4e00\u4e2a WsAdapter \u7c7b\u4ece @nestjs/platform-ws \u5305\u4e2d\u516c\u5f00\u3002 \u4e0b\u9762\u662f\u7b80\u5316\u540e\u7684\u5b9e\u73b0\u53ef\u80fd\u770b\u8d77\u6765\u7684\u6837\u5b50: @ @filename ( ws - adapter ) import * as WebSocket from 'ws' ; import { WebSocketAdapter , INestApplicationContext } from '@nestjs/common' ; import { MessageMappingProperties } from '@nestjs/websockets' ; import { Observable , fromEvent , EMPTY } from 'rxjs' ; import { mergeMap , filter } from 'rxjs/operators' ; export class WsAdapter implements WebSocketAdapter { constructor ( private app : INestApplicationContext ) {} create ( port : number , options : any = {}) : any { return new WebSocket . Server ({ port , ... options }); } bindClientConnect ( server , callback : Function ) { server . on ( 'connection' , callback ); } bindMessageHandlers ( client : WebSocket , handlers : MessageMappingProperties [], process : ( data : any ) => Observable < any > , ) { fromEvent ( client , 'message' ) . pipe ( mergeMap ( data => this . bindMessageHandler ( data , handlers , process )), filter ( result => result ), ) . subscribe ( response => client . send ( JSON . stringify ( response ))); } bindMessageHandler ( buffer , handlers : MessageMappingProperties [], process : ( data : any ) => Observable < any > , ) : Observable < any > { const message = JSON . parse ( buffer . data ); const messageHandler = handlers . find ( handler => handler . message === message . event , ); if ( ! messageHandler ) { return EMPTY ; } return process ( messageHandler . callback ( message . data )); } close ( server ) { server . close (); } } info Hint \u5f53\u4f60\u60f3\u5229\u7528 ws \u5e93\u65f6\uff0c\u4f7f\u7528\u5185\u7f6e\u7684 WsAdapter \u800c\u4e0d\u662f\u81ea\u5df1\u521b\u5efa\u4e00\u4e2a\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 useWebSocketAdapter() \u65b9\u6cd5\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u9002\u914d\u5668: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); app . useWebSocketAdapter ( new WsAdapter ( app )); \u793a\u4f8b \u00b6 \u8fd9\u91cc\u6709\u4e00\u4e2a\u4f7f\u7528 WsAdapter \u7684\u5de5\u4f5c\u793a\u4f8b \u6b64\u5904 .","title":"\u9002\u914d\u5668"},{"location":"websockets/adapter/#_1","text":"WebSockets\u6a21\u5757\u662f\u5e73\u53f0\u65e0\u5173\u7684\uff0c\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 WebSocketAdapter \u63a5\u53e3\u5e26\u6765\u81ea\u5df1\u7684\u5e93(\u751a\u81f3\u662f\u672c\u5730\u5b9e\u73b0)\u3002 \u8be5\u63a5\u53e3\u5f3a\u5236\u5b9e\u73b0\u4ee5\u4e0b\u8868\u4e2d\u63cf\u8ff0\u7684\u51e0\u79cd\u65b9\u6cd5: create \u57fa\u4e8e\u4f20\u9012\u7684\u53c2\u6570\u521b\u5efa\u5957\u63a5\u5b57\u5b9e\u4f8b bindClientConnect \u7ed1\u5b9a\u5ba2\u6237\u7aef\u8fde\u63a5\u4e8b\u4ef6 bindClientDisconnect \u7ed1\u5b9a\u5ba2\u6237\u7aef\u65ad\u5f00\u4e8b\u4ef6(\u53ef\u9009*) bindMessageHandlers \u5c06\u4f20\u5165\u6d88\u606f\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684\u6d88\u606f\u5904\u7406\u7a0b\u5e8f close \u7ec8\u6b62\u670d\u52a1\u5668\u5b9e\u4f8b","title":"\u9002\u914d\u5668"},{"location":"websockets/adapter/#socketio","text":"socket.io \u5305\u88ab\u5305\u88c5\u5728\u4e00\u4e2a IoAdapter \u7c7b\u4e2d\u3002 \u5982\u679c\u60a8\u60f3\u589e\u5f3a\u9002\u914d\u5668\u7684\u57fa\u672c\u529f\u80fd\uff0c\u8be5\u600e\u4e48\u529e\u5462? \u4f8b\u5982\uff0c\u60a8\u7684\u6280\u672f\u9700\u6c42\u8981\u6c42\u80fd\u591f\u8de8web\u670d\u52a1\u7684\u591a\u4e2a\u8d1f\u8f7d\u5e73\u8861\u5b9e\u4f8b\u5e7f\u64ad\u4e8b\u4ef6\u3002 \u4e3a\u6b64\uff0c\u4f60\u53ef\u4ee5\u6269\u5c55 IoAdapter \u5e76\u8986\u76d6\u5355\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8d1f\u8d23\u5b9e\u4f8b\u5316\u65b0\u7684 socket.io \u670d\u52a1\u5668\u3002 \u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b89\u88c5\u6240\u9700\u7684\u5305\u3002 $ npm i --save socket.io-redis \u4e00\u65e6\u5b89\u88c5\u4e86\u5305\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a RedisIoAdapter \u7c7b\u3002 import { IoAdapter } from '@nestjs/platform-socket.io' ; import { RedisClient } from 'redis' ; import { ServerOptions } from 'socket.io' ; import { createAdapter } from 'socket.io-redis' ; const pubClient = new RedisClient ({ host : 'localhost' , port : 6379 }); const subClient = pubClient . duplicate (); const redisAdapter = createAdapter ({ pubClient , subClient }); export class RedisIoAdapter extends IoAdapter { createIOServer ( port : number , options? : ServerOptions ) : any { const server = super . createIOServer ( port , options ); server . adapter ( redisAdapter ); return server ; } } \u4e4b\u540e\uff0c\u53ea\u9700\u5207\u6362\u5230\u65b0\u521b\u5efa\u7684Redis\u9002\u914d\u5668\u3002 const app = await NestFactory . create ( AppModule ); app . useWebSocketAdapter ( new RedisIoAdapter ( app ));","title":"\u6269\u5c55 socket.io"},{"location":"websockets/adapter/#ws","text":"\u53e6\u4e00\u4e2a\u53ef\u7528\u7684\u9002\u914d\u5668\u662f\u201cWsAdapter\u201d\uff0c\u5b83\u5145\u5f53\u6846\u67b6\u4e4b\u95f4\u7684\u4ee3\u7406\uff0c\u96c6\u6210\u4e86\u5feb\u901f\u4e14\u7ecf\u8fc7\u5f7b\u5e95\u6d4b\u8bd5\u7684 ws \u5e93\u3002 \u8fd9\u4e2a\u9002\u914d\u5668\u4e0e\u672c\u5730\u6d4f\u89c8\u5668WebSockets\u5b8c\u5168\u517c\u5bb9\uff0c\u800c\u4e14\u6bd4socket.io\u5305\u5feb\u5f97\u591a\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u7684\u53ef\u7528\u529f\u80fd\u5c11\u5f97\u591a\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u5e76\u4e0d\u9700\u8981\u5b83\u4eec\u3002 info Hint ws \u5e93\u4e0d\u652f\u6301\u540d\u79f0\u7a7a\u95f4(\u7531 socket.io \u666e\u53ca\u7684\u901a\u4fe1\u901a\u9053)\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6a21\u62df\u8fd9\u4e2a\u7279\u6027\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u8def\u5f84\u4e0a\u6302\u8f7d\u591a\u4e2a ws \u670d\u52a1\u5668 (\u4f8b\u5982: @WebSocketGateway({{ '{' }} path: '/users' {{ '}' }}) ). \u4e3a\u4e86\u4f7f\u7528 ws \uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: $ npm i --save @nestjs/platform-ws \u5b89\u88c5\u5305\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5207\u6362\u9002\u914d\u5668: const app = await NestFactory . create ( AppModule ); app . useWebSocketAdapter ( new WsAdapter ( app )); info Hint WsAdapter \u662f\u4ece @nestjs/platform-ws \u5bfc\u5165\u7684\u3002","title":"Ws \u5e93"},{"location":"websockets/adapter/#_2","text":"\u51fa\u4e8e\u6f14\u793a\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u624b\u52a8\u96c6\u6210 ws \u5e93\u3002 \u6b63\u5982\u524d\u9762\u63d0\u5230\u7684\uff0c\u8fd9\u4e2a\u5e93\u7684\u9002\u914d\u5668\u5df2\u7ecf\u521b\u5efa\uff0c\u5e76\u4f5c\u4e3a\u4e00\u4e2a WsAdapter \u7c7b\u4ece @nestjs/platform-ws \u5305\u4e2d\u516c\u5f00\u3002 \u4e0b\u9762\u662f\u7b80\u5316\u540e\u7684\u5b9e\u73b0\u53ef\u80fd\u770b\u8d77\u6765\u7684\u6837\u5b50: @ @filename ( ws - adapter ) import * as WebSocket from 'ws' ; import { WebSocketAdapter , INestApplicationContext } from '@nestjs/common' ; import { MessageMappingProperties } from '@nestjs/websockets' ; import { Observable , fromEvent , EMPTY } from 'rxjs' ; import { mergeMap , filter } from 'rxjs/operators' ; export class WsAdapter implements WebSocketAdapter { constructor ( private app : INestApplicationContext ) {} create ( port : number , options : any = {}) : any { return new WebSocket . Server ({ port , ... options }); } bindClientConnect ( server , callback : Function ) { server . on ( 'connection' , callback ); } bindMessageHandlers ( client : WebSocket , handlers : MessageMappingProperties [], process : ( data : any ) => Observable < any > , ) { fromEvent ( client , 'message' ) . pipe ( mergeMap ( data => this . bindMessageHandler ( data , handlers , process )), filter ( result => result ), ) . subscribe ( response => client . send ( JSON . stringify ( response ))); } bindMessageHandler ( buffer , handlers : MessageMappingProperties [], process : ( data : any ) => Observable < any > , ) : Observable < any > { const message = JSON . parse ( buffer . data ); const messageHandler = handlers . find ( handler => handler . message === message . event , ); if ( ! messageHandler ) { return EMPTY ; } return process ( messageHandler . callback ( message . data )); } close ( server ) { server . close (); } } info Hint \u5f53\u4f60\u60f3\u5229\u7528 ws \u5e93\u65f6\uff0c\u4f7f\u7528\u5185\u7f6e\u7684 WsAdapter \u800c\u4e0d\u662f\u81ea\u5df1\u521b\u5efa\u4e00\u4e2a\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 useWebSocketAdapter() \u65b9\u6cd5\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u9002\u914d\u5668: @ @filename ( main ) const app = await NestFactory . create ( AppModule ); app . useWebSocketAdapter ( new WsAdapter ( app ));","title":"\u9ad8\u7ea7(\u81ea\u5b9a\u4e49\u9002\u914d\u5668)"},{"location":"websockets/adapter/#_3","text":"\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f7f\u7528 WsAdapter \u7684\u5de5\u4f5c\u793a\u4f8b \u6b64\u5904 .","title":"\u793a\u4f8b"},{"location":"websockets/exception-filters/","text":"\u5f02\u5e38\u8fc7\u6ee4\u5668 \u00b6 HTTP \u5f02\u5e38\u8fc7\u6ee4\u5668 \u5c42\u548c\u76f8\u5e94\u7684web\u5957\u63a5\u5b57\u5c42\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 WsException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 throw new WsException ( 'Invalid credentials.' ); info Hint WsException \u7c7b\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0cNest\u5c06\u5904\u7406\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784\u53d1\u51fa exception \u6d88\u606f: { status : 'error' , message : 'Invalid credentials.' } \u8fc7\u6ee4\u5668 \u00b6 Web\u5957\u63a5\u5b57\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u884c\u4e3a\u7b49\u540c\u4e8eHTTP\u5f02\u5e38\u8fc7\u6ee4\u5668\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u624b\u52a8\u5b9e\u4f8b\u5316\u7684method-scoped\u8fc7\u6ee4\u5668\u3002 \u5c31\u50cf\u57fa\u4e8eHTTP\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528gateway-scoped\u7684\u8fc7\u6ee4\u5668(\u4f8b\u5982\uff0c\u5728\u7f51\u5173\u7c7b\u7684\u524d\u7f00\u52a0\u4e0a\u4e00\u4e2a @UseFilters() \u88c5\u9970\u5668)\u3002 @UseFilters ( new WsExceptionFilter ()) @SubscribeMessage ( 'events' ) onEvent ( client , data : any ) : WsResponse < any > { const event = 'events' ; return { event , data }; } \u7ee7\u627f \u00b6 \u901a\u5e38\uff0c\u60a8\u5c06\u521b\u5efa\u5b8c\u5168\u5b9a\u5236\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u6765\u6ee1\u8db3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u7136\u800c\uff0c\u5728\u6709\u4e9b\u7528\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u7b80\u5355\u5730\u6269\u5c55 \u6838\u5fc3\u5f02\u5e38\u8fc7\u6ee4\u5668 \uff0c\u5e76\u57fa\u4e8e\u67d0\u4e9b\u56e0\u7d20\u8986\u76d6\u884c\u4e3a\u3002 \u4e3a\u4e86\u5c06\u5f02\u5e38\u5904\u7406\u59d4\u6258\u7ed9\u57fa\u672c\u8fc7\u6ee4\u5668\uff0c\u4f60\u9700\u8981\u6269\u5c55 BaseWsExceptionFilter \u5e76\u8c03\u7528\u7ee7\u627f\u7684 catch() \u65b9\u6cd5\u3002 @ @filename () import { Catch , ArgumentsHost } from '@nestjs/common' ; import { BaseWsExceptionFilter } from '@nestjs/websockets' ; @Catch () export class AllExceptionsFilter extends BaseWsExceptionFilter { catch ( exception : unknown , host : ArgumentsHost ) { super . catch ( exception , host ); } } @ @switch import { Catch } from '@nestjs/common' ; import { BaseWsExceptionFilter } from '@nestjs/websockets' ; @Catch () export class AllExceptionsFilter extends BaseWsExceptionFilter { catch ( exception , host ) { super . catch ( exception , host ); } } \u4e0a\u9762\u7684\u5b9e\u73b0\u53ea\u662f\u6f14\u793a\u8be5\u65b9\u6cd5\u7684shell\u3002 \u6269\u5c55\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u5b9e\u73b0\u5c06\u5305\u62ec\u5b9a\u5236\u7684 \u4e1a\u52a1\u903b\u8f91 (\u4f8b\u5982\uff0c\u5904\u7406\u5404\u79cd\u6761\u4ef6)\u3002","title":"\u5f02\u5e38\u8fc7\u6ee4"},{"location":"websockets/exception-filters/#_1","text":"HTTP \u5f02\u5e38\u8fc7\u6ee4\u5668 \u5c42\u548c\u76f8\u5e94\u7684web\u5957\u63a5\u5b57\u5c42\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 WsException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 throw new WsException ( 'Invalid credentials.' ); info Hint WsException \u7c7b\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0cNest\u5c06\u5904\u7406\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784\u53d1\u51fa exception \u6d88\u606f: { status : 'error' , message : 'Invalid credentials.' }","title":"\u5f02\u5e38\u8fc7\u6ee4\u5668"},{"location":"websockets/exception-filters/#_2","text":"Web\u5957\u63a5\u5b57\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u884c\u4e3a\u7b49\u540c\u4e8eHTTP\u5f02\u5e38\u8fc7\u6ee4\u5668\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u624b\u52a8\u5b9e\u4f8b\u5316\u7684method-scoped\u8fc7\u6ee4\u5668\u3002 \u5c31\u50cf\u57fa\u4e8eHTTP\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528gateway-scoped\u7684\u8fc7\u6ee4\u5668(\u4f8b\u5982\uff0c\u5728\u7f51\u5173\u7c7b\u7684\u524d\u7f00\u52a0\u4e0a\u4e00\u4e2a @UseFilters() \u88c5\u9970\u5668)\u3002 @UseFilters ( new WsExceptionFilter ()) @SubscribeMessage ( 'events' ) onEvent ( client , data : any ) : WsResponse < any > { const event = 'events' ; return { event , data }; }","title":"\u8fc7\u6ee4\u5668"},{"location":"websockets/exception-filters/#_3","text":"\u901a\u5e38\uff0c\u60a8\u5c06\u521b\u5efa\u5b8c\u5168\u5b9a\u5236\u7684\u5f02\u5e38\u8fc7\u6ee4\u5668\u6765\u6ee1\u8db3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u6c42\u3002 \u7136\u800c\uff0c\u5728\u6709\u4e9b\u7528\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u7b80\u5355\u5730\u6269\u5c55 \u6838\u5fc3\u5f02\u5e38\u8fc7\u6ee4\u5668 \uff0c\u5e76\u57fa\u4e8e\u67d0\u4e9b\u56e0\u7d20\u8986\u76d6\u884c\u4e3a\u3002 \u4e3a\u4e86\u5c06\u5f02\u5e38\u5904\u7406\u59d4\u6258\u7ed9\u57fa\u672c\u8fc7\u6ee4\u5668\uff0c\u4f60\u9700\u8981\u6269\u5c55 BaseWsExceptionFilter \u5e76\u8c03\u7528\u7ee7\u627f\u7684 catch() \u65b9\u6cd5\u3002 @ @filename () import { Catch , ArgumentsHost } from '@nestjs/common' ; import { BaseWsExceptionFilter } from '@nestjs/websockets' ; @Catch () export class AllExceptionsFilter extends BaseWsExceptionFilter { catch ( exception : unknown , host : ArgumentsHost ) { super . catch ( exception , host ); } } @ @switch import { Catch } from '@nestjs/common' ; import { BaseWsExceptionFilter } from '@nestjs/websockets' ; @Catch () export class AllExceptionsFilter extends BaseWsExceptionFilter { catch ( exception , host ) { super . catch ( exception , host ); } } \u4e0a\u9762\u7684\u5b9e\u73b0\u53ea\u662f\u6f14\u793a\u8be5\u65b9\u6cd5\u7684shell\u3002 \u6269\u5c55\u5f02\u5e38\u8fc7\u6ee4\u5668\u7684\u5b9e\u73b0\u5c06\u5305\u62ec\u5b9a\u5236\u7684 \u4e1a\u52a1\u903b\u8f91 (\u4f8b\u5982\uff0c\u5904\u7406\u5404\u79cd\u6761\u4ef6)\u3002","title":"\u7ee7\u627f"},{"location":"websockets/gateways/","text":"\u7f51\u5173 \u00b6 \u672c\u6587\u6863\u4e2d\u8ba8\u8bba\u7684\u5927\u591a\u6570\u6982\u5ff5\uff0c\u5982\u4f9d\u8d56\u6ce8\u5165\u3001\u88c5\u9970\u5668\u3001\u5f02\u5e38\u8fc7\u6ee4\u5668\u3001\u7ba1\u9053\u3001\u5b88\u536b\u548c\u62e6\u622a\u5668\uff0c\u90fd\u540c\u6837\u9002\u7528\u4e8e\u7f51\u5173\u3002 \u53ea\u8981\u6709\u53ef\u80fd\uff0cNest\u4f1a\u62bd\u8c61\u5b9e\u73b0\u7ec6\u8282\uff0c\u8fd9\u6837\u76f8\u540c\u7684\u7ec4\u4ef6\u5c31\u53ef\u4ee5\u5728\u57fa\u4e8ehttp\u7684\u5e73\u53f0\u3001WebSockets\u548cMicroservices\u4e0a\u8fd0\u884c\u3002 \u672c\u8282\u5c06\u4ecb\u7ecdNest\u7279\u6709\u7684WebSockets\u65b9\u9762\u3002 \u5728Nest\u4e2d\uff0c\u7f51\u5173\u53ea\u662f\u4e00\u4e2a\u5e26\u6709 @WebSocketGateway() \u88c5\u9970\u5668\u6ce8\u91ca\u7684\u7c7b\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u7f51\u5173\u662f\u5e73\u53f0\u65e0\u5173\u7684\uff0c\u8fd9\u4f7f\u5f97\u4e00\u65e6\u521b\u5efa\u4e86\u9002\u914d\u5668\uff0c\u7f51\u5173\u5c31\u4e0e\u4efb\u4f55WebSockets\u5e93\u517c\u5bb9\u3002 \u6709\u4e24\u4e2a\u73b0\u6210\u7684WS\u5e73\u53f0\u53d7\u652f\u6301: socket.io \u548c ws \u3002 \u60a8\u53ef\u4ee5\u9009\u62e9\u6700\u9002\u5408\u60a8\u9700\u8981\u7684\u3002 \u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b \u6307\u5357 \u6784\u5efa\u81ea\u5df1\u7684\u9002\u914d\u5668. info Hint \u7f51\u5173\u53ef\u4ee5\u88ab\u89c6\u4e3a providers ; \u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u7c7b\u6784\u9020\u51fd\u6570\u6ce8\u5165\u4f9d\u8d56\u9879\u3002 \u53e6\u5916\uff0c\u7f51\u5173\u4e5f\u53ef\u4ee5\u88ab\u5176\u4ed6\u7c7b(\u63d0\u4f9b\u7a0b\u5e8f\u548c\u63a7\u5236\u5668)\u6ce8\u5165\u3002 \u5b89\u88c5 \u00b6 \u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8ewebsocket\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: @@filename () $ npm i --save @nestjs/websockets @nestjs/platform-socket.io @@switch $ npm i --save @nestjs/websockets @nestjs/platform-socket.io \u6982\u8ff0 \u00b6 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u7f51\u5173\u90fd\u5728\u540c\u4e00\u4e2a\u7aef\u53e3\u4e0a\u76d1\u542c HTTP\u670d\u52a1\u5668 \uff0c\u9664\u975e\u4f60\u7684\u5e94\u7528\u4e0d\u662fweb\u5e94\u7528\uff0c\u6216\u8005\u4f60\u5df2\u7ecf\u624b\u52a8\u66f4\u6539\u4e86\u7aef\u53e3\u3002 \u8fd9\u4e2a\u9ed8\u8ba4\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\u7ed9 @WebSocketGateway(80) \u88c5\u9970\u5668\u6765\u4fee\u6539\uff0c\u5176\u4e2d 80 \u662f\u9009\u5b9a\u7684\u7aef\u53e3\u53f7\u3002 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784\u8bbe\u7f6e\u7f51\u5173\u4f7f\u7528\u7684 namespace : @WebSocketGateway ( 80 , { namespace : 'events' }) warning Warning \u7f51\u5173\u53ea\u6709\u5728\u73b0\u6709\u6a21\u5757\u7684\u63d0\u4f9b\u8005\u6570\u7ec4\u4e2d\u5f15\u7528\u5b83\u4eec\u65f6\u624d\u88ab\u5b9e\u4f8b\u5316\u3002 \u60a8\u53ef\u4ee5\u5c06\u4efb\u4f55\u53d7\u652f\u6301\u7684 \u9009\u9879 \u4f20\u9012\u7ed9\u5957\u63a5\u5b57\u6784\u9020\u51fd\u6570\uff0c\u5e76\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 @WebSocketGateway() \u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @WebSocketGateway ( 81 , { transports : [ 'websocket' ] }) \u7f51\u5173\u73b0\u5728\u6b63\u5728\u6536\u542c\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u6ca1\u6709\u8ba2\u9605\u4efb\u4f55\u4f20\u5165\u7684\u6d88\u606f\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\uff0c\u5b83\u5c06\u8ba2\u9605 events \u6d88\u606f\u5e76\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u6570\u636e\u54cd\u5e94\u7528\u6237\u3002 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( @MessageBody () data : string ) : string { return data ; } @ @switch @Bind ( MessageBody ()) @SubscribeMessage ( 'events' ) handleEvent ( data ) { return data ; } info Hint @SubscribeMessage() \u548c @MessageBody() \u88c5\u9970\u5668\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u5bfc\u5165\u7684. \u4e00\u65e6\u521b\u5efa\u4e86\u7f51\u5173\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6a21\u5757\u4e2d\u6ce8\u518c\u5b83\u3002 import { Module } from '@nestjs/common' ; import { EventsGateway } from './events.gateway' ; @ @filename ( events . module ) @Module ({ providers : [ EventsGateway ] }) export class EventsModule {} \u60a8\u8fd8\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5c5e\u6027\u952e\u4f20\u9012\u7ed9\u88c5\u9970\u5668\uff0c\u4ee5\u4fbf\u4ece\u4f20\u5165\u7684\u6d88\u606f\u4f53\u4e2d\u63d0\u53d6\u5b83 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( @MessageBody ( 'id' ) id : number ) : number { // id === messageBody.id return id ; } @ @switch @Bind ( MessageBody ( 'id' )) @SubscribeMessage ( 'events' ) handleEvent ( id ) { // id === messageBody.id return id ; } \u5982\u679c\u4e0d\u559c\u6b22\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5728\u529f\u80fd\u4e0a\u662f\u7b49\u4ef7\u7684: @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( client : Socket , data : string ) : string { return data ; } @ @switch @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { return data ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c handleEvent() \u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u662f\u5e73\u53f0\u7279\u5b9a\u7684 \u5957\u63a5\u5b57\u5b9e\u4f8b \uff0c\u800c\u7b2c\u4e8c\u4e2a\u662f\u4ece\u5ba2\u6237\u7aef\u63a5\u6536\u7684\u6570\u636e\u3002 \u4f46\u662f\u4e0d\u63a8\u8350\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u6bcf\u4e2a\u5355\u5143\u6d4b\u8bd5\u4e2d\u6a21\u62df socket \u5b9e\u4f8b\u3002 \u4e00\u65e6\u63a5\u6536\u5230 events \u6d88\u606f\uff0c\u5904\u7406\u7a0b\u5e8f\u5c06\u4f7f\u7528\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u7684\u76f8\u540c\u6570\u636e\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e93\u7684\u65b9\u6cd5\u53d1\u51fa\u6d88\u606f\uff0c\u4f8b\u5982\u4f7f\u7528 client.emit() \u65b9\u6cd5\u3002 \u4e3a\u4e86\u8bbf\u95ee\u5df2\u8fde\u63a5\u7684\u5957\u63a5\u5b57\u5b9e\u4f8b\uff0c\u8bf7\u4f7f\u7528 @ConnectedSocket() \u88c5\u9970\u5668\u3002 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( @MessageBody () data : string , @ConnectedSocket () client : Socket , ) : string { return data ; } @ @switch @Bind ( MessageBody (), ConnectedSocket ()) @SubscribeMessage ( 'events' ) handleEvent ( data , client ) { return data ; } info Hint @ConnectedSocket() \u88c5\u9970\u5668\u662f\u4ece @nestjs/websockets \u5305\u5bfc\u5165\u7684\u3002 \u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u65e0\u6cd5\u5229\u7528\u62e6\u622a\u5668\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u54cd\u5e94\u7528\u6237\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u8df3\u8fc7 return \u8bed\u53e5(\u6216\u8005\u663e\u5f0f\u5730\u8fd4\u56de falsy \u503c\uff0c\u4f8b\u5982 undefined )\u3002 \u73b0\u5728\uff0c\u5f53\u5ba2\u6237\u673a\u53d1\u51fa\u5982\u4e0b\u6d88\u606f\u65f6: socket . emit ( 'events' , { name : 'Nest' }); handleEvent() \u65b9\u6cd5\u5c06\u88ab\u6267\u884c\u3002 \u4e3a\u4e86\u76d1\u542c\u4ece\u4e0a\u9762\u7684\u5904\u7406\u7a0b\u5e8f\u4e2d\u53d1\u51fa\u7684\u6d88\u606f\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u9644\u52a0\u4e00\u4e2a\u76f8\u5e94\u7684\u786e\u8ba4\u76d1\u542c\u5668: socket . emit ( 'events' , { name : 'Nest' }, ( data ) => console . log ( data )); \u591a\u4e2a\u54cd\u5e94 \u00b6 \u786e\u8ba4\u53ea\u88ab\u53d1\u9001\u4e00\u6b21\u3002 \u6b64\u5916\uff0c\u539f\u751fWebSockets\u5b9e\u73b0\u4e5f\u4e0d\u652f\u6301\u5b83\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u9650\u5236\uff0c\u4f60\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\u7684\u5bf9\u8c61\u3002 event \u662f\u53d1\u51fa\u4e8b\u4ef6\u7684\u540d\u79f0\uff0c\u4ee5\u53ca\u5fc5\u987b\u8f6c\u53d1\u7ed9\u5ba2\u6237\u7aef\u7684 data \u3002 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( @MessageBody () data : unknown ) : WsResponse < unknown > { const event = 'events' ; return { event , data }; } @ @switch @Bind ( MessageBody ()) @SubscribeMessage ( 'events' ) handleEvent ( data ) { const event = 'events' ; return { event , data }; } info Hint WsResponse \u63a5\u53e3\u662f\u4ece @nestjs/websockets \u5305\u5bfc\u5165\u7684\u3002 warning Warning \u5982\u679c\u4f60\u7684 data \u5b57\u6bb5\u4f9d\u8d56\u4e8e ClassSerializerInterceptor \uff0c\u4f60\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u5b9e\u73b0 WsResponse \u7684\u7c7b\u5b9e\u4f8b\uff0c\u56e0\u4e3a\u5b83\u5ffd\u7565\u4e86\u666e\u901a\u7684JavaScript\u5bf9\u8c61\u54cd\u5e94\u3002 \u4e3a\u4e86\u76d1\u542c\u4f20\u5165\u7684\u54cd\u5e94\uff0c\u5ba2\u6237\u673a\u5fc5\u987b\u5e94\u7528\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u4fa6\u542c\u5668\u3002 socket . on ( 'events' , ( data ) => console . log ( data )); \u5f02\u6b65\u54cd\u5e94 \u00b6 \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u540c\u6b65\u54cd\u5e94\u6216 \u5f02\u6b65\u54cd\u5e94 \u3002 \u56e0\u6b64\uff0c\u652f\u6301 async \u65b9\u6cd5\u3002 \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u503c\u5c06\u4e00\u76f4\u53d1\u51fa\uff0c\u76f4\u5230\u6d41\u5b8c\u6210\u3002 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) onEvent ( @MessageBody () data : unknown ) : Observable < WsResponse < number >> { const event = 'events' ; const response = [ 1 , 2 , 3 ]; return from ( response ). pipe ( map ( data => ({ event , data })), ); } @ @switch @Bind ( MessageBody ()) @SubscribeMessage ( 'events' ) onEvent ( data ) { const event = 'events' ; const response = [ 1 , 2 , 3 ]; return from ( response ). pipe ( map ( data => ({ event , data })), ); } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u5c06\u54cd\u5e94 3\u6b21 (\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u9879)\u3002 \u751f\u547d\u5468\u671f\u7684\u94a9\u5b50 \u00b6 \u67093\u4e2a\u6709\u7528\u7684\u751f\u547d\u5468\u671f\u94a9\u5b50\u53ef\u7528\u3002\u5b83\u4eec\u90fd\u6709\u76f8\u5e94\u7684\u63a5\u53e3\uff0c\u4e0b\u8868\u5bf9\u6b64\u8fdb\u884c\u4e86\u63cf\u8ff0: OnGatewayInit \u5f3a\u5236\u5b9e\u73b0 afterInit() \u65b9\u6cd5\u3002 \u5c06\u7279\u5b9a\u4e8e\u5e93\u7684\u670d\u52a1\u5668\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570(\u5e76\u5728\u9700\u8981\u65f6\u4f20\u64ad\u5176\u4ed6\u53c2\u6570)\u3002 OnGatewayConnection \u5f3a\u5236\u5b9e\u73b0 handleConnection() \u65b9\u6cd5. \u5c06\u7279\u5b9a\u4e8e\u5e93\u7684\u5ba2\u6237\u673a\u5957\u63a5\u5b57\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002 OnGatewayDisconnect \u5f3a\u5236\u5b9e\u73b0 handleDisconnect() \u65b9\u6cd5. \u5c06\u7279\u5b9a\u4e8e\u5e93\u7684\u5ba2\u6237\u673a\u5957\u63a5\u5b57\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002 info Hint \u6bcf\u4e2a\u751f\u547d\u5468\u671f\u63a5\u53e3\u90fd\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u516c\u5f00\u7684\u3002 \u670d\u52a1\u5668 \u00b6 \u6709\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u60f3\u76f4\u63a5\u63a5\u89e6\u672c\u5730\uff0c \u7279\u5b9a\u4e8e\u5e73\u53f0 \u7684\u670d\u52a1\u5668\u5b9e\u4f8b. \u5bf9\u8be5\u5bf9\u8c61\u7684\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 afterInit() \u65b9\u6cd5( OnGatewayInit \u63a5\u53e3)\u3002 \u53e6\u4e00\u4e2a\u9009\u9879\u662f\u4f7f\u7528 @WebSocketServer() \u88c5\u9970\u5668\u3002 @WebSocketServer () server : Server ; warning Notice @WebSocketServer() \u88c5\u9970\u5668\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4e00\u65e6\u670d\u52a1\u5668\u5b9e\u4f8b\u51c6\u5907\u597d\u4f7f\u7528\uff0cNest\u5c06\u81ea\u52a8\u5c06\u5176\u5206\u914d\u7ed9\u8be5\u5c5e\u6027\u3002 \u4f8b\u5b50 \u00b6 \u4e00\u4e2a\u53ef\u7528\u7684\u793a\u4f8b \u5728\u8fd9\u91cc .","title":"\u7f51\u5173"},{"location":"websockets/gateways/#_1","text":"\u672c\u6587\u6863\u4e2d\u8ba8\u8bba\u7684\u5927\u591a\u6570\u6982\u5ff5\uff0c\u5982\u4f9d\u8d56\u6ce8\u5165\u3001\u88c5\u9970\u5668\u3001\u5f02\u5e38\u8fc7\u6ee4\u5668\u3001\u7ba1\u9053\u3001\u5b88\u536b\u548c\u62e6\u622a\u5668\uff0c\u90fd\u540c\u6837\u9002\u7528\u4e8e\u7f51\u5173\u3002 \u53ea\u8981\u6709\u53ef\u80fd\uff0cNest\u4f1a\u62bd\u8c61\u5b9e\u73b0\u7ec6\u8282\uff0c\u8fd9\u6837\u76f8\u540c\u7684\u7ec4\u4ef6\u5c31\u53ef\u4ee5\u5728\u57fa\u4e8ehttp\u7684\u5e73\u53f0\u3001WebSockets\u548cMicroservices\u4e0a\u8fd0\u884c\u3002 \u672c\u8282\u5c06\u4ecb\u7ecdNest\u7279\u6709\u7684WebSockets\u65b9\u9762\u3002 \u5728Nest\u4e2d\uff0c\u7f51\u5173\u53ea\u662f\u4e00\u4e2a\u5e26\u6709 @WebSocketGateway() \u88c5\u9970\u5668\u6ce8\u91ca\u7684\u7c7b\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u7f51\u5173\u662f\u5e73\u53f0\u65e0\u5173\u7684\uff0c\u8fd9\u4f7f\u5f97\u4e00\u65e6\u521b\u5efa\u4e86\u9002\u914d\u5668\uff0c\u7f51\u5173\u5c31\u4e0e\u4efb\u4f55WebSockets\u5e93\u517c\u5bb9\u3002 \u6709\u4e24\u4e2a\u73b0\u6210\u7684WS\u5e73\u53f0\u53d7\u652f\u6301: socket.io \u548c ws \u3002 \u60a8\u53ef\u4ee5\u9009\u62e9\u6700\u9002\u5408\u60a8\u9700\u8981\u7684\u3002 \u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b \u6307\u5357 \u6784\u5efa\u81ea\u5df1\u7684\u9002\u914d\u5668. info Hint \u7f51\u5173\u53ef\u4ee5\u88ab\u89c6\u4e3a providers ; \u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u7c7b\u6784\u9020\u51fd\u6570\u6ce8\u5165\u4f9d\u8d56\u9879\u3002 \u53e6\u5916\uff0c\u7f51\u5173\u4e5f\u53ef\u4ee5\u88ab\u5176\u4ed6\u7c7b(\u63d0\u4f9b\u7a0b\u5e8f\u548c\u63a7\u5236\u5668)\u6ce8\u5165\u3002","title":"\u7f51\u5173"},{"location":"websockets/gateways/#_2","text":"\u8981\u5f00\u59cb\u6784\u5efa\u57fa\u4e8ewebsocket\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u9996\u5148\u8981\u5b89\u88c5\u6240\u9700\u7684\u5305: @@filename () $ npm i --save @nestjs/websockets @nestjs/platform-socket.io @@switch $ npm i --save @nestjs/websockets @nestjs/platform-socket.io","title":"\u5b89\u88c5"},{"location":"websockets/gateways/#_3","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u7f51\u5173\u90fd\u5728\u540c\u4e00\u4e2a\u7aef\u53e3\u4e0a\u76d1\u542c HTTP\u670d\u52a1\u5668 \uff0c\u9664\u975e\u4f60\u7684\u5e94\u7528\u4e0d\u662fweb\u5e94\u7528\uff0c\u6216\u8005\u4f60\u5df2\u7ecf\u624b\u52a8\u66f4\u6539\u4e86\u7aef\u53e3\u3002 \u8fd9\u4e2a\u9ed8\u8ba4\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\u7ed9 @WebSocketGateway(80) \u88c5\u9970\u5668\u6765\u4fee\u6539\uff0c\u5176\u4e2d 80 \u662f\u9009\u5b9a\u7684\u7aef\u53e3\u53f7\u3002 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7ed3\u6784\u8bbe\u7f6e\u7f51\u5173\u4f7f\u7528\u7684 namespace : @WebSocketGateway ( 80 , { namespace : 'events' }) warning Warning \u7f51\u5173\u53ea\u6709\u5728\u73b0\u6709\u6a21\u5757\u7684\u63d0\u4f9b\u8005\u6570\u7ec4\u4e2d\u5f15\u7528\u5b83\u4eec\u65f6\u624d\u88ab\u5b9e\u4f8b\u5316\u3002 \u60a8\u53ef\u4ee5\u5c06\u4efb\u4f55\u53d7\u652f\u6301\u7684 \u9009\u9879 \u4f20\u9012\u7ed9\u5957\u63a5\u5b57\u6784\u9020\u51fd\u6570\uff0c\u5e76\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 @WebSocketGateway() \u88c5\u9970\u5668\uff0c\u5982\u4e0b\u6240\u793a: @WebSocketGateway ( 81 , { transports : [ 'websocket' ] }) \u7f51\u5173\u73b0\u5728\u6b63\u5728\u6536\u542c\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u6ca1\u6709\u8ba2\u9605\u4efb\u4f55\u4f20\u5165\u7684\u6d88\u606f\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\uff0c\u5b83\u5c06\u8ba2\u9605 events \u6d88\u606f\u5e76\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u6570\u636e\u54cd\u5e94\u7528\u6237\u3002 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( @MessageBody () data : string ) : string { return data ; } @ @switch @Bind ( MessageBody ()) @SubscribeMessage ( 'events' ) handleEvent ( data ) { return data ; } info Hint @SubscribeMessage() \u548c @MessageBody() \u88c5\u9970\u5668\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u5bfc\u5165\u7684. \u4e00\u65e6\u521b\u5efa\u4e86\u7f51\u5173\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6a21\u5757\u4e2d\u6ce8\u518c\u5b83\u3002 import { Module } from '@nestjs/common' ; import { EventsGateway } from './events.gateway' ; @ @filename ( events . module ) @Module ({ providers : [ EventsGateway ] }) export class EventsModule {} \u60a8\u8fd8\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5c5e\u6027\u952e\u4f20\u9012\u7ed9\u88c5\u9970\u5668\uff0c\u4ee5\u4fbf\u4ece\u4f20\u5165\u7684\u6d88\u606f\u4f53\u4e2d\u63d0\u53d6\u5b83 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( @MessageBody ( 'id' ) id : number ) : number { // id === messageBody.id return id ; } @ @switch @Bind ( MessageBody ( 'id' )) @SubscribeMessage ( 'events' ) handleEvent ( id ) { // id === messageBody.id return id ; } \u5982\u679c\u4e0d\u559c\u6b22\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5728\u529f\u80fd\u4e0a\u662f\u7b49\u4ef7\u7684: @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( client : Socket , data : string ) : string { return data ; } @ @switch @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { return data ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c handleEvent() \u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u662f\u5e73\u53f0\u7279\u5b9a\u7684 \u5957\u63a5\u5b57\u5b9e\u4f8b \uff0c\u800c\u7b2c\u4e8c\u4e2a\u662f\u4ece\u5ba2\u6237\u7aef\u63a5\u6536\u7684\u6570\u636e\u3002 \u4f46\u662f\u4e0d\u63a8\u8350\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u6bcf\u4e2a\u5355\u5143\u6d4b\u8bd5\u4e2d\u6a21\u62df socket \u5b9e\u4f8b\u3002 \u4e00\u65e6\u63a5\u6536\u5230 events \u6d88\u606f\uff0c\u5904\u7406\u7a0b\u5e8f\u5c06\u4f7f\u7528\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u7684\u76f8\u540c\u6570\u636e\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e93\u7684\u65b9\u6cd5\u53d1\u51fa\u6d88\u606f\uff0c\u4f8b\u5982\u4f7f\u7528 client.emit() \u65b9\u6cd5\u3002 \u4e3a\u4e86\u8bbf\u95ee\u5df2\u8fde\u63a5\u7684\u5957\u63a5\u5b57\u5b9e\u4f8b\uff0c\u8bf7\u4f7f\u7528 @ConnectedSocket() \u88c5\u9970\u5668\u3002 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( @MessageBody () data : string , @ConnectedSocket () client : Socket , ) : string { return data ; } @ @switch @Bind ( MessageBody (), ConnectedSocket ()) @SubscribeMessage ( 'events' ) handleEvent ( data , client ) { return data ; } info Hint @ConnectedSocket() \u88c5\u9970\u5668\u662f\u4ece @nestjs/websockets \u5305\u5bfc\u5165\u7684\u3002 \u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u65e0\u6cd5\u5229\u7528\u62e6\u622a\u5668\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u54cd\u5e94\u7528\u6237\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u8df3\u8fc7 return \u8bed\u53e5(\u6216\u8005\u663e\u5f0f\u5730\u8fd4\u56de falsy \u503c\uff0c\u4f8b\u5982 undefined )\u3002 \u73b0\u5728\uff0c\u5f53\u5ba2\u6237\u673a\u53d1\u51fa\u5982\u4e0b\u6d88\u606f\u65f6: socket . emit ( 'events' , { name : 'Nest' }); handleEvent() \u65b9\u6cd5\u5c06\u88ab\u6267\u884c\u3002 \u4e3a\u4e86\u76d1\u542c\u4ece\u4e0a\u9762\u7684\u5904\u7406\u7a0b\u5e8f\u4e2d\u53d1\u51fa\u7684\u6d88\u606f\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u9644\u52a0\u4e00\u4e2a\u76f8\u5e94\u7684\u786e\u8ba4\u76d1\u542c\u5668: socket . emit ( 'events' , { name : 'Nest' }, ( data ) => console . log ( data ));","title":"\u6982\u8ff0"},{"location":"websockets/gateways/#_4","text":"\u786e\u8ba4\u53ea\u88ab\u53d1\u9001\u4e00\u6b21\u3002 \u6b64\u5916\uff0c\u539f\u751fWebSockets\u5b9e\u73b0\u4e5f\u4e0d\u652f\u6301\u5b83\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u9650\u5236\uff0c\u4f60\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\u7684\u5bf9\u8c61\u3002 event \u662f\u53d1\u51fa\u4e8b\u4ef6\u7684\u540d\u79f0\uff0c\u4ee5\u53ca\u5fc5\u987b\u8f6c\u53d1\u7ed9\u5ba2\u6237\u7aef\u7684 data \u3002 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) handleEvent ( @MessageBody () data : unknown ) : WsResponse < unknown > { const event = 'events' ; return { event , data }; } @ @switch @Bind ( MessageBody ()) @SubscribeMessage ( 'events' ) handleEvent ( data ) { const event = 'events' ; return { event , data }; } info Hint WsResponse \u63a5\u53e3\u662f\u4ece @nestjs/websockets \u5305\u5bfc\u5165\u7684\u3002 warning Warning \u5982\u679c\u4f60\u7684 data \u5b57\u6bb5\u4f9d\u8d56\u4e8e ClassSerializerInterceptor \uff0c\u4f60\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u5b9e\u73b0 WsResponse \u7684\u7c7b\u5b9e\u4f8b\uff0c\u56e0\u4e3a\u5b83\u5ffd\u7565\u4e86\u666e\u901a\u7684JavaScript\u5bf9\u8c61\u54cd\u5e94\u3002 \u4e3a\u4e86\u76d1\u542c\u4f20\u5165\u7684\u54cd\u5e94\uff0c\u5ba2\u6237\u673a\u5fc5\u987b\u5e94\u7528\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u4fa6\u542c\u5668\u3002 socket . on ( 'events' , ( data ) => console . log ( data ));","title":"\u591a\u4e2a\u54cd\u5e94"},{"location":"websockets/gateways/#_5","text":"\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u540c\u6b65\u54cd\u5e94\u6216 \u5f02\u6b65\u54cd\u5e94 \u3002 \u56e0\u6b64\uff0c\u652f\u6301 async \u65b9\u6cd5\u3002 \u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed3\u679c\u503c\u5c06\u4e00\u76f4\u53d1\u51fa\uff0c\u76f4\u5230\u6d41\u5b8c\u6210\u3002 @ @filename ( events . gateway ) @SubscribeMessage ( 'events' ) onEvent ( @MessageBody () data : unknown ) : Observable < WsResponse < number >> { const event = 'events' ; const response = [ 1 , 2 , 3 ]; return from ( response ). pipe ( map ( data => ({ event , data })), ); } @ @switch @Bind ( MessageBody ()) @SubscribeMessage ( 'events' ) onEvent ( data ) { const event = 'events' ; const response = [ 1 , 2 , 3 ]; return from ( response ). pipe ( map ( data => ({ event , data })), ); } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u5c06\u54cd\u5e94 3\u6b21 (\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u9879)\u3002","title":"\u5f02\u6b65\u54cd\u5e94"},{"location":"websockets/gateways/#_6","text":"\u67093\u4e2a\u6709\u7528\u7684\u751f\u547d\u5468\u671f\u94a9\u5b50\u53ef\u7528\u3002\u5b83\u4eec\u90fd\u6709\u76f8\u5e94\u7684\u63a5\u53e3\uff0c\u4e0b\u8868\u5bf9\u6b64\u8fdb\u884c\u4e86\u63cf\u8ff0: OnGatewayInit \u5f3a\u5236\u5b9e\u73b0 afterInit() \u65b9\u6cd5\u3002 \u5c06\u7279\u5b9a\u4e8e\u5e93\u7684\u670d\u52a1\u5668\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570(\u5e76\u5728\u9700\u8981\u65f6\u4f20\u64ad\u5176\u4ed6\u53c2\u6570)\u3002 OnGatewayConnection \u5f3a\u5236\u5b9e\u73b0 handleConnection() \u65b9\u6cd5. \u5c06\u7279\u5b9a\u4e8e\u5e93\u7684\u5ba2\u6237\u673a\u5957\u63a5\u5b57\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002 OnGatewayDisconnect \u5f3a\u5236\u5b9e\u73b0 handleDisconnect() \u65b9\u6cd5. \u5c06\u7279\u5b9a\u4e8e\u5e93\u7684\u5ba2\u6237\u673a\u5957\u63a5\u5b57\u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002 info Hint \u6bcf\u4e2a\u751f\u547d\u5468\u671f\u63a5\u53e3\u90fd\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u516c\u5f00\u7684\u3002","title":"\u751f\u547d\u5468\u671f\u7684\u94a9\u5b50"},{"location":"websockets/gateways/#_7","text":"\u6709\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u60f3\u76f4\u63a5\u63a5\u89e6\u672c\u5730\uff0c \u7279\u5b9a\u4e8e\u5e73\u53f0 \u7684\u670d\u52a1\u5668\u5b9e\u4f8b. \u5bf9\u8be5\u5bf9\u8c61\u7684\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 afterInit() \u65b9\u6cd5( OnGatewayInit \u63a5\u53e3)\u3002 \u53e6\u4e00\u4e2a\u9009\u9879\u662f\u4f7f\u7528 @WebSocketServer() \u88c5\u9970\u5668\u3002 @WebSocketServer () server : Server ; warning Notice @WebSocketServer() \u88c5\u9970\u5668\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u5bfc\u5165\u7684\u3002 \u4e00\u65e6\u670d\u52a1\u5668\u5b9e\u4f8b\u51c6\u5907\u597d\u4f7f\u7528\uff0cNest\u5c06\u81ea\u52a8\u5c06\u5176\u5206\u914d\u7ed9\u8be5\u5c5e\u6027\u3002","title":"\u670d\u52a1\u5668"},{"location":"websockets/gateways/#_8","text":"\u4e00\u4e2a\u53ef\u7528\u7684\u793a\u4f8b \u5728\u8fd9\u91cc .","title":"\u4f8b\u5b50"},{"location":"websockets/guards/","text":"\u5b88\u536b \u00b6 web\u5957\u63a5\u5b57\u4fdd\u62a4\u548c \u5e38\u89c4HTTP\u5e94\u7528\u7a0b\u5e8f\u4fdd\u62a4 \u4e4b\u95f4\u6ca1\u6709\u6839\u672c\u533a\u522b\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 WsException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 info Hint WsException \u7c7b\u4ece @nestjs/websockets \u5305\u4e2d\u516c\u5f00\u3002 \u7ed1\u5b9a\u5b88\u536b \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u65b9\u6cd5\u8303\u56f4\u7684\u4fdd\u62a4\u3002 \u5c31\u50cf\u57fa\u4e8eHTTP\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u5173\u4f5c\u7528\u57df\u7684\u5b88\u536b(\u5373\uff0c\u5728\u7f51\u5173\u7c7b\u524d\u9762\u52a0\u4e0a @UseGuards() \u88c5\u9970\u5668)\u3002 @ @filename () @UseGuards ( AuthGuard ) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : unknown ) : WsResponse < unknown > { const event = 'events' ; return { event , data }; } @ @switch @UseGuards ( AuthGuard ) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { const event = 'events' ; return { event , data }; }","title":"\u5b88\u536b"},{"location":"websockets/guards/#_1","text":"web\u5957\u63a5\u5b57\u4fdd\u62a4\u548c \u5e38\u89c4HTTP\u5e94\u7528\u7a0b\u5e8f\u4fdd\u62a4 \u4e4b\u95f4\u6ca1\u6709\u6839\u672c\u533a\u522b\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 WsException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 info Hint WsException \u7c7b\u4ece @nestjs/websockets \u5305\u4e2d\u516c\u5f00\u3002","title":"\u5b88\u536b"},{"location":"websockets/guards/#_2","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u65b9\u6cd5\u8303\u56f4\u7684\u4fdd\u62a4\u3002 \u5c31\u50cf\u57fa\u4e8eHTTP\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u5173\u4f5c\u7528\u57df\u7684\u5b88\u536b(\u5373\uff0c\u5728\u7f51\u5173\u7c7b\u524d\u9762\u52a0\u4e0a @UseGuards() \u88c5\u9970\u5668)\u3002 @ @filename () @UseGuards ( AuthGuard ) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : unknown ) : WsResponse < unknown > { const event = 'events' ; return { event , data }; } @ @switch @UseGuards ( AuthGuard ) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { const event = 'events' ; return { event , data }; }","title":"\u7ed1\u5b9a\u5b88\u536b"},{"location":"websockets/interceptors/","text":"\u62e6\u622a\u5668 \u00b6 \u5e38\u89c4\u62e6\u622a\u5668 \u548cweb\u5957\u63a5\u5b57\u62e6\u622a\u5668\u4e4b\u95f4\u6ca1\u6709\u533a\u522b\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u624b\u52a8\u5b9e\u4f8b\u5316\u7684method-scoped\u7684\u62e6\u622a\u5668\u3002 \u5c31\u50cf\u57fa\u4e8eHTTP\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u5173\u8303\u56f4\u7684\u62e6\u622a\u5668(\u4f8b\u5982\uff0c\u5728\u7f51\u5173\u7c7b\u7684\u524d\u7f00\u52a0\u4e0a\u4e00\u4e2a @UseInterceptors() \u88c5\u9970\u5668)\u3002 @ @filename () @UseInterceptors ( new TransformInterceptor ()) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : unknown ) : WsResponse < unknown > { const event = 'events' ; return { event , data }; } @ @switch @UseInterceptors ( new TransformInterceptor ()) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { const event = 'events' ; return { event , data }; }","title":"\u62e6\u622a\u5668"},{"location":"websockets/interceptors/#_1","text":"\u5e38\u89c4\u62e6\u622a\u5668 \u548cweb\u5957\u63a5\u5b57\u62e6\u622a\u5668\u4e4b\u95f4\u6ca1\u6709\u533a\u522b\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u624b\u52a8\u5b9e\u4f8b\u5316\u7684method-scoped\u7684\u62e6\u622a\u5668\u3002 \u5c31\u50cf\u57fa\u4e8eHTTP\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u5173\u8303\u56f4\u7684\u62e6\u622a\u5668(\u4f8b\u5982\uff0c\u5728\u7f51\u5173\u7c7b\u7684\u524d\u7f00\u52a0\u4e0a\u4e00\u4e2a @UseInterceptors() \u88c5\u9970\u5668)\u3002 @ @filename () @UseInterceptors ( new TransformInterceptor ()) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : unknown ) : WsResponse < unknown > { const event = 'events' ; return { event , data }; } @ @switch @UseInterceptors ( new TransformInterceptor ()) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { const event = 'events' ; return { event , data }; }","title":"\u62e6\u622a\u5668"},{"location":"websockets/pipes/","text":"\u7ba1\u9053 \u00b6 \u5728 \u5e38\u89c4\u7ba1\u9053 \u548cweb\u5957\u63a5\u5b57\u7ba1\u9053\u4e4b\u95f4\u6ca1\u6709\u6839\u672c\u7684\u533a\u522b\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 WsException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 \u6b64\u5916\uff0c\u6240\u6709\u7ba1\u9053\u5c06\u53ea\u5e94\u7528\u4e8e data \u53c2\u6570(\u56e0\u4e3a\u9a8c\u8bc1\u6216\u8f6c\u6362 client \u5b9e\u4f8b\u662f\u65e0\u7528\u7684)\u3002 info Hint WsException \u7c7b\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u516c\u5f00\u7684\u3002 \u7ed1\u5b9a\u7ba1\u9053 \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e00\u4e2a\u624b\u5de5\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u8303\u56f4\u7684\u7ba1\u9053\u3002 \u5c31\u50cf\u57fa\u4e8eHTTP\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u5173\u4f5c\u7528\u57df\u7684\u7ba1\u9053(\u5373\uff0c\u5728\u7f51\u5173\u7c7b\u524d\u9762\u52a0\u4e0a @UsePipes() \u88c5\u9970\u5668)\u3002 @ @filename () @UsePipes ( new ValidationPipe ()) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : unknown ) : WsResponse < unknown > { const event = 'events' ; return { event , data }; } @ @switch @UsePipes ( new ValidationPipe ()) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { const event = 'events' ; return { event , data }; }","title":"\u7ba1\u9053"},{"location":"websockets/pipes/#_1","text":"\u5728 \u5e38\u89c4\u7ba1\u9053 \u548cweb\u5957\u63a5\u5b57\u7ba1\u9053\u4e4b\u95f4\u6ca1\u6709\u6839\u672c\u7684\u533a\u522b\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 WsException \u800c\u4e0d\u662f\u629b\u51fa HttpException \u3002 \u6b64\u5916\uff0c\u6240\u6709\u7ba1\u9053\u5c06\u53ea\u5e94\u7528\u4e8e data \u53c2\u6570(\u56e0\u4e3a\u9a8c\u8bc1\u6216\u8f6c\u6362 client \u5b9e\u4f8b\u662f\u65e0\u7528\u7684)\u3002 info Hint WsException \u7c7b\u662f\u4ece @nestjs/websockets \u5305\u4e2d\u516c\u5f00\u7684\u3002","title":"\u7ba1\u9053"},{"location":"websockets/pipes/#_2","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u4f7f\u7528\u4e00\u4e2a\u624b\u5de5\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\u8303\u56f4\u7684\u7ba1\u9053\u3002 \u5c31\u50cf\u57fa\u4e8eHTTP\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u5173\u4f5c\u7528\u57df\u7684\u7ba1\u9053(\u5373\uff0c\u5728\u7f51\u5173\u7c7b\u524d\u9762\u52a0\u4e0a @UsePipes() \u88c5\u9970\u5668)\u3002 @ @filename () @UsePipes ( new ValidationPipe ()) @SubscribeMessage ( 'events' ) handleEvent ( client : Client , data : unknown ) : WsResponse < unknown > { const event = 'events' ; return { event , data }; } @ @switch @UsePipes ( new ValidationPipe ()) @SubscribeMessage ( 'events' ) handleEvent ( client , data ) { const event = 'events' ; return { event , data }; }","title":"\u7ed1\u5b9a\u7ba1\u9053"}]}