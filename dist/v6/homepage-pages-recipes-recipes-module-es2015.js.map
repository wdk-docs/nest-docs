{
  "version": 3,
  "sources": [
    "./src/app/homepage/pages/recipes/cqrs/cqrs.component.ts",
    "./src/app/homepage/pages/recipes/cqrs/cqrs.component.html",
    "./src/app/homepage/pages/recipes/crud/crud.component.ts",
    "./src/app/homepage/pages/recipes/crud/crud.component.html",
    "./src/app/homepage/pages/recipes/documentation/documentation.component.ts",
    "./src/app/homepage/pages/recipes/documentation/documentation.component.html",
    "./src/app/homepage/pages/recipes/hot-reload/hot-reload.component.ts",
    "./src/app/homepage/pages/recipes/hot-reload/hot-reload.component.html",
    "./src/app/homepage/pages/recipes/mongodb/mongodb.component.ts",
    "./src/app/homepage/pages/recipes/mongodb/mongodb.component.html",
    "./src/app/homepage/pages/recipes/prisma/prisma.component.ts",
    "./src/app/homepage/pages/recipes/prisma/prisma.component.html",
    "./src/app/homepage/pages/recipes/recipes.module.ts",
    "./src/app/homepage/pages/recipes/serve-static/serve-static.component.ts",
    "./src/app/homepage/pages/recipes/serve-static/serve-static.component.html",
    "./src/app/homepage/pages/recipes/sql-sequelize/sql-sequelize.component.ts",
    "./src/app/homepage/pages/recipes/sql-sequelize/sql-sequelize.component.html",
    "./src/app/homepage/pages/recipes/sql-typeorm/sql-typeorm.component.ts",
    "./src/app/homepage/pages/recipes/sql-typeorm/sql-typeorm.component.html",
    "./src/app/homepage/pages/recipes/swagger/swagger.component.ts",
    "./src/app/homepage/pages/recipes/swagger/swagger.component.html",
    "./src/app/homepage/pages/recipes/terminus/terminus.component.ts",
    "./src/app/homepage/pages/recipes/terminus/terminus.component.html"
  ],
  "names": [],
  "mappings": "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",
  "file": "homepage-pages-recipes-recipes-module-es2015.js",
  "sourcesContent": [
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-cqrs',\n  templateUrl: './cqrs.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CqrsComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/cqrs.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"cqrs\">CQRS</h3>\n<p>The flow of simple <a rel='nofollow' target='_blank' href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD</a> (Create, Read, Update and Delete) applications can be described using the following steps:</p>\n<ol>\n<li>The <strong>controllers</strong> layer handles HTTP requests and delegates tasks to the services layer.</li>\n<li>The <strong>services layer</strong> is where most of the business logic lives.</li>\n<li>Services uses <strong>repositories / DAOs</strong> to change / persist entities.</li>\n<li>Entities act as containers for the values, with setters and getters.</li>\n</ol>\n<p>In most cases, for small and medium-sized applications, this pattern is sufficient. However, when our requirements become more complex, the <strong>CQRS</strong> model may be more appropriate and scalable. To facilitate that model, Nest provides a lightweight <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/cqrs\">CQRS module</a>. This chapter describes how to use it.</p>\n<h4 appAnchor id=\"installation\"><span>Installation</span></h4>\n<p>First install the required package:</p>\n<pre><code class=\"language-bash\">\n$ npm install --save @nestjs/cqrs</code></pre>\n<h4 appAnchor id=\"commands\"><span>Commands</span></h4>\n<p>In this model, each action is called a <strong>Command</strong>. When a command is dispatched, the application reacts to it. Commands can be dispatched from the services layer, or directly from controllers/gateways. Commands are consumed by <strong>Command Handlers</strong>.</p>\n\n<span class=\"filename\">\n  {{ 'heroes-game.service' | extension: app6379e3514852d43c413c0a634462f10c6dec0c22.isJsActive }}\n<app-tabs #app6379e3514852d43c413c0a634462f10c6dec0c22></app-tabs>\n</span><pre [class.hide]=\"app6379e3514852d43c413c0a634462f10c6dec0c22.isJsActive\"><code class=\"language-typescript\">\n@Injectable()\nexport class HeroesGameService &#123;\n  constructor(private readonly commandBus: CommandBus) &#123;&#125;\n\n  async killDragon(heroId: string, killDragonDto: KillDragonDto) &#123;\n    return this.commandBus.execute(\n      new KillDragonCommand(heroId, killDragonDto.dragonId)\n    );\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!app6379e3514852d43c413c0a634462f10c6dec0c22.isJsActive\"><code class=\"language-typescript\">\n@Injectable()\n@Dependencies(CommandBus)\nexport class HeroesGameService &#123;\n  constructor(commandBus) &#123;\n    this.commandBus = commandBus;\n  &#125;\n\n  async killDragon(heroId, killDragonDto) &#123;\n    return this.commandBus.execute(\n      new KillDragonCommand(heroId, killDragonDto.dragonId)\n    );\n  &#125;\n&#125;</code></pre><p>Here&#39;s a sample service that dispatches <code>KillDragonCommand</code>. Let&#39;s see how the command looks:</p>\n\n<span class=\"filename\">\n  {{ 'kill-dragon.command' | extension: appe6a11388b1abbebcdea5b0c8f9bd1113d71b90c3.isJsActive }}\n<app-tabs #appe6a11388b1abbebcdea5b0c8f9bd1113d71b90c3></app-tabs>\n</span><pre [class.hide]=\"appe6a11388b1abbebcdea5b0c8f9bd1113d71b90c3.isJsActive\"><code class=\"language-typescript\">\nexport class KillDragonCommand &#123;\n  constructor(\n    public readonly heroId: string,\n    public readonly dragonId: string,\n  ) &#123;&#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!appe6a11388b1abbebcdea5b0c8f9bd1113d71b90c3.isJsActive\"><code class=\"language-typescript\">\nexport class KillDragonCommand &#123;\n  constructor(heroId, dragonId) &#123;\n    this.heroId = heroId;\n    this.dragonId = dragonId;\n  &#125;\n&#125;</code></pre><p>The <code>CommandBus</code> is a <strong>stream</strong> of commands. It delegates commands to the equivalent handlers. Each command must have a corresponding <strong>Command Handler</strong>:</p>\n\n<span class=\"filename\">\n  {{ 'kill-dragon.handler' | extension: appeb761b4bf3076b44210a8dde510cc95caf6bf8e2.isJsActive }}\n<app-tabs #appeb761b4bf3076b44210a8dde510cc95caf6bf8e2></app-tabs>\n</span><pre [class.hide]=\"appeb761b4bf3076b44210a8dde510cc95caf6bf8e2.isJsActive\"><code class=\"language-typescript\">\n@CommandHandler(KillDragonCommand)\nexport class KillDragonHandler implements ICommandHandler&lt;KillDragonCommand&gt; &#123;\n  constructor(private readonly repository: HeroRepository) &#123;&#125;\n\n  async execute(command: KillDragonCommand) &#123;\n    const &#123; heroId, dragonId &#125; = command;\n    const hero = this.repository.findOneById(+heroId);\n\n    hero.killEnemy(dragonId);\n    await this.repository.persist(hero);\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!appeb761b4bf3076b44210a8dde510cc95caf6bf8e2.isJsActive\"><code class=\"language-typescript\">\n@CommandHandler(KillDragonCommand)\n@Dependencies(HeroRepository)\nexport class KillDragonHandler &#123;\n  constructor(repository) &#123;\n    this.repository = repository;\n  &#125;\n\n  async execute(command) &#123;\n    const &#123; heroId, dragonId &#125; = command;\n    const hero = this.repository.findOneById(+heroId);\n\n    hero.killEnemy(dragonId);\n    await this.repository.persist(hero);\n  &#125;\n&#125;</code></pre><p>With this approach, every application state change is driven by the occurrence of a <strong>Command</strong>. The logic is encapsulated in handlers. With this approach, we can simply add behavior like logging or persisting commands in the database (e.g., for diagnostics purposes).</p>\n<h4 appAnchor id=\"events\"><span>Events</span></h4>\n<p>Command handlers neatly encapsulate logic. While beneficial, the application structure is still not flexible enough, not <strong>reactive</strong>. To remedy this, we also introduce <strong>events</strong>.</p>\n\n<span class=\"filename\">\n  {{ 'hero-killed-dragon.event' | extension: appe64290052e25d9f529c459bb1f69d47e1f256c36.isJsActive }}\n<app-tabs #appe64290052e25d9f529c459bb1f69d47e1f256c36></app-tabs>\n</span><pre [class.hide]=\"appe64290052e25d9f529c459bb1f69d47e1f256c36.isJsActive\"><code class=\"language-typescript\">\nexport class HeroKilledDragonEvent &#123;\n  constructor(\n    public readonly heroId: string,\n    public readonly dragonId: string,\n  ) &#123;&#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!appe64290052e25d9f529c459bb1f69d47e1f256c36.isJsActive\"><code class=\"language-typescript\">\nexport class HeroKilledDragonEvent &#123;\n  constructor(heroId, dragonId) &#123;\n    this.heroId = heroId;\n    this.dragonId = dragonId;\n  &#125;\n&#125;</code></pre><p>Events are asynchronous. They are dispatched either by <strong>models</strong> or directly using <code>EventBus</code>. In order to dispatch events, models have to extend the <code>AggregateRoot</code> class.</p>\n\n<span class=\"filename\">\n  {{ 'hero.model' | extension: app410422a7061c4015f882f8d0c95a431bda322dde.isJsActive }}\n<app-tabs #app410422a7061c4015f882f8d0c95a431bda322dde></app-tabs>\n</span><pre [class.hide]=\"app410422a7061c4015f882f8d0c95a431bda322dde.isJsActive\"><code class=\"language-typescript\">\nexport class Hero extends AggregateRoot &#123;\n  constructor(private readonly id: string) &#123;\n    super();\n  &#125;\n\n  killEnemy(enemyId: string) &#123;\n    // logic\n    this.apply(new HeroKilledDragonEvent(this.id, enemyId));\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!app410422a7061c4015f882f8d0c95a431bda322dde.isJsActive\"><code class=\"language-typescript\">\nexport class Hero extends AggregateRoot &#123;\n  constructor(id) &#123;\n    super();\n    this.id = id;\n  &#125;\n\n  killEnemy(enemyId) &#123;\n    // logic\n    this.apply(new HeroKilledDragonEvent(this.id, enemyId));\n  &#125;\n&#125;</code></pre><p>The <code>apply()</code> method does not dispatch events yet because there&#39;s no relationship between the model and the <code>EventPublisher</code> class. How do we associate the model and the publisher? By using a publisher <code>mergeObjectContext()</code> method inside our command handler.</p>\n\n<span class=\"filename\">\n  {{ 'kill-dragon.handler' | extension: app07ed862eb6c822f37dc1cc6ffe2196c79ca313f8.isJsActive }}\n<app-tabs #app07ed862eb6c822f37dc1cc6ffe2196c79ca313f8></app-tabs>\n</span><pre [class.hide]=\"app07ed862eb6c822f37dc1cc6ffe2196c79ca313f8.isJsActive\"><code class=\"language-typescript\">\n@CommandHandler(KillDragonCommand)\nexport class KillDragonHandler implements ICommandHandler&lt;KillDragonCommand&gt; &#123;\n  constructor(\n    private readonly repository: HeroRepository,\n    private readonly publisher: EventPublisher,\n  ) &#123;&#125;\n\n  async execute(command: KillDragonCommand) &#123;\n    const &#123; heroId, dragonId &#125; = command;\n    const hero = this.publisher.mergeObjectContext(\n      await this.repository.findOneById(+heroId),\n    );\n    hero.killEnemy(dragonId);\n    hero.commit();\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!app07ed862eb6c822f37dc1cc6ffe2196c79ca313f8.isJsActive\"><code class=\"language-typescript\">\n@CommandHandler(KillDragonCommand)\n@Dependencies(HeroRepository, EventPublisher)\nexport class KillDragonHandler &#123;\n  constructor(repository, publisher) &#123;\n    this.repository = repository;\n    this.publisher = publisher;\n  &#125;\n\n  async execute(command) &#123;\n    const &#123; heroId, dragonId &#125; = command;\n    const hero = this.publisher.mergeObjectContext(\n      await this.repository.findOneById(+heroId),\n    );\n    hero.killEnemy(dragonId);\n    hero.commit();\n  &#125;\n&#125;</code></pre><p>Now everything works as expected. Notice that we need to <code>commit()</code> events since they&#39;re not being dispatched immediately. Obviously, an object doesn&#39;t have to exist up front. We can easily merge type context as well:</p>\n<pre><code class=\"language-typescript\">\nconst HeroModel = this.publisher.mergeContext(Hero);\nnew HeroModel(&#39;id&#39;);</code></pre>\n<p>Now the model has the ability to publish events. Additionally, we can emit events manually using <code>EventBus</code>:</p>\n<pre><code class=\"language-typescript\">\nthis.eventBus.publish(new HeroKilledDragonEvent());</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> The <code>EventBus</code> is an injectable class.\n</blockquote>\n<p>Each event can have multiple <strong>Event Handlers</strong>.</p>\n\n<span class=\"filename\">\n  {{ 'hero-killed-dragon.handler' | extension: appa42f47a23aa5b7d261148b3f6f9f7ed102779fb9.isJsActive }}\n<app-tabs #appa42f47a23aa5b7d261148b3f6f9f7ed102779fb9></app-tabs>\n</span><pre><code class=\"language-typescript\">\n@EventsHandler(HeroKilledDragonEvent)\nexport class HeroKilledDragonHandler implements IEventHandler&lt;HeroKilledDragonEvent&gt; &#123;\n  constructor(private readonly repository: HeroRepository) &#123;&#125;\n\n  handle(event: HeroKilledDragonEvent) &#123;\n    // logic\n  &#125;\n&#125;</code></pre><p>Now we can move the <strong>write logic</strong> into the event handlers.</p>\n<h4 appAnchor id=\"sagas\"><span>Sagas</span></h4>\n<p>This type of <strong>Event-Driven Architecture</strong> improves application <strong>reactiveness and scalability</strong>. Now, when we have events, we can simply react to them in various ways. <strong>Sagas</strong> are the final building block from an architectural point of view.</p>\n<p>Sagas are an extremely powerful feature. A single saga may listen for 1..* events. Using the <a rel='nofollow' target='_blank' href=\"https://github.com/ReactiveX/rxjs\">RxJS</a> library, it can combine, merge, filter or apply other <code>RxJS</code> operators on the event stream. Each saga returns an Observable which contains a command. This command is dispatched <strong>asynchronously</strong>.</p>\n\n<span class=\"filename\">\n  {{ 'heroes-game.saga' | extension: app5b793365e757e109bcaf64547159035527a6266d.isJsActive }}\n<app-tabs #app5b793365e757e109bcaf64547159035527a6266d></app-tabs>\n</span><pre [class.hide]=\"app5b793365e757e109bcaf64547159035527a6266d.isJsActive\"><code class=\"language-typescript\">\n@Injectable()\nexport class HeroesGameSagas &#123;\n  @Saga()\n  dragonKilled = (events$: Observable&lt;any&gt;): Observable&lt;ICommand&gt; =&gt; &#123;\n    return events$.pipe(\n      ofType(HeroKilledDragonEvent),\n      map((event) =&gt; new DropAncientItemCommand(event.heroId, fakeItemID)),\n    );\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!app5b793365e757e109bcaf64547159035527a6266d.isJsActive\"><code class=\"language-typescript\">\n@Injectable()\nexport class HeroesGameSagas &#123;\n  @Saga()\n  dragonKilled = (events$) =&gt; &#123;\n    return events$.pipe(\n      ofType(HeroKilledDragonEvent),\n      map((event) =&gt; new DropAncientItemCommand(event.heroId, fakeItemID)),\n    );\n  &#125;\n&#125;</code></pre><blockquote class=\"\ninfo \"><strong>Hint</strong> The <code>ofType</code> operator is exported from the <code>@nestjs/cqrs</code> package.\n</blockquote>\n<p>We declared a rule - when any hero kills the dragon, the ancient item should be dropped. With this in place, <code>DropAncientItemCommand</code> will be dispatched and processed by the appropriate handler.</p>\n<h4 appAnchor id=\"queries\"><span>Queries</span></h4>\n<p>The <code>CqrsModule</code> can also be used for handling queries. The <code>QueryBus</code> follows the same pattern as the <code>CommandsBus</code>. Query handlers should implement the <code>IQueryHandler</code> interface and be marked with the <code>@QueryHandler()</code> decorator.</p>\n<h4 appAnchor id=\"setup\"><span>Setup</span></h4>\n<p>Finally, let&#39;s look at how to set up the whole CQRS mechanism.</p>\n\n<span class=\"filename\">\n  {{ 'heroes-game.module' | extension: app78205e48545e27179d30fb0fcded91a78a25521e.isJsActive }}\n<app-tabs #app78205e48545e27179d30fb0fcded91a78a25521e></app-tabs>\n</span><pre><code class=\"language-typescript\">\nexport const CommandHandlers = [KillDragonHandler, DropAncientItemHandler];\nexport const EventHandlers =  [HeroKilledDragonHandler, HeroFoundItemHandler];\n\n@Module(&#123;\n  imports: [CqrsModule],\n  controllers: [HeroesGameController],\n  providers: [\n    HeroesGameService,\n    HeroesGameSagas,\n    ...CommandHandlers,\n    ...EventHandlers,\n    HeroRepository,\n  ]\n&#125;)\nexport class HeroesGameModule &#123;&#125;</code></pre><h4 appAnchor id=\"summary\"><span>Summary</span></h4>\n<p><code>CommandBus</code>, <code>QueryBus</code> and <code>EventBus</code> are <strong>Observables</strong>. This means that you can easily subscribe to the whole stream and enrich your application with <strong>Event Sourcing</strong>.</p>\n<p>A working example is available <a rel='nofollow' target='_blank' href=\"https://github.com/kamilmysliwiec/nest-cqrs-example\">here</a>.</p>\n\n</div>\n\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-crud',\n  templateUrl: './crud.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CrudComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/crud.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"crud-utilities\">CRUD utilities</h3>\n<blockquote class=\"\nwarning \"><strong>Notice</strong> This chapter applies only to TypeScript.\n</blockquote>\n<h4 appAnchor id=\"overview\"><span>Overview</span></h4>\n<p><a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud\">CRUD</a> is a <strong>community package</strong> (<code>@nestjsx/crud</code>) that helps you create database-centric Create/Read/Update/Delete (CRUD) controllers and services with ease, and provides a rich set of features for your RESTful API out-of-the-box:</p>\n<ul>\n<li>Database agnostic extendable CRUD controller</li>\n<li>Query string parsing with filtering, pagination, sorting, relations, nested relations, cache, etc.</li>\n<li>Framework agnostic package with query builder for frontend usage</li>\n<li>Query, path params and DTO validation</li>\n<li>Overriding controller methods with ease</li>\n<li>Tiny but powerful configuration (including global configuration)</li>\n<li>Additional helper decorators</li>\n<li>Swagger documentation</li>\n</ul>\n<blockquote class=\"\nwarning \"><strong>Notice</strong> Currently <code>@nestjsx/crud</code> only supports <code>TypeORM</code>. Other ORMs like <code>Sequelize</code> and <code>Mongoose</code> will be included in the near future.\n</blockquote>\n<p>In this chapter, you&#39;ll get an overview of how to create CRUD controllers and services using <code>TypeORM</code>. Complete documentation is available at the project&#39;s <a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud/wiki/Home\">wiki</a>. We assume that you have already successfully installed and set up the <code>@nestjs/typeorm</code> package. To learn more, see <a routerLink=\"/techniques/sql\">here</a>.</p>\n<h4 appAnchor id=\"getting-started\"><span>Getting started</span></h4>\n<p>Start by installing all required dependencies:</p>\n<pre><code class=\"language-bash\">\nnpm i --save @nestjsx/crud @nestjsx/crud-typeorm typeorm class-transformer class-validator</code></pre>\n<p>Assuming that you already have some <strong>entities</strong> in your project:</p>\n\n<span class=\"filename\">\n  {{ 'hero.entity' | extension: appdeaa58ba9ea856d96991601c1c1acf7fa3904b34.isJsActive }}\n<app-tabs #appdeaa58ba9ea856d96991601c1c1acf7fa3904b34></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Entity, PrimaryGeneratedColumn, Column &#125; from &#39;typeorm&#39;;\n\n@Entity()\nexport class Hero &#123;\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column(&#123; type: &#39;number&#39; &#125;)\n  power: number;\n&#125;</code></pre><p>The first step is to create a <strong>service</strong>:</p>\n\n<span class=\"filename\">\n  {{ 'heroes.service' | extension: app4b2d757ea05b814c150341ae676cc403217ba7eb.isJsActive }}\n<app-tabs #app4b2d757ea05b814c150341ae676cc403217ba7eb></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Injectable &#125; from &#39;@nestjs/common&#39;;\nimport &#123; InjectRepository &#125; from &#39;@nestjs/typeorm&#39;;\nimport &#123; TypeOrmCrudService &#125; from &#39;@nestjsx/crud-typeorm&#39;;\nimport &#123; Hero &#125; from &#39;./hero.entity&#39;;\n\n@Injectable()\nexport class HeroesService extends TypeOrmCrudService&lt;Hero&gt; &#123;\n  constructor(@InjectRepository(Hero) repo) &#123;\n    super(repo);\n  &#125;\n&#125;</code></pre><p>The next step is to create a <strong>controller</strong>:</p>\n\n<span class=\"filename\">\n  {{ 'heroes.controller' | extension: app4b2cff7647090ff5aa319b360879feee3c88be36.isJsActive }}\n<app-tabs #app4b2cff7647090ff5aa319b360879feee3c88be36></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Controller &#125; from &#39;@nestjs/common&#39;;\nimport &#123; Crud &#125; from &#39;@nestjsx/crud&#39;;\nimport &#123; Hero &#125; from &#39;./hero.entity&#39;;\nimport &#123; HeroesService &#125; from &#39;./heroes.service&#39;;\n\n@Crud(&#123;\n  model: &#123;\n    type: Hero,\n  &#125;,\n&#125;)\n@Controller(&#39;heroes&#39;)\nexport class HeroesController &#123;\n  constructor(public service: HeroesService) &#123;&#125;\n&#125;</code></pre><p>And finally, we need to wire up everything in our <strong>module</strong>:</p>\n\n<span class=\"filename\">\n  {{ 'heroes.module' | extension: appd161c1627e86a8c37f17cc6bd1af63d347fc5207.isJsActive }}\n<app-tabs #appd161c1627e86a8c37f17cc6bd1af63d347fc5207></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; TypeOrmModule &#125; from &#39;@nestjs/typeorm&#39;;\n\nimport &#123; Hero &#125; from &#39;./hero.entity&#39;;\nimport &#123; HeroesService &#125; from &#39;./heroes.service&#39;;\nimport &#123; HeroesController &#125; from &#39;./heroes.controller&#39;;\n\n@Module(&#123;\n  imports: [TypeOrmModule.forFeature([Hero])],\n  providers: [HeroesService],\n  controllers: [HeroesController],\n&#125;)\nexport class HeroesModule &#123;&#125;</code></pre><blockquote class=\"\nwarning \"><strong>Notice</strong> Do not forget to import the <code>HeroesModule</code> into the root <code>ApplicationModule</code>.\n</blockquote>\n<p>At this point, your application will have these newly created endpoints:</p>\n<ul>\n<li><code>GET /heroes</code> - get many heroes.</li>\n<li><code>GET /heroes/:id</code> - get one hero.</li>\n<li><code>POST /heroes/bulk</code> - create many heroes.</li>\n<li><code>POST /heroes</code> - create one hero.</li>\n<li><code>PATCH /heroes/:id</code> - update one hero.</li>\n<li><code>PUT /heroes/:id</code> - replace one hero.</li>\n<li><code>DELETE /heroes/:id</code> - delete one hero.</li>\n</ul>\n<h4 appAnchor id=\"filtering-and-pagination\"><span>Filtering and pagination</span></h4>\n<p><a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud\">CRUD</a> provides rich tools for filtering and pagination. Here&#39;s a sample HTTP REST request:</p>\n<pre><code class=\"language-bash\">\nGET /heroes?select=name&amp;filter=power||gt||90&amp;sort=name,ASC&amp;page=1&amp;limit=3</code></pre>\n<p>In this example, we:</p>\n<ul>\n<li>requested the list of heroes and selected only the <code>name</code> attribute</li>\n<li>filtered the list to include heroes with a <code>power</code> greater than 90</li>\n<li>limited the result set to 3 within page 1</li>\n<li>sorted by <code>name</code> in <code>ASC</code> order</li>\n</ul>\n<p>The response object would look like this:</p>\n<pre><code class=\"language-json\">\n&#123;\n  &quot;data&quot;: [\n    &#123;\n      &quot;id&quot;: 2,\n      &quot;name&quot;: &quot;Batman&quot;\n    &#125;,\n    &#123;\n      &quot;id&quot;: 4,\n      &quot;name&quot;: &quot;Flash&quot;\n    &#125;,\n    &#123;\n      &quot;id&quot;: 3,\n      &quot;name&quot;: &quot;Superman&quot;\n    &#125;\n  ],\n  &quot;count&quot;: 3,\n  &quot;total&quot;: 14,\n  &quot;page&quot;: 1,\n  &quot;pageCount&quot;: 5\n&#125;</code></pre>\n<blockquote class=\"\nwarning \"><strong>Notice</strong> Primary columns persist in the resource response object whether they were requested or not. In our example, this is the <code>id</code> column.\n</blockquote>\n<p>The complete list of query params and filter operators can be found in the project&#39;s <a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud/wiki/Requests\">Wiki</a>.</p>\n<h4 appAnchor id=\"relations\"><span>Relations</span></h4>\n<p><strong>Relations</strong> is another powerful feature. In your CRUD controller, you can specify the list of an entity&#39;s relations which are allowed to fetch within your API calls:</p>\n<pre><code class=\"language-typescript\">\n@Crud(&#123;\n  model: &#123;\n    type: Hero,\n  &#125;,\n  join: &#123;\n    profile: &#123;\n      exclude: [&#39;secret&#39;],\n    &#125;,\n    faction: &#123;\n      eager: true,\n      only: [&#39;name&#39;],\n    &#125;,\n  &#125;,\n&#125;)\n@Controller(&#39;heroes&#39;)\nexport class HeroesController &#123;\n  constructor(public service: HeroesService) &#123;&#125;\n&#125;</code></pre>\n<p>After specifying allowed relations in the <code>@Crud()</code> decorator options, you can make the following request:</p>\n<blockquote class=\"\ninfo \"><strong>Request</strong> GET /heroes/25?<strong>join</strong>=profile||address,bio\n</blockquote>\n<p>The response will contain a hero object with a joined profile which includes the <code>address</code> and <code>bio</code> columns.</p>\n<p>The response will also contain a <code>faction</code> object with the <code>name</code> column selected because it was set to <code>eager: true</code> (and thus persists in every response).</p>\n<p>You can find more information about relations in the project&#39;s <a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud/wiki/Controllers#join\">WiKi</a>.</p>\n<h4 appAnchor id=\"path-params-validation\"><span>Path params validation</span></h4>\n<p>By default, <a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud\">CRUD</a> creates a slug with the name <code>id</code> and validates it as a <code>number</code>. You can modify this behavior if desired. Assume, your entity has a primary column <code>_id</code> - a UUID string - and you need to use it as a slug for your endpoints. This can be done with the following options:</p>\n<pre><code class=\"language-typescript\">\n@Crud(&#123;\n  model: &#123;\n    type: Hero,\n  &#125;,\n  params: &#123;\n    _id: &#123;\n      field: &#39;_id&#39;,\n      type: &#39;uuid&#39;,\n      primary: true,\n    &#125;,\n  &#125;,\n&#125;)\n@Controller(&#39;heroes&#39;)\nexport class HeroesController &#123;\n  constructor(public service: HeroesService) &#123;&#125;\n&#125;</code></pre>\n<p>For more params options please see the project&#39;s <a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud/wiki/Controllers#params\">Wiki</a>.</p>\n<h4 appAnchor id=\"request-body-validation\"><span>Request body validation</span></h4>\n<p>Request body validation is performed out-of-the-box by applying the standard Nest <code>ValidationPipe</code> on each POST, PUT or PATCH request. The <code>model.type</code> from the <code>@Crud()</code> decorator options is used as a DTO that describes validation rules.</p>\n<p>To do that properly we use <a rel='nofollow' target='_blank' href=\"https://github.com/typestack/class-validator#validation-groups\">validation groups</a>:</p>\n\n<span class=\"filename\">\n  {{ 'hero.entity' | extension: appc71fdf9489e94f330cc084c28bb6947b8e1ccb8e.isJsActive }}\n<app-tabs #appc71fdf9489e94f330cc084c28bb6947b8e1ccb8e></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Entity, PrimaryGeneratedColumn, Column &#125; from &#39;typeorm&#39;;\nimport &#123; IsOptional, IsDefined, IsString, IsNumber &#125; from &#39;class-validator&#39;;\nimport &#123; CrudValidationGroups &#125; from &#39;@nestjsx/crud&#39;;\n\nconst &#123; CREATE, UPDATE &#125; = CrudValidationGroups;\n\n@Entity()\nexport class Hero &#123;\n  @IsOptional(&#123; always: true &#125;)\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @IsOptional(&#123; groups: [UPDATE] &#125;)\n  @IsDefined(&#123; groups: [CREATE] &#125;)\n  @IsString(&#123; always: true &#125;)\n  @Column()\n  name: string;\n\n  @IsOptional(&#123; groups: [UPDATE] &#125;)\n  @IsDefined(&#123; groups: [CREATE] &#125;)\n  @IsNumber(&#123;&#125;, &#123; always: true &#125;)\n  @Column(&#123; type: &#39;number&#39; &#125;)\n  power: number;\n&#125;</code></pre><blockquote class=\"\nwarning \"><strong>Notice</strong> Full support of separate DTO classes for <code>create</code> and <code>update</code> actions is one of the main priorities for the next <a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud\">CRUD</a> release.\n</blockquote>\n<h4 appAnchor id=\"routes-options\"><span>Routes options</span></h4>\n<p>You can disable or enable generation of specific routes by passing the <code>routes</code> options property to the <code>@Crud()</code> decorator:</p>\n<pre><code class=\"language-typescript\">\n@Crud(&#123;\n  model: &#123;\n    type: Hero,\n  &#125;,\n  routes: &#123;\n    only: [&#39;getManyBase&#39;],\n    getManyBase: &#123;\n      decorators: [UseGuards(HeroAuthGuard)],\n    &#125;,\n  &#125;,\n&#125;)\n@Controller(&#39;heroes&#39;)\nexport class HeroesController &#123;\n  constructor(public service: HeroesService) &#123;&#125;\n&#125;</code></pre>\n<p>You can apply any method decorators by passing them to the specific route <code>decorators</code> array. This is convenient when you want to add some decorators without overriding base methods.</p>\n<h4 appAnchor id=\"documentation\"><span>Documentation</span></h4>\n<p>The examples in this chapter cover only some of the <a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud\">CRUD</a> features. You can find complete documentation on the project&#39;s <a rel='nofollow' target='_blank' href=\"https://github.com/nestjsx/crud/wiki/Home\">Wiki</a> page.</p>\n\n</div>\n\n",
    "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-documentation',\n  templateUrl: './documentation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DocumentationComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/documentation.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"documentation\">Documentation</h3>\n<p><strong>Compodoc</strong> is a documentation tool for Angular applications. Since Nest and Angular share similar project and code structures, <strong>Compodoc</strong> works with Nest applications as well.</p>\n<h4 appAnchor id=\"setup\"><span>Setup</span></h4>\n<p>Setting up Compodoc inside an existing Nest project is very simple. Start by adding the dev-dependency with the following command in your OS terminal:</p>\n<pre><code class=\"language-bash\">\n$ npm i -D @compodoc/compodoc</code></pre>\n<h4 appAnchor id=\"generation\"><span>Generation</span></h4>\n<p>Generate project documentation using the following command (npm 6 is required for <code>npx</code> support). See <a rel='nofollow' target='_blank' href=\"https://compodoc.app/guides/usage.html\">the official documentation</a> for more options.</p>\n<pre><code class=\"language-bash\">\n$ npx compodoc -p tsconfig.json -s</code></pre>\n<p>Open your browser and navigate to <a rel='nofollow' target='_blank' href=\"http://localhost:8080\">http://localhost:8080</a>. You should see an initial Nest CLI project:</p>\n<figure><img src=\"/assets/documentation-compodoc-1.jpg\" /></figure>\n<figure><img src=\"/assets/documentation-compodoc-2.jpg\" /></figure>\n\n<h4 appAnchor id=\"contribute\"><span>Contribute</span></h4>\n<p>You can participate and contribute to the Compodoc project <a rel='nofollow' target='_blank' href=\"https://github.com/compodoc/compodoc\">here</a>.</p>\n\n</div>\n\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-hot-reload',\n  templateUrl: './hot-reload.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HotReloadComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/hot-reload.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"hot-reload\">Hot Reload</h3>\n<p>The highest impact on your application&#39;s bootstrapping process is <strong>TypeScript compilation</strong>. Fortunately, with <a rel='nofollow' target='_blank' href=\"https://github.com/webpack/webpack\">webpack</a> HMR (Hot-Module Replacement), we don&#39;t need to recompile the entire project each time a change occurs. This significantly decreases the amount of time necessary to instantiate your application, and makes iterative development a lot easier.</p>\n<blockquote class=\"\nwarning \"><strong>Warning</strong> Note that <code>webpack</code> won&#39;t automatically copy your assets (e.g. <code>graphql</code> files) to the <code>dist</code> folder. Similarly, <code>webpack</code> is not compatible with glob static paths (e.g., the <code>entities</code> property in <code>TypeOrmModule</code>).\n</blockquote>\n<h3 id=\"with-cli\">With CLI</h3>\n<p>If you are using the <a rel='nofollow' target='_blank' href=\"https://docs.nestjs.com/cli/overview\">Nest CLI</a>, the configuration process is pretty straightforward. The CLI wraps <code>webpack</code>, which allows use of the <code>HotModuleReplacementPlugin</code>.</p>\n<h4 appAnchor id=\"installation\"><span>Installation</span></h4>\n<p>First install the required packages:</p>\n<pre><code class=\"language-bash\">\n$ npm i --save-dev webpack-node-externals start-server-webpack-plugin</code></pre>\n<h4 appAnchor id=\"configuration\"><span>Configuration</span></h4>\n<p>Once the installation is complete, create a <code>webpack-hmr.config.js</code> file in the root directory of your application.</p>\n<pre><code class=\"language-typescript\">\nconst webpack = require(&#39;webpack&#39;);\nconst nodeExternals = require(&#39;webpack-node-externals&#39;);\nconst StartServerPlugin = require(&#39;start-server-webpack-plugin&#39;);\n\nmodule.exports = function(options) &#123;\n  return &#123;\n    ...options,\n    entry: [&#39;webpack/hot/poll?100&#39;, &#39;./src/main.ts&#39;],\n    watch: true,\n    externals: [\n      nodeExternals(&#123;\n        whitelist: [&#39;webpack/hot/poll?100&#39;],\n      &#125;),\n    ],\n    plugins: [\n      ...options.plugins,\n      new webpack.HotModuleReplacementPlugin(),\n      new webpack.WatchIgnorePlugin([/\\.js$/, /\\.d\\.ts$/]),\n      new StartServerPlugin(&#123; name: &#39;main.js&#39; &#125;),\n    ],\n  &#125;;\n&#125;;</code></pre>\n<p>This function takes the original object containing the default webpack configuration and returns a modified one with an applied <code>HotModuleReplacementPlugin</code> plugin.</p>\n<h4 appAnchor id=\"hot-module-replacement\"><span>Hot-Module Replacement</span></h4>\n<p>To enable <strong>HMR</strong>, open the application entry file (<code>main.ts</code>) and add the following webpack-related instructions:</p>\n<pre><code class=\"language-typescript\">\ndeclare const module: any;\n\nasync function bootstrap() &#123;\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n\n  if (module.hot) &#123;\n    module.hot.accept();\n    module.hot.dispose(() =&gt; app.close());\n  &#125;\n&#125;\nbootstrap();</code></pre>\n<p>To simplify the execution process, add a script to your <code>package.json</code> file.</p>\n<pre><code class=\"language-json\">\n&quot;start:dev&quot;: &quot;nest build --watch --webpack --webpackPath webpack-hmr.config.js&quot;</code></pre>\n<p>Now simply open your command line and run the following command:</p>\n<pre><code class=\"language-bash\">\n$ npm run start:dev</code></pre>\n<h3 id=\"without-cli\">Without CLI</h3>\n<p>If you are not using the <a rel='nofollow' target='_blank' href=\"https://docs.nestjs.com/cli/overview\">Nest CLI</a>, the configuration will be slightly more complex (will require more manual steps).</p>\n<h4 appAnchor id=\"installation-1\"><span>Installation</span></h4>\n<p>First install the required packages:</p>\n<pre><code class=\"language-bash\">\n$ npm i --save-dev webpack webpack-cli webpack-node-externals ts-loader start-server-webpack-plugin</code></pre>\n<h4 appAnchor id=\"configuration-1\"><span>Configuration</span></h4>\n<p>Once the installation is complete, create a <code>webpack.config.js</code> file in the root directory of your application.</p>\n<pre><code class=\"language-typescript\">\nconst webpack = require(&#39;webpack&#39;);\nconst path = require(&#39;path&#39;);\nconst nodeExternals = require(&#39;webpack-node-externals&#39;);\nconst StartServerPlugin = require(&#39;start-server-webpack-plugin&#39;);\n\nmodule.exports = &#123;\n  entry: [&#39;webpack/hot/poll?100&#39;, &#39;./src/main.ts&#39;],\n  watch: true,\n  target: &#39;node&#39;,\n  externals: [\n    nodeExternals(&#123;\n      whitelist: [&#39;webpack/hot/poll?100&#39;],\n    &#125;),\n  ],\n  module: &#123;\n    rules: [\n      &#123;\n        test: /.tsx?$/,\n        use: &#39;ts-loader&#39;,\n        exclude: /node_modules/,\n      &#125;,\n    ],\n  &#125;,\n  mode: &#39;development&#39;,\n  resolve: &#123;\n    extensions: [&#39;.tsx&#39;, &#39;.ts&#39;, &#39;.js&#39;],\n  &#125;,\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new StartServerPlugin(&#123; name: &#39;server.js&#39; &#125;),\n  ],\n  output: &#123;\n    path: path.join(__dirname, &#39;dist&#39;),\n    filename: &#39;server.js&#39;,\n  &#125;,\n&#125;;</code></pre>\n<p>This configuration tells webpack a few essential things about your application: location of the entry file, which directory should be used to hold <strong>compiled</strong> files, and what kind of loader we want to use to compile source files. Generally, you should be able to use this file as-is, even if you don&#39;t fully understand all of the options.</p>\n<h4 appAnchor id=\"hot-module-replacement-1\"><span>Hot-Module Replacement</span></h4>\n<p>To enable <strong>HMR</strong>, open the application entry file (<code>main.ts</code>) and add the following webpack-related instructions:</p>\n<pre><code class=\"language-typescript\">\ndeclare const module: any;\n\nasync function bootstrap() &#123;\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n\n  if (module.hot) &#123;\n    module.hot.accept();\n    module.hot.dispose(() =&gt; app.close());\n  &#125;\n&#125;\nbootstrap();</code></pre>\n<p>To simplify the execution process, add a script to your <code>package.json</code> file.</p>\n<pre><code class=\"language-json\">\n&quot;start:dev&quot;: &quot;webpack --config webpack.config.js&quot;</code></pre>\n<p>Now simply open your command line and run the following command:</p>\n<pre><code class=\"language-bash\">\n$ npm run start:dev</code></pre>\n<p>A working example is available <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/nest/tree/master/sample/08-webpack\">here</a>.</p>\n\n</div>\n\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-mongodb',\n  templateUrl: './mongodb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MongodbComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/mongodb.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"mongodb-mongoose\">MongoDB (Mongoose)</h3>\n<blockquote class=\"\n\"><strong>Warning</strong> In this article, you&#39;ll learn how to create a <code>DatabaseModule</code> based on the <strong>Mongoose</strong> package from scratch using custom components. As a consequence, this solution contains a lot of overhead that you can omit using ready to use and available out-of-the-box dedicated <code>@nestjs/mongoose</code> package. To learn more, see <a routerLink=\"/techniques/mongodb\">here</a>.\n</blockquote>\n<p><a rel='nofollow' target='_blank' href=\"http://mongoosejs.com\">Mongoose</a> is the most popular <a rel='nofollow' target='_blank' href=\"https://www.mongodb.org/\">MongoDB</a> object modeling tool.</p>\n<h4 appAnchor id=\"getting-started\"><span>Getting started</span></h4>\n<p>To start the adventure with this library we have to install all required dependencies:</p>\n\n<span class=\"filename\">\n<app-tabs #app4d37149deaa0a6b42a693e76292fe278b06f58f5></app-tabs>\n</span><pre [class.hide]=\"app4d37149deaa0a6b42a693e76292fe278b06f58f5.isJsActive\"><code class=\"language-typescript\">\n$ npm install --save mongoose\n$ npm install --save-dev @types/mongoose</code></pre>\n<pre [class.hide]=\"!app4d37149deaa0a6b42a693e76292fe278b06f58f5.isJsActive\"><code class=\"language-typescript\">\n$ npm install --save mongoose</code></pre><p>The first step we need to do is to establish the connection with our database using <code>connect()</code> function. The <code>connect()</code> function returns a <code>Promise</code>, and therefore we have to create an <a routerLink=\"/fundamentals/async-components\">async provider</a>.</p>\n\n<span class=\"filename\">\n  {{ 'database.providers' | extension: app3dfc07faac8f137ac900471f754d6c67158a13b4.isJsActive }}\n<app-tabs #app3dfc07faac8f137ac900471f754d6c67158a13b4></app-tabs>\n</span><pre [class.hide]=\"app3dfc07faac8f137ac900471f754d6c67158a13b4.isJsActive\"><code class=\"language-typescript\">\nimport * as mongoose from &#39;mongoose&#39;;\n\nexport const databaseProviders = [\n  &#123;\n    provide: &#39;DATABASE_CONNECTION&#39;,\n    useFactory: (): Promise&lt;typeof mongoose&gt; =&gt;\n      mongoose.connect(&#39;mongodb://localhost/nest&#39;),\n  &#125;,\n];</code></pre>\n<pre [class.hide]=\"!app3dfc07faac8f137ac900471f754d6c67158a13b4.isJsActive\"><code class=\"language-typescript\">\nimport * as mongoose from &#39;mongoose&#39;;\n\nexport const databaseProviders = [\n  &#123;\n    provide: &#39;DATABASE_CONNECTION&#39;,\n    useFactory: () =&gt; mongoose.connect(&#39;mongodb://localhost/nest&#39;),\n  &#125;,\n];</code></pre><blockquote class=\"\ninfo \"><strong>Hint</strong> Following best practices, we declared the custom provider in the separated file which has a <code>*.providers.ts</code> suffix.\n</blockquote>\n<p>Then, we need to export these providers to make them <strong>accessible</strong> for the rest part of the application.</p>\n\n<span class=\"filename\">\n  {{ 'database.module' | extension: app6d74c25a66154f33a13c77930f994a8f52908837.isJsActive }}\n<app-tabs #app6d74c25a66154f33a13c77930f994a8f52908837></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; databaseProviders &#125; from &#39;./database.providers&#39;;\n\n@Module(&#123;\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n&#125;)\nexport class DatabaseModule &#123;&#125;</code></pre><p>Now we can inject the <code>Connection</code> object using <code>@Inject()</code> decorator. Each class that would depend on the <code>Connection</code> async provider will wait until a <code>Promise</code> is resolved.</p>\n<h4 appAnchor id=\"model-injection\"><span>Model injection</span></h4>\n<p>With Mongoose, everything is derived from a <a rel='nofollow' target='_blank' href=\"http://mongoosejs.com/docs/guide.html\">Schema</a>. Let&#39;s define the <code>CatSchema</code>:</p>\n\n<span class=\"filename\">\n  {{ 'schemas/cat.schema' | extension: appd480a93c8965756ae3c9975a66bde50d3d72fd01.isJsActive }}\n<app-tabs #appd480a93c8965756ae3c9975a66bde50d3d72fd01></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport * as mongoose from &#39;mongoose&#39;;\n\nexport const CatSchema = new mongoose.Schema(&#123;\n  name: String,\n  age: Number,\n  breed: String,\n&#125;);</code></pre><p>The <code>CatsSchema</code> belongs to the <code>cats</code> directory. This directory represents the <code>CatsModule</code>.</p>\n<p>Now it&#39;s time to create a <strong>Model</strong> provider:</p>\n\n<span class=\"filename\">\n  {{ 'cats.providers' | extension: appf7375d018349b7f6c1a065419f08ec0ee2e92108.isJsActive }}\n<app-tabs #appf7375d018349b7f6c1a065419f08ec0ee2e92108></app-tabs>\n</span><pre [class.hide]=\"appf7375d018349b7f6c1a065419f08ec0ee2e92108.isJsActive\"><code class=\"language-typescript\">\nimport &#123; Connection &#125; from &#39;mongoose&#39;;\nimport &#123; CatSchema &#125; from &#39;./schemas/cat.schema&#39;;\n\nexport const catsProviders = [\n  &#123;\n    provide: &#39;CAT_MODEL&#39;,\n    useFactory: (connection: Connection) =&gt; connection.model(&#39;Cat&#39;, CatSchema),\n    inject: [&#39;DATABASE_CONNECTION&#39;],\n  &#125;,\n];</code></pre>\n<pre [class.hide]=\"!appf7375d018349b7f6c1a065419f08ec0ee2e92108.isJsActive\"><code class=\"language-typescript\">\nimport &#123; CatSchema &#125; from &#39;./schemas/cat.schema&#39;;\n\nexport const catsProviders = [\n  &#123;\n    provide: &#39;CAT_MODEL&#39;,\n    useFactory: (connection) =&gt; connection.model(&#39;Cat&#39;, CatSchema),\n    inject: [&#39;DATABASE_CONNECTION&#39;],\n  &#125;,\n];</code></pre><blockquote class=\"\n\"><strong>Notice</strong> In the real-world applications you should avoid <strong>magic strings</strong>. Both <code>CAT_MODEL</code> and <code>DATABASE_CONNECTION</code> should be kept in the separated <code>constants.ts</code> file.\n</blockquote>\n<p>Now we can inject the <code>CAT_MODEL</code> to the <code>CatsService</code> using the <code>@Inject()</code> decorator:</p>\n\n<span class=\"filename\">\n  {{ 'cats.service' | extension: app2a3643ad0ff2b7de870d462e925d45cdfb882891.isJsActive }}\n<app-tabs #app2a3643ad0ff2b7de870d462e925d45cdfb882891></app-tabs>\n</span><pre [class.hide]=\"app2a3643ad0ff2b7de870d462e925d45cdfb882891.isJsActive\"><code class=\"language-typescript\">\nimport &#123; Model &#125; from &#39;mongoose&#39;;\nimport &#123; Injectable, Inject &#125; from &#39;@nestjs/common&#39;;\nimport &#123; Cat &#125; from &#39;./interfaces/cat.interface&#39;;\nimport &#123; CreateCatDto &#125; from &#39;./dto/create-cat.dto&#39;;\n\n@Injectable()\nexport class CatsService &#123;\n  constructor(\n    @Inject(&#39;CAT_MODEL&#39;)\n    private readonly catModel: Model&lt;Cat&gt;,\n  ) &#123;&#125;\n\n  async create(createCatDto: CreateCatDto): Promise&lt;Cat&gt; &#123;\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  &#125;\n\n  async findAll(): Promise&lt;Cat[]&gt; &#123;\n    return this.catModel.find().exec();\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!app2a3643ad0ff2b7de870d462e925d45cdfb882891.isJsActive\"><code class=\"language-typescript\">\nimport &#123; Injectable, Dependencies &#125; from &#39;@nestjs/common&#39;;\n\n@Injectable()\n@Dependencies(&#39;CAT_MODEL&#39;)\nexport class CatsService &#123;\n  constructor(catModel) &#123;\n    this.catModel = catModel;\n  &#125;\n\n  async create(createCatDto) &#123;\n    const createdCat = new this.catModel(createCatDto);\n    return createdCat.save();\n  &#125;\n\n  async findAll() &#123;\n    return this.catModel.find().exec();\n  &#125;\n&#125;</code></pre><p>In the above example we have used the <code>Cat</code> interface. This interface extends the <code>Document</code> from the mongoose package:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Document &#125; from &#39;mongoose&#39;;\n\nexport interface Cat extends Document &#123;\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n&#125;</code></pre>\n<p>The database connection is <strong>asynchronous</strong>, but Nest makes this process completely invisible for the end-user. The <code>CatModel</code> class is waiting for the db connection, and the <code>CatsService</code> is delayed until model is ready to use. The entire application can start when each class is instantiated.</p>\n<p>Here is a final <code>CatsModule</code>:</p>\n\n<span class=\"filename\">\n  {{ 'cats.module' | extension: appc095cdb746d4ff99cba3ed5e4eb6cb4316fd426e.isJsActive }}\n<app-tabs #appc095cdb746d4ff99cba3ed5e4eb6cb4316fd426e></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; CatsController &#125; from &#39;./cats.controller&#39;;\nimport &#123; CatsService &#125; from &#39;./cats.service&#39;;\nimport &#123; catsProviders &#125; from &#39;./cats.providers&#39;;\nimport &#123; DatabaseModule &#125; from &#39;../database/database.module&#39;;\n\n@Module(&#123;\n  imports: [DatabaseModule],\n  controllers: [CatsController],\n  providers: [\n    CatsService,\n    ...catsProviders,\n  ],\n&#125;)\nexport class CatsModule &#123;&#125;</code></pre><blockquote class=\"\nwarning \"><strong>Hint</strong> Do not forget to import the <code>CatsModule</code> into the root <code>ApplicationModule</code>.\n</blockquote>\n\n</div>\n\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-prisma',\n  templateUrl: './prisma.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PrismaComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/prisma.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"prisma\">Prisma</h3>\n<p><a rel='nofollow' target='_blank' href=\"https://www.prisma.io/\">Prisma</a> turns your database into a GraphQL API and enables the use of GraphQL as a universal query language for all databases. Instead of writing SQL or using a NoSQL API, you can query your database with GraphQL. In this chapter we won&#39;t go into details about Prisma, so head over to their website and have a look what <a rel='nofollow' target='_blank' href=\"https://www.prisma.io/features/\">features</a> are available.</p>\n<blockquote class=\"\nwarning \"><strong>Notice</strong> In this article, you&#39;ll learn how to integrate <code>Prisma</code> into the Nest framework. We assume that you are already familiar with the GraphQL concepts and the <code>@nestjs/graphql</code> module.\n</blockquote>\n<h4 appAnchor id=\"dependencies\"><span>Dependencies</span></h4>\n<p>Firstly, we need to install the required packages:</p>\n<pre><code class=\"language-bash\">\n$ npm install --save prisma-binding</code></pre>\n<h4 appAnchor id=\"setup-prisma\"><span>Setup Prisma</span></h4>\n<p>While working with Prisma you can either host your own instance or use the <a rel='nofollow' target='_blank' href=\"https://www.prisma.io/cloud/\">Prisma Cloud</a>. In this introduction we are going to use the demo server provided by Prisma.</p>\n<ol>\n<li>Install the Prisma CLI <code>npm install -g prisma</code></li>\n<li>Create a new service <code>prisma init</code>, choose the demo server and follow the instructions</li>\n<li>Deploy your service <code>prisma deploy</code></li>\n</ol>\n<p>If you find yourself in trouble jump over to their <a rel='nofollow' target='_blank' href=\"https://www.prisma.io/docs/quickstart/\">Quick Start</a> section for further details. Eventually you should see two new files in your project directory, <code>prisma.yaml</code> configuration file:</p>\n<pre><code class=\"language-yaml\">\nendpoint: https://us1.prisma.sh/nest-f6ec12/prisma/dev\ndatamodel: datamodel.graphql</code></pre>\n<p>and automatically created data model, <code>datamodel.graphql</code>.</p>\n<pre><code class=\"language-graphql\">\ntype User &#123;\n  id: ID! @unique\n  name: String!\n&#125;</code></pre>\n<blockquote class=\"\nwarning \"><strong>Notice</strong> In the real-world applications you will create more complex data models. For more information about data modeling in Prisma click <a rel='nofollow' target='_blank' href=\"https://www.prisma.io/features/data-modeling/\">here</a>.\n</blockquote>\n<p>By typing <code>prisma playground</code> you can open the Prisma GraphQL playground.</p>\n<h4 appAnchor id=\"create-the-client\"><span>Create the client</span></h4>\n<p>There are a couple of ways to integrate a GraphQL API. We are going to use <a rel='nofollow' target='_blank' href=\"https://www.npmjs.com/package/graphql-cli\">GraphQL CLI</a>, a command line tool for common GraphQL development workflows. To install the GraphQL CLI use the following command:</p>\n<pre><code class=\"language-bash\">\n$ npm install -g graphql-cli</code></pre>\n<p>Next, create your <code>.graphqlconfig</code> in the root directory of the your Nest application:</p>\n<pre><code class=\"language-bash\">\n$ touch .graphqlconfig.yml</code></pre>\n<p>Put the following content into it:</p>\n<pre><code class=\"language-yaml\">\nprojects:\n  database:\n    schemaPath: src/prisma/prisma-types.graphql\n    extensions:\n      endpoints:\n        default: https://us1.prisma.sh/nest-f6ec12/prisma/dev\n      codegen:\n        - generator: prisma-binding\n          language: typescript\n          output:\n            binding: src/prisma/prisma.binding.ts</code></pre>\n<p>To download your Prisma GraphQL schema to <code>prisma/prisma-types.graphql</code> and create your Prisma client under <code>prisma/prisma.binding.graphql</code>, run the following commands in your terminal:</p>\n<pre><code class=\"language-bash\">\n$ graphql get-schema --project database\n$ graphql codegen --project database</code></pre>\n<h4 appAnchor id=\"integration\"><span>Integration</span></h4>\n<p>Almost done. Now, let&#39;s create a module for our Prisma integration.</p>\n\n<span class=\"filename\">\n  {{ 'prisma.service' | extension: app7df270afba2a475f0298af801d3f1f05c4a75083.isJsActive }}\n<app-tabs #app7df270afba2a475f0298af801d3f1f05c4a75083></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Injectable &#125; from &#39;@nestjs/common&#39;;\nimport &#123; Prisma &#125; from &#39;./prisma.binding&#39;;\n\n@Injectable()\nexport class PrismaService extends Prisma &#123;\n  constructor() &#123;\n    super(&#123;\n      endpoint: &#39;https://us1.prisma.sh/nest-f6ec12/prisma/dev&#39;,\n      debug: false,\n    &#125;);\n  &#125;\n&#125;</code></pre><p>Once <code>PrismaService</code> is ready, we need to create a corresponding module.</p>\n\n<span class=\"filename\">\n  {{ 'prisma.module' | extension: appdb8e2d7c357ba4f1df852f262f2f0d13706f2b6f.isJsActive }}\n<app-tabs #appdb8e2d7c357ba4f1df852f262f2f0d13706f2b6f></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; PrismaService &#125; from &#39;./prisma.service&#39;;\n\n@Module(&#123;\n  providers: [PrismaService],\n  exports: [PrismaService],\n&#125;)\nexport class PrismaModule &#123;&#125;</code></pre><blockquote class=\"\ninfo \"><strong>Hint</strong> To create new modules and services in no time we can make use of the <a routerLink=\"/cli/overview\">Nest CLI</a>. To create a <code>PrismaModule</code> type <code>nest g module prisma</code> and for the service <code>nest g service prisma</code>\n</blockquote>\n<h4 appAnchor id=\"usage\"><span>Usage</span></h4>\n<p>To use your new service we are going to import the <code>PrismaModule</code> and inject the <code>PrismaService</code> into <code>UsersResolver</code>.</p>\n\n<span class=\"filename\">\n  {{ 'users.module' | extension: appef26848d71854a61e38026effc0559f37e849522.isJsActive }}\n<app-tabs #appef26848d71854a61e38026effc0559f37e849522></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; UsersResolver &#125; from &#39;./users.resolver&#39;;\nimport &#123; PrismaModule &#125; from &#39;../prisma/prisma.module&#39;;\n\n@Module(&#123;\n  imports: [PrismaModule],\n  providers: [UsersResolver],\n&#125;)\nexport class UsersModule &#123;&#125;</code></pre><p>Importing <code>PrismaModule</code> makes exported <code>PrismaService</code> available in the <code>UsersModule</code> context.</p>\n\n<span class=\"filename\">\n  {{ 'users.resolver' | extension: appca2231f0e9d5376b1b9f3e4aa3db809301d92eba.isJsActive }}\n<app-tabs #appca2231f0e9d5376b1b9f3e4aa3db809301d92eba></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Query, Resolver, Args, Info &#125; from &#39;@nestjs/graphql&#39;;\nimport &#123; PrismaService &#125; from &#39;../prisma/prisma.service&#39;;\nimport &#123; User &#125; from &#39;../graphql.schema&#39;;\n\n@Resolver()\nexport class UsersResolver &#123;\n  constructor(private readonly prisma: PrismaService) &#123;&#125;\n\n  @Query(&#39;users&#39;)\n  async getUsers(@Args() args, @Info() info): Promise&lt;User[]&gt; &#123;\n    return this.prisma.query.users(args, info);\n  &#125;\n&#125;</code></pre><h4 appAnchor id=\"example\"><span>Example</span></h4>\n<p>A slightly modified example is available <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/nest/tree/master/sample/22-graphql-prisma\">here</a>.</p>\n\n</div>\n\n",
    "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { CqrsComponent } from './cqrs/cqrs.component';\nimport { CrudComponent } from './crud/crud.component';\nimport { DocumentationComponent } from './documentation/documentation.component';\nimport { HotReloadComponent } from './hot-reload/hot-reload.component';\nimport { MongodbComponent } from './mongodb/mongodb.component';\nimport { PrismaComponent } from './prisma/prisma.component';\nimport { ServeStaticComponent } from './serve-static/serve-static.component';\nimport { SqlSequelizeComponent } from './sql-sequelize/sql-sequelize.component';\nimport { SqlTypeormComponent } from './sql-typeorm/sql-typeorm.component';\nimport { SwaggerComponent } from './swagger/swagger.component';\nimport { TerminusComponent } from './terminus/terminus.component';\n\nconst routes: Routes = [\n  {\n    path: 'sql-typeorm',\n    component: SqlTypeormComponent,\n    data: { title: 'SQL (TypeORM)' },\n  },\n  {\n    path: 'mongodb',\n    component: MongodbComponent,\n    data: { title: 'MongoDB (Mongoose)' },\n  },\n  {\n    path: 'sql-sequelize',\n    component: SqlSequelizeComponent,\n    data: { title: 'SQL (Sequelize)' },\n  },\n  {\n    path: 'cqrs',\n    component: CqrsComponent,\n    data: { title: 'CQRS' },\n  },\n  {\n    path: 'swagger',\n    component: SwaggerComponent,\n    data: { title: 'OpenAPI (Swagger)' },\n  },\n  {\n    path: 'prisma',\n    component: PrismaComponent,\n    data: { title: 'Prisma' },\n  },\n  {\n    path: 'terminus',\n    component: TerminusComponent,\n    data: { title: 'Health checks (Terminus)' },\n  },\n  {\n    path: 'documentation',\n    component: DocumentationComponent,\n    data: { title: 'Documentation (Compodoc)' },\n  },\n  {\n    path: 'crud-utilities',\n    redirectTo: '/controllers',\n  },\n  {\n    path: 'crud',\n    redirectTo: '/controllers',\n  },\n  {\n    path: 'hot-reload',\n    component: HotReloadComponent,\n    data: { title: 'Hot reload' },\n  },\n  {\n    path: 'serve-static',\n    component: ServeStaticComponent,\n    data: { title: 'Serve Static' },\n  },\n];\n\n@NgModule({\n  imports: [CommonModule, SharedModule, RouterModule.forChild(routes)],\n  declarations: [\n    SqlTypeormComponent,\n    SqlSequelizeComponent,\n    MongodbComponent,\n    SwaggerComponent,\n    PrismaComponent,\n    CqrsComponent,\n    HotReloadComponent,\n    TerminusComponent,\n    DocumentationComponent,\n    CrudComponent,\n    ServeStaticComponent,\n  ],\n})\nexport class RecipesModule {}\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-serve-static',\n  templateUrl: './serve-static.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ServeStaticComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/serve-static.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"serve-static\">Serve Static</h3>\n<p>In order to serve static content like a Single Page Application (SPA) we can use the <code>ServeStaticModule</code> from the <code>@nestjs/serve-static</code> package.</p>\n<h4 appAnchor id=\"installation\"><span>Installation</span></h4>\n<p>First we need to install the required package:</p>\n<pre><code class=\"language-bash\">\n$ npm install --save @nestjs/serve-static</code></pre>\n<h4 appAnchor id=\"bootstrap\"><span>Bootstrap</span></h4>\n<p>Once the installation process is done, we can import the <code>ServeStaticModule</code> into the root <code>AppModule</code> and configure it by passing in a configuration object to the <code>forRoot()</code> method.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; AppController &#125; from &#39;./app.controller&#39;;\nimport &#123; AppService &#125; from &#39;./app.service&#39;;\nimport &#123; ServeStaticModule &#125; from &#39;@nestjs/serve-static&#39;;\nimport &#123; join &#125; from &#39;path&#39;;\n\n@Module(&#123;\n  imports: [\n    ServeStaticModule.forRoot(&#123;\n      rootPath: join(__dirname, &#39;..&#39;, &#39;client&#39;),\n    &#125;),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n&#125;)\nexport class AppModule &#123;&#125;</code></pre>\n<p>With this in place, build the static website and place its content in the location specified by the <code>rootPath</code> property.</p>\n<h4 appAnchor id=\"summary\"><span>Summary</span></h4>\n<p>A working example is available <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/nest/tree/master/sample/24-serve-static\">here</a>.</p>\n\n</div>\n\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-sql-sequelize',\n  templateUrl: './sql-sequelize.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SqlSequelizeComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/sql-sequelize.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"sql-sequelize\">SQL (Sequelize)</h3>\n<h5 id=\"this-chapter-applies-only-to-typescript\">This chapter applies only to TypeScript</h5>\n<p><a rel='nofollow' target='_blank' href=\"https://github.com/sequelize/sequelize\">Sequelize</a> is a popular Object Relational Mapper (ORM) written in a vanilla JavaScript, but there is a <a rel='nofollow' target='_blank' href=\"https://github.com/RobinBuschmann/sequelize-typescript\">sequelize-typescript</a> TypeScript wrapper which provides a set of decorators and other extras for the base sequelize.</p>\n<h4 appAnchor id=\"getting-started\"><span>Getting started</span></h4>\n<p>To start the adventure with this library we have to install the following dependencies:</p>\n<pre><code class=\"language-bash\">\n$ npm install --save sequelize sequelize-typescript mysql2\n$ npm install --save-dev @types/sequelize</code></pre>\n<p>The first step we need to do is create a <strong>Sequelize</strong> instance with an options object passed into the constructor. Also, we need to add all models (the alternative is to use <code>modelPaths</code> property) and <code>sync()</code> our database tables.</p>\n\n<span class=\"filename\">\n  {{ 'database.providers' | extension: appfe13b18ee73ec8d18767aa3f83e878f9a7d73c36.isJsActive }}\n<app-tabs #appfe13b18ee73ec8d18767aa3f83e878f9a7d73c36></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Sequelize &#125; from &#39;sequelize-typescript&#39;;\nimport &#123; Cat &#125; from &#39;../cats/cat.entity&#39;;\n\nexport const databaseProviders = [\n  &#123;\n    provide: &#39;SEQUELIZE&#39;,\n    useFactory: async () =&gt; &#123;\n      const sequelize = new Sequelize(&#123;\n        dialect: &#39;mysql&#39;,\n        host: &#39;localhost&#39;,\n        port: 3306,\n        username: &#39;root&#39;,\n        password: &#39;password&#39;,\n        database: &#39;nest&#39;,\n      &#125;);\n      sequelize.addModels([Cat]);\n      await sequelize.sync();\n      return sequelize;\n    &#125;,\n  &#125;,\n];</code></pre><blockquote class=\"\nwarning \"><strong>Hint</strong> Following best practices, we declared the custom provider in the separated file which has a <code>*.providers.ts</code> suffix.\n</blockquote>\n<p>Then, we need to export these providers to make them <strong>accessible</strong> for the rest part of the application.</p>\n<pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; databaseProviders &#125; from &#39;./database.providers&#39;;\n\n@Module(&#123;\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n&#125;)\nexport class DatabaseModule &#123;&#125;</code></pre>\n<p>Now we can inject the <code>Sequelize</code> object using <code>@Inject()</code> decorator. Each class that would depend on the <code>Sequelize</code> async provider will wait until a <code>Promise</code> is resolved.</p>\n<h4 appAnchor id=\"model-injection\"><span>Model injection</span></h4>\n<p>In <a rel='nofollow' target='_blank' href=\"https://github.com/sequelize/sequelize\">Sequelize</a> the <strong>Model</strong> defines a table in the database. Instances of this class represent a database row. Firstly, we need at least one entity:</p>\n\n<span class=\"filename\">\n  {{ 'cat.entity' | extension: app66d98cc4864883cc691f4425ea4d2d186f3255a3.isJsActive }}\n<app-tabs #app66d98cc4864883cc691f4425ea4d2d186f3255a3></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Table, Column, Model &#125; from &#39;sequelize-typescript&#39;;\n\n@Table\nexport class Cat extends Model&lt;Cat&gt; &#123;\n  @Column\n  name: string;\n\n  @Column\n  age: number;\n\n  @Column\n  breed: string;\n&#125;</code></pre><p>The <code>Cat</code> entity belongs to the <code>cats</code> directory. This directory represents the <code>CatsModule</code>. Now it&#39;s time to create a <strong>Repository</strong> provider:</p>\n\n<span class=\"filename\">\n  {{ 'cats.providers' | extension: app7b6f4cbf5473ab557bc10e1347224f2a384ced43.isJsActive }}\n<app-tabs #app7b6f4cbf5473ab557bc10e1347224f2a384ced43></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Cat &#125; from &#39;./cat.entity&#39;;\n\nexport const catsProviders = [\n  &#123;\n    provide: &#39;CATS_REPOSITORY&#39;,\n    useValue: Cat,\n  &#125;,\n];</code></pre><blockquote class=\"\n\"><strong>Notice</strong> In the real-world applications you should avoid <strong>magic strings</strong>. Both <code>CATS_REPOSITORY</code> and <code>SEQUELIZE</code> should be kept in the separated <code>constants.ts</code> file.\n</blockquote>\n<p>In Sequelize, we use static methods to manipulate the data, and thus we created an <strong>alias</strong> here.</p>\n<p>Now we can inject the <code>CATS_REPOSITORY</code> to the <code>CatsService</code> using the <code>@Inject()</code> decorator:</p>\n\n<span class=\"filename\">\n  {{ 'cats.service' | extension: appa8b84f9749ab38c84d16e855f09a7fc5b843af04.isJsActive }}\n<app-tabs #appa8b84f9749ab38c84d16e855f09a7fc5b843af04></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Injectable, Inject &#125; from &#39;@nestjs/common&#39;;\nimport &#123; CreateCatDto &#125; from &#39;./dto/create-cat.dto&#39;;\nimport &#123; Cat &#125; from &#39;./cat.entity&#39;;\n\n@Injectable()\nexport class CatsService &#123;\n  constructor(\n    @Inject(&#39;CATS_REPOSITORY&#39;) private readonly catsRepository: typeof Cat) &#123;&#125;\n\n  async findAll(): Promise&lt;Cat[]&gt; &#123;\n    return this.catsRepository.findAll&lt;Cat&gt;();\n  &#125;\n&#125;</code></pre><p>The database connection is <strong>asynchronous</strong>, but Nest makes this process completely invisible for the end-user. The <code>CATS_REPOSITORY</code> provider is waiting for the db connection, and the <code>CatsService</code> is delayed until repository is ready to use. The entire application can start when each class is instantiated.</p>\n<p>Here is a final <code>CatsModule</code>:</p>\n\n<span class=\"filename\">\n  {{ 'cats.module' | extension: app5eaafd28f38154e5790128addba8e570c44151d1.isJsActive }}\n<app-tabs #app5eaafd28f38154e5790128addba8e570c44151d1></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; CatsController &#125; from &#39;./cats.controller&#39;;\nimport &#123; CatsService &#125; from &#39;./cats.service&#39;;\nimport &#123; catsProviders &#125; from &#39;./cats.providers&#39;;\nimport &#123; DatabaseModule &#125; from &#39;../database/database.module&#39;;\n\n@Module(&#123;\n  imports: [DatabaseModule],\n  controllers: [CatsController],\n  providers: [\n    CatsService,\n    ...catsProviders,\n  ],\n&#125;)\nexport class CatsModule &#123;&#125;</code></pre><blockquote class=\"\nwarning \"><strong>Hint</strong> Do not forget to import the <code>CatsModule</code> into the root <code>ApplicationModule</code>.\n</blockquote>\n\n</div>\n\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-sql-typeorm',\n  templateUrl: './sql-typeorm.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SqlTypeormComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/sql-typeorm.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"sql-typeorm\">SQL (TypeORM)</h3>\n<h5 id=\"this-chapter-applies-only-to-typescript\">This chapter applies only to TypeScript</h5>\n<blockquote class=\"\n\"><strong>Warning</strong> In this article, you&#39;ll learn how to create a <code>DatabaseModule</code> based on the <strong>TypeORM</strong> package from scratch using custom providers mechanism. As a consequence, this solution contains a lot of overhead that you can omit using ready to use and available out-of-the-box dedicated <code>@nestjs/typeorm</code> package. To learn more, see <a routerLink=\"/techniques/sql\">here</a>.\n</blockquote>\n<p><a rel='nofollow' target='_blank' href=\"https://github.com/typeorm/typeorm\">TypeORM</a> is definitely the most mature Object Relational Mapper (ORM) available in the node.js world. Since it&#39;s written in TypeScript, it works pretty well with the Nest framework.</p>\n<h4 appAnchor id=\"getting-started\"><span>Getting started</span></h4>\n<p>To start the adventure with this library we have to install all required dependencies:</p>\n<pre><code class=\"language-bash\">\n$ npm install --save typeorm mysql</code></pre>\n<p>The first step we need to do is to establish the connection with our database using <code>createConnection()</code> function imported from the <code>typeorm</code> package. The <code>createConnection()</code> function returns a <code>Promise</code>, and therefore we have to create an <a routerLink=\"/fundamentals/async-components\">async provider</a>.</p>\n\n<span class=\"filename\">\n  {{ 'database.providers' | extension: app535b76866fa1db98a28e54a18ff3b91f4d2dabba.isJsActive }}\n<app-tabs #app535b76866fa1db98a28e54a18ff3b91f4d2dabba></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; createConnection &#125; from &#39;typeorm&#39;;\n\nexport const databaseProviders = [\n  &#123;\n    provide: &#39;DATABASE_CONNECTION&#39;,\n    useFactory: async () =&gt; await createConnection(&#123;\n      type: &#39;mysql&#39;,\n      host: &#39;localhost&#39;,\n      port: 3306,\n      username: &#39;root&#39;,\n      password: &#39;root&#39;,\n      database: &#39;test&#39;,\n      entities: [\n          __dirname + &#39;/../**/*.entity&#123;.ts,.js&#125;&#39;,\n      ],\n      synchronize: true,\n    &#125;),\n  &#125;,\n];</code></pre><blockquote class=\"\nwarning \"><strong>Hint</strong> Following best practices, we declared the custom provider in the separated file which has a <code>*.providers.ts</code> suffix.\n</blockquote>\n<p>Then, we need to export these providers to make them <strong>accessible</strong> for the rest of the application.</p>\n\n<span class=\"filename\">\n  {{ 'database.module' | extension: app65e8da154e1b5e2e14f2a39fef212fa2556e7ca7.isJsActive }}\n<app-tabs #app65e8da154e1b5e2e14f2a39fef212fa2556e7ca7></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; databaseProviders &#125; from &#39;./database.providers&#39;;\n\n@Module(&#123;\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n&#125;)\nexport class DatabaseModule &#123;&#125;</code></pre><p>Now we can inject the <code>Connection</code> object using <code>@Inject()</code> decorator. Each class that would depend on the <code>Connection</code> async provider will wait until a <code>Promise</code> is resolved.</p>\n<h4 appAnchor id=\"repository-pattern\"><span>Repository pattern</span></h4>\n<p>The <a rel='nofollow' target='_blank' href=\"https://github.com/typeorm/typeorm\">TypeORM</a> supports the repository design pattern, thus each entity has its own Repository. These repositories can be obtained from the database connection.</p>\n<p>But firstly, we need at least one entity. We are going to reuse the <code>Photo</code> entity from the official documentation.</p>\n\n<span class=\"filename\">\n  {{ 'photo.entity' | extension: app5e06b386596932c790cfb6a7bcb07d00322667d2.isJsActive }}\n<app-tabs #app5e06b386596932c790cfb6a7bcb07d00322667d2></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Entity, Column, PrimaryGeneratedColumn &#125; from &#39;typeorm&#39;;\n\n@Entity()\nexport class Photo &#123;\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column(&#123; length: 500 &#125;)\n  name: string;\n\n  @Column(&#39;text&#39;)\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column(&#39;int&#39;)\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n&#125;</code></pre><p>The <code>Photo</code> entity belongs to the <code>photo</code> directory. This directory represents the <code>PhotoModule</code>. Now, let&#39;s create a <strong>Repository</strong> provider:</p>\n\n<span class=\"filename\">\n  {{ 'photo.providers' | extension: appa0646c9248a851c1ddc4973a78510c6799ddd3ae.isJsActive }}\n<app-tabs #appa0646c9248a851c1ddc4973a78510c6799ddd3ae></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Connection, Repository &#125; from &#39;typeorm&#39;;\nimport &#123; Photo &#125; from &#39;./photo.entity&#39;;\n\nexport const photoProviders = [\n  &#123;\n    provide: &#39;PHOTO_REPOSITORY&#39;,\n    useFactory: (connection: Connection) =&gt; connection.getRepository(Photo),\n    inject: [&#39;DATABASE_CONNECTION&#39;],\n  &#125;,\n];</code></pre><blockquote class=\"\nwarning \"><strong>Notice</strong> In the real-world applications you should avoid <strong>magic strings</strong>. Both <code>PHOTO_REPOSITORY</code> and <code>DATABASE_CONNECTION</code> should be kept in the separated <code>constants.ts</code> file.\n</blockquote>\n<p>Now we can inject the <code>Repository&lt;Photo&gt;</code> to the <code>PhotoService</code> using the <code>@Inject()</code> decorator:</p>\n\n<span class=\"filename\">\n  {{ 'photo.service' | extension: app966de46010505708c35655c4bf9b06bc66b8ef5c.isJsActive }}\n<app-tabs #app966de46010505708c35655c4bf9b06bc66b8ef5c></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Injectable, Inject &#125; from &#39;@nestjs/common&#39;;\nimport &#123; Repository &#125; from &#39;typeorm&#39;;\nimport &#123; Photo &#125; from &#39;./photo.entity&#39;;\n\n@Injectable()\nexport class PhotoService &#123;\n  constructor(\n    @Inject(&#39;PHOTO_REPOSITORY&#39;)\n    private readonly photoRepository: Repository&lt;Photo&gt;,\n  ) &#123;&#125;\n\n  async findAll(): Promise&lt;Photo[]&gt; &#123;\n    return this.photoRepository.find();\n  &#125;\n&#125;</code></pre><p>The database connection is <strong>asynchronous</strong>, but Nest makes this process completely invisible for the end-user. The <code>PhotoRepository</code> is waiting for the db connection, and the <code>PhotoService</code> is delayed until repository is ready to use. The entire application can start when each class is instantiated.</p>\n<p>Here is a final <code>PhotoModule</code>:</p>\n\n<span class=\"filename\">\n  {{ 'photo.module' | extension: app987076725ec524f6efa168917a42d07d41af33e2.isJsActive }}\n<app-tabs #app987076725ec524f6efa168917a42d07d41af33e2></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; DatabaseModule &#125; from &#39;../database/database.module&#39;;\nimport &#123; photoProviders &#125; from &#39;./photo.providers&#39;;\nimport &#123; PhotoService &#125; from &#39;./photo.service&#39;;\n\n@Module(&#123;\n  imports: [DatabaseModule],\n  providers: [\n    ...photoProviders,\n    PhotoService,\n  ],\n&#125;)\nexport class PhotoModule &#123;&#125;</code></pre><blockquote class=\"\nwarning \"><strong>Hint</strong> Do not forget to import the <code>PhotoModule</code> into the root <code>ApplicationModule</code>.\n</blockquote>\n\n</div>\n\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-swagger',\n  templateUrl: './swagger.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SwaggerComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/swagger.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"openapi-swagger\">OpenAPI (Swagger)</h3>\n<p>The <a rel='nofollow' target='_blank' href=\"https://swagger.io/specification/\">OpenAPI</a> specification is a language-agnostic definition format used to describe RESTful APIs. Nest provides a dedicated <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/swagger\">module</a> which allows generating such a specification by leveraging decorators.</p>\n<h4 appAnchor id=\"installation\"><span>Installation</span></h4>\n<p>To begin using it, we first install the required dependencies.</p>\n<pre><code class=\"language-bash\">\n$ npm install --save @nestjs/swagger swagger-ui-express</code></pre>\n<p>If you use fastify, install <code>fastify-swagger</code> instead of <code>swagger-ui-express</code>:</p>\n<pre><code class=\"language-bash\">\n$ npm install --save @nestjs/swagger fastify-swagger</code></pre>\n<h4 appAnchor id=\"bootstrap\"><span>Bootstrap</span></h4>\n<p>Once the installation process is complete, open the <code>main.ts</code> file and initialize Swagger using the <code>SwaggerModule</code> class:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; NestFactory &#125; from &#39;@nestjs/core&#39;;\nimport &#123; SwaggerModule, DocumentBuilder &#125; from &#39;@nestjs/swagger&#39;;\nimport &#123; AppModule &#125; from &#39;./app.module&#39;;\n\nasync function bootstrap() &#123;\n  const app = await NestFactory.create(AppModule);\n\n  const options = new DocumentBuilder()\n    .setTitle(&#39;Cats example&#39;)\n    .setDescription(&#39;The cats API description&#39;)\n    .setVersion(&#39;1.0&#39;)\n    .addTag(&#39;cats&#39;)\n    .build();\n  const document = SwaggerModule.createDocument(app, options);\n  SwaggerModule.setup(&#39;api&#39;, app, document);\n\n  await app.listen(3000);\n&#125;\nbootstrap();</code></pre>\n<p>The <code>DocumentBuilder</code> helps to structure a base document that conforms to the OpenAPI Specification. It provides several methods that allow setting such properties as title, description, version, etc. In order to create a full document (with all HTTP routes defined) we use the <code>createDocument()</code> method of the <code>SwaggerModule</code> class. This method takes two arguments, an application instance and a Swagger options object.</p>\n<p>Once we create a document, we can call <code>setup()</code> method. It accepts:</p>\n<ol>\n<li>the path to mount the Swagger UI</li>\n<li>an application instance</li>\n<li>the document object instantiated above</li>\n</ol>\n<p>Now you can run the following command to start the HTTP server:</p>\n<pre><code class=\"language-bash\">\n$ npm run start</code></pre>\n<p>While the application is running, open your browser and navigate to <code>http://localhost:3000/api</code>. You should see the Swagger UI.</p>\n<figure><img src=\"/assets/swagger1.png\" /></figure>\n\n<p>The <code>SwaggerModule</code> automatically reflects all of your endpoints. Also, in order to display the Swagger UI, <code>@nestjs/swagger</code> makes use of either <code>swagger-ui-express</code> or <code>fastify-swagger</code> depending on the platform.</p>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> To generate and download a Swagger JSON file, navigate to <code>http://localhost:3000/api-json</code> in your browser (assuming that your Swagger documentation is available under <code>http://localhost:3000/api</code>).\n</blockquote>\n<h4 appAnchor id=\"route-parameters\"><span>Route parameters</span></h4>\n<p>The <code>SwaggerModule</code> searches for all <code>@Body()</code>, <code>@Query()</code>, and <code>@Param()</code> decorators in route handlers to generate the API document. It also creates corresponding model definitions by taking advantage of reflection. Consider the following code:</p>\n<pre><code class=\"language-typescript\">\n@Post()\nasync create(@Body() createCatDto: CreateCatDto) &#123;\n  this.catsService.create(createCatDto);\n&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> To explicitly set the body definition use the <code>@ApiBody()</code> decorator (<code>@nestjs/swagger</code> package).\n</blockquote>\n<p>Based on the <code>CreateCatDto</code>, the module definition will be created:</p>\n<figure><img src=\"/assets/swagger-dto.png\" /></figure>\n\n<p>As you can see, the definition is empty although the class has a few declared properties. In order to make the class properties visible to the <code>SwaggerModule</code>, we have to either annotate them with the <code>@ApiProperty()</code> decorator or use a CLI plugin (read more in the <strong>Plugin</strong> section) which will do it automatically:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; ApiProperty &#125; from &#39;@nestjs/swagger&#39;;\n\nexport class CreateCatDto &#123;\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  age: number;\n\n  @ApiProperty()\n  breed: string;\n&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Consider using the Swagger plugin (see <a href=\"/recipes/swagger#plugin\">Plugin</a> section) which will automatically do it for you.\n</blockquote>\n<p>Let&#39;s open the browser and verify the generated <code>CreateCatDto</code> model:</p>\n<figure><img src=\"/assets/swagger-dto2.png\" /></figure>\n\n<p>In addition, the <code>@ApiProperty()</code> decorator allows setting various <a rel='nofollow' target='_blank' href=\"https://swagger.io/specification/#schemaObject\">Schema Object</a> properties:</p>\n<pre><code class=\"language-typescript\">\n@ApiProperty(&#123;\n  description: &#39;The age of a cat&#39;,\n  min: 1,\n  default: 1,\n&#125;)\nage: number;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Instead of explicitly typing the <code>{{&quot;@ApiProperty({ required: false })&quot;}}</code> you can use <code>@ApiPropertyOptional()</code> short-hand decorator.\n</blockquote>\n<p>In order to explicitly set the type of the property, use the <code>type</code> key:</p>\n<pre><code class=\"language-typescript\">\n@ApiProperty(&#123;\n  type: Number,\n&#125;)\nage: number;</code></pre>\n<h4 appAnchor id=\"enums\"><span>Enums</span></h4>\n<p>To identify an <code>enum</code>, we must manually set the <code>enum</code> property on the <code>@ApiProperty</code> with an array of values.</p>\n<pre><code class=\"language-typescript\">\n@ApiProperty(&#123; enum: [&#39;Admin&#39;, &#39;Moderator&#39;, &#39;User&#39;]&#125;)\nrole: UserRole;</code></pre>\n<p>Alternatively, define an actual TypeScript enum as follows:</p>\n<pre><code class=\"language-typescript\">\nexport enum UserRole &#123;\n  Admin = &#39;Admin&#39;,\n  Moderator = &#39;Moderator&#39;,\n  User = &#39;User&#39;,\n&#125;</code></pre>\n<p>You can then use the enum directly with the <code>@Query()</code> parameter decorator in combination with the <code>@ApiQuery()</code> decorator.</p>\n<pre><code class=\"language-typescript\">\n@ApiQuery(&#123; name: &#39;role&#39;, enum: UserRole &#125;)\nasync filterByRole(@Query(&#39;role&#39;) role: UserRole = UserRole.User) &#123;&#125;</code></pre>\n<figure><img src=\"/assets/enum_query.gif\" /></figure>\n\n<p>With <code>isArray</code> set to <strong>true</strong>, the <code>enum</code> can be selected as a <strong>multi-select</strong>:</p>\n<figure><img src=\"/assets/enum_query_array.gif\" /></figure>\n\n<h4 appAnchor id=\"enums-schema\"><span>Enums schema</span></h4>\n<p>By default, the <code>enum</code> property will add a raw definition of <a rel='nofollow' target='_blank' href=\"https://swagger.io/docs/specification/data-models/enums/\">Enum</a> on the <code>parameter</code>.</p>\n<pre><code class=\"language-yaml\">\nCatDetail:\n  type: &#39;object&#39;\n  properties:\n    ...\n    - breed:\n        type: &#39;string&#39;\n        enum:\n          - Persian\n          - Tabby\n          - Siamese</code></pre>\n<p>The above specification works fine for most cases. However, if you are utilizing a tool that takes the specification as <strong>input</strong> and generates <strong>client-side</strong> code, you might run into a problem with the generated code containing duplicated <code>enums</code>. Consider the following code snippet: </p>\n<pre><code class=\"language-typescript\">\n// generated client-side code\nexport class CatDetail &#123;\n   breed: CatDetailEnum;\n&#125;\n\nexport class CatInformation &#123;\n  breed: CatInformationEnum;\n&#125;\n\nexport enum CatDetailEnum &#123;\n  Persian = &#39;Persian&#39;,\n  Tabby = &#39;Tabby&#39;,\n  Siamese = &#39;Siamese&#39;\n&#125;\n\nexport enum CatInformationEnum &#123;\n  Persian = &#39;Persian&#39;,\n  Tabby = &#39;Tabby&#39;,\n  Siamese = &#39;Siamese&#39;\n&#125;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> The above snippet is generated using a tool called <a rel='nofollow' target='_blank' href=\"https://github.com/RicoSuter/NSwag\">NSwag</a>.\n</blockquote>\n<p>You can see that now you have two <code>enums</code> that are exactly the same. \nTo address this issue, you can pass an <code>enumName</code> next to <code>enum</code> property in your decorator.</p>\n<pre><code class=\"language-typescript\">\nexport class CatDetail &#123;\n   @ApiProperty(&#123; enum: CatBreed, enumName: &#39;CatBreed&#39; &#125;)\n   breed: CatBreed;\n&#125;</code></pre>\n<p><code>enumName</code> enables <code>nestjs/swagger</code> to turn <code>CatBreed</code> into its own <code>schema</code> which in turns makes <code>CatBreed</code> reusable. The specification will look like the following:</p>\n<pre><code class=\"language-yaml\">\nCatDetail:\n  type: &#39;object&#39;\n  properties:\n    ...\n    - breed:\n        schema:\n          $ref: &#39;#/components/schemas/CatBreed&#39;\nCatBreed:\n  type: string\n  enum:\n    - Persian\n    - Tabby\n    - Siamese</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Any <strong>decorator</strong> that takes <code>enum</code> as a property will also take <code>enumName</code>.\n</blockquote>\n<h4 appAnchor id=\"arrays\"><span>Arrays</span></h4>\n<p>When the property is an array, we must manually indicate the array type as shown below:</p>\n<pre><code class=\"language-typescript\">\n@ApiProperty(&#123; type: [String] &#125;)\nnames: string[];</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Consider using the Swagger plugin (see <a href=\"/recipes/swagger#plugin\">Plugin</a> section) which will automatically detect arrays.\n</blockquote>\n<p>Either include the type as the first element of an array (as shown above) or set the <code>isArray</code> property to <code>true</code>.</p>\n<p><app-banner-enterprise></app-banner-enterprise></p>\n<h4 appAnchor id=\"circular-dependencies\"><span>Circular dependencies</span></h4>\n<p>When you have circular dependencies between classes, use a lazy function to provide the <code>SwaggerModule</code> with type information:</p>\n<pre><code class=\"language-typescript\">\n@ApiProperty(&#123; type: () =&gt; Node &#125;)\nnode: Node;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> Consider using the Swagger plugin (see <a href=\"/recipes/swagger#plugin\">Plugin</a> section) which will automatically detect circular dependencies.\n</blockquote>\n<h4 appAnchor id=\"generics-and-interfaces\"><span>Generics and interfaces</span></h4>\n<p>Since TypeScript does not store metadata about generics or interfaces, when you use them in your DTOs, <code>SwaggerModule</code> may not be able to properly generate model definitions at runtime. For instance, below code won&#39;t be correctly inspected by the Swagger module:</p>\n<pre><code class=\"language-typescript\">\ncreateBulk(@Body() usersDto: CreateUserDto[])</code></pre>\n<p>In order to overcome this limitation, you can set the type explicitly:</p>\n<pre><code class=\"language-typescript\">\n@ApiBody(&#123; type: [CreateUserDto] &#125;)\ncreateBulk(@Body() usersDto: CreateUserDto[])</code></pre>\n<h4 appAnchor id=\"raw-definitions\"><span>Raw definitions</span></h4>\n<p>In some specific scenarios (e.g. deeply nested arrays, matrices), you may want to describe your type by hand.</p>\n<pre><code class=\"language-typescript\">\n@ApiProperty(&#123;\n  type: &#39;array&#39;,\n  items: &#123;\n    type: &#39;array&#39;,\n    items: &#123;\n      type: &#39;number&#39;,\n    &#125;,\n  &#125;,\n&#125;)\ncoords: number[][];</code></pre>\n<p>Likewise, in order to define your input/output content manually in controller classes, use the <code>schema</code> property:</p>\n<pre><code class=\"language-typescript\">\n@ApiBody(&#123;\n  schema: &#123;\n    type: &#39;array&#39;,\n    items: &#123;\n      type: &#39;array&#39;,\n      items: &#123;\n        type: &#39;number&#39;,\n      &#125;,\n    &#125;,\n  &#125;,\n&#125;)\nasync create(@Body() coords: number[][]) &#123;&#125;</code></pre>\n<h4 appAnchor id=\"extra-models\"><span>Extra models</span></h4>\n<p>In order to define additional models that should be inspected by Swagger module, use the <code>@ApiExtraModels()</code> decorator:</p>\n<pre><code class=\"language-typescript\">\n@ApiExtraModels(ExtraModel)\nexport class CreateCatDto &#123;&#125;</code></pre>\n<p>Then, you can get the reference (<code>$ref</code>) to your model using <code>getSchemaPath(ExtraModel)</code>:</p>\n<pre><code class=\"language-typescript\">\n&#39;application/vnd.api+json&#39;: &#123;\n   schema: &#123; $ref: getSchemaPath(ExtraModel) &#125;,\n&#125;,</code></pre>\n<h4 appAnchor id=\"oneof-anyof-allof\"><span>oneOf, anyOf, allOf</span></h4>\n<p>In order to combine schemas, you can use <code>oneOf</code>, <code>anyOf</code> or <code>allOf</code> keywords (<a rel='nofollow' target='_blank' href=\"https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/\">read more</a>).</p>\n<pre><code class=\"language-typescript\">\n@ApiProperty(&#123;\n  oneOf: [\n    &#123; $ref: getSchemaPath(Cat) &#125;,\n    &#123; $ref: getSchemaPath(Dog) &#125;,\n  ],\n&#125;)\npet: Cat | Dog;</code></pre>\n<blockquote class=\"\ninfo \"><strong>Hint</strong> <code>getSchemaPath()</code> function is imported from <code>@nestjs/swagger</code>.\n</blockquote>\n<p>Both <code>Cat</code> and <code>Dog</code> must be defined as extra models using the <code>@ApiExtraModels()</code> decorator (at the class-level).</p>\n<h4 appAnchor id=\"multiple-specifications\"><span>Multiple specifications</span></h4>\n<p>The <code>SwaggerModule</code> provides a way to support multiple specifications. In other words, you can serve different documentation, with different UIs, on different endpoints.</p>\n<p>To support multiple specifications, your application must be written with a modular approach. The <code>createDocument()</code> method takes in a 3rd argument, <code>extraOptions</code>, which is an object with a the property <code>include</code>. The <code>include</code> property has a value which is an array of modules.</p>\n<p>You can setup multiple specifications support as shown below:</p>\n<pre><code class=\"language-typescript\">\nimport &#123; NestFactory &#125; from &#39;@nestjs/core&#39;;\nimport &#123; SwaggerModule, DocumentBuilder &#125; from &#39;@nestjs/swagger&#39;;\nimport &#123; AppModule &#125; from &#39;./app.module&#39;;\n\nasync function bootstrap() &#123;\n  const app = await NestFactory.create(AppModule);\n\n  /**\n   * createDocument(application, configurationOptions, extraOptions);\n   *\n   * createDocument method takes in an optional 3rd argument &quot;extraOptions&quot;\n   * which is an object with &quot;include&quot; property where you can pass an Array\n   * of Modules that you want to include in that Swagger Specification\n   * E.g: CatsModule and DogsModule will have two separate Swagger Specifications which\n   * will be exposed on two different SwaggerUI with two different endpoints.\n   */\n\n  const options = new DocumentBuilder()\n    .setTitle(&#39;Cats example&#39;)\n    .setDescription(&#39;The cats API description&#39;)\n    .setVersion(&#39;1.0&#39;)\n    .addTag(&#39;cats&#39;)\n    .build();\n\n  const catDocument = SwaggerModule.createDocument(app, options, &#123;\n    include: [CatsModule],\n  &#125;);\n  SwaggerModule.setup(&#39;api/cats&#39;, app, catDocument);\n\n  const secondOptions = new DocumentBuilder()\n    .setTitle(&#39;Dogs example&#39;)\n    .setDescription(&#39;The dogs API description&#39;)\n    .setVersion(&#39;1.0&#39;)\n    .addTag(&#39;dogs&#39;)\n    .build();\n\n  const dogDocument = SwaggerModule.createDocument(app, secondOptions, &#123;\n    include: [DogsModule],\n  &#125;);\n  SwaggerModule.setup(&#39;api/dogs&#39;, app, dogDocument);\n\n  await app.listen(3000);\n&#125;\nbootstrap();</code></pre>\n<p>Now you can start your server with the following command:</p>\n<pre><code class=\"language-bash\">\n$ npm run start</code></pre>\n<p>Navigate to <code>http://localhost:3000/api/cats</code> to see the Swagger UI for cats:</p>\n<figure><img src=\"/assets/swagger-cats.png\" /></figure>\n\n<p>In turn, <code>http://localhost:3000/api/dogs</code> will expose the Swagger UI for dogs:</p>\n<figure><img src=\"/assets/swagger-dogs.png\" /></figure>\n\n<h4 appAnchor id=\"tags\"><span>Tags</span></h4>\n<p>To attach a controller to a specific tag, use the <code>@ApiTags(...tags)</code> decorator.</p>\n<pre><code class=\"language-typescript\">\n@ApiTags(&#39;cats&#39;)\n@Controller(&#39;cats&#39;)\nexport class CatsController &#123;&#125;</code></pre>\n<h4 appAnchor id=\"headers\"><span>Headers</span></h4>\n<p>To define custom headers that are expected as part of the request, use <code>@ApiHeader()</code>.</p>\n<pre><code class=\"language-typescript\">\n@ApiHeader(&#123;\n  name: &#39;X-MyHeader&#39;,\n  description: &#39;Custom header&#39;,\n&#125;)\n@Controller(&#39;cats&#39;)\nexport class CatsController &#123;&#125;</code></pre>\n<h4 appAnchor id=\"responses\"><span>Responses</span></h4>\n<p>To define a custom HTTP response, we use <code>@ApiResponse()</code> decorator.</p>\n<pre><code class=\"language-typescript\">\n@Post()\n@ApiResponse(&#123; status: 201, description: &#39;The record has been successfully created.&#39;&#125;)\n@ApiResponse(&#123; status: 403, description: &#39;Forbidden.&#39;&#125;)\nasync create(@Body() createCatDto: CreateCatDto) &#123;\n  this.catsService.create(createCatDto);\n&#125;</code></pre>\n<p>Nest provides a set of short-hand <strong>API response</strong> decorators that inherit from the <code>@ApiResponse</code> decorator:</p>\n<ul>\n<li><code>@ApiOkResponse()</code></li>\n<li><code>@ApiCreatedResponse()</code></li>\n<li><code>@ApiBadRequestResponse()</code></li>\n<li><code>@ApiUnauthorizedResponse()</code></li>\n<li><code>@ApiNotFoundResponse()</code></li>\n<li><code>@ApiForbiddenResponse()</code></li>\n<li><code>@ApiMethodNotAllowedResponse()</code></li>\n<li><code>@ApiNotAcceptableResponse()</code></li>\n<li><code>@ApiRequestTimeoutResponse()</code></li>\n<li><code>@ApiConflictResponse()</code></li>\n<li><code>@ApiGoneResponse()</code></li>\n<li><code>@ApiPayloadTooLargeResponse()</code></li>\n<li><code>@ApiUnsupportedMediaTypeResponse()</code></li>\n<li><code>@ApiUnprocessableEntityResponse()</code></li>\n<li><code>@ApiInternalServerErrorResponse()</code></li>\n<li><code>@ApiNotImplementedResponse()</code></li>\n<li><code>@ApiBadGatewayResponse()</code></li>\n<li><code>@ApiServiceUnavailableResponse()</code></li>\n<li><code>@ApiGatewayTimeoutResponse()</code></li>\n<li><code>@ApiDefaultResponse()</code></li>\n</ul>\n<pre><code class=\"language-typescript\">\n@Post()\n@ApiCreatedResponse(&#123; description: &#39;The record has been successfully created.&#39;&#125;)\n@ApiForbiddenResponse(&#123; description: &#39;Forbidden.&#39;&#125;)\nasync create(@Body() createCatDto: CreateCatDto) &#123;\n  this.catsService.create(createCatDto);\n&#125;</code></pre>\n<p>To specify a return model for a request, we must create a class and annotate all properties with the <code>@ApiProperty()</code> decorator.</p>\n<pre><code class=\"language-typescript\">\nexport class Cat &#123;\n  @ApiProperty()\n  id: number;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  age: number;\n\n  @ApiProperty()\n  breed: string;\n&#125;</code></pre>\n<p>Then, <code>Cat</code> model must be used in combination with the <code>type</code> property of the response decorator.</p>\n<pre><code class=\"language-typescript\">\n@ApiTags(&#39;cats&#39;)\n@Controller(&#39;cats&#39;)\nexport class CatsController &#123;\n  @Post()\n  @ApiCreatedResponse(&#123;\n    description: &#39;The record has been successfully created.&#39;,\n    type: Cat,\n  &#125;)\n  async create(@Body() createCatDto: CreateCatDto): Promise&lt;Cat&gt; &#123;\n    return this.catsService.create(createCatDto);\n  &#125;\n&#125;</code></pre>\n<p>Let&#39;s open the browser and verify the generated <code>Cat</code> model:</p>\n<figure><img src=\"/assets/swagger-response-type.png\" /></figure>\n\n<h4 appAnchor id=\"global-prefix\"><span>Global prefix</span></h4>\n<p>To ignore a global prefix for routes set through <code>setGlobalPrefix()</code>, use <code>ignoreGlobalPrefix</code>:</p>\n<pre><code class=\"language-typescript\">\nconst document = SwaggerModule.createDocument(app, options, &#123;\n  ignoreGlobalPrefix: true,\n&#125;);</code></pre>\n<h4 appAnchor id=\"security\"><span>Security</span></h4>\n<p>To define which security mechanisms should be used for a specific operation, use the <code>@ApiSecurity()</code> decorator.</p>\n<pre><code class=\"language-typescript\">\n@ApiSecurity(&#39;basic&#39;)\n@Controller(&#39;cats&#39;)\nexport class CatsController &#123;&#125;</code></pre>\n<p>Before you run your application, remember to add the security definition to your base document using <code>DocumentBuilder</code>:</p>\n<pre><code class=\"language-typescript\">\nconst options = new DocumentBuilder().addSecurity(&#39;basic&#39;, &#123;\n  type: &#39;http&#39;,\n  scheme: &#39;basic&#39;,\n&#125;);</code></pre>\n<p>Some of the most popular authentication techniques are predefined (e.g. <code>basic</code> and <code>bearer</code>) and therefore you don&#39;t have to define security mechanisms manually as shown above.</p>\n<p></p>\n<h4 appAnchor id=\"basic-authentication\"><span>Basic authentication</span></h4>\n<p>To enable basic authentication, use <code>@ApiBasicAuth()</code>.</p>\n<pre><code class=\"language-typescript\">\n@ApiBasicAuth()\n@Controller(&#39;cats&#39;)\nexport class CatsController &#123;&#125;</code></pre>\n<p>Before you run your application, remember to add the security definition to your base document using <code>DocumentBuilder</code>:</p>\n<pre><code class=\"language-typescript\">\nconst options = new DocumentBuilder().addBasicAuth();</code></pre>\n<h4 appAnchor id=\"bearer-authentication\"><span>Bearer authentication</span></h4>\n<p>To enable bearer authentication, use <code>@ApiBearerAuth()</code>.</p>\n<pre><code class=\"language-typescript\">\n@ApiBearerAuth()\n@Controller(&#39;cats&#39;)\nexport class CatsController &#123;&#125;</code></pre>\n<p>Before you run your application, remember to add the security definition to your base document using <code>DocumentBuilder</code>:</p>\n<pre><code class=\"language-typescript\">\nconst options = new DocumentBuilder().addBearerAuth();</code></pre>\n<h4 appAnchor id=\"oauth2-authentication\"><span>OAuth2 authentication</span></h4>\n<p>To enable OAuth2, use <code>@ApiOAuth2()</code>.</p>\n<pre><code class=\"language-typescript\">\n@ApiOAuth2([&#39;pets:write&#39;])\n@Controller(&#39;cats&#39;)\nexport class CatsController &#123;&#125;</code></pre>\n<p>Before you run your application, remember to add the security definition to your base document using <code>DocumentBuilder</code>:</p>\n<pre><code class=\"language-typescript\">\nconst options = new DocumentBuilder().addOAuth2();</code></pre>\n<h4 appAnchor id=\"file-upload\"><span>File upload</span></h4>\n<p>You can enable file upload for a specific method with the <code>@ApiBody</code> decorator together with <code>@ApiConsumes()</code>. Here&#39;s a full example using the <a routerLink=\"/techniques/file-upload\">File Upload</a> technique:</p>\n<pre><code class=\"language-typescript\">\n@UseInterceptors(FileInterceptor(&#39;file&#39;))\n@ApiConsumes(&#39;multipart/form-data&#39;)\n@ApiBody(&#123;\n  description: &#39;List of cats&#39;,\n  type: FileUploadDto,\n&#125;)\nuploadFile(@UploadedFile() file) &#123;&#125;</code></pre>\n<p>Where <code>FileUploadDto</code> is defined as follows:</p>\n<pre><code class=\"language-typescript\">\nclass FileUploadDto &#123;\n  @ApiProperty(&#123; type: &#39;string&#39;, format: &#39;binary&#39; &#125;)\n  file: any;\n&#125;</code></pre>\n<h4 appAnchor id=\"extensions\"><span>Extensions</span></h4>\n<p>To add an Extension to a request use the <code>@ApiExtension()</code> decorator. The extension name must be prefixed with <code>x-</code>.</p>\n<pre><code class=\"language-typescript\">\n@ApiExtension(&#39;x-foo&#39;, &#123; hello: &#39;world&#39; &#125;)</code></pre>\n<h4 appAnchor id=\"decorators\"><span>Decorators</span></h4>\n<p>All of the available OpenAPI decorators have an <code>Api</code> prefix to distinguish them from the core decorators. Below is a full list of the exported decorators along with a designation of the level at which the decorator may be applied.</p>\n<table>\n<thead>\n</thead>\n<tbody><tr>\n<td><code>@ApiOperation()</code></td>\n<td>Method</td>\n</tr>\n<tr>\n<td><code>@ApiResponse()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiProduces()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiConsumes()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiBearerAuth()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiOAuth2()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiBasicAuth()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiSecurity()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiExtraModels()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiBody()</code></td>\n<td>Method</td>\n</tr>\n<tr>\n<td><code>@ApiParam()</code></td>\n<td>Method</td>\n</tr>\n<tr>\n<td><code>@ApiQuery()</code></td>\n<td>Method</td>\n</tr>\n<tr>\n<td><code>@ApiHeader()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiExcludeEndpoint()</code></td>\n<td>Method</td>\n</tr>\n<tr>\n<td><code>@ApiTags()</code></td>\n<td>Method / Controller</td>\n</tr>\n<tr>\n<td><code>@ApiProperty()</code></td>\n<td>Model</td>\n</tr>\n<tr>\n<td><code>@ApiPropertyOptional()</code></td>\n<td>Model</td>\n</tr>\n<tr>\n<td><code>@ApiHideProperty()</code></td>\n<td>Model</td>\n</tr>\n<tr>\n<td><code>@ApiExtension()</code></td>\n<td>Method</td>\n</tr>\n</tbody></table>\n<h4 appAnchor id=\"plugin\"><span>Plugin</span></h4>\n<p>TypeScript&#39;s metadata reflection system has several limitations which make it impossible to, for instance, determine what properties a class consists of or recognize whether a given property is optional or required. However, some of these constraints can be addressed at compilation time. Nest provides a plugin that enhances the TypeScript compilation process to reduce the amount of boilerplate code required.</p>\n<blockquote class=\"\nwarning \"><strong>Hint</strong> This plugin is <strong>opt-in</strong>. If you prefer, you can declare all decorators manually, or only specific decorators where you need them.\n</blockquote>\n<p>The Swagger plugin will automatically:</p>\n<ul>\n<li>annotate all DTO properties with <code>@ApiProperty</code> unless <code>@ApiHideProperty</code> is used</li>\n<li>set the <code>required</code> property depending on the question mark (e.g. <code>name?: string</code> will set <code>required: false</code>)</li>\n<li>set the <code>type</code> or <code>enum</code> property depending on the type (supports arrays as well)</li>\n<li>set the <code>default</code> property based on the assigned default value</li>\n<li>set several validation rules based on <code>class-validator</code> decorators (if <code>classValidatorShim</code> set to <code>true</code>)</li>\n<li>add a response decorator to every endpoint with a proper status and <code>type</code> (response model)</li>\n</ul>\n<p>Previously, if you wanted to provide an interactive experience with the Swagger UI,\nyou had to duplicate a lot of code to let the package knows how your models/components should be declared in the specification. For example, you could define a simple <code>CreateUserDto</code> class as follows:</p>\n<pre><code class=\"language-typescript\">\nexport class CreateUserDto &#123;\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  password: string;\n\n  @ApiProperty(&#123; enum: RoleEnum, default: [], isArray: true &#125;)\n  roles: RoleEnum[] = [];\n\n  @ApiProperty(&#123; required: false, default: true &#125;)\n  isEnabled?: boolean = true;\n&#125;</code></pre>\n<p>While it&#39;s not a big deal with medium-sized projects, it becomes pretty verbose &amp; clunky once you have a large set of classes.</p>\n<p>Now, with the Swagger plugin enabled, the above class definition can be declared simply:</p>\n<pre><code class=\"language-typescript\">\nexport class CreateUserDto &#123;\n  email: string;\n  password: string;\n  roles: RoleEnum[] = [];\n  isEnabled?: boolean = true;\n&#125;</code></pre>\n<p>The plugin adds appropriate decorators on the fly based on the <strong>Abstract Syntax Tree</strong>. Hence, you no longer have to struggle with <code>@ApiProperty</code> decorators scattered throughout the entire project.</p>\n<blockquote class=\"\nwarning \"><strong>Hint</strong> The plugin will automatically generate any missing swagger properties, but if you need to override them, you simply set them explicitly via <code>@ApiProperty()</code>.\n</blockquote>\n<p>In order to enable the plugin, simply open <code>nest-cli.json</code> (if you use <a routerLink=\"/cli/overview\">Nest CLI</a>) and add the following <code>plugins</code> configuration:</p>\n<pre><code class=\"language-javascript\">\n&#123;\n  &quot;collection&quot;: &quot;@nestjs/schematics&quot;,\n  &quot;sourceRoot&quot;: &quot;src&quot;,\n  &quot;compilerOptions&quot;: &#123;\n    &quot;plugins&quot;: [&quot;@nestjs/swagger/plugin&quot;]\n  &#125;\n&#125;</code></pre>\n<p>You can use the <code>options</code> property to customize the behavior of the plugin.</p>\n<pre><code class=\"language-javascript\">\n&quot;plugins&quot;: [\n  &#123;\n    &quot;name&quot;: &quot;@nestjs/swagger/plugin&quot;,\n    &quot;options&quot;: &#123;\n      &quot;classValidatorShim&quot;: false\n    &#125;\n  &#125;\n]</code></pre>\n<p>The <code>options</code> property has to fulfill the following interface:</p>\n<pre><code class=\"language-typescript\">\nexport interface PluginOptions &#123;\n  dtoFileNameSuffix?: string[];\n  controllerFileNameSuffix?: string[];\n  classValidatorShim?: boolean;\n&#125;</code></pre>\n<table>\n  <tr>\n    <th>Option</th>\n    <th>Default</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>dtoFileNameSuffix</code></td>\n    <td><code>['.dto.ts', '.entity.ts']</code></td>\n    <td>DTO (Data Transfer Object) files suffix</td>\n  </tr>\n  <tr>\n    <td><code>controllerFileNameSuffix</code></td>\n    <td><code>.controller.ts</code></td>\n    <td>Controller files suffix</td>\n  </tr>\n  <tr>\n    <td><code>classValidatorShim</code></td>\n    <td><code>true</code></td>\n    <td>If set to true, the module will reuse <code>class-validator</code> validation decorators (e.g. <code>@Max(10)</code> will add <code>max: 10</code> to schema definition) </td>\n  </tr>\n</table>\n\n<p>If you don&#39;t use the CLI but instead have a custom <code>webpack</code> configuration, you can use this plugin in combination with <code>ts-loader</code>:</p>\n<pre><code class=\"language-javascript\">\ngetCustomTransformers: (program: any) =&gt; (&#123;\n  before: [require(&#39;@nestjs/swagger/plugin&#39;).before(&#123;&#125;, program)]\n&#125;),</code></pre>\n<h4 appAnchor id=\"migration-to-40\"><span>Migration to 4.0</span></h4>\n<p>If you&#39;re currently using <code>@nestjs/swagger@3.*</code>, note the following breaking/API changes in version 4.0.</p>\n<p>The following decorators have been changed/renamed:</p>\n<ul>\n<li><code>@ApiModelProperty</code> is now <code>@ApiProperty</code></li>\n<li><code>@ApiModelPropertyOptional</code> is now <code>@ApiPropertyOptional</code></li>\n<li><code>@ApiResponseModelProperty</code> is now <code>@ApiResponseProperty</code></li>\n<li><code>@ApiImplicitQuery</code> is now <code>@ApiQuery</code></li>\n<li><code>@ApiImplicitParam</code> is now <code>@ApiParam</code></li>\n<li><code>@ApiImplicitBody</code> is now <code>@ApiBody</code></li>\n<li><code>@ApiImplicitHeader</code> is now <code>@ApiHeader</code></li>\n<li><code>@ApiOperation({{ &#39;{&#39; }} title: &#39;test&#39; {{ &#39;}&#39; }})</code> is now<code>@ApiOperation({{ &#39;{&#39; }} summary: &#39;test&#39; {{ &#39;}&#39; }})</code></li>\n<li><code>@ApiUseTags</code> is now <code>@ApiTags</code></li>\n</ul>\n<p><code>DocumentBuilder</code> breaking changes (updated method signatures):</p>\n<ul>\n<li><code>addTag</code></li>\n<li><code>addBearerAuth</code></li>\n<li><code>addOAuth2</code></li>\n<li><code>setContactEmail</code> is now <code>setContact</code></li>\n<li><code>setHost</code> has been removed</li>\n<li><code>setSchemes</code> has been removed</li>\n</ul>\n<p>The following methods have been added:</p>\n<ul>\n<li><code>addServer</code></li>\n<li><code>addApiKey</code></li>\n<li><code>addBasicAuth</code></li>\n<li><code>addSecurity</code></li>\n<li><code>addSecurityRequirements</code></li>\n</ul>\n<p><app-banner-shop></app-banner-shop></p>\n<h4 appAnchor id=\"example\"><span>Example</span></h4>\n<p>A working example is available <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/nest/tree/master/sample/11-swagger\">here</a>.</p>\n\n</div>\n\n",
    "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BasePageComponent } from '../../page/page.component';\n\n@Component({\n  selector: 'app-terminus',\n  templateUrl: './terminus.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TerminusComponent extends BasePageComponent {}\n",
    "\n<div class=\"content\" #contentReference>\n  <div class=\"github-links\">\n    <a\n      href=\"https://github.com/nestjs/docs.nestjs.com/edit/master/content/recipes/terminus.md\"\n      aria-label=\"Suggest Edits\"\n      title=\"Suggest Edits\"\n    >\n      <i class=\"fas fa-edit\"></i>\n    </a>\n  </div>\n  <h3 id=\"health-checks-terminus\">Health checks (Terminus)</h3>\n<p>The <a rel='nofollow' target='_blank' href=\"https://github.com/godaddy/terminus\">terminus</a> offers hooks to react on graceful shutdowns and supports you creating proper <a rel='nofollow' target='_blank' href=\"https://kubernetes.io/\">Kubernetes</a> readiness / liveness checks for any HTTP application. The module <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/terminus\">@nestjs/terminus</a> integrates the terminus library with the Nest ecosystem.</p>\n<h4 appAnchor id=\"getting-started\"><span>Getting started</span></h4>\n<p>To get started with <code>@nestjs/terminus</code> we need to install the required dependencies.</p>\n<pre><code class=\"language-bash\">\n$ npm install --save @nestjs/terminus @godaddy/terminus</code></pre>\n<h4 appAnchor id=\"setting-up-a-health-check\"><span>Setting up a health check</span></h4>\n<p>A health check represents a summary of <strong>health indicators</strong>. A health indicator executes a check of a service, whether it is in a healthy state or not. A health check is positive, if all the assigned health indicators are up and running. Because a lot of applications will need similar health indicators, <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/terminus\">@nestjs/terminus</a> provides a set of predefined health indicators, such as:</p>\n<ul>\n<li><code>DNSHealthIndicator</code></li>\n<li><code>TypeOrmHealthIndicator</code></li>\n<li><code>MongooseHealthIndicator</code></li>\n<li><code>MicroserviceHealthIndicator</code></li>\n<li><code>MemoryHealthIndicator</code></li>\n<li><code>DiskHealthIndicator</code></li>\n</ul>\n<h4 appAnchor id=\"dns-health-check\"><span>DNS Health Check</span></h4>\n<p>The first step to get started with our first health check, is to setup a service which will associate health indicators to an endpoint.</p>\n\n<span class=\"filename\">\n  {{ 'terminus-options.service' | extension: app3be3eb7af278581c52f0d0e60f0ce746b67eca1c.isJsActive }}\n<app-tabs #app3be3eb7af278581c52f0d0e60f0ce746b67eca1c></app-tabs>\n</span><pre [class.hide]=\"app3be3eb7af278581c52f0d0e60f0ce746b67eca1c.isJsActive\"><code class=\"language-typescript\">\nimport &#123;\n  TerminusEndpoint,\n  TerminusOptionsFactory,\n  DNSHealthIndicator,\n  TerminusModuleOptions\n&#125; from &#39;@nestjs/terminus&#39;;\nimport &#123; Injectable &#125; from &#39;@nestjs/common&#39;;\n\n@Injectable()\nexport class TerminusOptionsService implements TerminusOptionsFactory &#123;\n  constructor(\n    private readonly dns: DNSHealthIndicator,\n  ) &#123;&#125;\n\n  createTerminusOptions(): TerminusModuleOptions &#123;\n    const healthEndpoint: TerminusEndpoint = &#123;\n      url: &#39;/health&#39;,\n      healthIndicators: [\n        async () =&gt; this.dns.pingCheck(&#39;google&#39;, &#39;https://google.com&#39;),\n      ],\n    &#125;;\n    return &#123;\n      endpoints: [healthEndpoint],\n    &#125;;\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!app3be3eb7af278581c52f0d0e60f0ce746b67eca1c.isJsActive\"><code class=\"language-typescript\">\nimport &#123; Injectable, Dependencies &#125; from &#39;@nestjs/common&#39;;\nimport &#123; DNSHealthIndicator &#125; from &#39;@nestjs/terminus&#39;;\n\n@Injectable()\n@Dependencies(DNSHealthIndicator)\nexport class TerminusOptionsService &#123;\n  constructor(dns) &#123;\n    this.dns = dns;\n  &#125;\n\n  createTerminusOptions() &#123;\n    const healthEndpoint = &#123;\n      url: &#39;/health&#39;,\n      healthIndicators: [\n        async () =&gt; this.dns.pingCheck(&#39;google&#39;, &#39;https://google.com&#39;),\n      ],\n    &#125;;\n    return &#123;\n      endpoints: [healthEndpoint],\n    &#125;;\n  &#125;\n&#125;</code></pre><p>Once we have set up our <code>TerminusOptionsService</code>, we can import the <code>TerminusModule</code> into the root <code>ApplicationModule</code>. The <code>TerminusOptionsService</code> will provide the settings, which in turn will be used by the <code>TerminusModule</code>.</p>\n\n<span class=\"filename\">\n  {{ 'app.module' | extension: app1b754fe7e4d3f08376fef96c843f741682f7ade0.isJsActive }}\n<app-tabs #app1b754fe7e4d3f08376fef96c843f741682f7ade0></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; TerminusModule &#125; from &#39;@nestjs/terminus&#39;;\nimport &#123; TerminusOptionsService &#125; from &#39;./terminus-options.service&#39;;\n\n@Module(&#123;\n  imports: [\n    TerminusModule.forRootAsync(&#123;\n      useClass: TerminusOptionsService,\n    &#125;),\n  ],\n&#125;)\nexport class ApplicationModule &#123; &#125;</code></pre><blockquote class=\"\ninfo \"><strong>Hint</strong> If done correctly, Nest will expose the defined health check(s), which are reachable through a GET request to the defined route. For example <code>curl -X GET &#39;http://localhost:3000/health&#39;</code>\n</blockquote>\n<h4 appAnchor id=\"custom-health-indicator\"><span>Custom health indicator</span></h4>\n<p>In some cases, the predefined health indicators provided by <code>@nestjs/terminus</code> do not cover all of your health check requirements. In this case you can set up a custom health indicator according to your needs.</p>\n<p>Let&#39;s get started by creating a service which will represent our custom health indicator. To get a basic understanding how a health indicator is structured, we will create an example <code>DogHealthIndicator</code>. This health indicator should have the state &quot;up&quot;, if every <code>Dog</code> object has the type <code>goodboy</code>, otherwise it will throw an error, which then the health indicator will be seen as &quot;down&quot;.</p>\n\n<span class=\"filename\">\n  {{ 'dog.health' | extension: appc6e5d23e6cc193ab0cc9ae28719ace5f4868061b.isJsActive }}\n<app-tabs #appc6e5d23e6cc193ab0cc9ae28719ace5f4868061b></app-tabs>\n</span><pre [class.hide]=\"appc6e5d23e6cc193ab0cc9ae28719ace5f4868061b.isJsActive\"><code class=\"language-typescript\">\nimport &#123; Injectable &#125; from &#39;@nestjs/common&#39;;\nimport &#123; HealthCheckError &#125; from &#39;@godaddy/terminus&#39;;\nimport &#123; HealthIndicator, HealthIndicatorResult &#125; from &#39;@nestjs/terminus&#39;;\n\nexport interface Dog &#123;\n  name: string;\n  type: string;\n&#125;\n\n@Injectable()\nexport class DogHealthIndicator extends HealthIndicator &#123;\n  private readonly dogs: Dog[] = [\n    &#123; name: &#39;Fido&#39;, type: &#39;goodboy&#39; &#125;,\n    &#123; name: &#39;Rex&#39;, type: &#39;badboy&#39; &#125;,\n  ];\n\n  async isHealthy(key: string): Promise&lt;HealthIndicatorResult&gt; &#123;\n    const badboys = this.dogs.filter(dog =&gt; dog.type === &#39;badboy&#39;);\n    const isHealthy = badboys.length === 0;\n    const result = this.getStatus(key, isHealthy, &#123; badboys: badboys.length &#125;);\n\n    if (isHealthy) &#123;\n      return result;\n    &#125;\n    throw new HealthCheckError(&#39;Dogcheck failed&#39;, result);\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!appc6e5d23e6cc193ab0cc9ae28719ace5f4868061b.isJsActive\"><code class=\"language-typescript\">\nimport &#123; Injectable &#125; from &#39;@nestjs/common&#39;;\nimport &#123; HealthCheckError &#125; from &#39;@godaddy/terminus&#39;;\n\n@Injectable()\nexport class DogHealthIndicator extends HealthIndicator &#123;\n  dogs = [\n    &#123; name: &#39;Fido&#39;, type: &#39;goodboy&#39; &#125;,\n    &#123; name: &#39;Rex&#39;, type: &#39;badboy&#39; &#125;,\n  ];\n\n  async isHealthy(key) &#123;\n    const badboys = this.dogs.filter(dog =&gt; dog.type === &#39;badboy&#39;);\n    const isHealthy = badboys.length === 0;\n    const result = this.getStatus(key, isHealthy, &#123; badboys: badboys.length &#125;);\n\n    if (isHealthy) &#123;\n      return result;\n    &#125;\n    throw new HealthCheckError(&#39;Dogcheck failed&#39;, result);\n  &#125;\n&#125;</code></pre><p>The next thing we need to do is registering the health indicator as a provider.</p>\n\n<span class=\"filename\">\n  {{ 'app.module' | extension: app3678e842ad498d2869ce6ba92dba38d58be2fffd.isJsActive }}\n<app-tabs #app3678e842ad498d2869ce6ba92dba38d58be2fffd></app-tabs>\n</span><pre><code class=\"language-typescript\">\nimport &#123; Module &#125; from &#39;@nestjs/common&#39;;\nimport &#123; TerminusModule &#125; from &#39;@nestjs/terminus&#39;;\nimport &#123; TerminusOptionsService &#125; from &#39;./terminus-options.service&#39;;\nimport &#123; DogHealthIndicator &#125; from &#39;./dog.health&#39;;\n\n@Module(&#123;\n  imports: [\n    TerminusModule.forRootAsync(&#123;\n      imports: [ApplicationModule],\n      useClass: TerminusOptionsService,\n    &#125;),\n  ],\n  providers: [DogHealthIndicator],\n  exports: [DogHealthIndicator],\n&#125;)\nexport class ApplicationModule &#123; &#125;</code></pre><blockquote class=\"\ninfo \"><strong>Hint</strong> In a real world application the <code>DogHealthIndicator</code> should be provided in a separate module, for example <code>DogsModule</code>, which then will be imported by the <code>ApplicationModule</code>. But keep in mind to add the <code>DogHealthIndicator</code> to the <code>exports</code> array of the <code>DogModule</code> and add the <code>DogModule</code> in <code>imports</code> array of the <code>TerminusModule.forRootAsync()</code> parameter object.\n</blockquote>\n<p>The last required thing to do is to add the now available health indicator in the required health check endpoint. For that we go back to our <code>TerminusOptionsService</code> and implement it to the <code>/health</code> endpoint.</p>\n\n<span class=\"filename\">\n  {{ 'terminus-options.service' | extension: appc40f025258fbf277ef87dfcd113ce927c9f681ec.isJsActive }}\n<app-tabs #appc40f025258fbf277ef87dfcd113ce927c9f681ec></app-tabs>\n</span><pre [class.hide]=\"appc40f025258fbf277ef87dfcd113ce927c9f681ec.isJsActive\"><code class=\"language-typescript\">\nimport &#123;\n  TerminusEndpoint,\n  TerminusOptionsFactory,\n  DNSHealthIndicator,\n  TerminusModuleOptions\n&#125; from &#39;@nestjs/terminus&#39;;\nimport &#123; Injectable &#125; from &#39;@nestjs/common&#39;;\nimport &#123; DogHealthIndicator &#125; from &#39;./dog.health&#39;;\n\n@Injectable()\nexport class TerminusOptionsService implements TerminusOptionsFactory &#123;\n  constructor(\n    private readonly dogHealthIndicator: DogHealthIndicator\n  ) &#123;&#125;\n\n  createTerminusOptions(): TerminusModuleOptions &#123;\n    const healthEndpoint: TerminusEndpoint = &#123;\n      url: &#39;/health&#39;,\n      healthIndicators: [\n        async () =&gt; this.dogHealthIndicator.isHealthy(&#39;dog&#39;),\n      ],\n    &#125;;\n    return &#123;\n      endpoints: [healthEndpoint],\n    &#125;;\n  &#125;\n&#125;</code></pre>\n<pre [class.hide]=\"!appc40f025258fbf277ef87dfcd113ce927c9f681ec.isJsActive\"><code class=\"language-typescript\">\nimport &#123; DogHealthIndicator &#125; from &#39;./dog.health&#39;;\nimport &#123; Injectable, Dependencies &#125; from &#39;@nestjs/common&#39;;\n\n@Injectable()\n@Dependencies(DogHealthIndicator)\nexport class TerminusOptionsService &#123;\n  constructor(dogHealthIndicator) &#123;\n    this.dogHealthIndicator = dogHealthIndicator;\n  &#125;\n\n  createTerminusOptions() &#123;\n    const healthEndpoint = &#123;\n      url: &#39;/health&#39;,\n      healthIndicators: [\n        async () =&gt; this.dogHealthIndicator.isHealthy(&#39;dog&#39;),\n      ],\n    &#125;;\n    return &#123;\n      endpoints: [healthEndpoint],\n    &#125;;\n  &#125;\n&#125;</code></pre><p>If everything has been done correctly, the <code>/health</code> endpoint should respond with a <code>503</code> response code and the following data.</p>\n<pre><code class=\"language-json\">\n&#123;\n  &quot;status&quot;: &quot;error&quot;,\n  &quot;error&quot;: &#123;\n    &quot;dog&quot;: &#123;\n      &quot;status&quot;: &quot;down&quot;,\n      &quot;badboys&quot;: 1\n    &#125;\n  &#125;\n&#125;</code></pre>\n<p>You can view working examples in the <code>@nestjs/terminus</code> <a rel='nofollow' target='_blank' href=\"https://github.com/nestjs/terminus/tree/master/sample\">repository</a>.</p>\n<h4 appAnchor id=\"custom-logger\"><span>Custom Logger</span></h4>\n<p>The <code>Terminus</code> module automatically logs every error during a health check request. By default, it will use the globally defined Nest logger.\nYou can read more about the global logger in the <a rel='nofollow' target='_blank' href=\"https://docs.nestjs.com/techniques/logger\">Logger chapter</a>.\nIn some cases, you want to handle the logs of <code>Terminus</code> explicitly. In this case, the <code>TerminusModule.forRoot[Async]</code> function offers an option\nfor a custom logger.</p>\n<pre><code class=\"language-typescript\">\n\nTerminusModule.forRootAsync(&#123;\n  logger: (message: string, error: Error) =&gt; console.error(message, error),\n  endpoints: [\n    ...\n  ]\n&#125;)\n</code></pre>\n<p>The logger can also be disabled by setting the logger option to <code>null</code>.</p>\n<pre><code class=\"language-typescript\">\n\nTerminusModule.forRootAsync(&#123;\n  logger: null,\n  endpoints: [\n    ...\n  ]\n&#125;)\n</code></pre>\n\n</div>\n\n"
  ],
  "sourceRoot": "webpack:///"
}
